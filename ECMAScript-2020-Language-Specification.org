<<spec-container>>
* Draft ECMA-262 / November 22, 2019
  :PROPERTIES:
  :CUSTOM_ID: draft-ecma-262-november-22-2019
  :CLASS: version first
  :END:

[[./ECMAScript®%202020%20Language%C2%A0Specification_files/ecma-logo.svg]]

<<metadata-block>>
* Contributing to this Specification
  :PROPERTIES:
  :CUSTOM_ID: contributing-to-this-specification
  :END:

This specification is developed on GitHub with the help of the
ECMAScript community. There are a number of ways to contribute to the
development of this specification:

- GitHub Repository: [[https://github.com/tc39/ecma262]]
- Issues: [[https://github.com/tc39/ecma262/issues][All Issues]],
  [[https://github.com/tc39/ecma262/issues/new][File a New Issue]]
- Pull Requests: [[https://github.com/tc39/ecma262/pulls][All Pull
  Requests]], [[https://github.com/tc39/ecma262/pulls/new][Create a New
  Pull Request]]
- Test Suite: [[https://github.com/tc39/test262][Test262]]
- Editors:

  - [[mailto:ljharb%20at%20gmail%20dot%20com][Jordan Harband]]
    ([[https://twitter.com/ljharb][@ljharb]])
  - [[mailto:zenparsing%20at%20gmail%20dot%20com][Kevin Smith]]
    ([[https://twitter.com/zenparsing][@zenparsing]])

- Community:

  - Discourse:
    [[https://es.discourse.group/][https://es.discourse.group]]
  - IRC: [[ircs://irc.freenode.net:6667][#tc39]] on
    [[https://freenode.net/kb/answer/chat][freenode]]
  - Mailing L​ist Archives: [[https://esdiscuss.org/]]

Refer to the [[https://tc39.es/ecma262/#sec-colophon][colophon]] for
more information on how this document is created.

* About this Specification
  :PROPERTIES:
  :CUSTOM_ID: about-this-specification
  :END:

This document at [[https://tc39.es/ecma262/]] is the most accurate
up-to-date ECMAScript specification. It contains the content of the most
recent yearly snapshot plus any
[[https://github.com/tc39/proposals/blob/master/finished-proposals.md][finished
proposals]] (those that have reached Stage 4 in the
[[https://tc39.es/process-document/][proposal process]] and thus are
implemented in several implementations and will be in the next practical
revision) since that snapshot was taken.

* Introduction
  :PROPERTIES:
  :CUSTOM_ID: introduction
  :END:

This Ecma Standard defines the ECMAScript 2020 Language. It is the
eleventh edition of the ECMAScript Language Specification. Since
publication of the first edition in 1997, ECMAScript has grown to be one
of the world's most widely used general-purpose programming languages.
It is best known as the language embedded in web browsers but has also
been widely adopted for server and embedded applications.

ECMAScript is based on several originating technologies, the most
well-known being JavaScript (Netscape) and JScript (Microsoft). The
language was invented by Brendan Eich at Netscape and first appeared in
that company's Navigator 2.0 browser. It has appeared in all subsequent
browsers from Netscape and in all browsers from Microsoft starting with
Internet Explorer 3.0.

The development of the ECMAScript Language Specification started in
November 1996. The first edition of this Ecma Standard was adopted by
the Ecma General Assembly of June 1997.

That Ecma Standard was submitted to ISO/IEC JTC 1 for adoption under the
fast-track procedure, and approved as international standard ISO/IEC
16262, in April 1998. The Ecma General Assembly of June 1998 approved
the second edition of ECMA-262 to keep it fully aligned with ISO/IEC
16262. Changes between the first and the second edition are editorial in
nature.

The third edition of the Standard introduced powerful regular
expressions, better string handling, new control statements, try/catch
exception handling, tighter definition of errors, formatting for numeric
output and minor changes in anticipation of future language growth. The
third edition of the ECMAScript standard was adopted by the Ecma General
Assembly of December 1999 and published as ISO/IEC 16262:2002 in June
2002.

After publication of the third edition, ECMAScript achieved massive
adoption in conjunction with the World Wide Web where it has become the
programming language that is supported by essentially all web browsers.
Significant work was done to develop a fourth edition of ECMAScript.
However, that work was not completed and not published as the fourth
edition of ECMAScript but some of it was incorporated into the
development of the sixth edition.

The fifth edition of ECMAScript (published as ECMA-262 5^{th} edition)
codified de facto interpretations of the language specification that
have become common among browser implementations and added support for
new features that had emerged since the publication of the third
edition. Such features include accessor properties, reflective creation
and inspection of objects, program control of property attributes,
additional array manipulation functions, support for the JSON object
encoding format, and a strict mode that provides enhanced error checking
and program security. The fifth edition was adopted by the Ecma General
Assembly of December 2009.

The fifth edition was submitted to ISO/IEC JTC 1 for adoption under the
fast-track procedure, and approved as international standard ISO/IEC
16262:2011. Edition 5.1 of the ECMAScript Standard incorporated minor
corrections and is the same text as ISO/IEC 16262:2011. The 5.1 Edition
was adopted by the Ecma General Assembly of June 2011.

Focused development of the sixth edition started in 2009, as the fifth
edition was being prepared for publication. However, this was preceded
by significant experimentation and language enhancement design efforts
dating to the publication of the third edition in 1999. In a very real
sense, the completion of the sixth edition is the culmination of a
fifteen year effort. The goals for this edition included providing
better support for large applications, library creation, and for use of
ECMAScript as a compilation target for other languages. Some of its
major enhancements included modules, class declarations, lexical block
scoping, iterators and generators, promises for asynchronous
programming, destructuring patterns, and proper tail calls. The
ECMAScript library of built-ins was expanded to support additional data
abstractions including maps, sets, and arrays of binary numeric values
as well as additional support for Unicode supplemental characters in
strings and regular expressions. The built-ins were also made extensible
via subclassing. The sixth edition provides the foundation for regular,
incremental language and library enhancements. The sixth edition was
adopted by the General Assembly of June 2015.

ECMAScript 2016 was the first ECMAScript edition released under Ecma
TC39's new yearly release cadence and open development process. A
plain-text source document was built from the ECMAScript 2015 source
document to serve as the base for further development entirely on
GitHub. Over the year of this standard's development, hundreds of pull
requests and issues were filed representing thousands of bug fixes,
editorial fixes and other improvements. Additionally, numerous software
tools were developed to aid in this effort including Ecmarkup,
Ecmarkdown, and Grammarkdown. ES2016 also included support for a new
exponentiation operator and adds a new method to =Array.prototype=
called =includes=.

ECMAScript 2017 introduced Async Functions, Shared Memory, and Atomics
along with smaller language and library enhancements, bug fixes, and
editorial updates. Async functions improve the asynchronous programming
experience by providing syntax for promise-returning functions. Shared
Memory and Atomics introduce a new
[[https://tc39.es/ecma262/#sec-memory-model][memory model]] that allows
multi-[[https://tc39.es/ecma262/#agent][agent]] programs to communicate
using atomic operations that ensure a well-defined execution order even
on parallel CPUs. It also included new static methods on Object:
=Object.values=, =Object.entries=, and
=Object.getOwnPropertyDescriptors=.

ECMAScript 2018 introduced support for asynchronous iteration via the
AsyncIterator protocol and async generators. It also included four new
regular expression features: the =dotAll= flag, named capture groups,
Unicode property escapes, and look-behind assertions. Lastly it included
object rest and spread properties.

ECMAScript 2019 introduced a few new built-in functions: =flat= and
=flatMap= on =Array.prototype= for flattening arrays,
=Object.fromEntries= for directly turning the return value of
=Object.entries= into a new Object, and =trimStart= and =trimEnd= on
=String.prototype= as better-named alternatives to the widely
implemented but non-standard =String.prototype.trimLeft= and =trimRight=
built-ins. In addition, it included a few minor updates to syntax and
semantics. Updated syntax included optional catch binding parameters and
allowing U+2028 (LINE SEPARATOR) and U+2029 (PARAGRAPH SEPARATOR) in
string literals to align with JSON. Other updates included requiring
that =Array.prototype.sort= be a stable sort, requiring that
=JSON.stringify= return well-formed UTF-8 regardless of input, and
clarifying =Function.prototype.toString= by requiring that it either
return the corresponding original source text or a standard placeholder.

Dozens of individuals representing many organizations have made very
significant contributions within Ecma TC39 to the development of this
edition and to the prior editions. In addition, a vibrant community has
emerged supporting TC39's ECMAScript efforts. This community has
reviewed numerous drafts, filed thousands of bug reports, performed
implementation experiments, contributed test suites, and educated the
world-wide developer community about ECMAScript. Unfortunately, it is
impossible to identify and acknowledge every person and organization who
has contributed to this effort.

Allen Wirfs-Brock\\
ECMA-262, Project Editor, 6^{th} Edition

Brian Terlson\\
ECMA-262, Project Editor, 7^{th} through 10^{th} Editions

* Scope
  :PROPERTIES:
  :CUSTOM_ID: scope
  :END:

This Standard defines the ECMAScript 2020 general-purpose programming
language.

* Conformance
  :PROPERTIES:
  :CUSTOM_ID: conformance
  :END:

A conforming implementation of ECMAScript must provide and support all
the types, values, objects, properties, functions, and program syntax
and semantics described in this specification.

A conforming implementation of ECMAScript must interpret source text
input in conformance with the latest version of the Unicode Standard and
ISO/IEC 10646.

A conforming implementation of ECMAScript that provides an application
programming interface (API) that supports programs that need to adapt to
the linguistic and cultural conventions used by different human
languages and countries must implement the interface defined by the most
recent edition of ECMA-402 that is compatible with this specification.

A conforming implementation of ECMAScript may provide additional types,
values, objects, properties, and functions beyond those described in
this specification. In particular, a conforming implementation of
ECMAScript may provide properties not described in this specification,
and values for those properties, for objects that are described in this
specification.

A conforming implementation of ECMAScript may support program and
regular expression syntax not described in this specification. In
particular, a conforming implementation of ECMAScript may support
program syntax that makes use of any “future reserved words” noted in
subclause
[[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][11.6.2]] of
this specification.

A conforming implementation of ECMAScript must not implement any
extension that is listed as a Forbidden Extension in subclause
[[https://tc39.es/ecma262/#sec-forbidden-extensions][16.2]].

* Normative References
  :PROPERTIES:
  :CUSTOM_ID: normative-references
  :END:

The following referenced documents are indispensable for the application
of this document. For dated references, only the edition cited applies.
For undated references, the latest edition of the referenced document
(including any amendments) applies.

ISO/IEC 10646 /Information Technology --- Universal Multiple-Octet Coded
Character Set (UCS) plus Amendment 1:2005, Amendment 2:2006, Amendment
3:2008, and Amendment 4:2008/, plus additional amendments and
corrigenda, or successor

ECMA-402, /ECMAScript 2015 Internationalization API Specification/.\\
[[https://ecma-international.org/publications/standards/Ecma-402.htm]]

ECMA-404, /The JSON Data Interchange Format/.\\
[[https://ecma-international.org/publications/standards/Ecma-404.htm]]

* Overview
  :PROPERTIES:
  :CUSTOM_ID: overview
  :END:

This section contains a non-normative overview of the ECMAScript
language.

ECMAScript is an object-oriented programming language for performing
computations and manipulating computational objects within a host
environment. ECMAScript as defined here is not intended to be
computationally self-sufficient; indeed, there are no provisions in this
specification for input of external data or output of computed results.
Instead, it is expected that the computational environment of an
ECMAScript program will provide not only the objects and other
facilities described in this specification but also certain
environment-specific objects, whose description and behaviour are beyond
the scope of this specification except to indicate that they may provide
certain properties that can be accessed and certain functions that can
be called from an ECMAScript program.

ECMAScript was originally designed to be used as a scripting language,
but has become widely used as a general-purpose programming language. A
/scripting language/ is a programming language that is used to
manipulate, customize, and automate the facilities of an existing
system. In such systems, useful functionality is already available
through a user interface, and the scripting language is a mechanism for
exposing that functionality to program control. In this way, the
existing system is said to provide a host environment of objects and
facilities, which completes the capabilities of the scripting language.
A scripting language is intended for use by both professional and
non-professional programmers.

ECMAScript was originally designed to be a /Web scripting language/,
providing a mechanism to enliven Web pages in browsers and to perform
server computation as part of a Web-based client-server architecture.
ECMAScript is now used to provide core scripting capabilities for a
variety of host environments. Therefore the core language is specified
in this document apart from any particular host environment.

ECMAScript usage has moved beyond simple scripting and it is now used
for the full spectrum of programming tasks in many different
environments and scales. As the usage of ECMAScript has expanded, so
have the features and facilities it provides. ECMAScript is now a fully
featured general-purpose programming language.

Some of the facilities of ECMAScript are similar to those used in other
programming languages; in particular C, Java™, Self, and Scheme as
described in:

ISO/IEC 9899:1996, /Programming Languages --- C/.

Gosling, James, Bill Joy and Guy Steele. /The Java^{™} Language
Specification/. Addison Wesley Publishing Co., 1996.

Ungar, David, and Smith, Randall B. Self: The Power of Simplicity.
/OOPSLA '87 Conference Proceedings/, pp. 227-241, Orlando, FL, October
1987.

/IEEE Standard for the Scheme Programming Language/. IEEE Std 1178-1990.

* Web Scripting
  :PROPERTIES:
  :CUSTOM_ID: web-scripting
  :END:

A web browser provides an ECMAScript host environment for client-side
computation including, for instance, objects that represent windows,
menus, pop-ups, dialog boxes, text areas, anchors, frames, history,
cookies, and input/output. Further, the host environment provides a
means to attach scripting code to events such as change of focus, page
and image loading, unloading, error and abort, selection, form
submission, and mouse actions. Scripting code appears within the HTML
and the displayed page is a combination of user interface elements and
fixed and computed text and images. The scripting code is reactive to
user interaction, and there is no need for a main program.

A web server provides a different host environment for server-side
computation including objects representing requests, clients, and files;
and mechanisms to lock and share data. By using browser-side and
server-side scripting together, it is possible to distribute computation
between the client and server while providing a customized user
interface for a Web-based application.

Each Web browser and server that supports ECMAScript supplies its own
host environment, completing the ECMAScript execution environment.

* ECMAScript Overview
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-overview
  :END:

The following is an informal overview of ECMAScript---not all parts of
the language are described. This overview is not part of the standard
proper.

ECMAScript is object-based: basic language and host facilities are
provided by objects, and an ECMAScript program is a cluster of
communicating objects. In ECMAScript, an /object/ is a collection of
zero or more /properties/ each with /attributes/ that determine how each
property can be used---for example, when the Writable attribute for a
property is set to false, any attempt by executed ECMAScript code to
assign a different value to the property fails. Properties are
containers that hold other objects, /primitive values/, or /functions/.
A primitive value is a member of one of the following built-in types:
*Undefined*, *Null*, *Boolean*, *Number*, *BigInt*, *String*, and
*Symbol;* an object is a member of the built-in type *Object*; and a
function is a callable object. A function that is associated with an
object via a property is called a /method/.

ECMAScript defines a collection of /built-in objects/ that round out the
definition of ECMAScript entities. These built-in objects include the
[[https://tc39.es/ecma262/#sec-global-object][global object]]; objects
that are fundamental to the
[[https://tc39.es/ecma262/#sec-runtime-semantics][runtime semantics]] of
the language including =Object=, =Function=, =Boolean=, =Symbol=, and
various =Error= objects; objects that represent and manipulate numeric
values including =Math=, =Number=, and =Date=; the text processing
objects =String= and =RegExp=; objects that are indexed collections of
values including =Array= and nine different kinds of Typed Arrays whose
elements all have a specific numeric data representation; keyed
collections including =Map= and =Set= objects; objects supporting
structured data including the =JSON= object, =ArrayBuffer=,
=SharedArrayBuffer=, and =DataView=; objects supporting control
abstractions including generator functions and =Promise= objects; and
reflection objects including =Proxy= and =Reflect=.

ECMAScript also defines a set of built-in /operators/. ECMAScript
operators include various unary operations, multiplicative operators,
additive operators, bitwise shift operators, relational operators,
equality operators, binary bitwise operators, binary logical operators,
assignment operators, and the comma operator.

Large ECMAScript programs are supported by /modules/ which allow a
program to be divided into multiple sequences of statements and
declarations. Each module explicitly identifies declarations it uses
that need to be provided by other modules and which of its declarations
are available for use by other modules.

ECMAScript syntax intentionally resembles Java syntax. ECMAScript syntax
is relaxed to enable it to serve as an easy-to-use scripting language.
For example, a variable is not required to have its type declared nor
are types associated with properties, and defined functions are not
required to have their declarations appear textually before calls to
them.

* Objects
  :PROPERTIES:
  :CUSTOM_ID: objects
  :END:

Even though ECMAScript includes syntax for class definitions, ECMAScript
objects are not fundamentally class-based such as those in C++,
Smalltalk, or Java. Instead objects may be created in various ways
including via a literal notation or via /constructors/ which create
objects and then execute code that initializes all or part of them by
assigning initial values to their properties. Each
[[https://tc39.es/ecma262/#constructor][constructor]] is a function that
has a property named "prototype" that is used to implement
/prototype-based inheritance/ and /shared properties/. Objects are
created by using constructors in *new* expressions; for example,
=new Date(2009, 11)= creates a new Date object. Invoking a
[[https://tc39.es/ecma262/#constructor][constructor]] without using
*new* has consequences that depend on the
[[https://tc39.es/ecma262/#constructor][constructor]]. For example,
=Date()= produces a string representation of the current date and time
rather than an object.

Every object created by a
[[https://tc39.es/ecma262/#constructor][constructor]] has an implicit
reference (called the object's /prototype/) to the value of its
[[https://tc39.es/ecma262/#constructor][constructor]]'s "prototype"
property. Furthermore, a prototype may have a non-null implicit
reference to its prototype, and so on; this is called the /prototype
chain/. When a reference is made to a property in an object, that
reference is to the property of that name in the first object in the
prototype chain that contains a property of that name. In other words,
first the object mentioned directly is examined for such a property; if
that object contains the named property, that is the property to which
the reference refers; if that object does not contain the named
property, the prototype for that object is examined next; and so on.

#+CAPTION: Figure 1: Object/Prototype Relationships
[[./ECMAScript®%202020%20Language%C2%A0Specification_files/figure-1.png]]

In a class-based object-oriented language, in general, state is carried
by instances, methods are carried by classes, and inheritance is only of
structure and behaviour. In ECMAScript, the state and methods are
carried by objects, while structure, behaviour, and state are all
inherited.

All objects that do not directly contain a particular property that
their prototype contains share that property and its value. Figure 1
illustrates this:

*CF* is a [[https://tc39.es/ecma262/#constructor][constructor]] (and
also an object). Five objects have been created by using =new=
expressions: *cf_{1}*, *cf_{2}*, *cf_{3}*, *cf_{4}*, and *cf_{5}*. Each
of these objects contains properties named "q1" and "q2". The dashed
lines represent the implicit prototype relationship; so, for example,
*cf_{3}*'s prototype is *CF_{p}*. The
[[https://tc39.es/ecma262/#constructor][constructor]], *CF*, has two
properties itself, named "P1" and "P2", which are not visible to
*CF_{p}*, *cf_{1}*, *cf_{2}*, *cf_{3}*, *cf_{4}*, or *cf_{5}*. The
property named "CFP1" in *CF_{p}* is shared by *cf_{1}*, *cf_{2}*,
*cf_{3}*, *cf_{4}*, and *cf_{5}* (but not by *CF*), as are any
properties found in *CF_{p}*'s implicit prototype chain that are not
named "q1", "q2", or "CFP1". Notice that there is no implicit prototype
link between *CF* and *CF_{p}*.

Unlike most class-based object languages, properties can be added to
objects dynamically by assigning values to them. That is, constructors
are not required to name or assign values to all or any of the
constructed object's properties. In the above diagram, one could add a
new shared property for *cf_{1}*, *cf_{2}*, *cf_{3}*, *cf_{4}*, and
*cf_{5}* by assigning a new value to the property in *CF_{p}*.

Although ECMAScript objects are not inherently class-based, it is often
convenient to define class-like abstractions based upon a common pattern
of [[https://tc39.es/ecma262/#constructor][constructor]] functions,
prototype objects, and methods. The ECMAScript built-in objects
themselves follow such a class-like pattern. Beginning with ECMAScript
2015, the ECMAScript language includes syntactic class definitions that
permit programmers to concisely define objects that conform to the same
class-like abstraction pattern used by the built-in objects.

* 4.2.2The Strict Variant of ECMAScript
  :PROPERTIES:
  :CUSTOM_ID: the-strict-variant-of-ecmascript
  :END:

The ECMAScript Language recognizes the possibility that some users of
the language may wish to restrict their usage of some features available
in the language. They might do so in the interests of security, to avoid
what they consider to be error-prone features, to get enhanced error
checking, or for other reasons of their choosing. In support of this
possibility, ECMAScript defines a strict variant of the language. The
strict variant of the language excludes some specific syntactic and
semantic features of the regular ECMAScript language and modifies the
detailed semantics of some features. The strict variant also specifies
additional error conditions that must be reported by throwing error
exceptions in situations that are not specified as errors by the
non-strict form of the language.

The strict variant of ECMAScript is commonly referred to as the /strict
mode/ of the language. Strict mode selection and use of the strict mode
syntax and semantics of ECMAScript is explicitly made at the level of
individual ECMAScript source text units. Because strict mode is selected
at the level of a syntactic source text unit, strict mode only imposes
restrictions that have local effect within such a source text unit.
Strict mode does not restrict or modify any aspect of the ECMAScript
semantics that must operate consistently across multiple source text
units. A complete ECMAScript program may be composed of both strict mode
and non-strict mode ECMAScript source text units. In this case, strict
mode only applies when actually executing code that is defined within a
strict mode source text unit.

In order to conform to this specification, an ECMAScript implementation
must implement both the full unrestricted ECMAScript language and the
strict variant of the ECMAScript language as defined by this
specification. In addition, an implementation must support the
combination of unrestricted and strict mode source text units into a
single composite program.

* 4.3Terms and Definitions
  :PROPERTIES:
  :CUSTOM_ID: terms-and-definitions
  :END:

For the purposes of this document, the following terms and definitions
apply.

* 4.3.1type
  :PROPERTIES:
  :CUSTOM_ID: type
  :END:

set of data values as defined in clause
[[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][6]] of
this specification

* 4.3.2primitive value
  :PROPERTIES:
  :CUSTOM_ID: primitive-value
  :END:

member of one of the types Undefined, Null, Boolean, Number, BigInt,
Symbol, or String as defined in clause
[[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][6]]

Note

A primitive value is a datum that is represented directly at the lowest
level of the language implementation.

* 4.3.3object
  :PROPERTIES:
  :CUSTOM_ID: object
  :END:

member of the type Object

Note

An object is a collection of properties and has a single prototype
object. The prototype may be the null value.

* 4.3.4constructor
  :PROPERTIES:
  :CUSTOM_ID: constructor
  :END:

[[https://tc39.es/ecma262/#function-object][function object]] that
creates and initializes objects

Note

The value of a [[https://tc39.es/ecma262/#constructor][constructor]]'s
"prototype" property is a prototype object that is used to implement
inheritance and shared properties.

* 4.3.5prototype
  :PROPERTIES:
  :CUSTOM_ID: prototype
  :END:

object that provides shared properties for other objects

Note

When a [[https://tc39.es/ecma262/#constructor][constructor]] creates an
object, that object implicitly references the
[[https://tc39.es/ecma262/#constructor][constructor]]'s "prototype"
property for the purpose of resolving property references. The
[[https://tc39.es/ecma262/#constructor][constructor]]'s "prototype"
property can be referenced by the program expression
=constructor.prototype=, and properties added to an object's prototype
are shared, through inheritance, by all objects sharing the prototype.
Alternatively, a new object may be created with an explicitly specified
prototype by using the =Object.create= built-in function.

* 4.3.6ordinary object
  :PROPERTIES:
  :CUSTOM_ID: ordinary-object
  :END:

object that has the default behaviour for the essential internal methods
that must be supported by all objects

* 4.3.7exotic object
  :PROPERTIES:
  :CUSTOM_ID: exotic-object
  :END:

object that does not have the default behaviour for one or more of the
essential internal methods

Note

Any object that is not an ordinary object is an
[[https://tc39.es/ecma262/#exotic-object][exotic object]].

* 4.3.8standard object
  :PROPERTIES:
  :CUSTOM_ID: standard-object
  :END:

object whose semantics are defined by this specification

* 4.3.9built-in object
  :PROPERTIES:
  :CUSTOM_ID: built-in-object
  :END:

object specified and supplied by an ECMAScript implementation

Note

Standard built-in objects are defined in this specification. An
ECMAScript implementation may specify and supply additional kinds of
built-in objects. A /built-in
[[https://tc39.es/ecma262/#constructor][constructor]]/ is a built-in
object that is also a
[[https://tc39.es/ecma262/#constructor][constructor]].

* 4.3.10undefined value
  :PROPERTIES:
  :CUSTOM_ID: undefined-value
  :END:

primitive value used when a variable has not been assigned a value

* 4.3.11Undefined type
  :PROPERTIES:
  :CUSTOM_ID: undefined-type
  :END:

type whose sole value is the undefined value

* 4.3.12null value
  :PROPERTIES:
  :CUSTOM_ID: null-value
  :END:

primitive value that represents the intentional absence of any object
value

* 4.3.13Null type
  :PROPERTIES:
  :CUSTOM_ID: null-type
  :END:

type whose sole value is the null value

* 4.3.14Boolean value
  :PROPERTIES:
  :CUSTOM_ID: boolean-value
  :END:

member of the Boolean type

Note

There are only two Boolean values, true and false.

* 4.3.15Boolean type
  :PROPERTIES:
  :CUSTOM_ID: boolean-type
  :END:

type consisting of the primitive values true and false

* 4.3.16Boolean object
  :PROPERTIES:
  :CUSTOM_ID: boolean-object
  :END:

member of the Object type that is an instance of the standard built-in
=Boolean= [[https://tc39.es/ecma262/#constructor][constructor]]

Note

A Boolean object is created by using the =Boolean=
[[https://tc39.es/ecma262/#constructor][constructor]] in a =new=
expression, supplying a Boolean value as an argument. The resulting
object has an internal slot whose value is the Boolean value. A Boolean
object can be coerced to a Boolean value.

* 4.3.17String value
  :PROPERTIES:
  :CUSTOM_ID: string-value
  :END:

primitive value that is a finite ordered sequence of zero or more 16-bit
unsigned [[https://tc39.es/ecma262/#integer][integer]] values

Note

A String value is a member of the String type. Each
[[https://tc39.es/ecma262/#integer][integer]] value in the sequence
usually represents a single 16-bit unit of UTF-16 text. However,
ECMAScript does not place any restrictions or requirements on the values
except that they must be 16-bit unsigned integers.

* 4.3.18String type
  :PROPERTIES:
  :CUSTOM_ID: string-type
  :END:

set of all possible String values

* 4.3.19String object
  :PROPERTIES:
  :CUSTOM_ID: string-object
  :END:

member of the Object type that is an instance of the standard built-in
=String= [[https://tc39.es/ecma262/#constructor][constructor]]

Note

A String object is created by using the =String=
[[https://tc39.es/ecma262/#constructor][constructor]] in a =new=
expression, supplying a String value as an argument. The resulting
object has an internal slot whose value is the String value. A String
object can be coerced to a String value by calling the =String=
[[https://tc39.es/ecma262/#constructor][constructor]] as a function
([[https://tc39.es/ecma262/#sec-string-constructor-string-value][21.1.1.1]]).

* 4.3.20Number value
  :PROPERTIES:
  :CUSTOM_ID: number-value
  :END:

primitive value corresponding to a double-precision 64-bit binary format
IEEE 754-2008 value

Note

A [[https://tc39.es/ecma262/#number-value][Number value]] is a member of
the Number type and is a direct representation of a number.

* 4.3.21Number type
  :PROPERTIES:
  :CUSTOM_ID: number-type
  :END:

set of all possible Number values including the special “Not-a-Number”
(NaN) value, positive infinity, and negative infinity

* 4.3.22Number object
  :PROPERTIES:
  :CUSTOM_ID: number-object
  :END:

member of the Object type that is an instance of the standard built-in
=Number= [[https://tc39.es/ecma262/#constructor][constructor]]

Note

A Number object is created by using the =Number=
[[https://tc39.es/ecma262/#constructor][constructor]] in a =new=
expression, supplying a number value as an argument. The resulting
object has an internal slot whose value is the number value. A Number
object can be coerced to a number value by calling the =Number=
[[https://tc39.es/ecma262/#constructor][constructor]] as a function
([[https://tc39.es/ecma262/#sec-number-constructor-number-value][20.1.1.1]]).

* 4.3.23Infinity
  :PROPERTIES:
  :CUSTOM_ID: infinity
  :END:

number value that is the positive infinite number value

* 4.3.24NaN
  :PROPERTIES:
  :CUSTOM_ID: nan
  :END:

number value that is an IEEE 754-2008 “Not-a-Number” value

* 4.3.25BigInt value
  :PROPERTIES:
  :CUSTOM_ID: bigint-value
  :END:

primitive value corresponding to an arbitrary-precision
[[https://tc39.es/ecma262/#integer][integer]] value

* 4.3.26BigInt type
  :PROPERTIES:
  :CUSTOM_ID: bigint-type
  :END:

set of all possible BigInt values

* 4.3.27BigInt object
  :PROPERTIES:
  :CUSTOM_ID: bigint-object
  :END:

member of the Object type that is an instance of the standard built-in
=BigInt= [[https://tc39.es/ecma262/#constructor][constructor]]

* 4.3.28Symbol value
  :PROPERTIES:
  :CUSTOM_ID: symbol-value
  :END:

primitive value that represents a unique, non-String Object property key

* 4.3.29Symbol type
  :PROPERTIES:
  :CUSTOM_ID: symbol-type
  :END:

set of all possible Symbol values

* 4.3.30Symbol object
  :PROPERTIES:
  :CUSTOM_ID: symbol-object
  :END:

member of the Object type that is an instance of the standard built-in
=Symbol= [[https://tc39.es/ecma262/#constructor][constructor]]

* 4.3.31function
  :PROPERTIES:
  :CUSTOM_ID: function
  :END:

member of the Object type that may be invoked as a subroutine

Note

In addition to its properties, a function contains executable code and
state that determine how it behaves when invoked. A function's code may
or may not be written in ECMAScript.

* 4.3.32built-in function
  :PROPERTIES:
  :CUSTOM_ID: built-in-function
  :END:

built-in object that is a function

Note

Examples of built-in functions include =parseInt= and =Math.exp=. An
implementation may provide implementation-dependent built-in functions
that are not described in this specification.

* 4.3.33property
  :PROPERTIES:
  :CUSTOM_ID: property
  :END:

part of an object that associates a key (either a String value or a
Symbol value) and a value

Note

Depending upon the form of the property the value may be represented
either directly as a data value (a primitive value, an object, or a
[[https://tc39.es/ecma262/#function-object][function object]]) or
indirectly by a pair of accessor functions.

* 4.3.34method
  :PROPERTIES:
  :CUSTOM_ID: method
  :END:

function that is the value of a property

Note

When a function is called as a method of an object, the object is passed
to the function as its this value.

* 4.3.35built-in method
  :PROPERTIES:
  :CUSTOM_ID: built-in-method
  :END:

method that is a built-in function

Note

Standard built-in methods are defined in this specification, and an
ECMAScript implementation may specify and provide other additional
built-in methods.

* 4.3.36attribute
  :PROPERTIES:
  :CUSTOM_ID: attribute
  :END:

internal value that defines some characteristic of a property

* 4.3.37own property
  :PROPERTIES:
  :CUSTOM_ID: own-property
  :END:

property that is directly contained by its object

* 4.3.38inherited property
  :PROPERTIES:
  :CUSTOM_ID: inherited-property
  :END:

property of an object that is not an own property but is a property
(either own or inherited) of the object's prototype

* 4.4Organization of This Specification
  :PROPERTIES:
  :CUSTOM_ID: organization-of-this-specification
  :END:

The remainder of this specification is organized as follows:

Clause 5 defines the notational conventions used throughout the
specification.

Clauses 6-9 define the execution environment within which ECMAScript
programs operate.

Clauses 10-16 define the actual ECMAScript programming language
including its syntactic encoding and the execution semantics of all
language features.

Clauses 17-26 define the ECMAScript standard library. They include the
definitions of all of the standard objects that are available for use by
ECMAScript programs as they execute.

Clause 27 describes the memory consistency model of accesses on
SharedArrayBuffer-backed memory and methods of the Atomics object.

* 5Notational Conventions
  :PROPERTIES:
  :CUSTOM_ID: notational-conventions
  :END:

* 5.1Syntactic and Lexical Grammars
  :PROPERTIES:
  :CUSTOM_ID: syntactic-and-lexical-grammars
  :END:

* 5.1.1Context-Free Grammars
  :PROPERTIES:
  :CUSTOM_ID: context-free-grammars
  :END:

A /context-free grammar/ consists of a number of /productions/. Each
production has an abstract symbol called a /nonterminal/ as its
/left-hand side/, and a sequence of zero or more nonterminal and
/terminal/ symbols as its /right-hand side/. For each grammar, the
terminal symbols are drawn from a specified alphabet.

A chain production is a production that has exactly one nonterminal
symbol on its right-hand side along with zero or more terminal symbols.

Starting from a sentence consisting of a single distinguished
nonterminal, called the goal symbol, a given context-free grammar
specifies a /language/, namely, the (perhaps infinite) set of possible
sequences of terminal symbols that can result from repeatedly replacing
any nonterminal in the sequence with a right-hand side of a production
for which the nonterminal is the left-hand side.

* 5.1.2The Lexical and RegExp Grammars
  :PROPERTIES:
  :CUSTOM_ID: the-lexical-and-regexp-grammars
  :END:

A /lexical grammar/ for ECMAScript is given in clause
[[https://tc39.es/ecma262/#sec-ecmascript-language-lexical-grammar][11]].
This grammar has as its terminal symbols Unicode code points that
conform to the rules for
[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
defined in [[https://tc39.es/ecma262/#sec-source-text][10.1]]. It
defines a set of productions, starting from the
[[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
[[https://tc39.es/ecma262/#prod-InputElementDiv][InputElementDiv]],
[[https://tc39.es/ecma262/#prod-InputElementTemplateTail][InputElementTemplateTail]],
or
[[https://tc39.es/ecma262/#prod-InputElementRegExp][InputElementRegExp]],
or
[[https://tc39.es/ecma262/#prod-InputElementRegExpOrTemplateTail][InputElementRegExpOrTemplateTail]],
that describe how sequences of such code points are translated into a
sequence of input elements.

Input elements other than white space and comments form the terminal
symbols for the syntactic grammar for ECMAScript and are called
ECMAScript /tokens/. These tokens are the reserved words, identifiers,
literals, and punctuators of the ECMAScript language. Moreover, line
terminators, although not considered to be tokens, also become part of
the stream of input elements and guide the process of automatic
semicolon insertion
([[https://tc39.es/ecma262/#sec-automatic-semicolon-insertion][11.9]]).
Simple white space and single-line comments are discarded and do not
appear in the stream of input elements for the syntactic grammar. A
[[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]]
(that is, a comment of the form =/*=...=*/= regardless of whether it
spans more than one line) is likewise simply discarded if it contains no
line terminator; but if a
[[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]]
contains one or more line terminators, then it is replaced by a single
line terminator, which becomes part of the stream of input elements for
the syntactic grammar.

A /RegExp grammar/ for ECMAScript is given in
[[https://tc39.es/ecma262/#sec-patterns][21.2.1]]. This grammar also has
as its terminal symbols the code points as defined by
[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]. It
defines a set of productions, starting from the
[[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
[[https://tc39.es/ecma262/#prod-Pattern][Pattern]], that describe how
sequences of code points are translated into regular expression
patterns.

Productions of the lexical and RegExp grammars are distinguished by
having two colons “*::*” as separating punctuation. The lexical and
RegExp grammars share some productions.

* 5.1.3The Numeric String Grammar
  :PROPERTIES:
  :CUSTOM_ID: the-numeric-string-grammar
  :END:

Another grammar is used for translating Strings into numeric values.
This grammar is similar to the part of the lexical grammar having to do
with numeric literals and has as its terminal symbols
[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]. This
grammar appears in
[[https://tc39.es/ecma262/#sec-tonumber-applied-to-the-string-type][7.1.4.1]].

Productions of the numeric string grammar are distinguished by having
three colons “*:::*” as punctuation.

* 5.1.4The Syntactic Grammar
  :PROPERTIES:
  :CUSTOM_ID: the-syntactic-grammar
  :END:

The /syntactic grammar/ for ECMAScript is given in clauses 11, 12, 13,
14, and 15. This grammar has ECMAScript tokens defined by the lexical
grammar as its terminal symbols
([[https://tc39.es/ecma262/#sec-lexical-and-regexp-grammars][5.1.2]]).
It defines a set of productions, starting from two alternative goal
symbols [[https://tc39.es/ecma262/#prod-Script][Script]] and
[[https://tc39.es/ecma262/#prod-Module][Module]], that describe how
sequences of tokens form syntactically correct independent components of
ECMAScript programs.

When a stream of code points is to be parsed as an ECMAScript
[[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]], it is first converted
to a stream of input elements by repeated application of the lexical
grammar; this stream of input elements is then parsed by a single
application of the syntactic grammar. The input stream is syntactically
in error if the tokens in the stream of input elements cannot be parsed
as a single instance of the goal nonterminal
([[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]]), with no tokens left
over.

When a parse is successful, it constructs a /parse tree/, a rooted tree
structure in which each node is a Parse Node. Each Parse Node is an
/instance/ of a symbol in the grammar; it represents a span of the
source text that can be derived from that symbol. The root node of the
parse tree, representing the whole of the source text, is an instance of
the parse's [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
symbol]]. When a Parse Node is an instance of a nonterminal, it is also
an instance of some production that has that nonterminal as its
left-hand side. Moreover, it has zero or more /children/, one for each
symbol on the production's right-hand side: each child is a Parse Node
that is an instance of the corresponding symbol.

New Parse Nodes are instantiated for each invocation of the parser and
never reused between parses even of identical source text. Parse Nodes
are considered the same Parse Node if and only if they represent the
same span of source text, are instances of the same grammar symbol, and
resulted from the same parser invocation.

Note 1

Parsing the same String multiple times will lead to different Parse
Nodes. For example, consider:

#+BEGIN_EXAMPLE
  let str = "1 + 1;";
  eval(str);
  eval(str);
#+END_EXAMPLE

Each call to =eval= converts the value of =str= into an ECMAScript
source text and performs an independent parse that creates its own
separate tree of Parse Nodes. The trees are distinct even though each
parse operates upon a source text that was derived from the same String
value.

Note 2

Parse Nodes are specification artefacts, and implementations are not
required to use an analogous data structure.

Productions of the syntactic grammar are distinguished by having just
one colon “*:*” as punctuation.

The syntactic grammar as presented in clauses 12, 13, 14 and 15 is not a
complete account of which token sequences are accepted as a correct
ECMAScript [[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]]. Certain additional
token sequences are also accepted, namely, those that would be described
by the grammar if only semicolons were added to the sequence in certain
places (such as before line terminator characters). Furthermore, certain
token sequences that are described by the grammar are not considered
acceptable if a line terminator character appears in certain “awkward”
places.

In certain cases, in order to avoid ambiguities, the syntactic grammar
uses generalized productions that permit token sequences that do not
form a valid ECMAScript [[https://tc39.es/ecma262/#prod-Script][Script]]
or [[https://tc39.es/ecma262/#prod-Module][Module]]. For example, this
technique is used for object literals and object destructuring patterns.
In such cases a more restrictive /supplemental grammar/ is provided that
further restricts the acceptable token sequences. Typically, an
[[https://tc39.es/ecma262/#early-error][early error]] rule will then
define an error condition if "=P= is not covering an =N=", where =P= is
a Parse Node (an instance of the generalized production) and =N= is a
nonterminal from the supplemental grammar. Here, the sequence of tokens
originally matched by =P= is parsed again using =N= as the
[[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]. (If
=N= takes grammatical parameters, then they are set to the same values
used when =P= was originally parsed.) An error occurs if the sequence of
tokens cannot be parsed as a single instance of =N=, with no tokens left
over. Subsequently, algorithms access the result of the parse using a
phrase of the form "the =N= that is covered by =P=". This will always be
a Parse Node (an instance of =N=, unique for a given =P=), since any
parsing failure would have been detected by an
[[https://tc39.es/ecma262/#early-error][early error]] rule.

* 5.1.5Grammar Notation
  :PROPERTIES:
  :CUSTOM_ID: grammar-notation
  :END:

Terminal symbols are shown in =fixed width= font, both in the
productions of the grammars and throughout this specification whenever
the text directly refers to such a terminal symbol. These are to appear
in a script exactly as written. All terminal symbol code points
specified in this way are to be understood as the appropriate Unicode
code points from the Basic Latin range, as opposed to any
similar-looking code points from other Unicode ranges. A code point in a
terminal symbol cannot be expressed by a =\=
[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]].

Nonterminal symbols are shown in /italic/ type. The definition of a
nonterminal (also called a “production”) is introduced by the name of
the nonterminal being defined followed by one or more colons. (The
number of colons indicates to which grammar the production belongs.) One
or more alternative right-hand sides for the nonterminal then follow on
succeeding lines. For example, the syntactic definition:

[[https://tc39.es/ecma262/#prod-grammar-notation-WhileStatement][WhileStatement]]:while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
states that the nonterminal
[[https://tc39.es/ecma262/#prod-grammar-notation-WhileStatement][WhileStatement]]
represents the token =while=, followed by a left parenthesis token,
followed by an [[https://tc39.es/ecma262/#prod-Expression][Expression]],
followed by a right parenthesis token, followed by a
[[https://tc39.es/ecma262/#prod-Statement][Statement]]. The occurrences
of [[https://tc39.es/ecma262/#prod-Expression][Expression]] and
[[https://tc39.es/ecma262/#prod-Statement][Statement]] are themselves
nonterminals. As another example, the syntactic definition:

[[https://tc39.es/ecma262/#prod-grammar-notation-ArgumentList][ArgumentList]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
[[https://tc39.es/ecma262/#prod-grammar-notation-ArgumentList][ArgumentList]],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
states that an
[[https://tc39.es/ecma262/#prod-grammar-notation-ArgumentList][ArgumentList]]
may represent either a single
[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
or an
[[https://tc39.es/ecma262/#prod-grammar-notation-ArgumentList][ArgumentList]],
followed by a comma, followed by an
[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
This definition of
[[https://tc39.es/ecma262/#prod-grammar-notation-ArgumentList][ArgumentList]]
is recursive, that is, it is defined in terms of itself. The result is
that an
[[https://tc39.es/ecma262/#prod-grammar-notation-ArgumentList][ArgumentList]]
may contain any positive number of arguments, separated by commas, where
each argument expression is an
[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
Such recursive definitions of nonterminals are common.

The subscripted suffix “_{opt}”, which may appear after a terminal or
nonterminal, indicates an optional symbol. The alternative containing
the optional symbol actually specifies two right-hand sides, one that
omits the optional element and one that includes it. This means that:

[[https://tc39.es/ecma262/#prod-grammar-notation-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt
is a convenient abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]
and that:

[[https://tc39.es/ecma262/#prod-grammar-notation-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
is a convenient abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
which in turn is an abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]];)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]];[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]];)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]];[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
so, in this example, the nonterminal
[[https://tc39.es/ecma262/#prod-grammar-notation-IterationStatement][IterationStatement]]
actually has four alternative right-hand sides.

A production may be parameterized by a subscripted annotation of the
form “_{[parameters]}”, which may appear as a suffix to the nonterminal
symbol defined by the production. “_{parameters}” may be either a single
name or a comma separated list of names. A parameterized production is
shorthand for a set of productions defining all combinations of the
parameter names, preceded by an underscore, appended to the
parameterized nonterminal symbol. This means that:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]][Return]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
is a convenient abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList_Return][StatementList_Return]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
and that:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]][Return,
In]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
is an abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList_Return][StatementList_Return]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList_In][StatementList_In]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList_Return_In][StatementList_Return_In]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
Multiple parameters produce a combinatory number of productions, not all
of which are necessarily referenced in a complete grammar.

References to nonterminals on the right-hand side of a production can
also be parameterized. For example:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]][+In]
is equivalent to saying:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
ExpressionStatement_In
and:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]][~In]
is equivalent to:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
A nonterminal reference may have both a parameter list and an “_{opt}”
suffix. For example:

[[https://tc39.es/ecma262/#prod-grammar-notation-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In]opt
is an abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]Initializer_In
Prefixing a parameter name with “_{?}” on a right-hand side nonterminal
reference makes that parameter value dependent upon the occurrence of
the parameter name on the reference to the current production's
left-hand side symbol. For example:

[[https://tc39.es/ecma262/#prod-grammar-notation-VariableDeclaration][VariableDeclaration]][In]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In]
is an abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]
[[https://tc39.es/ecma262/#prod-grammar-notation-VariableDeclaration_In][VariableDeclaration_In]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]Initializer_In
If a right-hand side alternative is prefixed with “[+parameter]” that
alternative is only available if the named parameter was used in
referencing the production's nonterminal symbol. If a right-hand side
alternative is prefixed with “[~parameter]” that alternative is only
available if the named parameter was /not/ used in referencing the
production's nonterminal symbol. This means that:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]][Return]:[+Return][[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
is an abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList_Return][StatementList_Return]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
and that:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]][Return]:[~Return][[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
is an abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
[[https://tc39.es/ecma262/#prod-grammar-notation-StatementList_Return][StatementList_Return]]:[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
When the words “*one of*” follow the colon(s) in a grammar definition,
they signify that each of the terminal symbols on the following line or
lines is an alternative definition. For example, the lexical grammar for
ECMAScript contains the production:

[[https://tc39.es/ecma262/#prod-grammar-notation-NonZeroDigit][NonZeroDigit]]::one
of123456789
which is merely a convenient abbreviation for:

[[https://tc39.es/ecma262/#prod-grammar-notation-NonZeroDigit][NonZeroDigit]]::1
2 3 4 5 6 7 8 9
If the phrase “[empty]” appears as the right-hand side of a production,
it indicates that the production's right-hand side contains no terminals
or nonterminals.

If the phrase “[lookahead ∉ =set=]” appears in the right-hand side of a
production, it indicates that the production may not be used if the
immediately following input token sequence is a member of the given
=set=. The =set= can be written as a comma separated list of one or two
element terminal sequences enclosed in curly brackets. For convenience,
the set can also be written as a nonterminal, in which case it
represents the set of all terminals to which that nonterminal could
expand. If the =set= consists of a single terminal the phrase
“[lookahead ≠ =terminal=]” may be used.

For example, given the definitions:

[[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigit][DecimalDigit]]::one
of0123456789
[[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigits][DecimalDigits]]::[[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigit][DecimalDigit]]
the definition:

[[https://tc39.es/ecma262/#prod-grammar-notation-LookaheadExample][LookaheadExample]]::n[lookahead
∉ { 1, 3, 5, 7, 9
}][[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigits][DecimalDigits]]
[[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigit][DecimalDigit]][lookahead
∉
[[https://tc39.es/ecma262/#prod-grammar-notation-DecimalDigit][DecimalDigit]]]
matches either the letter =n= followed by one or more decimal digits the
first of which is even, or a decimal digit not followed by another
decimal digit.

Similarly, if the phrase “[lookahead ∈ =set=]” appears in the right-hand
side of a production, it indicates that the production may only be used
if the immediately following input token sequence is a member of the
given =set=. If the =set= consists of a single terminal the phrase
“[lookahead = =terminal=]” may be used.

If the phrase “[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]”
appears in the right-hand side of a production of the syntactic grammar,
it indicates that the production is /a restricted production/: it may
not be used if a
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] occurs
in the input stream at the indicated position. For example, the
production:

[[https://tc39.es/ecma262/#prod-grammar-notation-ThrowStatement][ThrowStatement]]:throw[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-Expression][Expression]];
indicates that the production may not be used if a
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] occurs
in the script between the =throw= token and the
[[https://tc39.es/ecma262/#prod-Expression][Expression]].

Unless the presence of a
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
forbidden by a restricted production, any number of occurrences of
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] may
appear between any two consecutive tokens in the stream of input
elements without affecting the syntactic acceptability of the script.

When an alternative in a production of the lexical grammar or the
numeric string grammar appears to be a multi-code point token, it
represents the sequence of code points that would make up such a token.

The right-hand side of a production may specify that certain expansions
are not permitted by using the phrase “*but not*” and then indicating
the expansions to be excluded. For example, the production:

[[https://tc39.es/ecma262/#prod-grammar-notation-Identifier][Identifier]]::[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]but
not [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]
means that the nonterminal
[[https://tc39.es/ecma262/#prod-grammar-notation-Identifier][Identifier]]
may be replaced by any sequence of code points that could replace
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
provided that the same sequence of code points could not replace
[[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]].

Finally, a few nonterminal symbols are described by a descriptive phrase
in sans-serif type in cases where it would be impractical to list all
the alternatives:

[[https://tc39.es/ecma262/#prod-grammar-notation-SourceCharacter][SourceCharacter]]::any
Unicode code point
* 5.2Algorithm Conventions
  :PROPERTIES:
  :CUSTOM_ID: algorithm-conventions
  :END:

The specification often uses a numbered list to specify steps in an
algorithm. These algorithms are used to precisely specify the required
semantics of ECMAScript language constructs. The algorithms are not
intended to imply the use of any specific implementation technique. In
practice, there may be more efficient algorithms available to implement
a given feature.

Algorithms may be explicitly parameterized, in which case the names and
usage of the parameters must be provided as part of the algorithm's
definition.

Algorithm steps may be subdivided into sequential substeps. Substeps are
indented and may themselves be further divided into indented substeps.
Outline numbering conventions are used to identify substeps with the
first level of substeps labelled with lower case alphabetic characters
and the second level of substeps labelled with lower case roman
numerals. If more than three levels are required these rules repeat with
the fourth level using numeric labels. For example:

1. Top-level step

   1. Substep.
   2. Substep.

      1. Subsubstep.

         1. Subsubsubstep

            1. Subsubsubsubstep

               1. Subsubsubsubsubstep

A step or substep may be written as an “if” predicate that conditions
its substeps. In this case, the substeps are only applied if the
predicate is true. If a step or substep begins with the word “else”, it
is a predicate that is the negation of the preceding “if” predicate step
at the same level.

A step may specify the iterative application of its substeps.

A step that begins with “Assert:” asserts an invariant condition of its
algorithm. Such assertions are used to make explicit algorithmic
invariants that would otherwise be implicit. Such assertions add no
additional semantic requirements and hence need not be checked by an
implementation. They are used simply to clarify algorithms.

Algorithm steps may declare named aliases for any value using the form
“Let =x= be =someValue=”. These aliases are reference-like in that both
=x= and =someValue= refer to the same underlying data and modifications
to either are visible to both. Algorithm steps that want to avoid this
reference-like behaviour should explicitly make a copy of the right-hand
side: “Let =x= be a copy of =someValue=” creates a shallow copy of
=someValue=.

Once declared, an alias may be referenced in any subsequent steps and
must not be referenced from steps prior to the alias's declaration.
Aliases may be modified using the form “Set =x= to =someOtherValue=”.

* 5.2.1Abstract Operations
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations
  :END:

In order to facilitate their use in multiple parts of this
specification, some algorithms, called abstract operations, are named
and written in parameterized functional form so that they may be
referenced by name from within other algorithms. Abstract operations are
typically referenced using a functional application style such as
OperationName(=arg1=, =arg2=). Some abstract operations are treated as
polymorphically dispatched methods of class-like specification
abstractions. Such method-like abstract operations are typically
referenced using a method application style such as
=someValue=.OperationName(=arg1=, =arg2=).

* 5.2.2Syntax-Directed Operations
  :PROPERTIES:
  :CUSTOM_ID: syntax-directed-operations
  :END:

A syntax-directed operation is a named operation whose definition
consists of algorithms, each of which is associated with one or more
productions from one of the ECMAScript grammars. A production that has
multiple alternative definitions will typically have a distinct
algorithm for each alternative. When an algorithm is associated with a
grammar production, it may reference the terminal and nonterminal
symbols of the production alternative as if they were parameters of the
algorithm. When used in this manner, nonterminal symbols refer to the
actual alternative definition that is matched when parsing the source
text. The source text matched by a grammar production is the portion of
the source text that starts at the beginning of the first terminal that
participated in the match and ends at the end of the last terminal that
participated in the match.

When an algorithm is associated with a production alternative, the
alternative is typically shown without any “[ ]” grammar annotations.
Such annotations should only affect the syntactic recognition of the
alternative and have no effect on the associated semantics for the
alternative.

Syntax-directed operations are invoked with a parse node and,
optionally, other parameters by using the conventions on steps 1, 3, and
4 in the following algorithm:

1. Let =status= be SyntaxDirectedOperation of SomeNonTerminal.
2. Let =someParseNode= be the parse of some source text.
3. Perform SyntaxDirectedOperation of =someParseNode=.
4. Perform SyntaxDirectedOperation of =someParseNode= passing "value" as
   the argument.

Unless explicitly specified otherwise, all chain productions have an
implicit definition for every operation that might be applied to that
production's left-hand side nonterminal. The implicit definition simply
reapplies the same operation with the same parameters, if any, to the
[[https://tc39.es/ecma262/#sec-context-free-grammars][chain
production]]'s sole right-hand side nonterminal and then returns the
result. For example, assume that some algorithm has a step of the form:
“Return the result of evaluating
[[https://tc39.es/ecma262/#prod-algorithm-conventions-Block][Block]]”
and that there is a production:

[[https://tc39.es/ecma262/#prod-algorithm-conventions-Block][Block]]:{[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]}
but the Evaluation operation does not associate an algorithm with that
production. In that case, the Evaluation operation implicitly includes
an association of the form:

*Runtime Semantics: Evaluation*

[[https://tc39.es/ecma262/#prod-algorithm-conventions-Block][Block]]:{[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]}

1. Return the result of evaluating
   [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

* 5.2.3Runtime Semantics
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics
  :END:

Algorithms which specify semantics that must be called at runtime are
called runtime semantics. Runtime semantics are defined by
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] or syntax-directed operations. Such algorithms always
return a completion record.

* 5.2.3.1Implicit Completion Values
  :PROPERTIES:
  :CUSTOM_ID: implicit-completion-values
  :END:

The algorithms of this specification often implicitly return
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
Records whose [[Type]] is normal. Unless it is otherwise obvious from
the context, an algorithm statement that returns a value that is not a
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]], such as:

1. Return "Infinity".

means the same thing as:

1. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]]("Infinity").

However, if the value expression of a “return” statement is a
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] construction literal, the resulting
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] is returned. If the value expression is a call to an abstract
operation, the “return” statement simply returns the
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] produced by the abstract operation.

The abstract operation
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completionRecord=)
is used to emphasize that a previously computed
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] is being returned. The
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
abstract operation takes a single argument, =completionRecord=, and
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =completionRecord= is a
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]].
2. Return =completionRecord= as the
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]] of this abstract operation.

A “return” statement without a value in an algorithm step means the same
thing as:

1. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

Any reference to a
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] value that is in a context that does not explicitly require a
complete
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] value is equivalent to an explicit reference to the [[Value]]
field of the
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] value unless the
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]].

* 5.2.3.2Throw an Exception
  :PROPERTIES:
  :CUSTOM_ID: throw-an-exception
  :END:

Algorithms steps that say to throw an exception, such as

1. Throw a TypeError exception.

mean the same things as:

1. Return
   [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](a
   newly created TypeError object).

* 5.2.3.3ReturnIfAbrupt
  :PROPERTIES:
  :CUSTOM_ID: returnifabrupt
  :END:

Algorithms steps that say or are otherwise equivalent to:

1. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=argument=).

mean the same thing as:

1. If =argument= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], return =argument=.
2. Else if =argument= is a
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]], set =argument= to =argument=.[[Value]].

Algorithms steps that say or are otherwise equivalent to:

1. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](AbstractOperation()).

mean the same thing as:

1. Let =hygienicTemp= be AbstractOperation().
2. If =hygienicTemp= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], return =hygienicTemp=.
3. Else if =hygienicTemp= is a
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]], set =hygienicTemp= to =hygienicTemp=.[[Value]].

Where =hygienicTemp= is ephemeral and visible only in the steps
pertaining to ReturnIfAbrupt.

Algorithms steps that say or are otherwise equivalent to:

1. Let =result= be
   AbstractOperation([[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=argument=)).

mean the same thing as:

1. If =argument= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], return =argument=.
2. If =argument= is a
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]], set =argument= to =argument=.[[Value]].
3. Let =result= be AbstractOperation(=argument=).

* 5.2.3.4ReturnIfAbrupt Shorthands
  :PROPERTIES:
  :CUSTOM_ID: returnifabrupt-shorthands
  :END:

Invocations of
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] and syntax-directed operations that are prefixed by =?=
indicate that
[[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]] should
be applied to the resulting
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]]. For example, the step:

1. ? OperationName().

is equivalent to the following step:

1. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](OperationName()).

Similarly, for method application style, the step:

1. ? =someValue=.OperationName().

is equivalent to:

1. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=someValue=.OperationName()).

Similarly, prefix =!= is used to indicate that the following invocation
of an abstract or syntax-directed operation will never return an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] and that the resulting
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]]'s [[Value]] field should be used in place of the return value
of the operation. For example, the step:

1. Let =val= be ! OperationName().

is equivalent to the following steps:

1. Let =val= be OperationName().
2. [[https://tc39.es/ecma262/#assert][Assert]]: =val= is never an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]].
3. If =val= is a
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]], set =val= to =val=.[[Value]].

Syntax-directed operations for
[[https://tc39.es/ecma262/#sec-runtime-semantics][runtime semantics]]
make use of this shorthand by placing =!= or =?= before the invocation
of the operation:

1. Perform ! SyntaxDirectedOperation of NonTerminal.

* 5.2.4Static Semantics
  :PROPERTIES:
  :CUSTOM_ID: static-semantics
  :END:

Context-free grammars are not sufficiently powerful to express all the
rules that define whether a stream of input elements form a valid
ECMAScript [[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]] that may be evaluated.
In some situations additional rules are needed that may be expressed
using either ECMAScript algorithm conventions or prose requirements.
Such rules are always associated with a production of a grammar and are
called the static semantics of the production.

Static Semantic Rules have names and typically are defined using an
algorithm. Named Static Semantic Rules are associated with grammar
productions and a production that has multiple alternative definitions
will typically have for each alternative a distinct algorithm for each
applicable named static semantic rule.

Unless otherwise specified every grammar production alternative in this
specification implicitly has a definition for a static semantic rule
named Contains which takes an argument named =symbol= whose value is a
terminal or nonterminal of the grammar that includes the associated
production. The default definition of Contains is:

1. For each child node =child= of this
   [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]], do

   1. If =child= is an instance of =symbol=, return true.
   2. If =child= is an instance of a nonterminal, then

      1. Let =contained= be the result of =child= Contains =symbol=.
      2. If =contained= is true, return true.

2. Return false.

The above definition is explicitly over-ridden for specific productions.

A special kind of static semantic rule is an Early Error Rule.
[[https://tc39.es/ecma262/#early-error][Early error]] rules define
[[https://tc39.es/ecma262/#early-error][early error]] conditions (see
clause
[[https://tc39.es/ecma262/#sec-error-handling-and-language-extensions][16]])
that are associated with specific grammar productions. Evaluation of
most [[https://tc39.es/ecma262/#early-error][early error]] rules are not
explicitly invoked within the algorithms of this specification. A
conforming implementation must, prior to the first evaluation of a
[[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]], validate all of the
[[https://tc39.es/ecma262/#early-error][early error]] rules of the
productions used to parse that
[[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]]. If any of the
[[https://tc39.es/ecma262/#early-error][early error]] rules are violated
the [[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]] is invalid and cannot
be evaluated.

* 5.2.5Mathematical Operations
  :PROPERTIES:
  :CUSTOM_ID: mathematical-operations
  :END:

This specification makes reference to two kinds of numeric values:

- /Number/: IEEE 754-2008 double-precision floating point values, used
  as the default numeric type.
- /[[https://tc39.es/ecma262/#mathematical-value][Mathematical value]]/:
  Arbitrary real numbers, used for specific situations.

In the language of this specification, numerical values and operations
(including addition, subtraction, negation, multiplication, division,
and comparison) are distinguished among different numeric kinds using
subscripts. The subscript _{𝔽} refers to Numbers, and the subscript _{ℝ}
refers to mathematical values. A subscript is used following each
numeric value and operation.

For brevity, the _{[[https://tc39.es/ecma262/#%F0%9D%94%BD][𝔽]]}
subscript can be omitted on Number values---a numeric value with no
subscript is interpreted to be a Number. An operation with no subscript
is interpreted to be a Number operation, unless one of the parameters
has a particular subscript, in which case the operation adopts that
subscript. For example, 1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} +
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} =
3_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} is a statement about
mathematical values, and 1 + 2 = 3 is a statement about Numbers.

In general, when this specification refers to a numerical value, such as
in the phrase, "the length of =y=" or "the
[[https://tc39.es/ecma262/#integer][integer]] represented by the four
hexadecimal digits ...", without explicitly specifying a numeric kind,
the phrase refers to a Number. Phrases which refer to a
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] are
explicitly annotated as such; for example, "the
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] of
the number of code points in ...".

It is not defined to mix Numbers and mathematical values in either
arithmetic or comparison operations, and any such undefined operation
would be an editorial error in this specification text.

The [[https://tc39.es/ecma262/#number-value][Number value]] 0,
alternatively written 0_{[[https://tc39.es/ecma262/#%F0%9D%94%BD][𝔽]]},
is defined as the double-precision floating point positive zero value.
In certain contexts, it may also be written as +0 for clarity.

This specification denotes most numeric values in base 10; it also uses
numeric values of the form 0x followed by digits 0-9 or A-F as base-16
values.

In certain contexts, an operation is specified which is generic between
Numbers and mathematical values. In these cases, the subscript can be a
variable; =t= is often used for this purpose, for example 5_{=t=} ×
10_{=t=} = 50_{=t=} for any =t= ranging over
[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]] and
[[https://tc39.es/ecma262/#%F0%9D%94%BD][𝔽]], since the values involved
are within the range where the semantics coincide.

Conversions between mathematical values and numbers are never implicit,
and always explicit in this document. A conversion from a
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] to a
Number is denoted as "the
[[https://tc39.es/ecma262/#number-value][Number value]] for =x=", and is
defined in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type][6.1.6.1]].
A conversion from a Number to a
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] is
denoted as "the mathematical value of =x=", or
[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=x=). Note that the
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] of
non-finite values is not defined, and the
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] of
+0 and -0 is the
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.

When the term integer is used in this specification, it refers to a
[[https://tc39.es/ecma262/#number-value][Number value]] whose
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] is
in the set of integers, unless otherwise stated: when the term
mathematical integer is used in this specification, it refers to a
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
which is in the set of integers. As shorthand,
[[https://tc39.es/ecma262/#integer][integer]]_{=t=} can be used to refer
to either of the two, as determined by =t=.

The mathematical function abs_{=t=}(=x=) produces the absolute value of
=x=, which is -_{=t=}=x= if =x= <_{=t=} 0_{=t=} and otherwise is =x=
itself.

The mathematical function min_{=t=}(=x1=, =x2=, ... , =xN=) produces the
mathematically smallest of =x1= through =xN=. The mathematical function
max_{=t=}(=x1=, =x2=, ..., =xN=) produces the mathematically largest of
=x1= through =xN=. The domain and range of these mathematical functions
include +∞ and -∞.

The notation “=x= modulo_{=t=} =y=” (=y= must be finite and nonzero)
computes a value =k= of the same sign as =y= (or zero) such that
[[https://tc39.es/ecma262/#eqn-abs][abs]]_{=t=}(=k=) <_{=t=}
[[https://tc39.es/ecma262/#eqn-abs][abs]]_{=t=}(=y=) and =x=-_{=t=}=k= =
=q= ×_{=t=} =y= for some
[[https://tc39.es/ecma262/#integer][integer]]_{=t=} =q=.

The mathematical function floor_{=t=}(=x=) produces the largest
[[https://tc39.es/ecma262/#integer][integer]]_{=t=} (closest to positive
infinity) that is not larger than =x=.

Note

[[https://tc39.es/ecma262/#eqn-floor][floor]]_{=t=}(=x=) = =x= -_{=t=}
(=x= [[https://tc39.es/ecma262/#eqn-modulo][modulo]]_{=t=} 1_{=t=}).

* 5.2.6Value Notation
  :PROPERTIES:
  :CUSTOM_ID: value-notation
  :END:

In this specification, ECMAScript language values are displayed in bold.
Examples include null, true, or "hello". These are distinguished from
longer ECMAScript code sequences such as =Function.prototype.apply= or
=let n = 42;=.

Values which are internal to the specification and not directly
observable from ECMAScript code are indicated with a sans-serif
typeface. For instance, a
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]]'s [[Type]] field takes on values like normal, return, or throw.

* 6ECMAScript Data Types and Values
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-data-types-and-values
  :END:

Algorithms within this specification manipulate values each of which has
an associated type. The possible value types are exactly those defined
in this clause. Types are further subclassified into ECMAScript language
types and specification types.

Within this specification, the notation “Type(=x=)” is used as shorthand
for “the type of =x=” where “type” refers to the ECMAScript language and
specification types defined in this clause. When the term “empty” is
used as if it was naming a value, it is equivalent to saying “no value
of any type”.

* 6.1ECMAScript Language Types
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-types
  :END:

An ECMAScript language type corresponds to values that are directly
manipulated by an ECMAScript programmer using the ECMAScript language.
The ECMAScript language types are Undefined, Null, Boolean, String,
Symbol, Number, BigInt, and Object. An ECMAScript language value is a
value that is characterized by an ECMAScript language type.

* 6.1.1The Undefined Type
  :PROPERTIES:
  :CUSTOM_ID: the-undefined-type
  :END:

The Undefined type has exactly one value, called undefined. Any variable
that has not been assigned a value has the value undefined.

* 6.1.2The Null Type
  :PROPERTIES:
  :CUSTOM_ID: the-null-type
  :END:

The Null type has exactly one value, called null.

* 6.1.3The Boolean Type
  :PROPERTIES:
  :CUSTOM_ID: the-boolean-type
  :END:

The Boolean type represents a logical entity having two values, called
true and false.

* 6.1.4The String Type
  :PROPERTIES:
  :CUSTOM_ID: the-string-type
  :END:

The String type is the set of all ordered sequences of zero or more
16-bit unsigned [[https://tc39.es/ecma262/#integer][integer]] values
(“elements”) up to a maximum length of 2^{53} - 1 elements. The String
type is generally used to represent textual data in a running ECMAScript
program, in which case each element in the String is treated as a UTF-16
code unit value. Each element is regarded as occupying a position within
the sequence. These positions are indexed with nonnegative integers. The
first element (if any) is at index 0, the next element (if any) at index
1, and so on. The length of a String is the number of elements (i.e.,
16-bit values) within it. The empty String has length zero and therefore
contains no elements.

ECMAScript operations that do not interpret String contents apply no
further semantics. Operations that do interpret String values treat each
element as a single UTF-16 code unit. However, ECMAScript does not
restrict the value of or relationships between these code units, so
operations that further interpret String contents as sequences of
Unicode code points encoded in UTF-16 must account for ill-formed
subsequences. Such operations apply special treatment to every code unit
with a numeric value in the inclusive range 0xD800 to 0xDBFF (defined by
the Unicode Standard as a leading surrogate, or more formally as a
high-surrogate code unit) and every code unit with a numeric value in
the inclusive range 0xDC00 to 0xDFFF (defined as a trailing surrogate,
or more formally as a low-surrogate code unit) using the following
rules:

- A code unit that is not a
  [[https://tc39.es/ecma262/#leading-surrogate][leading surrogate]] and
  not a [[https://tc39.es/ecma262/#trailing-surrogate][trailing
  surrogate]] is interpreted as a code point with the same value.
- A sequence of two code units, where the first code unit =c1= is a
  [[https://tc39.es/ecma262/#leading-surrogate][leading surrogate]] and
  the second code unit =c2= a
  [[https://tc39.es/ecma262/#trailing-surrogate][trailing surrogate]],
  is a surrogate pair and is interpreted as a code point with the value
  (=c1= - 0xD800) × 0x400 + (=c2= - 0xDC00) + 0x10000. (See
  [[https://tc39.es/ecma262/#sec-utf16decode][10.1.2]])
- A code unit that is a
  [[https://tc39.es/ecma262/#leading-surrogate][leading surrogate]] or
  [[https://tc39.es/ecma262/#trailing-surrogate][trailing surrogate]],
  but is not part of a
  [[https://tc39.es/ecma262/#surrogate-pair][surrogate pair]], is
  interpreted as a code point with the same value.

The function =String.prototype.normalize= (see
[[https://tc39.es/ecma262/#sec-string.prototype.normalize][21.1.3.13]])
can be used to explicitly normalize a String value.
=String.prototype.localeCompare= (see
[[https://tc39.es/ecma262/#sec-string.prototype.localecompare][21.1.3.10]])
internally normalizes String values, but no other operations implicitly
normalize the strings upon which they operate. Only operations that are
explicitly specified to be language or locale sensitive produce
language-sensitive results.

Note

The rationale behind this design was to keep the implementation of
Strings as simple and high-performing as possible. If ECMAScript source
text is in Normalized Form C, string literals are guaranteed to also be
normalized, as long as they do not contain any Unicode escape sequences.

In this specification, the phrase "the string-concatenation of =A=, =B=,
..." (where each argument is a String value, a code unit, or a sequence
of code units) denotes the String value whose sequence of code units is
the concatenation of the code units (in order) of each of the arguments
(in order).

* 6.1.5The Symbol Type
  :PROPERTIES:
  :CUSTOM_ID: the-symbol-type
  :END:

The Symbol type is the set of all non-String values that may be used as
the key of an Object property
([[https://tc39.es/ecma262/#sec-object-type][6.1.7]]).

Each possible Symbol value is unique and immutable.

Each Symbol value immutably holds an associated value called
[[Description]] that is either undefined or a String value.

* 6.1.5.1Well-Known Symbols
  :PROPERTIES:
  :CUSTOM_ID: well-known-symbols
  :END:

Well-known symbols are built-in Symbol values that are explicitly
referenced by algorithms of this specification. They are typically used
as the keys of properties whose values serve as extension points of a
specification algorithm. Unless otherwise specified, well-known symbols
values are shared by all realms
([[https://tc39.es/ecma262/#sec-code-realms][8.2]]).

Within this specification a well-known symbol is referred to by using a
notation of the form @@name, where “name” is one of the values listed in
[[https://tc39.es/ecma262/#table-1][Table 1]].

Table 1: Well-known Symbols
| Specification Name     | [[Description]]               | Value and Purpose                                                                                                                                                                                                                                        |
|------------------------+-------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| @@asyncIterator        | "Symbol.asyncIterator"        | A method that returns the default AsyncIterator for an object. Called by the semantics of the =for=-=await=-=of= statement.                                                                                                                              |
| @@hasInstance          | "Symbol.hasInstance"          | A method that determines if a [[https://tc39.es/ecma262/#constructor][constructor]] object recognizes an object as one of the [[https://tc39.es/ecma262/#constructor][constructor]]'s instances. Called by the semantics of the =instanceof= operator.   |
| @@isConcatSpreadable   | "Symbol.isConcatSpreadable"   | A Boolean valued property that if true indicates that an object should be flattened to its array elements by [[https://tc39.es/ecma262/#sec-array.prototype.concat][=Array.prototype.concat=]].                                                          |
| @@iterator             | "Symbol.iterator"             | A method that returns the default Iterator for an object. Called by the semantics of the for-of statement.                                                                                                                                               |
| @@match                | "Symbol.match"                | A regular expression method that matches the regular expression against a string. Called by the [[https://tc39.es/ecma262/#sec-string.prototype.match][=String.prototype.match=]] method.                                                                |
| @@matchAll             | "Symbol.matchAll"             | A regular expression method that returns an iterator, that yields matches of the regular expression against a string. Called by the [[https://tc39.es/ecma262/#sec-string.prototype.matchall][=String.prototype.matchAll=]] method.                      |
| @@replace              | "Symbol.replace"              | A regular expression method that replaces matched substrings of a string. Called by the [[https://tc39.es/ecma262/#sec-string.prototype.replace][=String.prototype.replace=]] method.                                                                    |
| @@search               | "Symbol.search"               | A regular expression method that returns the index within a string that matches the regular expression. Called by the [[https://tc39.es/ecma262/#sec-string.prototype.search][=String.prototype.search=]] method.                                        |
| @@species              | "Symbol.species"              | A function valued property that is the [[https://tc39.es/ecma262/#constructor][constructor]] function that is used to create derived objects.                                                                                                            |
| @@split                | "Symbol.split"                | A regular expression method that splits a string at the indices that match the regular expression. Called by the [[https://tc39.es/ecma262/#sec-string.prototype.split][=String.prototype.split=]] method.                                               |
| @@toPrimitive          | "Symbol.toPrimitive"          | A method that converts an object to a corresponding primitive value. Called by the [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]] abstract operation.                                                                                         |
| @@toStringTag          | "Symbol.toStringTag"          | A String valued property that is used in the creation of the default string description of an object. Accessed by the built-in method [[https://tc39.es/ecma262/#sec-object.prototype.tostring][=Object.prototype.toString=]].                           |
| @@unscopables          | "Symbol.unscopables"          | An object valued property whose own and inherited property names are property names that are excluded from the =with= environment bindings of the associated object.                                                                                     |

* 6.1.6Numeric Types
  :PROPERTIES:
  :CUSTOM_ID: numeric-types
  :END:

ECMAScript has two built-in numeric types: Number and BigInt. In this
specification, every numeric type =T= contains a multiplicative identity
value denoted =T=::unit. The specification types also have the following
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]], likewise denoted =T=::/op/ for a given operation with
specification name /op/. All argument types are =T=. The "Result" column
shows the return type, along with an indication if it is possible for
some invocations of the operation to return an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]].

Table 2: Numeric Type Operations
| Invocation Synopsis             | Example source   | Invoked by the Evaluation semantics of ...                                                                                                                                                                                                                                          | Result                                        |
|---------------------------------+------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------|
| =T=::unaryMinus(x)              | =-x=             | [[https://tc39.es/ecma262/#sec-unary-minus-operator][Unary =-= Operator]]                                                                                                                                                                                                           | =T=                                           |
| =T=::bitwiseNOT(x)              | =~x=             | [[https://tc39.es/ecma262/#sec-bitwise-not-operator][Bitwise NOT Operator ( =~= )]]                                                                                                                                                                                                 | =T=                                           |
| =T=::exponentiate(x, y)         | =x ** y=         | [[https://tc39.es/ecma262/#sec-exp-operator][Exponentiation Operator]] and [[https://tc39.es/ecma262/#sec-math.pow][Math.pow ( =base=, =exponent= )]]                                                                                                                               | =T=, may throw RangeError                     |
| =T=::multiply(x, y)             | =x * y=          | [[https://tc39.es/ecma262/#sec-multiplicative-operators][Multiplicative Operators]]                                                                                                                                                                                                 | =T=                                           |
| =T=::divide(x, y)               | =x / y=          | [[https://tc39.es/ecma262/#sec-multiplicative-operators][Multiplicative Operators]]                                                                                                                                                                                                 | =T=, may throw RangeError                     |
| =T=::remainder(x, y)            | =x % y=          | [[https://tc39.es/ecma262/#sec-multiplicative-operators][Multiplicative Operators]]                                                                                                                                                                                                 | =T=, may throw RangeError                     |
| =T=::add(x, y)                  | =x ++=\\         | [[https://tc39.es/ecma262/#sec-postfix-increment-operator][Postfix Increment Operator]], [[https://tc39.es/ecma262/#sec-prefix-increment-operator][Prefix Increment Operator]], and [[https://tc39.es/ecma262/#sec-addition-operator-plus][The Addition Operator ( =+= )]]          | =T=                                           |
|                                 | =++ x=\\         |                                                                                                                                                                                                                                                                                     |                                               |
|                                 | =x + y=          |                                                                                                                                                                                                                                                                                     |                                               |
| =T=::subtract(x, y)             | =x --=\\         | [[https://tc39.es/ecma262/#sec-postfix-decrement-operator][Postfix Decrement Operator]], [[https://tc39.es/ecma262/#sec-prefix-decrement-operator][Prefix Decrement Operator]], and [[https://tc39.es/ecma262/#sec-subtraction-operator-minus][The Subtraction Operator ( =-= )]]   | =T=                                           |
|                                 | =-- x=\\         |                                                                                                                                                                                                                                                                                     |                                               |
|                                 | =x - y=          |                                                                                                                                                                                                                                                                                     |                                               |
| =T=::leftShift(x, y)            | =x << y=         | [[https://tc39.es/ecma262/#sec-left-shift-operator][The Left Shift Operator ( =<<= )]]                                                                                                                                                                                              | =T=                                           |
| =T=::signedRightShift(x, y)     | =x >> y=         | [[https://tc39.es/ecma262/#sec-signed-right-shift-operator][The Signed Right Shift Operator ( =>>= )]]                                                                                                                                                                              | =T=                                           |
| =T=::unsignedRightShift(x, y)   | =x >>> y=        | [[https://tc39.es/ecma262/#sec-unsigned-right-shift-operator][The Unsigned Right Shift Operator ( =>>>= )]]                                                                                                                                                                         | =T=, may throw TypeError                      |
| =T=::lessThan(x, y)             | =x < y=\\        | [[https://tc39.es/ecma262/#sec-relational-operators][Relational Operators]], via [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract Relational Comparison]]                                                                                                    | Boolean or undefined (for unordered inputs)   |
|                                 | =x > y=\\        |                                                                                                                                                                                                                                                                                     |                                               |
|                                 | =x <= y=\\       |                                                                                                                                                                                                                                                                                     |                                               |
|                                 | =x >= y=         |                                                                                                                                                                                                                                                                                     |                                               |
| =T=::equal(x, y)                | =x == y=\\       | [[https://tc39.es/ecma262/#sec-equality-operators][Equality Operators]], via [[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict Equality Comparison]]                                                                                                                | Boolean                                       |
|                                 | =x != y=\\       |                                                                                                                                                                                                                                                                                     |                                               |
|                                 | =x === y=\\      |                                                                                                                                                                                                                                                                                     |                                               |
|                                 | =x !== y=        |                                                                                                                                                                                                                                                                                     |                                               |
| =T=::sameValue(x, y)            |                  | Object internal methods, via [[https://tc39.es/ecma262/#sec-samevalue][SameValue ( =x=, =y= )]], to test exact value equality                                                                                                                                                       | Boolean                                       |
| =T=::sameValueZero(x, y)        |                  | Array, Map, and Set methods, via [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero ( =x=, =y= )]], to test value equality ignoring differences among members of the zero cohort (e.g., -0 and +0)                                                                         | Boolean                                       |
| =T=::bitwiseAND(x, y)           | =x & y=          | [[https://tc39.es/ecma262/#sec-binary-bitwise-operators][Binary Bitwise Operators]]                                                                                                                                                                                                 | =T=                                           |
| =T=::bitwiseXOR(x, y)           | =x ^ y=          | [[https://tc39.es/ecma262/#sec-binary-bitwise-operators][Binary Bitwise Operators]]                                                                                                                                                                                                 | =T=                                           |
| =T=::bitwiseOR(x, y)            | =x | y=          | [[https://tc39.es/ecma262/#sec-binary-bitwise-operators][Binary Bitwise Operators]]                                                                                                                                                                                                 | =T=                                           |
| =T=::toString(x)                | =String(x)=      | Many expressions and built-in functions, via [[https://tc39.es/ecma262/#sec-tostring][ToString ( =argument= )]]                                                                                                                                                                     | String                                        |

The =T=::unit value and =T=::=op= operations are not a part of the
ECMAScript language; they are defined here solely to aid the
specification of the semantics of the ECMAScript language. Other
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are defined throughout this specification.

Because the numeric types are in general not convertible without loss of
precision or truncation, the ECMAScript language provides no implicit
conversion among these types. Programmers must explicitly call =Number=
and =BigInt= functions to convert among types when calling a function
which requires another type.

Note

The first and subsequent editions of ECMAScript have provided, for
certain operators, implicit numeric conversions that could lose
precision or truncate. These legacy implicit conversions are maintained
for backward compatibility, but not provided for BigInt in order to
minimize opportunity for programmer error, and to leave open the option
of generalized /value types/ in a future edition.

* 6.1.6.1The Number Type
  :PROPERTIES:
  :CUSTOM_ID: the-number-type
  :END:

The Number type has exactly
18437736874454810627_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} (that
is,
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{64_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
+ 3_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) values, representing
the double-precision 64-bit format IEEE 754-2008 values as specified in
the IEEE Standard for Binary Floating-Point Arithmetic, except that the
9007199254740990_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} (that is,
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) distinct “Not-a-Number”
values of the IEEE Standard are represented in ECMAScript as a single
special NaN value. (Note that the NaN value is produced by the program
expression =NaN=.) In some implementations, external code might be able
to detect a difference between various Not-a-Number values, but such
behaviour is implementation-dependent; to ECMAScript code, all NaN
values are indistinguishable from each other.

Note

The bit pattern that might be observed in an ArrayBuffer (see
[[https://tc39.es/ecma262/#sec-arraybuffer-objects][24.1]]) or a
SharedArrayBuffer (see
[[https://tc39.es/ecma262/#sec-sharedarraybuffer-objects][24.2]]) after
a [[https://tc39.es/ecma262/#number-value][Number value]] has been
stored into it is not necessarily the same as the internal
representation of that [[https://tc39.es/ecma262/#number-value][Number
value]] used by the ECMAScript implementation.

There are two other special values, called positive Infinity and
negative Infinity. For brevity, these values are also referred to for
expository purposes by the symbols +∞ and -∞, respectively. (Note that
these two infinite Number values are produced by the program expressions
=+Infinity= (or simply =Infinity=) and =-Infinity=.)

The other
18437736874454810624_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} (that
is,
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{64_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}})
values are called the finite numbers. Half of these are positive numbers
and half are negative numbers; for every finite positive
[[https://tc39.es/ecma262/#number-value][Number value]] there is a
corresponding negative value having the same magnitude.

Note that there is both a positive zero and a negative zero. For
brevity, these values are also referred to for expository purposes by
the symbols +0 and -0, respectively. (Note that these two different zero
Number values are produced by the program expressions =+0= (or simply
=0=) and =-0=.)

The 18437736874454810622_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}
(that is,
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{64_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) finite nonzero values are
of two kinds:

18428729675200069632_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} (that
is,
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{64_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{54_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}})
of them are normalized, having the form

=s= × =m= × 2^{=e=}

where =s= is +1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} or
-1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, =m= is a positive
[[https://tc39.es/ecma262/#mathematical%20integer][mathematical
integer]] less than
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
but not less than
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{52_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}},
and =e= is a
[[https://tc39.es/ecma262/#mathematical%20integer][mathematical
integer]] ranging from -1074_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}
to 971_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, inclusive.

The remaining
9007199254740990_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} (that is,
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) values are denormalized,
having the form

=s= × =m= × 2^{=e=}

where =s= is +1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} or
-1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, =m= is a positive
[[https://tc39.es/ecma262/#mathematical%20integer][mathematical
integer]] less than
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{52_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}},
and =e= is -1074_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.

Note that all the positive and negative mathematical integers whose
magnitude is no greater than 2^{53} are representable in the Number type
(indeed, the
[[https://tc39.es/ecma262/#mathematical%20integer][mathematical
integer]] 0 has two representations, +0 and -0).

A finite number has an /odd significand/ if it is nonzero and the
[[https://tc39.es/ecma262/#mathematical%20integer][mathematical
integer]] =m= used to express it (in one of the two forms shown above)
is odd. Otherwise, it has an /even significand/.

In this specification, the phrase “the Number value for =x=” where =x=
represents an exact real mathematical quantity (which might even be an
irrational number such as π) means a
[[https://tc39.es/ecma262/#number-value][Number value]] chosen in the
following manner. Consider the set of all finite values of the Number
type, with -0 removed and with two additional values added to it that
are not representable in the Number type, namely
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{1024_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
(which is +1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} ×
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
×
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{971_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}})
and
-2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{1024_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
(which is -1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} ×
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{53_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
×
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{971_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}).
Choose the member of this set that is closest in value to =x=. If two
values of the set are equally close, then the one with an even
significand is chosen; for this purpose, the two extra values
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{1024_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
and
-2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{1024_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
are considered to have even significands. Finally, if
2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{1024_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
was chosen, replace it with +∞; if
-2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{1024_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
was chosen, replace it with -∞; if +0 was chosen, replace it with -0 if
and only if =x= is less than zero; any other chosen value is used
unchanged. The result is the
[[https://tc39.es/ecma262/#number-value][Number value]] for =x=. (This
procedure corresponds exactly to the behaviour of the IEEE 754-2008
roundTiesToEven mode.)

Some ECMAScript operators deal only with integers in specific ranges
such as -2^{31} through 2^{31} - 1, inclusive, or in the range 0 through
2^{16} - 1, inclusive. These operators accept any value of the Number
type but first convert each such value to an
[[https://tc39.es/ecma262/#integer][integer]] value in the expected
range. See the descriptions of the numeric conversion operations in
[[https://tc39.es/ecma262/#sec-type-conversion][7.1]].

The Number::unit value is 1.

* 6.1.6.1.1Number::unaryMinus ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: numberunaryminus-x
  :END:

1. If =x= is NaN, return NaN.
2. Return the result of negating =x=; that is, compute a Number with the
   same magnitude but opposite sign.

* 6.1.6.1.2Number::bitwiseNOT ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: numberbitwisenot-x
  :END:

1. Let =oldValue= be
   ! [[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=x=).
2. Return the result of applying bitwise complement to =oldValue=. The
   result is a signed 32-bit
   [[https://tc39.es/ecma262/#integer][integer]].

<<sec-applying-the-exp-operator>>
* 6.1.6.1.3Number::exponentiate ( =base=, =exponent= )
  :PROPERTIES:
  :CUSTOM_ID: numberexponentiate-base-exponent
  :END:

Returns an implementation-dependent approximation of the result of
raising =base= to the power =exponent=.

- If =exponent= is NaN, the result is NaN.
- If =exponent= is +0, the result is 1, even if =base= is NaN.
- If =exponent= is -0, the result is 1, even if =base= is NaN.
- If =base= is NaN and =exponent= is nonzero, the result is NaN.
- If [[https://tc39.es/ecma262/#eqn-abs][abs]](=base=) > 1 and
  =exponent= is +∞, the result is +∞.
- If [[https://tc39.es/ecma262/#eqn-abs][abs]](=base=) > 1 and
  =exponent= is -∞, the result is +0.
- If [[https://tc39.es/ecma262/#eqn-abs][abs]](=base=) is 1 and
  =exponent= is +∞, the result is NaN.
- If [[https://tc39.es/ecma262/#eqn-abs][abs]](=base=) is 1 and
  =exponent= is -∞, the result is NaN.
- If [[https://tc39.es/ecma262/#eqn-abs][abs]](=base=) < 1 and
  =exponent= is +∞, the result is +0.
- If [[https://tc39.es/ecma262/#eqn-abs][abs]](=base=) < 1 and
  =exponent= is -∞, the result is +∞.
- If =base= is +∞ and =exponent= > 0, the result is +∞.
- If =base= is +∞ and =exponent= < 0, the result is +0.
- If =base= is -∞ and =exponent= > 0 and =exponent= is an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is -∞.
- If =base= is -∞ and =exponent= > 0 and =exponent= is not an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is +∞.
- If =base= is -∞ and =exponent= < 0 and =exponent= is an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is -0.
- If =base= is -∞ and =exponent= < 0 and =exponent= is not an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is +0.
- If =base= is +0 and =exponent= > 0, the result is +0.
- If =base= is +0 and =exponent= < 0, the result is +∞.
- If =base= is -0 and =exponent= > 0 and =exponent= is an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is -0.
- If =base= is -0 and =exponent= > 0 and =exponent= is not an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is +0.
- If =base= is -0 and =exponent= < 0 and =exponent= is an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is -∞.
- If =base= is -0 and =exponent= < 0 and =exponent= is not an odd
  [[https://tc39.es/ecma262/#integer][integer]], the result is +∞.
- If =base= < 0 and =base= is finite and =exponent= is finite and
  =exponent= is not an [[https://tc39.es/ecma262/#integer][integer]],
  the result is NaN.

Note

The result of =base= =**= =exponent= when =base= is 1 or -1 and
=exponent= is +Infinity or -Infinity differs from IEEE 754-2008. The
first edition of ECMAScript specified a result of NaN for this
operation, whereas later versions of IEEE 754-2008 specified 1. The
historical ECMAScript behaviour is preserved for compatibility reasons.

<<sec-applying-the-mul-operator>>
* 6.1.6.1.4Number::multiply ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numbermultiply-x-y
  :END:

The =*=
[[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]
performs multiplication, producing the product of =x= and =y=.
Multiplication is commutative. Multiplication is not always associative
in ECMAScript, because of finite precision.

The result of a floating-point multiplication is governed by the rules
of IEEE 754-2008 binary double-precision arithmetic:

- If either operand is NaN, the result is NaN.
- The sign of the result is positive if both operands have the same
  sign, negative if the operands have different signs.
- Multiplication of an infinity by a zero results in NaN.
- Multiplication of an infinity by an infinity results in an infinity.
  The sign is determined by the rule already stated above.
- Multiplication of an infinity by a finite nonzero value results in a
  signed infinity. The sign is determined by the rule already stated
  above.
- In the remaining cases, where neither an infinity nor NaN is involved,
  the product is computed and rounded to the nearest representable value
  using IEEE 754-2008 roundTiesToEven mode. If the magnitude is too
  large to represent, the result is then an infinity of appropriate
  sign. If the magnitude is too small to represent, the result is then a
  zero of appropriate sign. The ECMAScript language requires support of
  gradual underflow as defined by IEEE 754-2008.

<<sec-applying-the-div-operator>>
* 6.1.6.1.5Number::divide ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberdivide-x-y
  :END:

The =/=
[[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]
performs division, producing the quotient of =x= and =y=. =x= is the
dividend and =y= is the divisor. ECMAScript does not perform
[[https://tc39.es/ecma262/#integer][integer]] division. The operands and
result of all division operations are double-precision floating-point
numbers. The result of division is determined by the specification of
IEEE 754-2008 arithmetic:

- If either operand is NaN, the result is NaN.
- The sign of the result is positive if both operands have the same
  sign, negative if the operands have different signs.
- Division of an infinity by an infinity results in NaN.
- Division of an infinity by a zero results in an infinity. The sign is
  determined by the rule already stated above.
- Division of an infinity by a nonzero finite value results in a signed
  infinity. The sign is determined by the rule already stated above.
- Division of a finite value by an infinity results in zero. The sign is
  determined by the rule already stated above.
- Division of a zero by a zero results in NaN; division of zero by any
  other finite value results in zero, with the sign determined by the
  rule already stated above.
- Division of a nonzero finite value by a zero results in a signed
  infinity. The sign is determined by the rule already stated above.
- In the remaining cases, where neither an infinity, nor a zero, nor NaN
  is involved, the quotient is computed and rounded to the nearest
  representable value using IEEE 754-2008 roundTiesToEven mode. If the
  magnitude is too large to represent, the operation overflows; the
  result is then an infinity of appropriate sign. If the magnitude is
  too small to represent, the operation underflows and the result is a
  zero of the appropriate sign. The ECMAScript language requires support
  of gradual underflow as defined by IEEE 754-2008.

<<sec-applying-the-mod-operator>>
* 6.1.6.1.6Number::remainder ( =n=, =d= )
  :PROPERTIES:
  :CUSTOM_ID: numberremainder-n-d
  :END:

The =%=
[[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]
yields the remainder of its operands from an implied division; =n= is
the dividend and =d= is the divisor.

Note

In C and C++, the remainder operator accepts only integral operands; in
ECMAScript, it also accepts floating-point operands.

The result of a floating-point remainder operation as computed by the
=%= operator is not the same as the “remainder” operation defined by
IEEE 754-2008. The IEEE 754-2008 “remainder” operation computes the
remainder from a rounding division, not a truncating division, and so
its behaviour is not analogous to that of the usual
[[https://tc39.es/ecma262/#integer][integer]] remainder operator.
Instead the ECMAScript language defines =%= on floating-point operations
to behave in a manner analogous to that of the Java
[[https://tc39.es/ecma262/#integer][integer]] remainder operator; this
may be compared with the C library function fmod.

The result of an ECMAScript floating-point remainder operation is
determined by the rules of IEEE arithmetic:

- If either operand is NaN, the result is NaN.
- The sign of the result equals the sign of the dividend.
- If the dividend is an infinity, or the divisor is a zero, or both, the
  result is NaN.
- If the dividend is finite and the divisor is an infinity, the result
  equals the dividend.
- If the dividend is a zero and the divisor is nonzero and finite, the
  result is the same as the dividend.
- In the remaining cases, where neither an infinity, nor a zero, nor NaN
  is involved, the floating-point remainder =r= from a dividend =n= and
  a divisor =d= is defined by the mathematical relation =r= = =n= - (=d=
  × =q=) where =q= is an [[https://tc39.es/ecma262/#integer][integer]]
  that is negative only if =n=/=d= is negative and positive only if
  =n=/=d= is positive, and whose magnitude is as large as possible
  without exceeding the magnitude of the true mathematical quotient of
  =n= and =d=. =r= is computed and rounded to the nearest representable
  value using IEEE 754-2008 roundTiesToEven mode.

<<sec-applying-the-additive-operators-to-numbers>>
* 6.1.6.1.7Number::add ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberadd-x-y
  :END:

The =+= operator performs addition when applied to =x= and =y=,
producing the sum of the operands.

Addition is a commutative operation, but not always associative.

The result of an addition is determined using the rules of IEEE 754-2008
binary double-precision arithmetic:

- If either operand is NaN, the result is NaN.
- The sum of two infinities of opposite sign is NaN.
- The sum of two infinities of the same sign is the infinity of that
  sign.
- The sum of an infinity and a finite value is equal to the infinite
  operand.
- The sum of two negative zeroes is -0. The sum of two positive zeroes,
  or of two zeroes of opposite sign, is +0.
- The sum of a zero and a nonzero finite value is equal to the nonzero
  operand.
- The sum of two nonzero finite values of the same magnitude and
  opposite sign is +0.
- In the remaining cases, where neither an infinity, nor a zero, nor NaN
  is involved, and the operands have the same sign or have different
  magnitudes, the sum is computed and rounded to the nearest
  representable value using IEEE 754-2008 roundTiesToEven mode. If the
  magnitude is too large to represent, the operation overflows and the
  result is then an infinity of appropriate sign. The ECMAScript
  language requires support of gradual underflow as defined by IEEE
  754-2008.

* 6.1.6.1.8Number::subtract ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numbersubtract-x-y
  :END:

The =-= operator performs subtraction when applied to two operands of
numeric type, producing the difference of its operands; =x= is the
minuend and =y= is the subtrahend. It is always the case that =x - y=
produces the same result as =x + (-y)=.

The result of =-= operator is then =x= + (-=y=).

* 6.1.6.1.9Number::leftShift ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberleftshift-x-y
  :END:

1. Let =lnum= be
   ! [[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=x=).
2. Let =rnum= be
   ! [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=y=).
3. Let =shiftCount= be the result of masking out all but the least
   significant 5 bits of =rnum=, that is, compute =rnum= & 0x1F.
4. Return the result of left shifting =lnum= by =shiftCount= bits. The
   result is a signed 32-bit
   [[https://tc39.es/ecma262/#integer][integer]].

* 6.1.6.1.10Number::signedRightShift ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numbersignedrightshift-x-y
  :END:

1. Let =lnum= be
   ! [[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=x=).
2. Let =rnum= be
   ! [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=y=).
3. Let =shiftCount= be the result of masking out all but the least
   significant 5 bits of =rnum=, that is, compute =rnum= & 0x1F.
4. Return the result of performing a sign-extending right shift of
   =lnum= by =shiftCount= bits. The most significant bit is propagated.
   The result is a signed 32-bit
   [[https://tc39.es/ecma262/#integer][integer]].

* 6.1.6.1.11Number::unsignedRightShift ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberunsignedrightshift-x-y
  :END:

1. Let =lnum= be
   ! [[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=x=).
2. Let =rnum= be
   ! [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=y=).
3. Let =shiftCount= be the result of masking out all but the least
   significant 5 bits of =rnum=, that is, compute =rnum= & 0x1F.
4. Return the result of performing a zero-filling right shift of =lnum=
   by =shiftCount= bits. Vacated bits are filled with zero. The result
   is an unsigned 32-bit [[https://tc39.es/ecma262/#integer][integer]].

* 6.1.6.1.12Number::lessThan ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberlessthan-x-y
  :END:

1.  If =x= is NaN, return undefined.
2.  If =y= is NaN, return undefined.
3.  If =x= and =y= are the same
    [[https://tc39.es/ecma262/#number-value][Number value]], return
    false.
4.  If =x= is +0 and =y= is -0, return false.
5.  If =x= is -0 and =y= is +0, return false.
6.  If =x= is +∞, return false.
7.  If =y= is +∞, return true.
8.  If =y= is -∞, return false.
9.  If =x= is -∞, return true.
10. If the [[https://tc39.es/ecma262/#mathematical-value][mathematical
    value]] of =x= is less than the
    [[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
    of =y=---note that these mathematical values are both finite and not
    both zero---return true. Otherwise, return false.

* 6.1.6.1.13Number::equal ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberequal-x-y
  :END:

1. If =x= is NaN, return false.
2. If =y= is NaN, return false.
3. If =x= is the same [[https://tc39.es/ecma262/#number-value][Number
   value]] as =y=, return true.
4. If =x= is +0 and =y= is -0, return true.
5. If =x= is -0 and =y= is +0, return true.
6. Return false.

* 6.1.6.1.14Number::sameValue ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numbersamevalue-x-y
  :END:

1. If =x= is NaN and =y= is NaN, return true.
2. If =x= is +0 and =y= is -0, return false.
3. If =x= is -0 and =y= is +0, return false.
4. If =x= is the same [[https://tc39.es/ecma262/#number-value][Number
   value]] as =y=, return true.
5. Return false.

* 6.1.6.1.15Number::sameValueZero ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numbersamevaluezero-x-y
  :END:

1. If =x= is NaN and =y= is NaN, return true.
2. If =x= is +0 and =y= is -0, return true.
3. If =x= is -0 and =y= is +0, return true.
4. If =x= is the same [[https://tc39.es/ecma262/#number-value][Number
   value]] as =y=, return true.
5. Return false.

* 6.1.6.1.16NumberBitwiseOp ( =op=, =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberbitwiseop-op-x-y
  :END:

1. Let =lnum= be
   ! [[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=x=).
2. Let =rnum= be
   ! [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=y=).
3. Return the result of applying the bitwise operator =op= to =lnum= and
   =rnum=. The result is a signed 32-bit
   [[https://tc39.es/ecma262/#integer][integer]].

* 6.1.6.1.17Number::bitwiseAND ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberbitwiseand-x-y
  :END:

1. Return
   [[https://tc39.es/ecma262/#sec-numberbitwiseop][NumberBitwiseOp]](=&=,
   =x=, =y=).

* 6.1.6.1.18Number::bitwiseXOR ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberbitwisexor-x-y
  :END:

1. Return
   [[https://tc39.es/ecma262/#sec-numberbitwiseop][NumberBitwiseOp]](=^=,
   =x=, =y=).

* 6.1.6.1.19Number::bitwiseOR ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: numberbitwiseor-x-y
  :END:

1. Return
   [[https://tc39.es/ecma262/#sec-numberbitwiseop][NumberBitwiseOp]](=|=,
   =x=, =y=).

<<sec-tostring-applied-to-the-number-type>>
* 6.1.6.1.20Number::toString ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: numbertostring-x
  :END:

The abstract operation Number::toString converts a Number =x= to String
format as follows:

1.  If =x= is NaN, return the String "NaN".
2.  If =x= is +0 or -0, return the String "0".
3.  If =x= is less than zero, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of "-" and !
    [[https://tc39.es/ecma262/#sec-numeric-types-number-tostring][Number::toString]](-=x=).
4.  If =x= is +∞, return the String "Infinity".
5.  Otherwise, let =n=, =k=, and =s= be integers such that =k= ≥ 1,
    10^{=k= - 1} ≤ =s= < 10^{=k=}, the
    [[https://tc39.es/ecma262/#number-value][Number value]] for
    [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=s=) ×
    10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) -
    [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=k=)} is =x=, and =k= is
    as small as possible. Note that =k= is the number of digits in the
    decimal representation of =s=, that =s= is not divisible by
    10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, and that the least
    significant digit of =s= is not necessarily uniquely determined by
    these criteria.
6.  If =k= ≤ =n= ≤ 21, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of:

    - the code units of the =k= digits of the decimal representation of
      =s= (in order, with no leading zeroes)
    - =n= - =k= occurrences of the code unit 0x0030 (DIGIT ZERO)

7.  If 0 < =n= ≤ 21, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of:

    - the code units of the most significant =n= digits of the decimal
      representation of =s=
    - the code unit 0x002E (FULL STOP)
    - the code units of the remaining =k= - =n= digits of the decimal
      representation of =s=

8.  If -6 < =n= ≤ 0, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of:

    - the code unit 0x0030 (DIGIT ZERO)
    - the code unit 0x002E (FULL STOP)
    - -=n= occurrences of the code unit 0x0030 (DIGIT ZERO)
    - the code units of the =k= digits of the decimal representation of
      =s=

9.  Otherwise, if =k= = 1, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of:

    - the code unit of the single digit of =s=
    - the code unit 0x0065 (LATIN SMALL LETTER E)
    - the code unit 0x002B (PLUS SIGN) or the code unit 0x002D
      (HYPHEN-MINUS) according to whether =n= - 1 is positive or
      negative
    - the code units of the decimal representation of the
      [[https://tc39.es/ecma262/#integer][integer]]
      [[https://tc39.es/ecma262/#eqn-abs][abs]](=n= - 1) (with no
      leading zeroes)

10. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of:

    - the code units of the most significant digit of the decimal
      representation of =s=
    - the code unit 0x002E (FULL STOP)
    - the code units of the remaining =k= - 1 digits of the decimal
      representation of =s=
    - the code unit 0x0065 (LATIN SMALL LETTER E)
    - the code unit 0x002B (PLUS SIGN) or the code unit 0x002D
      (HYPHEN-MINUS) according to whether =n= - 1 is positive or
      negative
    - the code units of the decimal representation of the
      [[https://tc39.es/ecma262/#integer][integer]]
      [[https://tc39.es/ecma262/#eqn-abs][abs]](=n= - 1) (with no
      leading zeroes)

Note 1

The following observations may be useful as guidelines for
implementations, but are not part of the normative requirements of this
Standard:

- If x is any [[https://tc39.es/ecma262/#number-value][Number value]]
  other than -0, then
  [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]]([[https://tc39.es/ecma262/#sec-tostring][ToString]](x))
  is exactly the same [[https://tc39.es/ecma262/#number-value][Number
  value]] as x.
- The least significant digit of s is not always uniquely determined by
  the requirements listed in step 5.

Note 2

For implementations that provide more accurate conversions than required
by the rules above, it is recommended that the following alternative
version of step 5 be used as a guideline:

5. Otherwise, let =n=, =k=, and =s= be integers such that =k= ≥ 1,
   10^{=k= - 1} ≤ =s= < 10^{=k=}, the
   [[https://tc39.es/ecma262/#number-value][Number value]] for
   [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=s=) ×
   10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) -
   [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=k=)} is =x=, and =k= is as
   small as possible. If there are multiple possibilities for =s=,
   choose the value of =s= for which
   [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=s=) ×
   10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) -
   [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=k=)} is closest in value
   to [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=x=). If there are two
   such possible values of =s=, choose the one that is even. Note that
   =k= is the number of digits in the decimal representation of =s= and
   that =s= is not divisible by
   10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.

Note 3

Implementers of ECMAScript may find useful the paper and code written by
David M. Gay for binary-to-decimal conversion of floating-point numbers:

Gay, David M. Correctly Rounded Binary-Decimal and Decimal-Binary
Conversions. Numerical Analysis, Manuscript 90-10. AT&T Bell
Laboratories (Murray Hill, New Jersey). November 30, 1990. Available
as\\
[[http://ampl.com/REFS/abstracts.html#rounding]]. Associated code
available as\\
[[http://netlib.sandia.gov/fp/dtoa.c]] and as\\
[[http://netlib.sandia.gov/fp/g_fmt.c]] and may also be found at the
various =netlib= mirror sites.

* 6.1.6.2The BigInt Type
  :PROPERTIES:
  :CUSTOM_ID: the-bigint-type
  :END:

The BigInt type represents a
[[https://tc39.es/ecma262/#mathematical%20integer][mathematical
integer]] value. The value may be any size and is not limited to a
particular bit-width. Generally, where not otherwise noted, operations
are designed to return exact mathematically-based answers. For binary
operations, BigInts act as two's complement binary strings, with
negative numbers treated as having bits set infinitely to the left.

The BigInt::unit value is 1n.

* 6.1.6.2.1BigInt::unaryMinus ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: bigintunaryminus-x
  :END:

1. If =x= is 0n, return 0n.
2. Return the BigInt value that represents the
   [[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
   of negating =x=.

* 6.1.6.2.2BigInt::bitwiseNOT ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: bigintbitwisenot-x
  :END:

The abstract operation BigInt::bitwiseNOT with an argument =x= of type
BigInt returns the one's complement of =x=; that is, -=x= - 1.

* 6.1.6.2.3BigInt::exponentiate ( =base=, =exponent= )
  :PROPERTIES:
  :CUSTOM_ID: bigintexponentiate-base-exponent
  :END:

1. If =exponent= < 0n, throw a RangeError exception.
2. If =base= is 0n and =exponent= is 0n, return 1n.
3. Return the BigInt value that represents the
   [[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
   of =base= raised to the power =exponent=.

* 6.1.6.2.4BigInt::multiply ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintmultiply-x-y
  :END:

The abstract operation BigInt::multiply with two arguments =x= and =y=
of type BigInt returns the BigInt value that represents the result of
multiplying =x= and =y=.

Note

Even if the result has a much larger bit width than the input, the exact
mathematical answer is given.

* 6.1.6.2.5BigInt::divide ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintdivide-x-y
  :END:

1. If =y= is 0n, throw a RangeError exception.
2. Let =quotient= be the
   [[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
   of =x= divided by =y=.
3. Return the BigInt value that represents =quotient= rounded towards 0
   to the next integral value.

* 6.1.6.2.6BigInt::remainder ( =n=, =d= )
  :PROPERTIES:
  :CUSTOM_ID: bigintremainder-n-d
  :END:

1. If =d= is 0n, throw a RangeError exception.
2. If =n= is 0n, return 0n.
3. Let =r= be the BigInt defined by the mathematical relation =r= =
   =n= - (=d= × =q=) where =q= is a BigInt that is negative only if
   =n=/=d= is negative and positive only if =n=/=d= is positive, and
   whose magnitude is as large as possible without exceeding the
   magnitude of the true mathematical quotient of =n= and =d=.
4. Return =r=.

Note

The sign of the result equals the sign of the dividend.

* 6.1.6.2.7BigInt::add ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintadd-x-y
  :END:

The abstract operation BigInt::add with two arguments =x= and =y= of
type BigInt returns the BigInt value that represents the sum of =x= and
=y=.

* 6.1.6.2.8BigInt::subtract ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintsubtract-x-y
  :END:

The abstract operation BigInt::subtract with two arguments =x= and =y=
of type BigInt returns the BigInt value that represents the difference
=x= minus =y=.

* 6.1.6.2.9BigInt::leftShift ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintleftshift-x-y
  :END:

The abstract operation BigInt::leftShift with two arguments =x= and =y=
of type BigInt performs the following steps:

1. If =y= < 0n, then

   1. Return the BigInt value that represents =x= ÷ 2^{-=y=}, rounding
      down to the nearest [[https://tc39.es/ecma262/#integer][integer]],
      including for negative numbers.

2. Return the BigInt value that represents =x= × 2^{=y=}.

Note

Semantics here should be equivalent to a bitwise shift, treating the
BigInt as an infinite length string of binary two's complement digits.

* 6.1.6.2.10BigInt::signedRightShift ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintsignedrightshift-x-y
  :END:

The abstract operation BigInt::signedRightShift with arguments =x= and
=y= of type BigInt performs the following steps:

1. Return BigInt::leftShift(=x=, -=y=).

* 6.1.6.2.11BigInt::unsignedRightShift ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintunsignedrightshift-x-y
  :END:

The abstract operation BigInt::unsignedRightShift with two arguments =x=
and =y= of type BigInt performs the following steps:

1. Throw a TypeError exception.

* 6.1.6.2.12BigInt::lessThan ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintlessthan-x-y
  :END:

The abstract operation BigInt::lessThan with two arguments =x= and =y=
of type BigInt returns true if =x= is less than =y= and false otherwise.

* 6.1.6.2.13BigInt::equal ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintequal-x-y
  :END:

The abstract operation BigInt::equal with two arguments =x= and =y= of
type BigInt returns true if =x= and =y= have the same
[[https://tc39.es/ecma262/#mathematical%20integer][mathematical
integer]] value and false otherwise.

* 6.1.6.2.14BigInt::sameValue ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintsamevalue-x-y
  :END:

The abstract operation BigInt::sameValue with two arguments =x= and =y=
of type BigInt performs the following steps:

1. Return BigInt::equal(=x=, =y=).

* 6.1.6.2.15BigInt::sameValueZero ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintsamevaluezero-x-y
  :END:

The abstract operation BigInt::sameValueZero with two arguments =x= and
=y= of type BigInt performs the following steps:

1. Return BigInt::equal(=x=, =y=).

* 6.1.6.2.16BinaryAnd ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: binaryand-x-y
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =x= is 0 or 1.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =y= is 0 or 1.
3. If =x= is 1 and =y= is 1, return 1.
4. Else, return 0.

* 6.1.6.2.17BinaryOr ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: binaryor-x-y
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =x= is 0 or 1.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =y= is 0 or 1.
3. If =x= is 1 or =y= is 1, return 1.
4. Else, return 0.

* 6.1.6.2.18BinaryXor ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: binaryxor-x-y
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =x= is 0 or 1.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =y= is 0 or 1.
3. If =x= is 1 and =y= is 0, return 1.
4. Else if =x= is 0 and =y= is 1, return 1.
5. Else, return 0.

* 6.1.6.2.19BigIntBitwiseOp ( =op=, =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintbitwiseop-op-x-y
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =op= is "&", "|", or
   "^".
2. Let =result= be 0n.
3. Let =shift= be 0.
4. Repeat, until (=x= = 0 or =x= = -1) and (=y= = 0 or =y= = -1),

   1. Let =xDigit= be =x=
      [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2.
   2. Let =yDigit= be =y=
      [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2.
   3. If =op= is "&", set =result= to =result= + 2^{=shift=} ×
      [[https://tc39.es/ecma262/#sec-binaryand][BinaryAnd]](=xDigit=,
      =yDigit=).
   4. Else if =op= is "|", set =result= to =result= + 2^{=shift=} ×
      [[https://tc39.es/ecma262/#sec-binaryor][BinaryOr]](=xDigit=,
      =yDigit=).
   5. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =op= is "^".
      2. Set =result= to =result= + 2^{=shift=} ×
         [[https://tc39.es/ecma262/#sec-binaryxor][BinaryXor]](=xDigit=,
         =yDigit=).

   6. Set =shift= to =shift= + 1.
   7. Set =x= to (=x= - =xDigit=) / 2.
   8. Set =y= to (=y= - =yDigit=) / 2.

5. If =op= is "&", let =tmp= be
   [[https://tc39.es/ecma262/#sec-binaryand][BinaryAnd]](=x=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2, =y=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2).
6. Else if =op= is "|", let =tmp= be
   [[https://tc39.es/ecma262/#sec-binaryor][BinaryOr]](=x=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2, =y=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2).
7. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =op= is "^".
   2. Let =tmp= be
      [[https://tc39.es/ecma262/#sec-binaryxor][BinaryXor]](=x=
      [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2, =y=
      [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2).

8. If =tmp= ≠ 0, then

   1. Set =result= to =result= - 2^{=shift=}. NOTE: This extends the
      sign.

9. Return =result=.

* 6.1.6.2.20BigInt::bitwiseAND ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintbitwiseand-x-y
  :END:

1. Return
   [[https://tc39.es/ecma262/#sec-bigintbitwiseop][BigIntBitwiseOp]]("&",
   =x=, =y=).

* 6.1.6.2.21BigInt::bitwiseXOR ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintbitwisexor-x-y
  :END:

1. Return
   [[https://tc39.es/ecma262/#sec-bigintbitwiseop][BigIntBitwiseOp]]("^",
   =x=, =y=).

* 6.1.6.2.22BigInt::bitwiseOR ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: bigintbitwiseor-x-y
  :END:

1. Return
   [[https://tc39.es/ecma262/#sec-bigintbitwiseop][BigIntBitwiseOp]]("|",
   =x=, =y=).

* 6.1.6.2.23BigInt::toString ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: biginttostring-x
  :END:

The abstract operation BigInt::toString converts a BigInt =x= to String
format as follows:

1. If =x= is less than zero, return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of the String "-" and !
   [[https://tc39.es/ecma262/#sec-numeric-types-bigint-tostring][BigInt::toString]](-=x=).
2. Return the String value consisting of the code units of the digits of
   the decimal representation of =x=.

* 6.1.7The Object Type
  :PROPERTIES:
  :CUSTOM_ID: the-object-type
  :END:

An Object is logically a collection of properties. Each property is
either a data property, or an accessor property:

- A data property associates a key value with an
  [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
  language value]] and a set of Boolean attributes.
- An accessor property associates a key value with one or two accessor
  functions, and a set of Boolean attributes. The accessor functions are
  used to store or retrieve an
  [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
  language value]] that is associated with the property.

Properties are identified using key values. A property key value is
either an ECMAScript String value or a Symbol value. All String and
Symbol values, including the empty string, are valid as property keys. A
property name is a property key that is a String value.

An integer index is a String-valued property key that is a canonical
numeric String (see
[[https://tc39.es/ecma262/#sec-canonicalnumericindexstring][7.1.21]])
and whose numeric value is either +0 or a positive
[[https://tc39.es/ecma262/#integer][integer]] ≤ 2^{53} - 1. An array
index is an [[https://tc39.es/ecma262/#integer-index][integer index]]
whose numeric value =i= is in the range +0 ≤ =i= < 2^{32} - 1.

Property keys are used to access properties and their values. There are
two kinds of access for properties: /get/ and /set/, corresponding to
value retrieval and assignment, respectively. The properties accessible
via get and set access includes both /own properties/ that are a direct
part of an object and /inherited properties/ which are provided by
another associated object via a property inheritance relationship.
Inherited properties may be either own or inherited properties of the
associated object. Each own property of an object must each have a key
value that is distinct from the key values of the other own properties
of that object.

All objects are logically collections of properties, but there are
multiple forms of objects that differ in their semantics for accessing
and manipulating their properties. Ordinary objects are the most common
form of objects and have the default object semantics. An exotic object
is any form of object whose property semantics differ in any way from
the default semantics.

* 6.1.7.1Property Attributes
  :PROPERTIES:
  :CUSTOM_ID: property-attributes
  :END:

Attributes are used in this specification to define and explain the
state of Object properties. A
[[https://tc39.es/ecma262/#sec-object-type][data property]] associates a
key value with the attributes listed in
[[https://tc39.es/ecma262/#table-2][Table 3]].

Table 3: Attributes of a Data Property
| Attribute Name     | Value Domain                                                                               | Description                                                                                                                                                                                                                              |
|--------------------+--------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[Value]]          | Any [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript language type]]   | The value retrieved by a get access of the property.                                                                                                                                                                                     |
| [[Writable]]       | Boolean                                                                                    | If false, attempts by ECMAScript code to change the property's [[Value]] attribute using [[Set]] will not succeed.                                                                                                                       |
| [[Enumerable]]     | Boolean                                                                                    | If true, the property will be enumerated by a for-in enumeration (see [[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements][13.7.5]]). Otherwise, the property is said to be non-enumerable.                                      |
| [[Configurable]]   | Boolean                                                                                    | If false, attempts to delete the property, change the property to be an [[https://tc39.es/ecma262/#sec-object-type][accessor property]], or change its attributes (other than [[Value]], or changing [[Writable]] to false) will fail.   |

An [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
associates a key value with the attributes listed in
[[https://tc39.es/ecma262/#table-3][Table 4]].

Table 4: Attributes of an Accessor Property
| Attribute Name     | Value Domain         | Description                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
||
| [[Get]]            | Object | Undefined   | If the value is an Object it must be a [[https://tc39.es/ecma262/#function-object][function object]]. The function's [[Call]] internal method ([[https://tc39.es/ecma262/#table-6][Table 7]]) is called with an empty arguments list to retrieve the property value each time a get access of the property is performed.                                                                                                                                                                                                     |
| [[Set]]            | Object | Undefined   | If the value is an Object it must be a [[https://tc39.es/ecma262/#function-object][function object]]. The function's [[Call]] internal method ([[https://tc39.es/ecma262/#table-6][Table 7]]) is called with an arguments list containing the assigned value as its sole argument each time a set access of the property is performed. The effect of a property's [[Set]] internal method may, but is not required to, have an effect on the value returned by subsequent calls to the property's [[Get]] internal method.   |
| [[Enumerable]]     | Boolean              | If true, the property is to be enumerated by a for-in enumeration (see [[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements][13.7.5]]). Otherwise, the property is said to be non-enumerable.                                                                                                                                                                                                                                                                                                                         |
| [[Configurable]]   | Boolean              | If false, attempts to delete the property, change the property to be a [[https://tc39.es/ecma262/#sec-object-type][data property]], or change its attributes will fail.                                                                                                                                                                                                                                                                                                                                                      |

If the initial values of a property's attributes are not explicitly
specified by this specification, the default value defined in
[[https://tc39.es/ecma262/#table-default-attribute-values][Table 5]] is
used.

Table 5: Default Attribute Values
<<table-4>>
| Attribute Name     | Default Value   |
|--------------------+-----------------|
| [[Value]]          | undefined       |
| [[Get]]            | undefined       |
| [[Set]]            | undefined       |
| [[Writable]]       | false           |
| [[Enumerable]]     | false           |
| [[Configurable]]   | false           |

* 6.1.7.2Object Internal Methods and Internal Slots
  :PROPERTIES:
  :CUSTOM_ID: object-internal-methods-and-internal-slots
  :END:

The actual semantics of objects, in ECMAScript, are specified via
algorithms called /internal methods/. Each object in an ECMAScript
engine is associated with a set of internal methods that defines its
runtime behaviour. These internal methods are not part of the ECMAScript
language. They are defined by this specification purely for expository
purposes. However, each object within an implementation of ECMAScript
must behave as specified by the internal methods associated with it. The
exact manner in which this is accomplished is determined by the
implementation.

Internal method names are polymorphic. This means that different object
values may perform different algorithms when a common internal method
name is invoked upon them. That actual object upon which an internal
method is invoked is the “target” of the invocation. If, at runtime, the
implementation of an algorithm attempts to use an internal method of an
object that the object does not support, a TypeError exception is
thrown.

Internal slots correspond to internal state that is associated with
objects and used by various ECMAScript specification algorithms.
Internal slots are not object properties and they are not inherited.
Depending upon the specific internal slot specification, such state may
consist of values of any
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language type]] or of specific ECMAScript specification type values.
Unless explicitly specified otherwise, internal slots are allocated as
part of the process of creating an object and may not be dynamically
added to an object. Unless specified otherwise, the initial value of an
internal slot is the value undefined. Various algorithms within this
specification create objects that have internal slots. However, the
ECMAScript language provides no direct way to associate internal slots
with an object.

Internal methods and internal slots are identified within this
specification using names enclosed in double square brackets [[ ]].

[[https://tc39.es/ecma262/#table-5][Table 6]] summarizes the /essential
internal methods/ used by this specification that are applicable to all
objects created or manipulated by ECMAScript code. Every object must
have algorithms for all of the essential internal methods. However, all
objects do not necessarily use the same algorithms for those methods.

The “Signature” column of [[https://tc39.es/ecma262/#table-5][Table 6]]
and other similar tables describes the invocation pattern for each
internal method. The invocation pattern always includes a parenthesized
list of descriptive parameter names. If a parameter name is the same as
an ECMAScript type name then the name describes the required type of the
parameter value. If an internal method explicitly returns a value, its
parameter list is followed by the symbol “→” and the type name of the
returned value. The type names used in signatures refer to the types
defined in clause
[[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][6]]
augmented by the following additional names. “/any/” means the value may
be any
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language type]].

In addition to its parameters, an internal method always has access to
the object that is the target of the method invocation.

An internal method implicitly returns a
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]], either a normal completion that wraps a value of the return
type shown in its invocation pattern, or a throw completion.

Table 6: Essential Internal Methods
| Internal Method         | Signature                                                                                                                      | Description                                                                                                                                                                                                                                                                          |
|-------------------------+--------------------------------------------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[GetPrototypeOf]]      | ( ) *→* Object | Null                                                                                                          | Determine the object that provides inherited properties for this object. A null value indicates that there are no inherited properties.                                                                                                                                              |
| [[SetPrototypeOf]]      | (Object | Null) *→* Boolean                                                                                                    | Associate this object with another object that provides inherited properties. Passing null indicates that there are no inherited properties. Returns true indicating that the operation was completed successfully or false indicating that the operation was not successful.        |
| [[IsExtensible]]        | ( ) *→* Boolean                                                                                                                | Determine whether it is permitted to add additional properties to this object.                                                                                                                                                                                                       |
| [[PreventExtensions]]   | ( ) *→* Boolean                                                                                                                | Control whether new properties may be added to this object. Returns true if the operation was successful or false if the operation was unsuccessful.                                                                                                                                 |
| [[GetOwnProperty]]      | (=propertyKey=) *→* Undefined | [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property Descriptor]]   | Return a [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property Descriptor]] for the own property of this object whose key is =propertyKey=, or undefined if no such property exists.                                                                       |
| [[DefineOwnProperty]]   | (=propertyKey=, =PropertyDescriptor=) *→* Boolean                                                                              | Create or alter the own property, whose key is =propertyKey=, to have the state described by =PropertyDescriptor=. Return true if that property was successfully created/updated or false if the property could not be created or updated.                                           |
| [[HasProperty]]         | (=propertyKey=) *→* Boolean                                                                                                    | Return a Boolean value indicating whether this object already has either an own or inherited property whose key is =propertyKey=.                                                                                                                                                    |
| [[Get]]                 | (=propertyKey=, =Receiver=) *→* /any/                                                                                          | Return the value of the property whose key is =propertyKey= from this object. If any ECMAScript code must be executed to retrieve the property value, =Receiver= is used as the this value when evaluating the code.                                                                 |
| [[Set]]                 | (=propertyKey=, =value=, =Receiver=) *→* Boolean                                                                               | Set the value of the property whose key is =propertyKey= to =value=. If any ECMAScript code must be executed to set the property value, =Receiver= is used as the this value when evaluating the code. Returns true if the property value was set or false if it could not be set.   |
| [[Delete]]              | (=propertyKey=) *→* Boolean                                                                                                    | Remove the own property whose key is =propertyKey= from this object. Return false if the property was not deleted and is still present. Return true if the property was deleted or is not present.                                                                                   |
| [[OwnPropertyKeys]]     | ( ) *→* [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of propertyKey                               | Return a [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] whose elements are all of the own property keys for the object.                                                                                                                                   |

[[https://tc39.es/ecma262/#table-6][Table 7]] summarizes additional
essential internal methods that are supported by objects that may be
called as functions. A function object is an object that supports the
[[Call]] internal method. A constructor is an object that supports the
[[Construct]] internal method. Every object that supports [[Construct]]
must support [[Call]]; that is, every
[[https://tc39.es/ecma262/#constructor][constructor]] must be a
[[https://tc39.es/ecma262/#function-object][function object]].
Therefore, a [[https://tc39.es/ecma262/#constructor][constructor]] may
also be referred to as a
/[[https://tc39.es/ecma262/#constructor][constructor]] function/ or
/[[https://tc39.es/ecma262/#constructor][constructor]]
[[https://tc39.es/ecma262/#function-object][function object]]/.

Table 7: Additional Essential Internal Methods of Function Objects
| Internal Method   | Signature                                                                                                   | Description|
||
| [[Call]]          | (/any/, a [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of /any/) *→* /any/     | Executes code associated with this object. Invoked via a function call expression. The arguments to the internal method are a this value and a list containing the arguments passed to the function by a call expression. Objects that implement this internal method are /callable/.                                                                                                                                                                                                                                                                                                                  |
| [[Construct]]     | (a [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of /any/, Object) *→* Object   | Creates an object. Invoked via the =new= or =super= operators. The first argument to the internal method is a list containing the arguments of the operator. The second argument is the object to which the =new= operator was initially applied. Objects that implement this internal method are called /constructors/. A [[https://tc39.es/ecma262/#function-object][function object]] is not necessarily a [[https://tc39.es/ecma262/#constructor][constructor]] and such non-[[https://tc39.es/ecma262/#constructor][constructor]] function objects do not have a [[Construct]] internal method.   |

The semantics of the essential internal methods for ordinary objects and
standard exotic objects are specified in clause
[[https://tc39.es/ecma262/#sec-ordinary-and-exotic-objects-behaviours][9]].
If any specified use of an internal method of an
[[https://tc39.es/ecma262/#exotic-object][exotic object]] is not
supported by an implementation, that usage must throw a TypeError
exception when attempted.

* 6.1.7.3Invariants of the Essential Internal Methods
  :PROPERTIES:
  :CUSTOM_ID: invariants-of-the-essential-internal-methods
  :END:

The Internal Methods of Objects of an ECMAScript engine must conform to
the list of invariants specified below. Ordinary ECMAScript Objects as
well as all standard exotic objects in this specification maintain these
invariants. ECMAScript Proxy objects maintain these invariants by means
of runtime checks on the result of traps invoked on the [[ProxyHandler]]
object.

Any implementation provided exotic objects must also maintain these
invariants for those objects. Violation of these invariants may cause
ECMAScript code to have unpredictable behaviour and create security
issues. However, violation of these invariants must never compromise the
memory safety of an implementation.

An implementation must not allow these invariants to be circumvented in
any manner such as by providing alternative interfaces that implement
the functionality of the essential internal methods without enforcing
their invariants.

** Definitions:
   :PROPERTIES:
   :CUSTOM_ID: definitions
   :END:

- The /target/ of an internal method is the object upon which the
  internal method is called.
- A target is /non-extensible/ if it has been observed to return false
  from its [[IsExtensible]] internal method, or true from its
  [[PreventExtensions]] internal method.
- A /non-existent/ property is a property that does not exist as an own
  property on a non-extensible target.
- All references to
  /[[https://tc39.es/ecma262/#sec-samevalue][SameValue]]/ are according
  to the definition of the
  [[https://tc39.es/ecma262/#sec-samevalue][SameValue]] algorithm.

** Return value:
   :PROPERTIES:
   :CUSTOM_ID: return-value
   :END:

The value returned by any internal method must be a
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] with either:

- [[Type]] = normal, [[Target]] = empty, and [[Value]] = a value of the
  "normal return type" shown below for that internal method, or
- [[Type]] = throw, [[Target]] = empty, and [[Value]] = any
  [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
  language value]].

Note 1

An internal method must not return a completion with [[Type]] =
continue, break, or return.

** [[GetPrototypeOf]] ( )
   :PROPERTIES:
   :CUSTOM_ID: getprototypeof
   :END:

- The normal return type is either Object or Null.
- If target is non-extensible, and [[GetPrototypeOf]] returns a value
  =V=, then any future calls to [[GetPrototypeOf]] should return the
  [[https://tc39.es/ecma262/#sec-samevalue][SameValue]] as =V=.

Note 2

An object's prototype chain should have finite length (that is, starting
from any object, recursively applying the [[GetPrototypeOf]] internal
method to its result should eventually lead to the value null). However,
this requirement is not enforceable as an object level invariant if the
prototype chain includes any exotic objects that do not use the ordinary
object definition of [[GetPrototypeOf]]. Such a circular prototype chain
may result in infinite loops when accessing object properties.

** [[SetPrototypeOf]] ( =V= )
   :PROPERTIES:
   :CUSTOM_ID: setprototypeof-v
   :END:

- The normal return type is Boolean.
- If target is non-extensible, [[SetPrototypeOf]] must return false,
  unless =V= is the
  [[https://tc39.es/ecma262/#sec-samevalue][SameValue]] as the target's
  observed [[GetPrototypeOf]] value.

** [[IsExtensible]] ( )
   :PROPERTIES:
   :CUSTOM_ID: isextensible
   :END:

- The normal return type is Boolean.
- If [[IsExtensible]] returns false, all future calls to
  [[IsExtensible]] on the target must return false.

** [[PreventExtensions]] ( )
   :PROPERTIES:
   :CUSTOM_ID: preventextensions
   :END:

- The normal return type is Boolean.
- If [[PreventExtensions]] returns true, all future calls to
  [[IsExtensible]] on the target must return false and the target is now
  considered non-extensible.

** [[GetOwnProperty]] ( =P= )
   :PROPERTIES:
   :CUSTOM_ID: getownproperty-p
   :END:

- The normal return type is either
  [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
  Descriptor]] or Undefined.
- If the Type of the return value is
  [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
  Descriptor]], the return value must be a
  [[https://tc39.es/ecma262/#sec-completepropertydescriptor][complete
  property descriptor]].
- If =P= is described as a non-configurable, non-writable own
  [[https://tc39.es/ecma262/#sec-object-type][data property]], all
  future calls to [[GetOwnProperty]] ( =P= ) must return Property
  Descritor whose [[Value]] is
  [[https://tc39.es/ecma262/#sec-samevalue][SameValue]] as =P='s
  [[Value]] attribute.
- If =P='s attributes other than [[Writable]] may change over time or if
  the property might be deleted, then =P='s [[Configurable]] attribute
  must be true.
- If the [[Writable]] attribute may change from false to true, then the
  [[Configurable]] attribute must be true.
- If the target is non-extensible and =P= is non-existent, then all
  future calls to [[GetOwnProperty]] (=P=) on the target must describe
  =P= as non-existent (i.e. [[GetOwnProperty]] (=P=) must return
  undefined).

Note 3

As a consequence of the third invariant, if a property is described as a
[[https://tc39.es/ecma262/#sec-object-type][data property]] and it may
return different values over time, then either or both of the
[[Writable]] and [[Configurable]] attributes must be true even if no
mechanism to change the value is exposed via the other internal methods.

** [[DefineOwnProperty]] ( =P=, =Desc= )
   :PROPERTIES:
   :CUSTOM_ID: defineownproperty-p-desc
   :END:

- The normal return type is Boolean.
- [[DefineOwnProperty]] must return false if =P= has previously been
  observed as a non-configurable own property of the target, unless
  either:

  1. =P= is a writable [[https://tc39.es/ecma262/#sec-object-type][data
     property]]. A non-configurable writable
     [[https://tc39.es/ecma262/#sec-object-type][data property]] can be
     changed into a non-configurable non-writable
     [[https://tc39.es/ecma262/#sec-object-type][data property]].
  2. All attributes of =Desc= are the
     [[https://tc39.es/ecma262/#sec-samevalue][SameValue]] as =P='s
     attributes.

- [[DefineOwnProperty]] (=P=, =Desc=) must return false if target is
  non-extensible and =P= is a non-existent own property. That is, a
  non-extensible target object cannot be extended with new properties.

** [[HasProperty]] ( =P= )
   :PROPERTIES:
   :CUSTOM_ID: hasproperty-p
   :END:

- The normal return type is Boolean.
- If =P= was previously observed as a non-configurable own data or
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] of the
  target, [[HasProperty]] must return true.

** [[Get]] ( =P=, =Receiver= )
   :PROPERTIES:
   :CUSTOM_ID: get-p-receiver
   :END:

- The normal return type is any
  [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
  language type]].
- If =P= was previously observed as a non-configurable, non-writable own
  [[https://tc39.es/ecma262/#sec-object-type][data property]] of the
  target with value =V=, then [[Get]] must return the
  [[https://tc39.es/ecma262/#sec-samevalue][SameValue]] as =V=.
- If =P= was previously observed as a non-configurable own
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] of the
  target whose [[Get]] attribute is undefined, the [[Get]] operation
  must return undefined.

** [[Set]] ( =P=, =V=, =Receiver= )
   :PROPERTIES:
   :CUSTOM_ID: set-p-v-receiver
   :END:

- The normal return type is Boolean.
- If =P= was previously observed as a non-configurable, non-writable own
  [[https://tc39.es/ecma262/#sec-object-type][data property]] of the
  target, then [[Set]] must return false unless =V= is the
  [[https://tc39.es/ecma262/#sec-samevalue][SameValue]] as =P='s
  [[Value]] attribute.
- If =P= was previously observed as a non-configurable own
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] of the
  target whose [[Set]] attribute is undefined, the [[Set]] operation
  must return false.

** [[Delete]] ( =P= )
   :PROPERTIES:
   :CUSTOM_ID: delete-p
   :END:

- The normal return type is Boolean.
- If =P= was previously observed as a non-configurable own data or
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] of the
  target, [[Delete]] must return false.

** [[OwnPropertyKeys]] ( )
   :PROPERTIES:
   :CUSTOM_ID: ownpropertykeys
   :END:

- The normal return type is
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
- The returned
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  must not contain any duplicate entries.
- The Type of each element of the returned
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  is either String or Symbol.
- The returned
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  must contain at least the keys of all non-configurable own properties
  that have previously been observed.
- If the object is non-extensible, the returned
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  must contain only the keys of all own properties of the object that
  are observable using [[GetOwnProperty]].

** [[Call]] ( )
   :PROPERTIES:
   :CUSTOM_ID: call
   :END:

- The normal return type is any
  [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
  language type]].

** [[Construct]] ( )
   :PROPERTIES:
   :CUSTOM_ID: construct
   :END:

- The normal return type is Object.

* 6.1.7.4Well-Known Intrinsic Objects
  :PROPERTIES:
  :CUSTOM_ID: well-known-intrinsic-objects
  :END:

Well-known intrinsics are built-in objects that are explicitly
referenced by the algorithms of this specification and which usually
have [[https://tc39.es/ecma262/#realm][realm]]-specific identities.
Unless otherwise specified each intrinsic object actually corresponds to
a set of similar objects, one per
[[https://tc39.es/ecma262/#realm][realm]].

Within this specification a reference such as %name% means the intrinsic
object, associated with the current
[[https://tc39.es/ecma262/#realm][realm]], corresponding to the name. A
reference such as %name.a.b% means, as if the "b" property of the "a"
property of the intrinsic object %name% was accessed prior to any
ECMAScript code being evaluated. Determination of the current
[[https://tc39.es/ecma262/#realm][realm]] and its intrinsics is
described in [[https://tc39.es/ecma262/#sec-execution-contexts][8.3]].
The well-known intrinsics are listed in
[[https://tc39.es/ecma262/#table-7][Table 8]].

Table 8: Well-Known Intrinsic Objects
| Intrinsic Name                                                                                                        | Global Name                     | ECMAScript Language Association                                                                                                                                                                                                                                                                   |
|-----------------------------------------------------------------------------------------------------------------------+---------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[https://tc39.es/ecma262/#sec-array-constructor][%Array%]]                                                           | =Array=                         | The =Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-array-constructor][22.1.1]])                                                                                                                                                                    |
| [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]]                                               | =ArrayBuffer=                   | The =ArrayBuffer= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-arraybuffer-constructor][24.1.2]])                                                                                                                                                        |
| [[https://tc39.es/ecma262/#sec-properties-of-the-arraybuffer-prototype-object][%ArrayBufferPrototype%]]               | =ArrayBuffer.prototype=         | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]]; i.e., %ArrayBuffer.prototype%                                                                                        |
| [[https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object][%ArrayIteratorPrototype%]]                            |                                 | The prototype of Array iterator objects ([[https://tc39.es/ecma262/#sec-array-iterator-objects][22.1.5]]); i.e., %ArrayIterator.prototype%                                                                                                                                                        |
| [[https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object][%ArrayPrototype%]]                           | =Array.prototype=               | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-array-constructor][%Array%]] ([[https://tc39.es/ecma262/#sec-properties-of-the-array-prototype-object][22.1.3]]); i.e., %Array.prototype%                      |
| [[https://tc39.es/ecma262/#sec-array.prototype.entries][%ArrayProto_entries%]]                                        | =Array.prototype.entries=       | The initial value of the "entries" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Array.prototype% ([[https://tc39.es/ecma262/#sec-array.prototype.entries][22.1.3.4]]); i.e., %Array.prototype.entries%                                                                         |
| [[https://tc39.es/ecma262/#sec-array.prototype.foreach][%ArrayProto_forEach%]]                                        | =Array.prototype.forEach=       | The initial value of the "forEach" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Array.prototype% ([[https://tc39.es/ecma262/#sec-array.prototype.foreach][22.1.3.12]]); i.e., %Array.prototype.forEach%                                                                        |
| [[https://tc39.es/ecma262/#sec-array.prototype.keys][%ArrayProto_keys%]]                                              | =Array.prototype.keys=          | The initial value of the "keys" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Array.prototype% ([[https://tc39.es/ecma262/#sec-array.prototype.keys][22.1.3.16]]); i.e., %Array.prototype.keys%                                                                                 |
| [[https://tc39.es/ecma262/#sec-array.prototype.values][%ArrayProto_values%]]                                          | =Array.prototype.values=        | The initial value of the "values" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Array.prototype% ([[https://tc39.es/ecma262/#sec-array.prototype.values][22.1.3.32]]); i.e., %Array.prototype.values%                                                                           |
| [[https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%-object][%AsyncFromSyncIteratorPrototype%]]            |                                 | The prototype of async-from-sync iterator objects ([[https://tc39.es/ecma262/#sec-async-from-sync-iterator-objects][25.1.4]])                                                                                                                                                                     |
| [[https://tc39.es/ecma262/#sec-async-function-constructor][%AsyncFunction%]]                                          |                                 | The [[https://tc39.es/ecma262/#constructor][constructor]] of async function objects ([[https://tc39.es/ecma262/#sec-async-function-constructor][25.7.1]])                                                                                                                                         |
| [[https://tc39.es/ecma262/#sec-async-function-prototype-properties][%AsyncFunctionPrototype%]]                        |                                 | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-async-function-constructor][%AsyncFunction%]]; i.e., %AsyncFunction.prototype%                                                                                 |
| [[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]]                                   |                                 | The initial value of the "prototype" property of [[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-constructor][%AsyncGeneratorFunction%]]; i.e., %AsyncGeneratorFunction.prototype%                                                                                                          |
| [[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-constructor][%AsyncGeneratorFunction%]]                         |                                 | The [[https://tc39.es/ecma262/#constructor][constructor]] of async iterator objects ([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-constructor][25.3.1]])                                                                                                                                 |
| [[https://tc39.es/ecma262/#sec-properties-of-asyncgenerator-prototype][%AsyncGeneratorPrototype%]]                    |                                 | The initial value of the "prototype" property of [[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]]; i.e., %AsyncGenerator.prototype%                                                                                                                            |
| [[https://tc39.es/ecma262/#sec-asynciteratorprototype][%AsyncIteratorPrototype%]]                                     |                                 | An object that all standard built-in async iterator objects indirectly inherit from                                                                                                                                                                                                               |
| [[https://tc39.es/ecma262/#sec-atomics-object][%Atomics%]]                                                            | =Atomics=                       | The =Atomics= object ([[https://tc39.es/ecma262/#sec-atomics-object][24.4]])                                                                                                                                                                                                                      |
| [[https://tc39.es/ecma262/#sec-bigint-constructor][%BigInt%]]                                                         | =BigInt=                        | The =BigInt= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-bigint-constructor][20.2.1]])                                                                                                                                                                  |
| %BigInt64Array%                                                                                                       | =BigInt64Array=                 | The =BigInt64Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                             |
| %BigUint64Array%                                                                                                      | =BigUint64Array=                | The =BigUint64Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                            |
| [[https://tc39.es/ecma262/#sec-boolean-constructor][%Boolean%]]                                                       | =Boolean=                       | The =Boolean= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-boolean-constructor][19.3.1]])                                                                                                                                                                |
| [[https://tc39.es/ecma262/#sec-properties-of-the-boolean-prototype-object][%BooleanPrototype%]]                       | =Boolean.prototype=             | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-boolean-constructor][%Boolean%]] ([[https://tc39.es/ecma262/#sec-properties-of-the-boolean-prototype-object][19.3.3]]); i.e., %Boolean.prototype%              |
| [[https://tc39.es/ecma262/#sec-dataview-constructor][%DataView%]]                                                     | =DataView=                      | The =DataView= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-dataview-constructor][24.3.2]])                                                                                                                                                              |
| [[https://tc39.es/ecma262/#sec-properties-of-the-dataview-prototype-object][%DataViewPrototype%]]                     | =DataView.prototype=            | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-dataview-constructor][%DataView%]]; i.e., %DataView.prototype%                                                                                                 |
| [[https://tc39.es/ecma262/#sec-date-constructor][%Date%]]                                                             | =Date=                          | The =Date= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-date-constructor][20.4.2]])                                                                                                                                                                      |
| [[https://tc39.es/ecma262/#sec-properties-of-the-date-prototype-object][%DatePrototype%]]                             | =Date.prototype=                | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-date-constructor][%Date%]].; i.e., %Date.prototype%                                                                                                            |
| [[https://tc39.es/ecma262/#sec-decodeuri-encodeduri][%decodeURI%]]                                                    | =decodeURI=                     | The =decodeURI= function ([[https://tc39.es/ecma262/#sec-decodeuri-encodeduri][18.2.6.2]])                                                                                                                                                                                                        |
| [[https://tc39.es/ecma262/#sec-decodeuricomponent-encodeduricomponent][%decodeURIComponent%]]                         | =decodeURIComponent=            | The =decodeURIComponent= function ([[https://tc39.es/ecma262/#sec-decodeuricomponent-encodeduricomponent][18.2.6.3]])                                                                                                                                                                             |
| [[https://tc39.es/ecma262/#sec-encodeuri-uri][%encodeURI%]]                                                           | =encodeURI=                     | The =encodeURI= function ([[https://tc39.es/ecma262/#sec-encodeuri-uri][18.2.6.4]])                                                                                                                                                                                                               |
| [[https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent][%encodeURIComponent%]]                                | =encodeURIComponent=            | The =encodeURIComponent= function ([[https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent][18.2.6.5]])                                                                                                                                                                                    |
| [[https://tc39.es/ecma262/#sec-error-constructor][%Error%]]                                                           | =Error=                         | The =Error= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-error-constructor][19.5.1]])                                                                                                                                                                    |
| [[https://tc39.es/ecma262/#sec-properties-of-the-error-prototype-object][%ErrorPrototype%]]                           | =Error.prototype=               | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-error-constructor][%Error%]]; i.e., %Error.prototype%                                                                                                          |
| [[https://tc39.es/ecma262/#sec-eval-x][%eval%]]                                                                       | =eval=                          | The =eval= function ([[https://tc39.es/ecma262/#sec-eval-x][18.2.1]])                                                                                                                                                                                                                             |
| %EvalError%                                                                                                           | =EvalError=                     | The =EvalError= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-evalerror][19.5.5.1]])                                                                                                                             |
| %EvalErrorPrototype%                                                                                                  | =EvalError.prototype=           | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %EvalError%; i.e., %EvalError.prototype%                                                                                                                                                      |
| %Float32Array%                                                                                                        | =Float32Array=                  | The =Float32Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                              |
| %Float32ArrayPrototype%                                                                                               | =Float32Array.prototype=        | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Float32Array%; i.e., %Float32Array.prototype%                                                                                                                                                |
| %Float64Array%                                                                                                        | =Float64Array=                  | The =Float64Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                              |
| %Float64ArrayPrototype%                                                                                               | =Float64Array.prototype=        | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Float64Array%; i.e., %Float64Array.prototype%                                                                                                                                                |
| [[https://tc39.es/ecma262/#sec-function-constructor][%Function%]]                                                     | =Function=                      | The =Function= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-function-constructor][19.2.1]])                                                                                                                                                              |
| [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%FunctionPrototype%]]                     | =Function.prototype=            | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-function-constructor][%Function%]]; i.e., [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]]                   |
| [[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]]                    |                                 | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-generatorfunction-constructor][%GeneratorFunction%]]                                                                                                           |
| [[https://tc39.es/ecma262/#sec-generatorfunction-constructor][%GeneratorFunction%]]                                   |                                 | The [[https://tc39.es/ecma262/#constructor][constructor]] of generator objects ([[https://tc39.es/ecma262/#sec-generatorfunction-constructor][25.2.1]])                                                                                                                                           |
| [[https://tc39.es/ecma262/#sec-properties-of-generator-prototype][%GeneratorPrototype%]]                              |                                 | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]]; i.e., %Generator.prototype%                                                               |
| %Int8Array%                                                                                                           | =Int8Array=                     | The =Int8Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                                 |
| %Int8ArrayPrototype%                                                                                                  | =Int8Array.prototype=           | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Int8Array%; i.e., %Int8Array.prototype%                                                                                                                                                      |
| %Int16Array%                                                                                                          | =Int16Array=                    | The =Int16Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                                |
| %Int16ArrayPrototype%                                                                                                 | =Int16Array.prototype=          | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Int16Array%; i.e., %Int16Array.prototype%                                                                                                                                                    |
| %Int32Array%                                                                                                          | =Int32Array=                    | The =Int32Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                                |
| %Int32ArrayPrototype%                                                                                                 | =Int32Array.prototype=          | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Int32Array%; i.e., %Int32Array.prototype%                                                                                                                                                    |
| [[https://tc39.es/ecma262/#sec-isfinite-number][%isFinite%]]                                                          | =isFinite=                      | The =isFinite= function ([[https://tc39.es/ecma262/#sec-isfinite-number][18.2.2]])                                                                                                                                                                                                                |
| [[https://tc39.es/ecma262/#sec-isnan-number][%isNaN%]]                                                                | =isNaN=                         | The =isNaN= function ([[https://tc39.es/ecma262/#sec-isnan-number][18.2.3]])                                                                                                                                                                                                                      |
| [[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]]                                      |                                 | An object that all standard built-in iterator objects indirectly inherit from                                                                                                                                                                                                                     |
| [[https://tc39.es/ecma262/#sec-json-object][%JSON%]]                                                                  | =JSON=                          | The =JSON= object ([[https://tc39.es/ecma262/#sec-json-object][24.5]])                                                                                                                                                                                                                            |
| [[https://tc39.es/ecma262/#sec-json.parse][%JSONParse%]]                                                              | =JSON.parse=                    | The initial value of the "parse" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-json-object][%JSON%]]; i.e., %JSON.parse%                                                                                                                          |
| [[https://tc39.es/ecma262/#sec-json.stringify][%JSONStringify%]]                                                      | =JSON.stringify=                | The initial value of the "stringify" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-json-object][%JSON%]]; i.e., %JSON.stringify%                                                                                                                  |
| [[https://tc39.es/ecma262/#sec-map-constructor][%Map%]]                                                               | =Map=                           | The =Map= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-map-constructor][23.1.1]])                                                                                                                                                                        |
| [[https://tc39.es/ecma262/#sec-%mapiteratorprototype%-object][%MapIteratorPrototype%]]                                |                                 | The prototype of Map iterator objects ([[https://tc39.es/ecma262/#sec-map-iterator-objects][23.1.5]])                                                                                                                                                                                             |
| [[https://tc39.es/ecma262/#sec-properties-of-the-map-prototype-object][%MapPrototype%]]                               | =Map.prototype=                 | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-map-constructor][%Map%]]; i.e., %Map.prototype%                                                                                                                |
| [[https://tc39.es/ecma262/#sec-math-object][%Math%]]                                                                  | =Math=                          | The =Math= object ([[https://tc39.es/ecma262/#sec-math-object][20.3]])                                                                                                                                                                                                                            |
| [[https://tc39.es/ecma262/#sec-number-constructor][%Number%]]                                                         | =Number=                        | The =Number= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-number-constructor][20.1.1]])                                                                                                                                                                  |
| [[https://tc39.es/ecma262/#sec-properties-of-the-number-prototype-object][%NumberPrototype%]]                         | =Number.prototype=              | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-number-constructor][%Number%]]; i.e., %Number.prototype%                                                                                                       |
| [[https://tc39.es/ecma262/#sec-object-constructor][%Object%]]                                                         | =Object=                        | The =Object= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-object-constructor][19.1.1]])                                                                                                                                                                  |
| [[https://tc39.es/ecma262/#sec-properties-of-the-object-prototype-object][%ObjectPrototype%]]                         | =Object.prototype=              | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-object-constructor][%Object%]] ([[https://tc39.es/ecma262/#sec-properties-of-the-object-prototype-object][19.1.3]]); i.e., %Object.prototype%                  |
| [[https://tc39.es/ecma262/#sec-object.prototype.tostring][%ObjProto_toString%]]                                       | =Object.prototype.toString=     | The initial value of the "toString" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Object.prototype% ([[https://tc39.es/ecma262/#sec-object.prototype.tostring][19.1.3.6]]); i.e., %Object.prototype.toString%                                                                   |
| [[https://tc39.es/ecma262/#sec-object.prototype.valueof][%ObjProto_valueOf%]]                                         | =Object.prototype.valueOf=      | The initial value of the "valueOf" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Object.prototype% ([[https://tc39.es/ecma262/#sec-object.prototype.valueof][19.1.3.7]]); i.e., %Object.prototype.valueOf%                                                                      |
| [[https://tc39.es/ecma262/#sec-parsefloat-string][%parseFloat%]]                                                      | =parseFloat=                    | The =parseFloat= function ([[https://tc39.es/ecma262/#sec-parsefloat-string][18.2.4]])                                                                                                                                                                                                            |
| [[https://tc39.es/ecma262/#sec-parseint-string-radix][%parseInt%]]                                                    | =parseInt=                      | The =parseInt= function ([[https://tc39.es/ecma262/#sec-parseint-string-radix][18.2.5]])                                                                                                                                                                                                          |
| [[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]                                                       | =Promise=                       | The =Promise= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-promise-constructor][25.6.3]])                                                                                                                                                                |
| [[https://tc39.es/ecma262/#sec-properties-of-the-promise-prototype-object][%PromisePrototype%]]                       | =Promise.prototype=             | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]; i.e., %Promise.prototype%                                                                                                    |
| [[https://tc39.es/ecma262/#sec-promise.prototype.then][%PromiseProto_then%]]                                          | =Promise.prototype.then=        | The initial value of the "then" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Promise.prototype% ([[https://tc39.es/ecma262/#sec-promise.prototype.then][25.6.5.4]]); i.e., %Promise.prototype.then%                                                                            |
| [[https://tc39.es/ecma262/#sec-promise.all][%Promise_all%]]                                                           | =Promise.all=                   | The initial value of the "all" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]] ([[https://tc39.es/ecma262/#sec-promise.all][25.6.4.1]]); i.e., %Promise.all%                                                       |
| [[https://tc39.es/ecma262/#sec-promise.reject][%Promise_reject%]]                                                     | =Promise.reject=                | The initial value of the "reject" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]] ([[https://tc39.es/ecma262/#sec-promise.reject][25.6.4.5]]); i.e., %Promise.reject%                                              |
| [[https://tc39.es/ecma262/#sec-promise.resolve][%Promise_resolve%]]                                                   | =Promise.resolve=               | The initial value of the "resolve" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]] ([[https://tc39.es/ecma262/#sec-promise.resolve][25.6.4.6]]); i.e., %Promise.resolve%                                           |
| [[https://tc39.es/ecma262/#sec-proxy-constructor][%Proxy%]]                                                           | =Proxy=                         | The =Proxy= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-proxy-constructor][26.2.1]])                                                                                                                                                                    |
| %RangeError%                                                                                                          | =RangeError=                    | The =RangeError= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror][19.5.5.2]])                                                                                                                           |
| %RangeErrorPrototype%                                                                                                 | =RangeError.prototype=          | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %RangeError%; i.e., %RangeError.prototype%                                                                                                                                                    |
| %ReferenceError%                                                                                                      | =ReferenceError=                | The =ReferenceError= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-referenceerror][19.5.5.3]])                                                                                                                   |
| %ReferenceErrorPrototype%                                                                                             | =ReferenceError.prototype=      | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %ReferenceError%; i.e., %ReferenceError.prototype%                                                                                                                                            |
| [[https://tc39.es/ecma262/#sec-reflect-object][%Reflect%]]                                                            | =Reflect=                       | The =Reflect= object ([[https://tc39.es/ecma262/#sec-reflect-object][26.1]])                                                                                                                                                                                                                      |
| [[https://tc39.es/ecma262/#sec-regexp-constructor][%RegExp%]]                                                         | =RegExp=                        | The =RegExp= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-regexp-constructor][21.2.3]])                                                                                                                                                                  |
| [[https://tc39.es/ecma262/#sec-properties-of-the-regexp-prototype-object][%RegExpPrototype%]]                         | =RegExp.prototype=              | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-regexp-constructor][%RegExp%]]; i.e., %RegExp.prototype%                                                                                                       |
| [[https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%-object][%RegExpStringIteratorPrototype%]]              |                                 | The prototype of RegExp String Iterator objects ([[https://tc39.es/ecma262/#sec-regexp-string-iterator-objects][21.2.7]])                                                                                                                                                                         |
| [[https://tc39.es/ecma262/#sec-set-constructor][%Set%]]                                                               | =Set=                           | The =Set= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-set-constructor][23.2.1]])                                                                                                                                                                        |
| [[https://tc39.es/ecma262/#sec-%setiteratorprototype%-object][%SetIteratorPrototype%]]                                |                                 | The prototype of Set iterator objects ([[https://tc39.es/ecma262/#sec-set-iterator-objects][23.2.5]])                                                                                                                                                                                             |
| [[https://tc39.es/ecma262/#sec-properties-of-the-set-prototype-object][%SetPrototype%]]                               | =Set.prototype=                 | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-set-constructor][%Set%]]; i.e., %Set.prototype%                                                                                                                |
| [[https://tc39.es/ecma262/#sec-sharedarraybuffer-constructor][%SharedArrayBuffer%]]                                   | =SharedArrayBuffer=             | The =SharedArrayBuffer= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-sharedarraybuffer-constructor][24.2.2]])                                                                                                                                            |
| [[https://tc39.es/ecma262/#sec-properties-of-the-sharedarraybuffer-prototype-object][%SharedArrayBufferPrototype%]]   | =SharedArrayBuffer.prototype=   | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-sharedarraybuffer-constructor][%SharedArrayBuffer%]]; i.e., %SharedArrayBuffer.prototype%                                                                      |
| [[https://tc39.es/ecma262/#sec-string-constructor][%String%]]                                                         | =String=                        | The =String= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-string-constructor][21.1.1]])                                                                                                                                                                  |
| [[https://tc39.es/ecma262/#sec-%stringiteratorprototype%-object][%StringIteratorPrototype%]]                          |                                 | The prototype of String iterator objects ([[https://tc39.es/ecma262/#sec-string-iterator-objects][21.1.5]])                                                                                                                                                                                       |
| [[https://tc39.es/ecma262/#sec-properties-of-the-string-prototype-object][%StringPrototype%]]                         | =String.prototype=              | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-string-constructor][%String%]]; i.e., %String.prototype%                                                                                                       |
| [[https://tc39.es/ecma262/#sec-symbol-constructor][%Symbol%]]                                                         | =Symbol=                        | The =Symbol= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-symbol-constructor][19.4.1]])                                                                                                                                                                  |
| [[https://tc39.es/ecma262/#sec-properties-of-the-symbol-prototype-object][%SymbolPrototype%]]                         | =Symbol.prototype=              | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-symbol-constructor][%Symbol%]] ([[https://tc39.es/ecma262/#sec-properties-of-the-symbol-prototype-object][19.4.3]]); i.e., %Symbol.prototype%                  |
| %SyntaxError%                                                                                                         | =SyntaxError=                   | The =SyntaxError= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-syntaxerror][19.5.5.4]])                                                                                                                         |
| %SyntaxErrorPrototype%                                                                                                | =SyntaxError.prototype=         | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %SyntaxError%; i.e., %SyntaxError.prototype%                                                                                                                                                  |
| [[https://tc39.es/ecma262/#sec-%throwtypeerror%][%ThrowTypeError%]]                                                   |                                 | A [[https://tc39.es/ecma262/#function-object][function object]] that unconditionally throws a new instance of %TypeError%                                                                                                                                                                         |
| [[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]                                          |                                 | The super class of all typed Array constructors ([[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][22.2.1]])                                                                                                                                                                          |
| [[https://tc39.es/ecma262/#sec-properties-of-the-%typedarrayprototype%-object][%TypedArrayPrototype%]]                |                                 | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]; i.e., [[https://tc39.es/ecma262/#sec-properties-of-the-%typedarrayprototype%-object][%TypedArray.prototype%]]   |
| %TypeError%                                                                                                           | =TypeError=                     | The =TypeError= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror][19.5.5.5]])                                                                                                                             |
| %TypeErrorPrototype%                                                                                                  | =TypeError.prototype=           | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %TypeError%; i.e., %TypeError.prototype%                                                                                                                                                      |
| %Uint8Array%                                                                                                          | =Uint8Array=                    | The =Uint8Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                                |
| %Uint8ArrayPrototype%                                                                                                 | =Uint8Array.prototype=          | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Uint8Array%; i.e., %Uint8Array.prototype%                                                                                                                                                    |
| %Uint8ClampedArray%                                                                                                   | =Uint8ClampedArray=             | The =Uint8ClampedArray= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                         |
| %Uint8ClampedArrayPrototype%                                                                                          | =Uint8ClampedArray.prototype=   | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Uint8ClampedArray%; i.e., %Uint8ClampedArray.prototype%                                                                                                                                      |
| %Uint16Array%                                                                                                         | =Uint16Array=                   | The =Uint16Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                               |
| %Uint16ArrayPrototype%                                                                                                | =Uint16Array.prototype=         | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Uint16Array%; i.e., %Uint16Array.prototype%                                                                                                                                                  |
| %Uint32Array%                                                                                                         | =Uint32Array=                   | The =Uint32Array= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-typedarray-objects][22.2]])                                                                                                                                                               |
| %Uint32ArrayPrototype%                                                                                                | =Uint32Array.prototype=         | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %Uint32Array%; i.e., %Uint32Array.prototype%                                                                                                                                                  |
| %URIError%                                                                                                            | =URIError=                      | The =URIError= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-urierror][19.5.5.6]])                                                                                                                               |
| %URIErrorPrototype%                                                                                                   | =URIError.prototype=            | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of %URIError%; i.e., %URIError.prototype%                                                                                                                                                        |
| [[https://tc39.es/ecma262/#sec-weakmap-constructor][%WeakMap%]]                                                       | =WeakMap=                       | The =WeakMap= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-weakmap-constructor][23.3.1]])                                                                                                                                                                |
| [[https://tc39.es/ecma262/#sec-properties-of-the-weakmap-prototype-object][%WeakMapPrototype%]]                       | =WeakMap.prototype=             | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-weakmap-constructor][%WeakMap%]]; i.e., %WeakMap.prototype%                                                                                                    |
| [[https://tc39.es/ecma262/#sec-weakset-constructor][%WeakSet%]]                                                       | =WeakSet=                       | The =WeakSet= [[https://tc39.es/ecma262/#constructor][constructor]] ([[https://tc39.es/ecma262/#sec-weakset-constructor][23.4.1]])                                                                                                                                                                |
| [[https://tc39.es/ecma262/#sec-properties-of-the-weakset-prototype-object][%WeakSetPrototype%]]                       | =WeakSet.prototype=             | The initial value of the "prototype" [[https://tc39.es/ecma262/#sec-object-type][data property]] of [[https://tc39.es/ecma262/#sec-weakset-constructor][%WeakSet%]]; i.e., %WeakSet.prototype%                                                                                                    |

* 6.2ECMAScript Specification Types
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-specification-types
  :END:

A specification type corresponds to meta-values that are used within
algorithms to describe the semantics of ECMAScript language constructs
and ECMAScript language types. The specification types include
[[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]],
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]],
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]],
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]],
[[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]],
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]], and [[https://tc39.es/ecma262/#sec-data-blocks][Data Block]].
Specification type values are specification artefacts that do not
necessarily correspond to any specific entity within an ECMAScript
implementation. Specification type values may be used to describe
intermediate results of ECMAScript expression evaluation but such values
cannot be stored as properties of objects or values of ECMAScript
language variables.

* 6.2.1The List and Record Specification Types
  :PROPERTIES:
  :CUSTOM_ID: the-list-and-record-specification-types
  :END:

The List type is used to explain the evaluation of argument lists (see
[[https://tc39.es/ecma262/#sec-argument-lists][12.3.6]]) in =new=
expressions, in function calls, and in other algorithms where a simple
ordered list of values is needed. Values of the List type are simply
ordered sequences of list elements containing the individual values.
These sequences may be of any length. The elements of a list may be
randomly accessed using 0-origin indices. For notational convenience an
array-like syntax can be used to access List elements. For example,
=arguments=[2] is shorthand for saying the 3^{rd} element of the List
=arguments=.

For notational convenience within this specification, a literal syntax
can be used to express a new List value. For example, « 1, 2 » defines a
List value that has two elements each of which is initialized to a
specific value. A new empty List can be expressed as « ».

The Record type is used to describe data aggregations within the
algorithms of this specification. A Record type value consists of one or
more named fields. The value of each field is either an ECMAScript value
or an abstract value represented by a name associated with the Record
type. Field names are always enclosed in double brackets, for example
[[Value]].

For notational convenience within this specification, an object
literal-like syntax can be used to express a Record value. For example,
{ [[Field1]]: 42, [[Field2]]: false, [[Field3]]: empty } defines a
Record value that has three fields, each of which is initialized to a
specific value. Field name order is not significant. Any fields that are
not explicitly listed are considered to be absent.

In specification text and algorithms, dot notation may be used to refer
to a specific field of a Record value. For example, if R is the record
shown in the previous paragraph then R.[[Field2]] is shorthand for “the
field of R named [[Field2]]”.

Schema for commonly used Record field combinations may be named, and
that name may be used as a prefix to a literal Record value to identify
the specific kind of aggregations that is being described. For example:
PropertyDescriptor { [[Value]]: 42, [[Writable]]: false,
[[Configurable]]: true }.

* 6.2.2The Set and Relation Specification Types
  :PROPERTIES:
  :CUSTOM_ID: the-set-and-relation-specification-types
  :END:

The Set type is used to explain a collection of unordered elements for
use in the [[https://tc39.es/ecma262/#sec-memory-model][memory model]].
Values of the Set type are simple collections of elements, where no
element appears more than once. Elements may be added to and removed
from Sets. Sets may be unioned, intersected, or subtracted from each
other.

The Relation type is used to explain constraints on Sets. Values of the
Relation type are Sets of ordered pairs of values from its value domain.
For example, a Relation on events is a set of ordered pairs of events.
For a Relation =R= and two values =a= and =b= in the value domain of
=R=, =a= =R= =b= is shorthand for saying the ordered pair (=a=, =b=) is
a member of =R=. A Relation is least with respect to some conditions
when it is the smallest Relation that satisfies those conditions.

A strict partial order is a Relation value =R= that satisfies the
following.

- For all =a=, =b=, and =c= in =R='s domain:

  - It is not the case that =a= =R= =a=, and
  - If =a= =R= =b= and =b= =R= =c=, then =a= =R= =c=.

Note 1

The two properties above are called, in order, irreflexivity and
transitivity.

A strict total order is a Relation value =R= that satisfies the
following.

- For all =a=, =b=, and =c= in =R='s domain:

  - =a= is identical to =b= or =a= =R= =b= or =b= =R= =a=, and
  - It is not the case that =a= =R= =a=, and
  - If =a= =R= =b= and =b= =R= =c=, then =a= =R= =c=.

Note 2

The three properties above are called, in order, totality,
irreflexivity, and transitivity.

* 6.2.3The Completion Record Specification Type
  :PROPERTIES:
  :CUSTOM_ID: the-completion-record-specification-type
  :END:

The Completion type is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
used to explain the runtime propagation of values and control flow such
as the behaviour of statements (=break=, =continue=, =return= and
=throw=) that perform nonlocal transfers of control.

Values of the Completion type are
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
values whose fields are defined as by
[[https://tc39.es/ecma262/#table-8][Table 9]]. Such values are referred
to as Completion Records.

Table 9:
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] Fields
| Field Name   | Value                                                                                                | Meaning                                            |
|--------------+------------------------------------------------------------------------------------------------------+----------------------------------------------------|
| [[Type]]     | One of normal, break, continue, return, or throw                                                     | The type of completion that occurred.              |
| [[Value]]    | any [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript language value]] or empty   | The value that was produced.                       |
| [[Target]]   | any ECMAScript string or empty                                                                       | The target label for directed control transfers.   |

The term “abrupt completion” refers to any completion with a [[Type]]
value other than normal.

* 6.2.3.1Await
  :PROPERTIES:
  :CUSTOM_ID: await
  :END:

Algorithm steps that say

1. Let =completion= be
   [[https://tc39.es/ecma262/#await][Await]](=value=).

mean the same thing as:

1.  Let =asyncContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
2.  Let =promise= be
    ? [[https://tc39.es/ecma262/#sec-promise-resolve][PromiseResolve]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]],
    =value=).
3.  Let =stepsFulfilled= be the algorithm steps defined in
    [[https://tc39.es/ecma262/#await-fulfilled][Await Fulfilled
    Functions]].
4.  Let =onFulfilled= be
    ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsFulfilled=,
    « [[AsyncContext]] »).
5.  Set =onFulfilled=.[[AsyncContext]] to =asyncContext=.
6.  Let =stepsRejected= be the algorithm steps defined in
    [[https://tc39.es/ecma262/#await-rejected][Await Rejected
    Functions]].
7.  Let =onRejected= be
    ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsRejected=,
    « [[AsyncContext]] »).
8.  Set =onRejected=.[[AsyncContext]] to =asyncContext=.
9.  Perform
    ! [[https://tc39.es/ecma262/#sec-performpromisethen][PerformPromiseThen]](=promise=,
    =onFulfilled=, =onRejected=).
10. Remove =asyncContext= from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and restore the
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]] that is at the top of the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] as the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
11. Set the code evaluation state of =asyncContext= such that when
    evaluation is resumed with a
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
    =completion=, the following steps of the algorithm that invoked
    [[https://tc39.es/ecma262/#await][Await]] will be performed, with
    =completion= available.
12. Return.
13. NOTE: This returns to the evaluation of the operation that had most
    previously resumed evaluation of =asyncContext=.

where all variables in the above steps, with the exception of
=completion=, are ephemeral and visible only in the steps pertaining to
Await.

Note

Await can be combined with the =?= and =!= prefixes, so that for example

1. Let =result= be ? [[https://tc39.es/ecma262/#await][Await]](=value=).

means the same thing as:

1. Let =result= be [[https://tc39.es/ecma262/#await][Await]](=value=).
2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=result=).

* 6.2.3.1.1Await Fulfilled Functions
  :PROPERTIES:
  :CUSTOM_ID: await-fulfilled-functions
  :END:

An [[https://tc39.es/ecma262/#await][Await]] fulfilled function is an
anonymous built-in function that is used as part of the
[[https://tc39.es/ecma262/#await][Await]] specification device to
deliver the promise fulfillment value to the caller as a normal
completion. Each [[https://tc39.es/ecma262/#await][Await]] fulfilled
function has an [[AsyncContext]] internal slot.

When an [[https://tc39.es/ecma262/#await][Await]] fulfilled function is
called with argument =value=, the following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =asyncContext= be =F=.[[AsyncContext]].
3. Let =prevContext= be the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
4. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =prevContext=.
5. Push =asyncContext= onto the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]]; =asyncContext= is now the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
6. Resume the suspended evaluation of =asyncContext= using
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=value=)
   as the result of the operation that suspended it.
7. [[https://tc39.es/ecma262/#assert][Assert]]: When we reach this step,
   =asyncContext= has already been removed from the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]] and =prevContext= is the currently
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
8. Return undefined.

The "length" property of an [[https://tc39.es/ecma262/#await][Await]]
fulfilled function is 1.

* 6.2.3.1.2Await Rejected Functions
  :PROPERTIES:
  :CUSTOM_ID: await-rejected-functions
  :END:

An [[https://tc39.es/ecma262/#await][Await]] rejected function is an
anonymous built-in function that is used as part of the
[[https://tc39.es/ecma262/#await][Await]] specification device to
deliver the promise rejection reason to the caller as an abrupt throw
completion. Each [[https://tc39.es/ecma262/#await][Await]] rejected
function has an [[AsyncContext]] internal slot.

When an [[https://tc39.es/ecma262/#await][Await]] rejected function is
called with argument =reason=, the following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =asyncContext= be =F=.[[AsyncContext]].
3. Let =prevContext= be the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
4. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =prevContext=.
5. Push =asyncContext= onto the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]]; =asyncContext= is now the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
6. Resume the suspended evaluation of =asyncContext= using
   [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](=reason=)
   as the result of the operation that suspended it.
7. [[https://tc39.es/ecma262/#assert][Assert]]: When we reach this step,
   =asyncContext= has already been removed from the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]] and =prevContext= is the currently
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
8. Return undefined.

The "length" property of an [[https://tc39.es/ecma262/#await][Await]]
rejected function is 1.

* 6.2.3.2NormalCompletion
  :PROPERTIES:
  :CUSTOM_ID: normalcompletion
  :END:

The abstract operation NormalCompletion with a single =argument=, such
as:

1. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=argument=).

Is a shorthand that is defined as follows:

1. Return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
   { [[Type]]: normal, [[Value]]: =argument=, [[Target]]: empty }.

* 6.2.3.3ThrowCompletion
  :PROPERTIES:
  :CUSTOM_ID: throwcompletion
  :END:

The abstract operation ThrowCompletion with a single =argument=, such
as:

1. Return
   [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](=argument=).

Is a shorthand that is defined as follows:

1. Return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
   { [[Type]]: throw, [[Value]]: =argument=, [[Target]]: empty }.

* 6.2.3.4UpdateEmpty ( =completionRecord=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: updateempty-completionrecord-value
  :END:

The abstract operation UpdateEmpty with arguments =completionRecord= and
=value= performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: If
   =completionRecord=.[[Type]] is either return or throw, then
   =completionRecord=.[[Value]] is not empty.
2. If =completionRecord=.[[Value]] is not empty, return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completionRecord=).
3. Return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
   { [[Type]]: =completionRecord=.[[Type]], [[Value]]: =value=,
   [[Target]]: =completionRecord=.[[Target]] }.

* 6.2.4The Reference Specification Type
  :PROPERTIES:
  :CUSTOM_ID: the-reference-specification-type
  :END:

Note

The Reference type is used to explain the behaviour of such operators as
=delete=, =typeof=, the assignment operators, the =super=
[[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]]
and other language features. For example, the left-hand operand of an
assignment is expected to produce a reference.

A Reference is a resolved name or property binding. A Reference consists
of three components, the base value component, the referenced name
component, and the Boolean-valued strict reference flag. The base value
component is either undefined, an Object, a Boolean, a String, a Symbol,
a Number, a BigInt, or an
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]. A base value component of undefined indicates that the
Reference could not be resolved to a binding. The referenced name
component is a String or Symbol value.

A Super Reference is a Reference that is used to represent a name
binding that was expressed using the super
[[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]]. A
[[https://tc39.es/ecma262/#super-reference][Super Reference]] has an
additional thisValue component, and its base value component will never
be an [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]].

The following
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are used in this specification to operate on references:

<<ao-getbase>>
* 6.2.4.1GetBase ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: getbase-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
2. Return the base value component of =V=.

<<ao-getreferencedname>>
* 6.2.4.2GetReferencedName ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: getreferencedname-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
2. Return the referenced name component of =V=.

<<ao-isstrictreference>>
* 6.2.4.3IsStrictReference ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: isstrictreference-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
2. Return the strict reference flag of =V=.

<<ao-hasprimitivebase>>
* 6.2.4.4HasPrimitiveBase ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: hasprimitivebase-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V='s
   base value component) is Boolean, String, Symbol, BigInt, or Number,
   return true; otherwise return false.

<<ao-ispropertyreference>>
* 6.2.4.5IsPropertyReference ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: ispropertyreference-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
2. If either the base value component of =V= is an Object or
   [[https://tc39.es/ecma262/#sec-hasprimitivebase][HasPrimitiveBase]](=V=)
   is true, return true; otherwise return false.

<<ao-isunresolvablereference>>
* 6.2.4.6IsUnresolvableReference ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: isunresolvablereference-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
2. If the base value component of =V= is undefined, return true;
   otherwise return false.

<<ao-issuperreference>>
* 6.2.4.7IsSuperReference ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: issuperreference-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
2. If =V= has a thisValue component, return true; otherwise return
   false.

* 6.2.4.8GetValue ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: getvalue-v
  :END:

1. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=V=).
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is not
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]],
   return =V=.
3. Let =base= be [[https://tc39.es/ecma262/#sec-getbase][GetBase]](=V=).
4. If
   [[https://tc39.es/ecma262/#sec-isunresolvablereference][IsUnresolvableReference]](=V=)
   is true, throw a ReferenceError exception.
5. If
   [[https://tc39.es/ecma262/#sec-ispropertyreference][IsPropertyReference]](=V=)
   is true, then

   1. If
      [[https://tc39.es/ecma262/#sec-hasprimitivebase][HasPrimitiveBase]](=V=)
      is true, then

      1. [[https://tc39.es/ecma262/#assert][Assert]]: In this case,
         =base= will never be undefined or null.
      2. Set =base= to
         ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=base=).

   2. Return ?
      =base=.[[Get]]([[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=V=),
      [[https://tc39.es/ecma262/#sec-getthisvalue][GetThisValue]](=V=)).

6. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =base= is an
      [[https://tc39.es/ecma262/#sec-environment-records][Environment
      Record]].
   2. Return ?
      =base=.GetBindingValue([[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=V=),
      [[https://tc39.es/ecma262/#sec-isstrictreference][IsStrictReference]](=V=))
      (see [[https://tc39.es/ecma262/#sec-environment-records][8.1.1]]).

Note

The object that may be created in step 5.a.ii is not accessible outside
of the above abstract operation and the ordinary object [[Get]] internal
method. An implementation might choose to avoid the actual creation of
the object.

* 6.2.4.9PutValue ( =V=, =W= )
  :PROPERTIES:
  :CUSTOM_ID: putvalue-v-w
  :END:

1. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=V=).
2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=W=).
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is not
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]],
   throw a ReferenceError exception.
4. Let =base= be [[https://tc39.es/ecma262/#sec-getbase][GetBase]](=V=).
5. If
   [[https://tc39.es/ecma262/#sec-isunresolvablereference][IsUnresolvableReference]](=V=)
   is true, then

   1. If
      [[https://tc39.es/ecma262/#sec-isstrictreference][IsStrictReference]](=V=)
      is true, then

      1. Throw a ReferenceError exception.

   2. Let =globalObj= be
      [[https://tc39.es/ecma262/#sec-getglobalobject][GetGlobalObject]]().
   3. Return
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=globalObj=,
      [[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=V=),
      =W=, false).

6. Else if
   [[https://tc39.es/ecma262/#sec-ispropertyreference][IsPropertyReference]](=V=)
   is true, then

   1. If
      [[https://tc39.es/ecma262/#sec-hasprimitivebase][HasPrimitiveBase]](=V=)
      is true, then

      1. [[https://tc39.es/ecma262/#assert][Assert]]: In this case,
         =base= will never be undefined or null.
      2. Set =base= to
         ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=base=).

   2. Let =succeeded= be ?
      =base=.[[Set]]([[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=V=),
      =W=,
      [[https://tc39.es/ecma262/#sec-getthisvalue][GetThisValue]](=V=)).
   3. If =succeeded= is false and
      [[https://tc39.es/ecma262/#sec-isstrictreference][IsStrictReference]](=V=)
      is true, throw a TypeError exception.
   4. Return.

7. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =base= is an
      [[https://tc39.es/ecma262/#sec-environment-records][Environment
      Record]].
   2. Return ?
      =base=.SetMutableBinding([[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=V=),
      =W=,
      [[https://tc39.es/ecma262/#sec-isstrictreference][IsStrictReference]](=V=))
      (see [[https://tc39.es/ecma262/#sec-environment-records][8.1.1]]).

Note

The object that may be created in step 6.a.ii is not accessible outside
of the above algorithm and the ordinary object [[Set]] internal method.
An implementation might choose to avoid the actual creation of that
object.

* 6.2.4.10GetThisValue ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: getthisvalue-v
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertyreference][IsPropertyReference]](=V=)
   is true.
2. If
   [[https://tc39.es/ecma262/#sec-issuperreference][IsSuperReference]](=V=)
   is true, then

   1. Return the value of the thisValue component of the reference =V=.

3. Return [[https://tc39.es/ecma262/#sec-getbase][GetBase]](=V=).

* 6.2.4.11InitializeReferencedBinding ( =V=, =W= )
  :PROPERTIES:
  :CUSTOM_ID: initializereferencedbinding-v-w
  :END:

1. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=V=).
2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=W=).
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is
   [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
4. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isunresolvablereference][IsUnresolvableReference]](=V=)
   is false.
5. Let =base= be [[https://tc39.es/ecma262/#sec-getbase][GetBase]](=V=).
6. [[https://tc39.es/ecma262/#assert][Assert]]: =base= is an
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]].
7. Return
   =base=.InitializeBinding([[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=V=),
   =W=).

* 6.2.5The Property Descriptor Specification Type
  :PROPERTIES:
  :CUSTOM_ID: the-property-descriptor-specification-type
  :END:

The Property Descriptor type is used to explain the manipulation and
reification of Object property attributes. Values of the Property
Descriptor type are Records. Each field's name is an attribute name and
its value is a corresponding attribute value as specified in
[[https://tc39.es/ecma262/#sec-property-attributes][6.1.7.1]]. In
addition, any field may be present or absent. The schema name used
within this specification to tag literal descriptions of Property
Descriptor records is “PropertyDescriptor”.

Property Descriptor values may be further classified as data Property
Descriptors and accessor Property Descriptors based upon the existence
or use of certain fields. A data Property Descriptor is one that
includes any fields named either [[Value]] or [[Writable]]. An accessor
Property Descriptor is one that includes any fields named either [[Get]]
or [[Set]]. Any Property Descriptor may have fields named [[Enumerable]]
and [[Configurable]]. A Property Descriptor value may not be both a data
Property Descriptor and an accessor Property Descriptor; however, it may
be neither. A generic Property Descriptor is a Property Descriptor value
that is neither a data Property Descriptor nor an accessor Property
Descriptor. A fully populated Property Descriptor is one that is either
an accessor Property Descriptor or a data Property Descriptor and that
has all of the fields that correspond to the property attributes defined
in either [[https://tc39.es/ecma262/#table-2][Table 3]] or
[[https://tc39.es/ecma262/#table-3][Table 4]].

The following
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are used in this specification to operate upon Property
Descriptor values:

* 6.2.5.1IsAccessorDescriptor ( =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: isaccessordescriptor-desc
  :END:

When the abstract operation IsAccessorDescriptor is called with
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. If =Desc= is undefined, return false.
2. If both =Desc=.[[Get]] and =Desc=.[[Set]] are absent, return false.
3. Return true.

* 6.2.5.2IsDataDescriptor ( =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: isdatadescriptor-desc
  :END:

When the abstract operation IsDataDescriptor is called with
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. If =Desc= is undefined, return false.
2. If both =Desc=.[[Value]] and =Desc=.[[Writable]] are absent, return
   false.
3. Return true.

* 6.2.5.3IsGenericDescriptor ( =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: isgenericdescriptor-desc
  :END:

When the abstract operation IsGenericDescriptor is called with
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. If =Desc= is undefined, return false.
2. If
   [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=Desc=)
   and
   [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=Desc=)
   are both false, return true.
3. Return false.

* 6.2.5.4FromPropertyDescriptor ( =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: frompropertydescriptor-desc
  :END:

When the abstract operation FromPropertyDescriptor is called with
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1.  If =Desc= is undefined, return undefined.
2.  Let =obj= be
    [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =obj= is an extensible
    ordinary object with no own properties.
4.  If =Desc= has a [[Value]] field, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
       "value", =Desc=.[[Value]]).

5.  If =Desc= has a [[Writable]] field, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
       "writable", =Desc=.[[Writable]]).

6.  If =Desc= has a [[Get]] field, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
       "get", =Desc=.[[Get]]).

7.  If =Desc= has a [[Set]] field, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
       "set", =Desc=.[[Set]]).

8.  If =Desc= has an [[Enumerable]] field, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
       "enumerable", =Desc=.[[Enumerable]]).

9.  If =Desc= has a [[Configurable]] field, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
       "configurable", =Desc=.[[Configurable]]).

10. Return =obj=.

* 6.2.5.5ToPropertyDescriptor ( =Obj= )
  :PROPERTIES:
  :CUSTOM_ID: topropertydescriptor-obj
  :END:

When the abstract operation ToPropertyDescriptor is called with object
=Obj=, the following steps are taken:

1.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=Obj=)
    is not Object, throw a TypeError exception.
2.  Let =desc= be a new
    [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
    Descriptor]] that initially has no fields.
3.  Let =hasEnumerable= be
    ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=Obj=,
    "enumerable").
4.  If =hasEnumerable= is true, then

    1. Let =enumerable= be
       ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
       [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Obj=,
       "enumerable")).
    2. Set =desc=.[[Enumerable]] to =enumerable=.

5.  Let =hasConfigurable= be
    ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=Obj=,
    "configurable").
6.  If =hasConfigurable= is true, then

    1. Let =configurable= be
       ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
       [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Obj=,
       "configurable")).
    2. Set =desc=.[[Configurable]] to =configurable=.

7.  Let =hasValue= be
    ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=Obj=,
    "value").
8.  If =hasValue= is true, then

    1. Let =value= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Obj=, "value").
    2. Set =desc=.[[Value]] to =value=.

9.  Let =hasWritable= be
    ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=Obj=,
    "writable").
10. If =hasWritable= is true, then

    1. Let =writable= be
       ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
       [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Obj=,
       "writable")).
    2. Set =desc=.[[Writable]] to =writable=.

11. Let =hasGet= be
    ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=Obj=,
    "get").
12. If =hasGet= is true, then

    1. Let =getter= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Obj=, "get").
    2. If
       [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=getter=)
       is false and =getter= is not undefined, throw a TypeError
       exception.
    3. Set =desc=.[[Get]] to =getter=.

13. Let =hasSet= be
    ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=Obj=,
    "set").
14. If =hasSet= is true, then

    1. Let =setter= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Obj=, "set").
    2. If
       [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=setter=)
       is false and =setter= is not undefined, throw a TypeError
       exception.
    3. Set =desc=.[[Set]] to =setter=.

15. If =desc=.[[Get]] is present or =desc=.[[Set]] is present, then

    1. If =desc=.[[Value]] is present or =desc=.[[Writable]] is present,
       throw a TypeError exception.

16. Return =desc=.

* 6.2.5.6CompletePropertyDescriptor ( =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: completepropertydescriptor-desc
  :END:

When the abstract operation CompletePropertyDescriptor is called with
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =Desc= is a
   [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
   Descriptor]].
2. Let =like= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Value]]: undefined, [[Writable]]: false, [[Get]]: undefined,
   [[Set]]: undefined, [[Enumerable]]: false, [[Configurable]]: false }.
3. If
   [[https://tc39.es/ecma262/#sec-isgenericdescriptor][IsGenericDescriptor]](=Desc=)
   is true or
   [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=Desc=)
   is true, then

   1. If =Desc= does not have a [[Value]] field, set =Desc=.[[Value]] to
      =like=.[[Value]].
   2. If =Desc= does not have a [[Writable]] field, set
      =Desc=.[[Writable]] to =like=.[[Writable]].

4. Else,

   1. If =Desc= does not have a [[Get]] field, set =Desc=.[[Get]] to
      =like=.[[Get]].
   2. If =Desc= does not have a [[Set]] field, set =Desc=.[[Set]] to
      =like=.[[Set]].

5. If =Desc= does not have an [[Enumerable]] field, set
   =Desc=.[[Enumerable]] to =like=.[[Enumerable]].
6. If =Desc= does not have a [[Configurable]] field, set
   =Desc=.[[Configurable]] to =like=.[[Configurable]].
7. Return =Desc=.

* 6.2.6The Lexical Environment and Environment Record Specification
Types
  :PROPERTIES:
  :CUSTOM_ID: the-lexical-environment-and-environment-record-specification-types
  :END:

The [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]] and
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
types are used to explain the behaviour of name resolution in nested
functions and blocks. These types and the operations upon them are
defined in [[https://tc39.es/ecma262/#sec-lexical-environments][8.1]].

* 6.2.7Data Blocks
  :PROPERTIES:
  :CUSTOM_ID: data-blocks
  :END:

The Data Block specification type is used to describe a distinct and
mutable sequence of byte-sized (8 bit) numeric values. A Data Block
value is created with a fixed number of bytes that each have the initial
value 0.

For notational convenience within this specification, an array-like
syntax can be used to access the individual bytes of a Data Block value.
This notation presents a Data Block value as a 0-origined
[[https://tc39.es/ecma262/#integer][integer]]-indexed sequence of bytes.
For example, if =db= is a 5 byte Data Block value then =db=[2] can be
used to access its 3^{rd} byte.

A data block that resides in memory that can be referenced from multiple
agents concurrently is designated a Shared Data Block. A Shared Data
Block has an identity (for the purposes of equality testing Shared Data
Block values) that is /address-free/: it is tied not to the virtual
addresses the block is mapped to in any process, but to the set of
locations in memory that the block represents. Two data blocks are equal
only if the sets of the locations they contain are equal; otherwise,
they are not equal and the intersection of the sets of locations they
contain is empty. Finally, Shared Data Blocks can be distinguished from
Data Blocks.

The semantics of Shared Data Blocks is defined using Shared Data Block
events by the [[https://tc39.es/ecma262/#sec-memory-model][memory
model]].
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][Abstract
operations]] below introduce Shared Data Block events and act as the
interface between evaluation semantics and the event semantics of the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]]. The events
form a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]], on which the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]] acts as a
filter. Please consult the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]] for full
semantics.

Shared Data Block events are modeled by Records, defined in the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]].

The following
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are used in this specification to operate upon Data Block
values:

* 6.2.7.1CreateByteDataBlock ( =size= )
  :PROPERTIES:
  :CUSTOM_ID: createbytedatablock-size
  :END:

When the abstract operation CreateByteDataBlock is called with
[[https://tc39.es/ecma262/#integer][integer]] argument =size=, the
following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =size= ≥ 0.
2. Let =db= be a new [[https://tc39.es/ecma262/#sec-data-blocks][Data
   Block]] value consisting of =size= bytes. If it is impossible to
   create such a [[https://tc39.es/ecma262/#sec-data-blocks][Data
   Block]], throw a RangeError exception.
3. Set all of the bytes of =db= to 0.
4. Return =db=.

* 6.2.7.2CreateSharedByteDataBlock ( =size= )
  :PROPERTIES:
  :CUSTOM_ID: createsharedbytedatablock-size
  :END:

When the abstract operation CreateSharedByteDataBlock is called with
[[https://tc39.es/ecma262/#integer][integer]] argument =size=, the
following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =size= ≥ 0.
2. Let =db= be a new [[https://tc39.es/ecma262/#sec-data-blocks][Shared
   Data Block]] value consisting of =size= bytes. If it is impossible to
   create such a [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data
   Block]], throw a RangeError exception.
3. Let =execution= be the [[CandidateExecution]] field of the
   [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]]'s
   [[https://tc39.es/ecma262/#agent-record][Agent Record]].
4. Let =eventList= be the [[EventList]] field of the element in
   =execution=.[[EventsRecords]] whose [[AgentSignifier]] is
   [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
5. Let =zero= be « 0 ».
6. For each index =i= of =db=, do

   1. Append
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
      { [[Order]]: Init, [[NoTear]]: true, [[Block]]: =db=,
      [[ByteIndex]]: =i=, [[ElementSize]]: 1, [[Payload]]: =zero= } to
      =eventList=.

7. Return =db=.

* 6.2.7.3CopyDataBlockBytes ( =toBlock=, =toIndex=, =fromBlock=,
=fromIndex=, =count= )
  :PROPERTIES:
  :CUSTOM_ID: copydatablockbytes-toblock-toindex-fromblock-fromindex-count
  :END:

When the abstract operation CopyDataBlockBytes is called, the following
steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =fromBlock= and
   =toBlock= are distinct
   [[https://tc39.es/ecma262/#sec-data-blocks][Data Block]] or
   [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]]
   values.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =fromIndex=, =toIndex=,
   and =count= are [[https://tc39.es/ecma262/#integer][integer]] values
   ≥ 0.
3. Let =fromSize= be the number of bytes in =fromBlock=.
4. [[https://tc39.es/ecma262/#assert][Assert]]: =fromIndex= + =count= ≤
   =fromSize=.
5. Let =toSize= be the number of bytes in =toBlock=.
6. [[https://tc39.es/ecma262/#assert][Assert]]: =toIndex= + =count= ≤
   =toSize=.
7. Repeat, while =count= > 0

   1. If =fromBlock= is a
      [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]],
      then

      1. Let =execution= be the [[CandidateExecution]] field of the
         [[https://tc39.es/ecma262/#surrounding-agent][surrounding
         agent]]'s [[https://tc39.es/ecma262/#agent-record][Agent
         Record]].
      2. Let =eventList= be the [[EventList]] field of the element in
         =execution=.[[EventsRecords]] whose [[AgentSignifier]] is
         [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
      3. Let =bytes= be a
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         of length 1 that contains a nondeterministically chosen byte
         value.
      4. NOTE: In implementations, =bytes= is the result of a non-atomic
         read instruction on the underlying hardware. The nondeterminism
         is a semantic prescription of the
         [[https://tc39.es/ecma262/#sec-memory-model][memory model]] to
         describe observable behaviour of hardware with weak
         consistency.
      5. Let =readEvent= be
         [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
         { [[Order]]: Unordered, [[NoTear]]: true, [[Block]]:
         =fromBlock=, [[ByteIndex]]: =fromIndex=, [[ElementSize]]: 1 }.
      6. Append =readEvent= to =eventList=.
      7. Append
         [[https://tc39.es/ecma262/#sec-chosen-value-records][Chosen
         Value Record]] { [[Event]]: =readEvent=, [[ChosenValue]]:
         =bytes= } to =execution=.[[ChosenValues]].
      8. If =toBlock= is a
         [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data
         Block]], then

         1. Append
            [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
            { [[Order]]: Unordered, [[NoTear]]: true, [[Block]]:
            =toBlock=, [[ByteIndex]]: =toIndex=, [[ElementSize]]: 1,
            [[Payload]]: =bytes= } to =eventList=.

      9. Else,

         1. Set =toBlock=[=toIndex=] to =bytes=[0].

   2. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =toBlock= is not a
         [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data
         Block]].
      2. Set =toBlock=[=toIndex=] to =fromBlock=[=fromIndex=].

   3. Set =toIndex= to =toIndex= + 1.
   4. Set =fromIndex= to =fromIndex= + 1.
   5. Set =count= to =count= - 1.

8. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 7Abstract Operations
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations-1
  :END:

These operations are not a part of the ECMAScript language; they are
defined here to solely to aid the specification of the semantics of the
ECMAScript language. Other, more specialized
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are defined throughout this specification.

* 7.1Type Conversion
  :PROPERTIES:
  :CUSTOM_ID: type-conversion
  :END:

The ECMAScript language implicitly performs automatic type conversion as
needed. To clarify the semantics of certain constructs it is useful to
define a set of conversion
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]]. The conversion
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are polymorphic; they can accept a value of any
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language type]]. But no other specification types are used with these
operations.

The BigInt type has no implicit conversions in the ECMAScript language;
programmers must call BigInt explicitly to convert values from other
types.

<<table-9>>
* 7.1.1ToPrimitive ( =input= [ , =PreferredType= ] )
  :PROPERTIES:
  :CUSTOM_ID: toprimitive-input-preferredtype
  :END:

The abstract operation ToPrimitive takes an =input= argument and an
optional argument =PreferredType=. The abstract operation ToPrimitive
converts its =input= argument to a non-Object type. If an object is
capable of converting to more than one primitive type, it may use the
optional hint =PreferredType= to favour that type. Conversion occurs
according to the following algorithm:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =input= is an
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
   language value]].
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=input=)
   is Object, then

   1. If =PreferredType= is not present, let =hint= be "default".
   2. Else if =PreferredType= is hint String, let =hint= be "string".
   3. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =PreferredType= is
         hint Number.
      2. Let =hint= be "number".

   4. Let =exoticToPrim= be
      ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=input=,
      @@toPrimitive).
   5. If =exoticToPrim= is not undefined, then

      1. Let =result= be
         ? [[https://tc39.es/ecma262/#sec-call][Call]](=exoticToPrim=,
         =input=, « =hint= »).
      2. If
         [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=)
         is not Object, return =result=.
      3. Throw a TypeError exception.

   6. If =hint= is "default", set =hint= to "number".
   7. Return
      ? [[https://tc39.es/ecma262/#sec-ordinarytoprimitive][OrdinaryToPrimitive]](=input=,
      =hint=).

3. Return =input=.

Note

When ToPrimitive is called with no hint, then it generally behaves as if
the hint were Number. However, objects may over-ride this behaviour by
defining a @@toPrimitive method. Of the objects defined in this
specification only Date objects (see
[[https://tc39.es/ecma262/#sec-date.prototype-@@toprimitive][20.4.4.45]])
and Symbol objects (see
[[https://tc39.es/ecma262/#sec-symbol.prototype-@@toprimitive][19.4.3.5]])
over-ride the default ToPrimitive behaviour. Date objects treat no hint
as if the hint were String.

* 7.1.1.1OrdinaryToPrimitive ( =O=, =hint= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarytoprimitive-o-hint
  :END:

When the abstract operation OrdinaryToPrimitive is called with arguments
=O= and =hint=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=hint=)
   is String and its value is either "string" or "number".
3. If =hint= is "string", then

   1. Let =methodNames= be « "toString", "valueOf" ».

4. Else,

   1. Let =methodNames= be « "valueOf", "toString" ».

5. For each =name= in =methodNames= in
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   order, do

   1. Let =method= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =name=).
   2. If
      [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=method=)
      is true, then

      1. Let =result= be
         ? [[https://tc39.es/ecma262/#sec-call][Call]](=method=, =O=).
      2. If
         [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=)
         is not Object, return =result=.

6. Throw a TypeError exception.

* 7.1.2ToBoolean ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: toboolean-argument
  :END:

The abstract operation ToBoolean converts =argument= to a value of type
Boolean according to [[https://tc39.es/ecma262/#table-10][Table 10]]:

Table 10: [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]]
Conversions
| Argument Type   | Result                                                                                         |
|-----------------+------------------------------------------------------------------------------------------------|
| Undefined       | Return false.                                                                                  |
| Null            | Return false.                                                                                  |
| Boolean         | Return =argument=.                                                                             |
| Number          | If =argument= is +0, -0, or NaN, return false; otherwise return true.                          |
| String          | If =argument= is the empty String (its length is zero), return false; otherwise return true.   |
| Symbol          | Return true.                                                                                   |
| BigInt          | If =argument= is 0n, return false; otherwise return true.                                      |
| Object          | Return true.                                                                                   |

* 7.1.3ToNumeric ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: tonumeric-value
  :END:

The abstract operation ToNumeric returns =value= converted to a numeric
value of type Number or BigInt. This abstract operation functions as
follows:

1. Let =primValue= be
   ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=value=,
   hint Number).
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=primValue=)
   is BigInt, return =primValue=.
3. Return
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=primValue=).

* 7.1.4ToNumber ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: tonumber-argument
  :END:

The abstract operation ToNumber converts =argument= to a value of type
Number according to [[https://tc39.es/ecma262/#table-11][Table 11]]:

Table 11: [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]]
Conversions
| Argument Type   | Result                                                                                                        |
|-----------------+---------------------------------------------------------------------------------------------------------------|
| Undefined       | Return NaN.                                                                                                   |
| Null            | Return +0.                                                                                                    |
| Boolean         | If =argument= is true, return 1. If =argument= is false, return +0.                                           |
| Number          | Return =argument= (no conversion).                                                                            |
| String          | See grammar and conversion algorithm below.                                                                   |
| Symbol          | Throw a TypeError exception.                                                                                  |
| BigInt          | Throw a TypeError exception.                                                                                  |
| Object          | Apply the following steps:                                                                                    |
|                 |                                                                                                               |
|                 | 1. Let =primValue= be ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=argument=, hint Number).   |
|                 | 2. Return ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=primValue=).                                 |

* 7.1.4.1ToNumber Applied to the String Type
  :PROPERTIES:
  :CUSTOM_ID: tonumber-applied-to-the-string-type
  :END:

[[https://tc39.es/ecma262/#sec-tonumber][ToNumber]] applied to Strings
applies the following grammar to the input String interpreted as a
sequence of UTF-16 encoded code points
([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]]).
If the grammar cannot interpret the String as an expansion of
[[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]],
then the result of [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]]
is NaN.

Note 1

The terminal symbols of this grammar are all composed of characters in
the Unicode Basic Multilingual Plane (BMP). Therefore, the result of
[[https://tc39.es/ecma262/#sec-tonumber][ToNumber]] will be NaN if the
string contains any
[[https://tc39.es/ecma262/#leading-surrogate][leading surrogate]] or
[[https://tc39.es/ecma262/#trailing-surrogate][trailing surrogate]] code
units, whether paired or unpaired.

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax
   :END:

[[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt
[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt[[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]][[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt
[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]:::[[https://tc39.es/ecma262/#prod-StrWhiteSpaceChar][StrWhiteSpaceChar]][[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt
[[https://tc39.es/ecma262/#prod-StrWhiteSpaceChar][StrWhiteSpaceChar]]:::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]
[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
+[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]] -[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::Infinity
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
.[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
All grammar symbols not explicitly defined above have the definitions
used in the Lexical Grammar for numeric literals
([[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]])

Note 2

Some differences should be noted between the syntax of a
[[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
and a [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]:

- A
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
  may include leading and/or trailing white space and/or line
  terminators.
- A
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
  that is decimal may have any number of leading =0= digits.
- A
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
  that is decimal may include a =+= or =-= to indicate its sign.
- A
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
  that is empty or contains only white space is converted to +0.
- =Infinity= and =-Infinity= are recognized as a
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
  but not as a
  [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]].
- A
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
  cannot include a
  [[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]].

* 7.1.4.1.1Runtime Semantics: MV
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-mv
  :END:

The conversion of a String to a
[[https://tc39.es/ecma262/#number-value][Number value]] is similar
overall to the determination of the
[[https://tc39.es/ecma262/#number-value][Number value]] for a numeric
literal (see
[[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]]), but
some of the details are different, so the process for converting a
String numeric literal to a value of Number type is given here. This
value is determined in two steps: first, a
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] (MV)
is derived from the String numeric literal; second, this
[[https://tc39.es/ecma262/#mathematical-value][mathematical value]] is
rounded as described below. The MV on any grammar symbol, not provided
below, is the MV for that symbol defined in
[[https://tc39.es/ecma262/#sec-static-semantics-mv][11.8.3.1]].

- The MV of
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]:::[empty]
  is 0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
- The MV of
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]
  is 0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
- The MV of
  [[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt[[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]][[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt
  is the MV of
  [[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]],
  no matter whether white space is present or not.
- The MV of
  [[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]:::+[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]:::-[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
  is the negative of the MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]].
  (Note that if the MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
  is 0, the negative of this MV is also 0. The rounding rule described
  below handles the conversion of this signless mathematical zero to a
  floating-point +0 or -0 as appropriate.)
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::Infinity
  is
  10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{10000_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}}
  (a value so large that it will round to +∞).
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
  is the MV of
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
  is the MV of the first
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] plus
  (the MV of the second
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] times
  10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{-_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}=n=}),
  where =n= is the
  [[https://tc39.es/ecma262/#mathematical-value][mathematical value]] of
  the number of code points in the second
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] times
  10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e=}, where =e= is the
  MV of [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
  is (the MV of the first
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] plus
  (the MV of the second
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] times
  10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{-_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}=n=}))
  times 10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e=}, where =n=
  is the [[https://tc39.es/ecma262/#mathematical-value][mathematical
  value]] of the number of code points in the second
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] and =e=
  is the MV of
  [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::.[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] times
  10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{-_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}=n=},
  where =n= is the
  [[https://tc39.es/ecma262/#mathematical-value][mathematical value]] of
  the number of code points in
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::.[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] times
  10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e= -_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}
  =n=}, where =n= is the
  [[https://tc39.es/ecma262/#mathematical-value][mathematical value]] of
  the number of code points in
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] and =e=
  is the MV of
  [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
- The MV of
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] times
  10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e=}, where =e= is the
  MV of [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].

Once the exact MV for a String numeric literal has been determined, it
is then rounded to a value of the Number type. If the MV is 0, then the
rounded value is +0 unless the first non white space code point in the
String numeric literal is =-=, in which case the rounded value is -0.
Otherwise, the rounded value must be the
[[https://tc39.es/ecma262/#number-value][Number value]] for the MV (in
the sense defined in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type][6.1.6.1]]),
unless the literal includes a
[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
and the literal has more than 20 significant digits, in which case the
[[https://tc39.es/ecma262/#number-value][Number value]] may be either
the [[https://tc39.es/ecma262/#number-value][Number value]] for the MV
of a literal produced by replacing each significant digit after the 20th
with a 0 digit or the [[https://tc39.es/ecma262/#number-value][Number
value]] for the MV of a literal produced by replacing each significant
digit after the 20th with a 0 digit and then incrementing the literal at
the 20th digit position. A digit is significant if it is not part of an
[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]] and

- it is not =0=; or
- there is a nonzero digit to its left and there is a nonzero digit, not
  in the [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]],
  to its right.

* 7.1.5ToInteger ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: tointeger-argument
  :END:

The abstract operation ToInteger converts =argument= to an integral
numeric value. This abstract operation functions as follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, return +0.
3. If =number= is +0, -0, +∞, or -∞, return =number=.
4. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
   that is the same sign as =number= and whose magnitude is
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=number=)).

* 7.1.6ToInt32 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: toint32-argument
  :END:

The abstract operation ToInt32 converts =argument= to one of 2^{32}
[[https://tc39.es/ecma262/#integer][integer]] values in the range
-2^{31} through 2^{31} - 1, inclusive. This abstract operation functions
as follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, +0, -0, +∞, or -∞, return +0.
3. Let =int= be the [[https://tc39.es/ecma262/#number-value][Number
   value]] that is the same sign as =number= and whose magnitude is
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=number=)).
4. Let =int32bit= be =int=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{32}.
5. If =int32bit= ≥ 2^{31}, return =int32bit= - 2^{32}; otherwise return
   =int32bit=.

Note

Given the above definition of ToInt32:

- The ToInt32 abstract operation is idempotent: if applied to a result
  that it produced, the second application leaves that value unchanged.
- ToInt32([[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=x=)) is
  equal to ToInt32(=x=) for all values of =x=. (It is to preserve this
  latter property that +∞ and -∞ are mapped to +0.)
- ToInt32 maps -0 to +0.

* 7.1.7ToUint32 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: touint32-argument
  :END:

The abstract operation ToUint32 converts =argument= to one of 2^{32}
[[https://tc39.es/ecma262/#integer][integer]] values in the range 0
through 2^{32} - 1, inclusive. This abstract operation functions as
follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, +0, -0, +∞, or -∞, return +0.
3. Let =int= be the [[https://tc39.es/ecma262/#number-value][Number
   value]] that is the same sign as =number= and whose magnitude is
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=number=)).
4. Let =int32bit= be =int=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{32}.
5. Return =int32bit=.

Note

Given the above definition of ToUint32:

- Step 5 is the only difference between ToUint32 and
  [[https://tc39.es/ecma262/#sec-toint32][ToInt32]].
- The ToUint32 abstract operation is idempotent: if applied to a result
  that it produced, the second application leaves that value unchanged.
- ToUint32([[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=x=)) is
  equal to ToUint32(=x=) for all values of =x=. (It is to preserve this
  latter property that +∞ and -∞ are mapped to +0.)
- ToUint32 maps -0 to +0.

* 7.1.8ToInt16 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: toint16-argument
  :END:

The abstract operation ToInt16 converts =argument= to one of 2^{16}
[[https://tc39.es/ecma262/#integer][integer]] values in the range -32768
through 32767, inclusive. This abstract operation functions as follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, +0, -0, +∞, or -∞, return +0.
3. Let =int= be the [[https://tc39.es/ecma262/#number-value][Number
   value]] that is the same sign as =number= and whose magnitude is
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=number=)).
4. Let =int16bit= be =int=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{16}.
5. If =int16bit= ≥ 2^{15}, return =int16bit= - 2^{16}; otherwise return
   =int16bit=.

* 7.1.9ToUint16 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: touint16-argument
  :END:

The abstract operation ToUint16 converts =argument= to one of 2^{16}
[[https://tc39.es/ecma262/#integer][integer]] values in the range 0
through 2^{16} - 1, inclusive. This abstract operation functions as
follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, +0, -0, +∞, or -∞, return +0.
3. Let =int= be the [[https://tc39.es/ecma262/#number-value][Number
   value]] that is the same sign as =number= and whose magnitude is
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=number=)).
4. Let =int16bit= be =int=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{16}.
5. Return =int16bit=.

Note

Given the above definition of ToUint16:

- The substitution of 2^{16} for 2^{32} in step 4 is the only difference
  between [[https://tc39.es/ecma262/#sec-touint32][ToUint32]] and
  ToUint16.
- ToUint16 maps -0 to +0.

* 7.1.10ToInt8 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: toint8-argument
  :END:

The abstract operation ToInt8 converts =argument= to one of 2^{8}
[[https://tc39.es/ecma262/#integer][integer]] values in the range -128
through 127, inclusive. This abstract operation functions as follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, +0, -0, +∞, or -∞, return +0.
3. Let =int= be the [[https://tc39.es/ecma262/#number-value][Number
   value]] that is the same sign as =number= and whose magnitude is
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=number=)).
4. Let =int8bit= be =int=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{8}.
5. If =int8bit= ≥ 2^{7}, return =int8bit= - 2^{8}; otherwise return
   =int8bit=.

* 7.1.11ToUint8 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: touint8-argument
  :END:

The abstract operation ToUint8 converts =argument= to one of 2^{8}
[[https://tc39.es/ecma262/#integer][integer]] values in the range 0
through 255, inclusive. This abstract operation functions as follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, +0, -0, +∞, or -∞, return +0.
3. Let =int= be the [[https://tc39.es/ecma262/#number-value][Number
   value]] that is the same sign as =number= and whose magnitude is
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=number=)).
4. Let =int8bit= be =int=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{8}.
5. Return =int8bit=.

* 7.1.12ToUint8Clamp ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: touint8clamp-argument
  :END:

The abstract operation ToUint8Clamp converts =argument= to one of 2^{8}
[[https://tc39.es/ecma262/#integer][integer]] values in the range 0
through 255, inclusive. This abstract operation functions as follows:

1. Let =number= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
2. If =number= is NaN, return +0.
3. If =number= ≤ 0, return +0.
4. If =number= ≥ 255, return 255.
5. Let =f= be [[https://tc39.es/ecma262/#eqn-floor][floor]](=number=).
6. If =f= + 0.5 < =number=, return =f= + 1.
7. If =number= < =f= + 0.5, return =f=.
8. If =f= is odd, return =f= + 1.
9. Return =f=.

Note

Unlike the other ECMAScript
[[https://tc39.es/ecma262/#integer][integer]] conversion abstract
operation, ToUint8Clamp rounds rather than truncates
non-[[https://tc39.es/ecma262/#integer][integer]] values and does not
convert +∞ to 0. ToUint8Clamp does “round half to even” tie-breaking.
This differs from =Math.round= which does “round half up” tie-breaking.

* 7.1.13ToBigInt ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: tobigint-argument
  :END:

The abstract operation ToBigInt converts its argument =argument= to a
BigInt value, or throws if an implicit conversion from Number would be
required.

1. Let =prim= be
   ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=argument=,
   hint Number).
2. Return the value that =prim= corresponds to in
   [[https://tc39.es/ecma262/#table-tobigint][Table 12]].

Table 12: BigInt Conversions
| Argument Type   | Result                                                                                     |
|-----------------+--------------------------------------------------------------------------------------------|
| Undefined       | Throw a TypeError exception.                                                               |
| Null            | Throw a TypeError exception.                                                               |
| Boolean         | Return =1n= if =prim= is true and =0n= if =prim= is false.                                 |
| BigInt          | Return =prim=.                                                                             |
| Number          | Throw a TypeError exception.                                                               |
| String          | 1. Let =n= be ! [[https://tc39.es/ecma262/#sec-stringtobigint][StringToBigInt]](=prim=).   |
|                 | 2. If =n= is NaN, throw a SyntaxError exception.                                           |
|                 | 3. Return =n=.                                                                             |
| Symbol          | Throw a TypeError exception.                                                               |

* 7.1.14StringToBigInt ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: stringtobigint-argument
  :END:

Apply the algorithm in
[[https://tc39.es/ecma262/#sec-tonumber-applied-to-the-string-type][7.1.4.1]]
with the following changes:

- Replace the
  [[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
  production with
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] to not
  allow Infinity, decimal points, or exponents.
- If the MV is NaN, return NaN, otherwise return the BigInt which
  exactly corresponds to the MV, rather than rounding to a Number.

* 7.1.15ToBigInt64 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: tobigint64-argument
  :END:

The abstract operation ToBigInt64 converts =argument= to one of 2^{64}
[[https://tc39.es/ecma262/#integer][integer]] values in the range
-2^{63} through 2^{63}-1, inclusive. This abstract operation functions
as follows:

1. Let =n= be
   ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=argument=).
2. Let =int64bit= be =n= [[https://tc39.es/ecma262/#eqn-modulo][modulo]]
   2^{64}.
3. If =int64bit= ≥ 2^{63}, return =int64bit= - 2^{64}; otherwise return
   =int64bit=.

* 7.1.16ToBigUint64 ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: tobiguint64-argument
  :END:

The abstract operation ToBigUint64 converts =argument= to one of 2^{64}
[[https://tc39.es/ecma262/#integer][integer]] values in the range 0
through 2^{64}-1, inclusive. This abstract operation functions as
follows:

1. Let =n= be
   ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=argument=).
2. Let =int64bit= be =n= [[https://tc39.es/ecma262/#eqn-modulo][modulo]]
   2^{64}.
3. Return =int64bit=.

* 7.1.17ToString ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: tostring-argument
  :END:

The abstract operation ToString converts =argument= to a value of type
String according to [[https://tc39.es/ecma262/#table-12][Table 13]]:

Table 13: [[https://tc39.es/ecma262/#sec-tostring][ToString]]
Conversions
| Argument Type   | Result                                                                                                        |
|-----------------+---------------------------------------------------------------------------------------------------------------|
| Undefined       | Return "undefined".                                                                                           |
| Null            | Return "null".                                                                                                |
| Boolean         | If =argument= is true, return "true".                                                                         |
|                 |                                                                                                               |
|                 | If =argument= is false, return "false".                                                                       |
| Number          | Return ! [[https://tc39.es/ecma262/#sec-numeric-types-number-tostring][Number::toString]](=argument=).        |
| String          | Return =argument=.                                                                                            |
| Symbol          | Throw a TypeError exception.                                                                                  |
| BigInt          | Return ! [[https://tc39.es/ecma262/#sec-numeric-types-bigint-tostring][BigInt::toString]](=argument=).        |
| Object          | Apply the following steps:                                                                                    |
|                 |                                                                                                               |
|                 | 1. Let =primValue= be ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=argument=, hint String).   |
|                 | 2. Return ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=primValue=).                                 |

* 7.1.18ToObject ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: toobject-argument
  :END:

The abstract operation ToObject converts =argument= to a value of type
Object according to [[https://tc39.es/ecma262/#table-13][Table 14]]:

Table 14: [[https://tc39.es/ecma262/#sec-toobject][ToObject]]
Conversions
| Argument Type   | Result                                                                                                                                                                                   |
|-----------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| Undefined       | Throw a TypeError exception.                                                                                                                                                             |
| Null            | Throw a TypeError exception.                                                                                                                                                             |
| Boolean         | Return a new Boolean object whose [[BooleanData]] internal slot is set to =argument=. See [[https://tc39.es/ecma262/#sec-boolean-objects][19.3]] for a description of Boolean objects.   |
| Number          | Return a new Number object whose [[NumberData]] internal slot is set to =argument=. See [[https://tc39.es/ecma262/#sec-number-objects][20.1]] for a description of Number objects.       |
| String          | Return a new String object whose [[StringData]] internal slot is set to =argument=. See [[https://tc39.es/ecma262/#sec-string-objects][21.1]] for a description of String objects.       |
| Symbol          | Return a new Symbol object whose [[SymbolData]] internal slot is set to =argument=. See [[https://tc39.es/ecma262/#sec-symbol-objects][19.4]] for a description of Symbol objects.       |
| BigInt          | Return a new BigInt object whose [[BigIntData]] internal slot is set to =argument=. See [[https://tc39.es/ecma262/#sec-bigint-objects][20.2]] for a description of BigInt objects.       |
| Object          | Return =argument=.                                                                                                                                                                       |

* 7.1.19ToPropertyKey ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: topropertykey-argument
  :END:

The abstract operation ToPropertyKey converts =argument= to a value that
can be used as a property key by performing the following steps:

1. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=argument=,
   hint String).
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=key=)
   is Symbol, then

   1. Return =key=.

3. Return ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=key=).

* 7.1.20ToLength ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: tolength-argument
  :END:

The abstract operation ToLength converts =argument= to an
[[https://tc39.es/ecma262/#integer][integer]] suitable for use as the
length of an
[[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like object]].
It performs the following steps:

1. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=argument=).
2. If =len= ≤ +0, return +0.
3. Return [[https://tc39.es/ecma262/#eqn-min][min]](=len=, 2^{53} - 1).

* 7.1.21CanonicalNumericIndexString ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: canonicalnumericindexstring-argument
  :END:

The abstract operation CanonicalNumericIndexString returns =argument=
converted to a numeric value if it is a String representation of a
Number that would be produced by
[[https://tc39.es/ecma262/#sec-tostring][ToString]], or the string "-0".
Otherwise, it returns undefined. This abstract operation functions as
follows:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is String.
2. If =argument= is "-0", return -0.
3. Let =n= be
   ! [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=argument=).
4. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](!
   [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=), =argument=)
   is false, return undefined.
5. Return =n=.

A /canonical numeric string/ is any String value for which the
CanonicalNumericIndexString abstract operation does not return
undefined.

* 7.1.22ToIndex ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: toindex-value
  :END:

The abstract operation ToIndex returns =value= argument converted to a
non-negative [[https://tc39.es/ecma262/#integer][integer]] if it is a
valid [[https://tc39.es/ecma262/#integer-index][integer index]] value.
This abstract operation functions as follows:

1. If =value= is undefined, then

   1. Let =index= be 0.

2. Else,

   1. Let =integerIndex= be
      ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=value=).
   2. If =integerIndex= < 0, throw a RangeError exception.
   3. Let =index= be
      ! [[https://tc39.es/ecma262/#sec-tolength][ToLength]](=integerIndex=).
   4. If
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=integerIndex=,
      =index=) is false, throw a RangeError exception.

3. Return =index=.

* 7.2Testing and Comparison Operations
  :PROPERTIES:
  :CUSTOM_ID: testing-and-comparison-operations
  :END:

* 7.2.1RequireObjectCoercible ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: requireobjectcoercible-argument
  :END:

The abstract operation RequireObjectCoercible throws an error if
=argument= is a value that cannot be converted to an Object using
[[https://tc39.es/ecma262/#sec-toobject][ToObject]]. It is defined by
[[https://tc39.es/ecma262/#table-14][Table 15]]:

Table 15:
[[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]]
Results
| Argument Type   | Result                         |
|-----------------+--------------------------------|
| Undefined       | Throw a TypeError exception.   |
| Null            | Throw a TypeError exception.   |
| Boolean         | Return =argument=.             |
| Number          | Return =argument=.             |
| String          | Return =argument=.             |
| Symbol          | Return =argument=.             |
| BigInt          | Return =argument=.             |
| Object          | Return =argument=.             |

* 7.2.2IsArray ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: isarray-argument
  :END:

The abstract operation IsArray takes one argument =argument=, and
performs the following steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is not Object, return false.
2. If =argument= is an Array
   [[https://tc39.es/ecma262/#exotic-object][exotic object]], return
   true.
3. If =argument= is a Proxy
   [[https://tc39.es/ecma262/#exotic-object][exotic object]], then

   1. If =argument=.[[ProxyHandler]] is null, throw a TypeError
      exception.
   2. Let =target= be =argument=.[[ProxyTarget]].
   3. Return
      ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=target=).

4. Return false.

* 7.2.3IsCallable ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: iscallable-argument
  :END:

The abstract operation IsCallable determines if =argument=, which must
be an
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]], is a callable function with a [[Call]] internal
method.

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is not Object, return false.
2. If =argument= has a [[Call]] internal method, return true.
3. Return false.

* 7.2.4IsConstructor ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: isconstructor-argument
  :END:

The abstract operation IsConstructor determines if =argument=, which
must be an
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]], is a
[[https://tc39.es/ecma262/#function-object][function object]] with a
[[Construct]] internal method.

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is not Object, return false.
2. If =argument= has a [[Construct]] internal method, return true.
3. Return false.

* 7.2.5IsExtensible ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: isextensible-o
  :END:

The abstract operation IsExtensible is used to determine whether
additional properties can be added to the object that is =O=. A Boolean
value is returned. This abstract operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. Return ? =O=.[[IsExtensible]]().

* 7.2.6IsInteger ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: isinteger-argument
  :END:

The abstract operation IsInteger determines if =argument= is a finite
[[https://tc39.es/ecma262/#integer][integer]] numeric value.

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is not Number, return false.
2. If =argument= is NaN, +∞, or -∞, return false.
3. If
   [[https://tc39.es/ecma262/#eqn-floor][floor]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=argument=))
   ≠ [[https://tc39.es/ecma262/#eqn-abs][abs]](=argument=), return
   false.
4. Return true.

* 7.2.7IsNonNegativeInteger ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: isnonnegativeinteger-argument
  :END:

The abstract operation IsNonNegativeInteger determines if =argument= is
non-negative [[https://tc39.es/ecma262/#integer][integer]] numeric
value.

1. If
   ! [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=argument=)
   is true and =argument= ≥ 0, return true.
2. Otherwise, return false.

* 7.2.8IsPropertyKey ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: ispropertykey-argument
  :END:

The abstract operation IsPropertyKey determines if =argument=, which
must be an
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]], is a value that may be used as a property key.

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is String, return true.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is Symbol, return true.
3. Return false.

* 7.2.9IsRegExp ( =argument= )
  :PROPERTIES:
  :CUSTOM_ID: isregexp-argument
  :END:

The abstract operation IsRegExp with argument =argument= performs the
following steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=argument=)
   is not Object, return false.
2. Let =matcher= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=argument=, @@match).
3. If =matcher= is not undefined, return
   ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=matcher=).
4. If =argument= has a [[RegExpMatcher]] internal slot, return true.
5. Return false.

* 7.2.10IsStringPrefix ( =p=, =q= )
  :PROPERTIES:
  :CUSTOM_ID: isstringprefix-p-q
  :END:

The abstract operation IsStringPrefix determines if String =p= is a
prefix of String =q=.

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=p=)
   is String.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=q=)
   is String.
3. If =q= can be the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =p= and some other String =r=, return true. Otherwise, return
   false.
4. NOTE: Any String is a prefix of itself, because =r= may be the empty
   String.

* 7.2.11SameValue ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: samevalue-x-y
  :END:

The internal comparison abstract operation SameValue(=x=, =y=), where
=x= and =y= are ECMAScript language values, produces true or false. Such
a comparison is performed as follows:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is different from
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=),
   return false.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Number or BigInt, then

   1. Return
      ! [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)::sameValue(=x=,
      =y=).

3. Return
   ! [[https://tc39.es/ecma262/#sec-samevaluenonnumeric][SameValueNonNumeric]](=x=,
   =y=).

Note

This algorithm differs from the
[[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
Equality Comparison]] Algorithm in its treatment of signed zeroes and
NaNs.

* 7.2.12SameValueZero ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: samevaluezero-x-y
  :END:

The internal comparison abstract operation SameValueZero(=x=, =y=),
where =x= and =y= are ECMAScript language values, produces true or
false. Such a comparison is performed as follows:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is different from
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=),
   return false.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Number or BigInt, then

   1. Return
      ! [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)::sameValueZero(=x=,
      =y=).

3. Return
   ! [[https://tc39.es/ecma262/#sec-samevaluenonnumeric][SameValueNonNumeric]](=x=,
   =y=).

Note

SameValueZero differs from
[[https://tc39.es/ecma262/#sec-samevalue][SameValue]] only in its
treatment of +0 and -0.

<<sec-samevaluenonnumber>>
* 7.2.13SameValueNonNumeric ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: samevaluenonnumeric-x-y
  :END:

The internal comparison abstract operation SameValueNonNumeric(=x=,
=y=), where neither =x= nor =y= are numeric type values, produces true
or false. Such a comparison is performed as follows:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is not Number or BigInt.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is the same as
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=).
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Undefined, return true.
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Null, return true.
5. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is String, then

   1. If =x= and =y= are exactly the same sequence of code units (same
      length and same code units at corresponding indices), return true;
      otherwise, return false.

6. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Boolean, then

   1. If =x= and =y= are both true or both false, return true;
      otherwise, return false.

7. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Symbol, then

   1. If =x= and =y= are both the same Symbol value, return true;
      otherwise, return false.

8. If =x= and =y= are the same Object value, return true. Otherwise,
   return false.

* 7.2.14Abstract Relational Comparison
  :PROPERTIES:
  :CUSTOM_ID: abstract-relational-comparison
  :END:

The comparison =x= < =y=, where =x= and =y= are values, produces true,
false, or undefined (which indicates that at least one operand is NaN).
In addition to =x= and =y= the algorithm takes a Boolean flag named
=LeftFirst= as a parameter. The flag is used to control the order in
which operations with potentially visible side-effects are performed
upon =x= and =y=. It is necessary because ECMAScript specifies left to
right evaluation of expressions. The default value of =LeftFirst= is
true and indicates that the =x= parameter corresponds to an expression
that occurs to the left of the =y= parameter's corresponding expression.
If =LeftFirst= is false, the reverse is the case and operations must be
performed upon =y= before =x=. Such a comparison is performed as
follows:

1. If the =LeftFirst= flag is true, then

   1. Let =px= be
      ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=x=,
      hint Number).
   2. Let =py= be
      ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=y=,
      hint Number).

2. Else,

   1. NOTE: The order of evaluation needs to be reversed to preserve
      left to right evaluation.
   2. Let =py= be
      ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=y=,
      hint Number).
   3. Let =px= be
      ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=x=,
      hint Number).

3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=px=)
   is String and
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=py=)
   is String, then

   1. If
      [[https://tc39.es/ecma262/#sec-isstringprefix][IsStringPrefix]](=py=,
      =px=) is true, return false.
   2. If
      [[https://tc39.es/ecma262/#sec-isstringprefix][IsStringPrefix]](=px=,
      =py=) is true, return true.
   3. Let =k= be the smallest nonnegative
      [[https://tc39.es/ecma262/#integer][integer]] such that the code
      unit at index =k= within =px= is different from the code unit at
      index =k= within =py=. (There must be such a =k=, for neither
      String is a prefix of the other.)
   4. Let =m= be the [[https://tc39.es/ecma262/#integer][integer]] that
      is the numeric value of the code unit at index =k= within =px=.
   5. Let =n= be the [[https://tc39.es/ecma262/#integer][integer]] that
      is the numeric value of the code unit at index =k= within =py=.
   6. If =m= < =n=, return true. Otherwise, return false.

4. Else,

   1.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=px=)
       is BigInt and
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=py=)
       is String, then

       1. Let =ny= be
          ! [[https://tc39.es/ecma262/#sec-stringtobigint][StringToBigInt]](=py=).
       2. If =ny= is NaN, return undefined.
       3. Return BigInt::lessThan(=px=, =ny=).

   2.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=px=)
       is String and
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=py=)
       is BigInt, then

       1. Let =nx= be
          ! [[https://tc39.es/ecma262/#sec-stringtobigint][StringToBigInt]](=px=).
       2. If =nx= is NaN, return undefined.
       3. Return BigInt::lessThan(=nx=, =py=).

   3.  Let =nx= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=px=).
       NOTE: Because =px= and =py= are primitive values evaluation order
       is not important.
   4.  Let =ny= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=py=).
   5.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=nx=)
       is the same as
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=ny=),
       return
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=nx=)::lessThan(=nx=,
       =ny=).
   6.  [[https://tc39.es/ecma262/#assert][Assert]]:
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=nx=)
       is BigInt and
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=ny=)
       is Number, or
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=nx=)
       is Number and
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=ny=)
       is BigInt.
   7.  If =nx= or =ny= is NaN, return undefined.
   8.  If =nx= is -∞ or =ny= is +∞, return true.
   9.  If =nx= is +∞ or =ny= is -∞, return false.
   10. If the
       [[https://tc39.es/ecma262/#mathematical-value][mathematical
       value]] of =nx= is less than the
       [[https://tc39.es/ecma262/#mathematical-value][mathematical
       value]] of =ny=, return true; otherwise return false.

Note 1

Step 3 differs from step 7 in the algorithm for the addition operator
=+= ([[https://tc39.es/ecma262/#sec-addition-operator-plus][12.8.3]]) by
using the logical-and operation instead of the logical-or operation.

Note 2

The comparison of Strings uses a simple lexicographic ordering on
sequences of code unit values. There is no attempt to use the more
complex, semantically oriented definitions of character or string
equality and collating order defined in the Unicode specification.
Therefore String values that are canonically equal according to the
Unicode standard could test as unequal. In effect this algorithm assumes
that both Strings are already in normalized form. Also, note that for
strings containing supplementary characters, lexicographic ordering on
sequences of UTF-16 code unit values differs from that on sequences of
code point values.

* 7.2.15Abstract Equality Comparison
  :PROPERTIES:
  :CUSTOM_ID: abstract-equality-comparison
  :END:

The comparison =x= == =y=, where =x= and =y= are values, produces true
or false. Such a comparison is performed as follows:

1.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is the same as
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=),
    then

    1. Return the result of performing
       [[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
       Equality Comparison]] =x= === =y=.

2.  If =x= is null and =y= is undefined, return true.
3.  If =x= is undefined and =y= is null, return true.
4.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is Number and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is String, return the result of the comparison =x= ==
    ! [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=y=).
5.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is String and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is Number, return the result of the comparison
    ! [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=x=) == =y=.
6.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is BigInt and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is String, then

    1. Let =n= be
       ! [[https://tc39.es/ecma262/#sec-stringtobigint][StringToBigInt]](=y=).
    2. If =n= is NaN, return false.
    3. Return the result of the comparison =x= == =n=.

7.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is String and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is BigInt, return the result of the comparison =y= == =x=.
8.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is Boolean, return the result of the comparison
    ! [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=x=) == =y=.
9.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is Boolean, return the result of the comparison =x= ==
    ! [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=y=).
10. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is either String, Number, BigInt, or Symbol and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is Object, return the result of the comparison =x= ==
    [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=y=).
11. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is Object and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is either String, Number, BigInt, or Symbol, return the result of
    the comparison
    [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=x=) ==
    =y=.
12. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is BigInt and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is Number, or if
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is Number and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    is BigInt, then

    1. If =x= or =y= are any of NaN, +∞, or -∞, return false.
    2. If the
       [[https://tc39.es/ecma262/#mathematical-value][mathematical
       value]] of =x= is equal to the
       [[https://tc39.es/ecma262/#mathematical-value][mathematical
       value]] of =y=, return true; otherwise return false.

13. Return false.

* 7.2.16Strict Equality Comparison
  :PROPERTIES:
  :CUSTOM_ID: strict-equality-comparison
  :END:

The comparison =x= === =y=, where =x= and =y= are values, produces true
or false. Such a comparison is performed as follows:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is different from
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=),
   return false.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Number or BigInt, then

   1. Return
      ! [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)::equal(=x=,
      =y=).

3. Return
   ! [[https://tc39.es/ecma262/#sec-samevaluenonnumeric][SameValueNonNumeric]](=x=,
   =y=).

Note

This algorithm differs from the
[[https://tc39.es/ecma262/#sec-samevalue][SameValue]] Algorithm in its
treatment of signed zeroes and NaNs.

* 7.3Operations on Objects
  :PROPERTIES:
  :CUSTOM_ID: operations-on-objects
  :END:

* 7.3.1Get ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: get-o-p
  :END:

The abstract operation Get is used to retrieve the value of a specific
property of an object. The operation is called with arguments =O= and
=P= where =O= is the object and =P= is the property key. This abstract
operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Return ? =O=.[[Get]](=P=, =O=).

* 7.3.2GetV ( =V=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: getv-v-p
  :END:

The abstract operation GetV is used to retrieve the value of a specific
property of an
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]]. If the value is not an object, the property lookup is
performed using a wrapper object appropriate for the type of the value.
The operation is called with arguments =V= and =P= where =V= is the
value and =P= is the property key. This abstract operation performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=V=).
3. Return ? =O=.[[Get]](=P=, =V=).

* 7.3.3Set ( =O=, =P=, =V=, =Throw= )
  :PROPERTIES:
  :CUSTOM_ID: set-o-p-v-throw
  :END:

The abstract operation Set is used to set the value of a specific
property of an object. The operation is called with arguments =O=, =P=,
=V=, and =Throw= where =O= is the object, =P= is the property key, =V=
is the new value for the property and =Throw= is a Boolean flag. This
abstract operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=Throw=)
   is Boolean.
4. Let =success= be ? =O=.[[Set]](=P=, =V=, =O=).
5. If =success= is false and =Throw= is true, throw a TypeError
   exception.
6. Return =success=.

* 7.3.4CreateDataProperty ( =O=, =P=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: createdataproperty-o-p-v
  :END:

The abstract operation CreateDataProperty is used to create a new own
property of an object. The operation is called with arguments =O=, =P=,
and =V= where =O= is the object, =P= is the property key, and =V= is the
value for the property. This abstract operation performs the following
steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Let =newDesc= be the PropertyDescriptor { [[Value]]: =V=,
   [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: true }.
4. Return ? =O=.[[DefineOwnProperty]](=P=, =newDesc=).

Note

This abstract operation creates a property whose attributes are set to
the same defaults used for properties created by the ECMAScript language
assignment operator. Normally, the property will not already exist. If
it does exist and is not configurable or if =O= is not extensible,
[[DefineOwnProperty]] will return false.

* 7.3.5CreateMethodProperty ( =O=, =P=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: createmethodproperty-o-p-v
  :END:

The abstract operation CreateMethodProperty is used to create a new own
property of an object. The operation is called with arguments =O=, =P=,
and =V= where =O= is the object, =P= is the property key, and =V= is the
value for the property. This abstract operation performs the following
steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Let =newDesc= be the PropertyDescriptor { [[Value]]: =V=,
   [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }.
4. Return ? =O=.[[DefineOwnProperty]](=P=, =newDesc=).

Note

This abstract operation creates a property whose attributes are set to
the same defaults used for built-in methods and methods defined using
class declaration syntax. Normally, the property will not already exist.
If it does exist and is not configurable or if =O= is not extensible,
[[DefineOwnProperty]] will return false.

* 7.3.6CreateDataPropertyOrThrow ( =O=, =P=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: createdatapropertyorthrow-o-p-v
  :END:

The abstract operation CreateDataPropertyOrThrow is used to create a new
own property of an object. It throws a TypeError exception if the
requested property update cannot be performed. The operation is called
with arguments =O=, =P=, and =V= where =O= is the object, =P= is the
property key, and =V= is the value for the property. This abstract
operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Let =success= be
   ? [[https://tc39.es/ecma262/#sec-createdataproperty][CreateDataProperty]](=O=,
   =P=, =V=).
4. If =success= is false, throw a TypeError exception.
5. Return =success=.

Note

This abstract operation creates a property whose attributes are set to
the same defaults used for properties created by the ECMAScript language
assignment operator. Normally, the property will not already exist. If
it does exist and is not configurable or if =O= is not extensible,
[[DefineOwnProperty]] will return false causing this operation to throw
a TypeError exception.

* 7.3.7DefinePropertyOrThrow ( =O=, =P=, =desc= )
  :PROPERTIES:
  :CUSTOM_ID: definepropertyorthrow-o-p-desc
  :END:

The abstract operation DefinePropertyOrThrow is used to call the
[[DefineOwnProperty]] internal method of an object in a manner that will
throw a TypeError exception if the requested property update cannot be
performed. The operation is called with arguments =O=, =P=, and =desc=
where =O= is the object, =P= is the property key, and =desc= is the
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] for the property. This abstract operation performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Let =success= be ? =O=.[[DefineOwnProperty]](=P=, =desc=).
4. If =success= is false, throw a TypeError exception.
5. Return =success=.

* 7.3.8DeletePropertyOrThrow ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: deletepropertyorthrow-o-p
  :END:

The abstract operation DeletePropertyOrThrow is used to remove a
specific own property of an object. It throws an exception if the
property is not configurable. The operation is called with arguments =O=
and =P= where =O= is the object and =P= is the property key. This
abstract operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Let =success= be ? =O=.[[Delete]](=P=).
4. If =success= is false, throw a TypeError exception.
5. Return =success=.

* 7.3.9GetMethod ( =V=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: getmethod-v-p
  :END:

The abstract operation GetMethod is used to get the value of a specific
property of an
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] when the value of the property is expected to be a
function. The operation is called with arguments =V= and =P= where =V=
is the
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]], =P= is the property key. This abstract operation
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =func= be ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=V=,
   =P=).
3. If =func= is either undefined or null, return undefined.
4. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=func=) is
   false, throw a TypeError exception.
5. Return =func=.

* 7.3.10HasProperty ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: hasproperty-o-p
  :END:

The abstract operation HasProperty is used to determine whether an
object has a property with the specified property key. The property may
be either an own or inherited. A Boolean value is returned. The
operation is called with arguments =O= and =P= where =O= is the object
and =P= is the property key. This abstract operation performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Return ? =O=.[[HasProperty]](=P=).

* 7.3.11HasOwnProperty ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: hasownproperty-o-p
  :END:

The abstract operation HasOwnProperty is used to determine whether an
object has an own property with the specified property key. A Boolean
value is returned. The operation is called with arguments =O= and =P=
where =O= is the object and =P= is the property key. This abstract
operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
3. Let =desc= be ? =O=.[[GetOwnProperty]](=P=).
4. If =desc= is undefined, return false.
5. Return true.

* 7.3.12Call ( =F=, =V= [ , =argumentsList= ] )
  :PROPERTIES:
  :CUSTOM_ID: call-f-v-argumentslist
  :END:

The abstract operation Call is used to call the [[Call]] internal method
of a [[https://tc39.es/ecma262/#function-object][function object]]. The
operation is called with arguments =F=, =V=, and optionally
=argumentsList= where =F= is the
[[https://tc39.es/ecma262/#function-object][function object]], =V= is an
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] that is the this value of the [[Call]], and
=argumentsList= is the value passed to the corresponding argument of the
internal method. If =argumentsList= is not present, a new empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
is used as its value. This abstract operation performs the following
steps:

1. If =argumentsList= is not present, set =argumentsList= to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
2. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=F=) is
   false, throw a TypeError exception.
3. Return ? =F=.[[Call]](=V=, =argumentsList=).

* 7.3.13Construct ( =F= [ , =argumentsList= [ , =newTarget= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: construct-f-argumentslist-newtarget
  :END:

The abstract operation Construct is used to call the [[Construct]]
internal method of a
[[https://tc39.es/ecma262/#function-object][function object]]. The
operation is called with arguments =F=, and optionally =argumentsList=,
and =newTarget= where =F= is the
[[https://tc39.es/ecma262/#function-object][function object]].
=argumentsList= and =newTarget= are the values to be passed as the
corresponding arguments of the internal method. If =argumentsList= is
not present, a new empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
is used as its value. If =newTarget= is not present, =F= is used as its
value. This abstract operation performs the following steps:

1. If =newTarget= is not present, set =newTarget= to =F=.
2. If =argumentsList= is not present, set =argumentsList= to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=F=) is
   true.
4. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=newTarget=)
   is true.
5. Return ? =F=.[[Construct]](=argumentsList=, =newTarget=).

Note

If =newTarget= is not present, this operation is equivalent to:
=new F(...argumentsList)=

* 7.3.14SetIntegrityLevel ( =O=, =level= )
  :PROPERTIES:
  :CUSTOM_ID: setintegritylevel-o-level
  :END:

The abstract operation SetIntegrityLevel is used to fix the set of own
properties of an object. This abstract operation performs the following
steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =level= is either sealed
   or frozen.
3. Let =status= be ? =O=.[[PreventExtensions]]().
4. If =status= is false, return false.
5. Let =keys= be ? =O=.[[OwnPropertyKeys]]().
6. If =level= is sealed, then

   1. For each element =k= of =keys=, do

      1. Perform
         ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
         =k=, PropertyDescriptor { [[Configurable]]: false }).

7. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =level= is frozen.
   2. For each element =k= of =keys=, do

      1. Let =currentDesc= be ? =O=.[[GetOwnProperty]](=k=).
      2. If =currentDesc= is not undefined, then

         1. If
            [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=currentDesc=)
            is true, then

            1. Let =desc= be the PropertyDescriptor { [[Configurable]]:
               false }.

         2. Else,

            1. Let =desc= be the PropertyDescriptor { [[Configurable]]:
               false, [[Writable]]: false }.

         3. Perform
            ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
            =k=, =desc=).

8. Return true.

* 7.3.15TestIntegrityLevel ( =O=, =level= )
  :PROPERTIES:
  :CUSTOM_ID: testintegritylevel-o-level
  :END:

The abstract operation TestIntegrityLevel is used to determine if the
set of own properties of an object are fixed. This abstract operation
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =level= is either sealed
   or frozen.
3. Let =extensible= be
   ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=O=).
4. If =extensible= is true, return false.
5. NOTE: If the object is extensible, none of its properties are
   examined.
6. Let =keys= be ? =O=.[[OwnPropertyKeys]]().
7. For each element =k= of =keys=, do

   1. Let =currentDesc= be ? =O=.[[GetOwnProperty]](=k=).
   2. If =currentDesc= is not undefined, then

      1. If =currentDesc=.[[Configurable]] is true, return false.
      2. If =level= is frozen and
         [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=currentDesc=)
         is true, then

         1. If =currentDesc=.[[Writable]] is true, return false.

8. Return true.

* 7.3.16CreateArrayFromList ( =elements= )
  :PROPERTIES:
  :CUSTOM_ID: createarrayfromlist-elements
  :END:

The abstract operation CreateArrayFromList is used to create an Array
object whose elements are provided by a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
This abstract operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =elements= is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   whose elements are all ECMAScript language values.
2. Let =array= be
   ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
3. Let =n= be 0.
4. For each element =e= of =elements=, do

   1. Perform
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=array=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=), =e=).
   2. Set =n= to =n= + 1.

5. Return =array=.

* 7.3.17LengthOfArrayLike ( =obj= )
  :PROPERTIES:
  :CUSTOM_ID: lengthofarraylike-obj
  :END:

The abstract operation LengthOfArrayLike returns the value of the
"length" property of an array-like object.

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=obj=)
   is Object.
2. Return ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](?
   [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=obj=, "length")).

An array-like object is any object for which this operation returns an
[[https://tc39.es/ecma262/#integer][integer]] rather than an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]].

Note 1

Typically, an array-like object would also have some properties with
[[https://tc39.es/ecma262/#integer-index][integer index]] names.
However, that is not a requirement of this definition.

Note 2

Array objects and String objects are examples of array-like objects.

* 7.3.18CreateListFromArrayLike ( =obj= [ , =elementTypes= ] )
  :PROPERTIES:
  :CUSTOM_ID: createlistfromarraylike-obj-elementtypes
  :END:

The abstract operation CreateListFromArrayLike is used to create a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
value whose elements are provided by the indexed properties of an
[[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like object]],
=obj=. The optional argument =elementTypes= is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
containing the names of ECMAScript Language Types that are allowed for
element values of the
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
that is created. This abstract operation performs the following steps:

1. If =elementTypes= is not present, set =elementTypes= to « Undefined,
   Null, Boolean, String, Symbol, Number, BigInt, Object ».
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=obj=)
   is not Object, throw a TypeError exception.
3. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=obj=).
4. Let =list= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
5. Let =index= be 0.
6. Repeat, while =index= < =len=

   1. Let =indexName= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=index=).
   2. Let =next= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=obj=,
      =indexName=).
   3. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=next=)
      is not an element of =elementTypes=, throw a TypeError exception.
   4. Append =next= as the last element of =list=.
   5. Set =index= to =index= + 1.

7. Return =list=.

* 7.3.19Invoke ( =V=, =P= [ , =argumentsList= ] )
  :PROPERTIES:
  :CUSTOM_ID: invoke-v-p-argumentslist
  :END:

The abstract operation Invoke is used to call a method property of an
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]]. The operation is called with arguments =V=, =P=, and
optionally =argumentsList= where =V= serves as both the lookup point for
the property and the this value of the call, =P= is the property key,
and =argumentsList= is the list of arguments values passed to the
method. If =argumentsList= is not present, a new empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
is used as its value. This abstract operation performs the following
steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. If =argumentsList= is not present, set =argumentsList= to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
3. Let =func= be ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=V=,
   =P=).
4. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=func=, =V=,
   =argumentsList=).

* 7.3.20OrdinaryHasInstance ( =C=, =O= )
  :PROPERTIES:
  :CUSTOM_ID: ordinaryhasinstance-c-o
  :END:

The abstract operation OrdinaryHasInstance implements the default
algorithm for determining if an object =O= inherits from the instance
object inheritance path provided by
[[https://tc39.es/ecma262/#constructor][constructor]] =C=. This abstract
operation performs the following steps:

1. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=C=) is
   false, return false.
2. If =C= has a [[BoundTargetFunction]] internal slot, then

   1. Let =BC= be =C=.[[BoundTargetFunction]].
   2. Return
      ? [[https://tc39.es/ecma262/#sec-instanceofoperator][InstanceofOperator]](=O=,
      =BC=).

3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return false.
4. Let =P= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=C=,
   "prototype").
5. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is not Object, throw a TypeError exception.
6. Repeat,

   1. Set =O= to ? =O=.[[GetPrototypeOf]]().
   2. If =O= is null, return false.
   3. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=P=, =O=)
      is true, return true.

* 7.3.21SpeciesConstructor ( =O=, =defaultConstructor= )
  :PROPERTIES:
  :CUSTOM_ID: speciesconstructor-o-defaultconstructor
  :END:

The abstract operation SpeciesConstructor is used to retrieve the
[[https://tc39.es/ecma262/#constructor][constructor]] that should be
used to create new objects that are derived from the argument object
=O=. The =defaultConstructor= argument is the
[[https://tc39.es/ecma262/#constructor][constructor]] to use if a
[[https://tc39.es/ecma262/#constructor][constructor]] @@species property
cannot be found starting from =O=. This abstract operation performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. Let =C= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
   "constructor").
3. If =C= is undefined, return =defaultConstructor=.
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=C=)
   is not Object, throw a TypeError exception.
5. Let =S= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=C=,
   @@species).
6. If =S= is either undefined or null, return =defaultConstructor=.
7. If [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=S=)
   is true, return =S=.
8. Throw a TypeError exception.

<<sec-enumerableownproperties>>
* 7.3.22EnumerableOwnPropertyNames ( =O=, =kind= )
  :PROPERTIES:
  :CUSTOM_ID: enumerableownpropertynames-o-kind
  :END:

When the abstract operation EnumerableOwnPropertyNames is called with an
Object =O= and =kind= which is one of (key, value, key+value), the
following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
2. Let =ownKeys= be ? =O=.[[OwnPropertyKeys]]().
3. Let =properties= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. For each element =key= of =ownKeys= in
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   order, do

   1. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=key=)
      is String, then

      1. Let =desc= be ? =O=.[[GetOwnProperty]](=key=).
      2. If =desc= is not undefined and =desc=.[[Enumerable]] is true,
         then

         1. If =kind= is key, append =key= to =properties=.
         2. Else,

            1. Let =value= be
               ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
               =key=).
            2. If =kind= is value, append =value= to =properties=.
            3. Else,

               1. [[https://tc39.es/ecma262/#assert][Assert]]: =kind= is
                  key+value.
               2. Let =entry= be
                  ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](«
                  =key=, =value= »).
               3. Append =entry= to =properties=.

5. Order the elements of =properties= so they are in the same relative
   order as would be produced by the Iterator that would be returned if
   the
   [[https://tc39.es/ecma262/#sec-enumerate-object-properties][EnumerateObjectProperties]]
   internal method were invoked with =O=.
6. Return =properties=.

* 7.3.23GetFunctionRealm ( =obj= )
  :PROPERTIES:
  :CUSTOM_ID: getfunctionrealm-obj
  :END:

The abstract operation GetFunctionRealm with argument =obj= performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   ! [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=obj=) is
   true.
2. If =obj= has a [[Realm]] internal slot, then

   1. Return =obj=.[[Realm]].

3. If =obj= is a Bound Function
   [[https://tc39.es/ecma262/#exotic-object][exotic object]], then

   1. Let =target= be =obj=.[[BoundTargetFunction]].
   2. Return
      ? [[https://tc39.es/ecma262/#sec-getfunctionrealm][GetFunctionRealm]](=target=).

4. If =obj= is a Proxy [[https://tc39.es/ecma262/#exotic-object][exotic
   object]], then

   1. If =obj=.[[ProxyHandler]] is null, throw a TypeError exception.
   2. Let =proxyTarget= be =obj=.[[ProxyTarget]].
   3. Return
      ? [[https://tc39.es/ecma262/#sec-getfunctionrealm][GetFunctionRealm]](=proxyTarget=).

5. Return [[https://tc39.es/ecma262/#current-realm][the current Realm
   Record]].

Note

Step 5 will only be reached if =obj= is a non-standard function
[[https://tc39.es/ecma262/#exotic-object][exotic object]] that does not
have a [[Realm]] internal slot.

* 7.3.24CopyDataProperties ( =target=, =source=, =excludedItems= )
  :PROPERTIES:
  :CUSTOM_ID: copydataproperties-target-source-excludeditems
  :END:

When the abstract operation CopyDataProperties is called with arguments
=target=, =source=, and =excludedItems=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =excludedItems= is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of property keys.
3. If =source= is undefined or null, return =target=.
4. Let =from= be
   ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=source=).
5. Let =keys= be ? =from=.[[OwnPropertyKeys]]().
6. For each element =nextKey= of =keys= in
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   order, do

   1. Let =excluded= be false.
   2. For each element =e= of =excludedItems= in
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      order, do

      1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=e=,
         =nextKey=) is true, then

         1. Set =excluded= to true.

   3. If =excluded= is false, then

      1. Let =desc= be ? =from=.[[GetOwnProperty]](=nextKey=).
      2. If =desc= is not undefined and =desc=.[[Enumerable]] is true,
         then

         1. Let =propValue= be
            ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=from=,
            =nextKey=).
         2. Perform
            ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=target=,
            =nextKey=, =propValue=).

7. Return =target=.

Note

The target passed in here is always a newly created object which is not
directly accessible in case of an error being thrown.

* 7.4Operations on Iterator Objects
  :PROPERTIES:
  :CUSTOM_ID: operations-on-iterator-objects
  :END:

See Common Iteration Interfaces
([[https://tc39.es/ecma262/#sec-iteration][25.1]]).

* 7.4.1GetIterator ( =obj= [ , =hint= [ , =method= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: getiterator-obj-hint-method
  :END:

The abstract operation GetIterator with argument =obj= and optional
arguments =hint= and =method= performs the following steps:

1. If =hint= is not present, set =hint= to sync.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =hint= is either sync or
   async.
3. If =method= is not present, then

   1. If =hint= is async, then

      1. Set =method= to
         ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=obj=,
         @@asyncIterator).
      2. If =method= is undefined, then

         1. Let =syncMethod= be
            ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=obj=,
            @@iterator).
         2. Let =syncIteratorRecord= be
            ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=obj=,
            sync, =syncMethod=).
         3. Return
            ! [[https://tc39.es/ecma262/#sec-createasyncfromsynciterator][CreateAsyncFromSyncIterator]](=syncIteratorRecord=).

   2. Otherwise, set =method= to
      ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=obj=,
      @@iterator).

4. Let =iterator= be
   ? [[https://tc39.es/ecma262/#sec-call][Call]](=method=, =obj=).
5. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=iterator=)
   is not Object, throw a TypeError exception.
6. Let =nextMethod= be
   ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=iterator=, "next").
7. Let =iteratorRecord= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Iterator]]: =iterator=, [[NextMethod]]: =nextMethod=, [[Done]]:
   false }.
8. Return =iteratorRecord=.

* 7.4.2IteratorNext ( =iteratorRecord= [ , =value= ] )
  :PROPERTIES:
  :CUSTOM_ID: iteratornext-iteratorrecord-value
  :END:

The abstract operation IteratorNext with argument =iteratorRecord= and
optional argument =value= performs the following steps:

1. If =value= is not present, then

   1. Let =result= be
      ? [[https://tc39.es/ecma262/#sec-call][Call]](=iteratorRecord=.[[NextMethod]],
      =iteratorRecord=.[[Iterator]]).

2. Else,

   1. Let =result= be
      ? [[https://tc39.es/ecma262/#sec-call][Call]](=iteratorRecord=.[[NextMethod]],
      =iteratorRecord=.[[Iterator]], « =value= »).

3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=)
   is not Object, throw a TypeError exception.
4. Return =result=.

* 7.4.3IteratorComplete ( =iterResult= )
  :PROPERTIES:
  :CUSTOM_ID: iteratorcomplete-iterresult
  :END:

The abstract operation IteratorComplete with argument =iterResult=
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=iterResult=)
   is Object.
2. Return ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
   [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=iterResult=, "done")).

* 7.4.4IteratorValue ( =iterResult= )
  :PROPERTIES:
  :CUSTOM_ID: iteratorvalue-iterresult
  :END:

The abstract operation IteratorValue with argument =iterResult= performs
the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=iterResult=)
   is Object.
2. Return ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=iterResult=,
   "value").

* 7.4.5IteratorStep ( =iteratorRecord= )
  :PROPERTIES:
  :CUSTOM_ID: iteratorstep-iteratorrecord
  :END:

The abstract operation IteratorStep with argument =iteratorRecord=
requests the next value from =iteratorRecord=.[[Iterator]] by calling
=iteratorRecord=.[[NextMethod]] and returns either false indicating that
the iterator has reached its end or the IteratorResult object if a next
value is available. IteratorStep performs the following steps:

1. Let =result= be
   ? [[https://tc39.es/ecma262/#sec-iteratornext][IteratorNext]](=iteratorRecord=).
2. Let =done= be
   ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=result=).
3. If =done= is true, return false.
4. Return =result=.

* 7.4.6IteratorClose ( =iteratorRecord=, =completion= )
  :PROPERTIES:
  :CUSTOM_ID: iteratorclose-iteratorrecord-completion
  :END:

The abstract operation IteratorClose with arguments =iteratorRecord= and
=completion= is used to notify an iterator that it should perform any
actions it would normally perform when it has reached its completed
state:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=iteratorRecord=.[[Iterator]])
    is Object.
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =completion= is a
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
    Record]].
3.  Let =iterator= be =iteratorRecord=.[[Iterator]].
4.  Let =return= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=iterator=,
    "return").
5.  If =return= is undefined, return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completion=).
6.  Let =innerResult= be
    [[https://tc39.es/ecma262/#sec-call][Call]](=return=, =iterator=).
7.  If =completion=.[[Type]] is throw, return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completion=).
8.  If =innerResult=.[[Type]] is throw, return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=innerResult=).
9.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerResult=.[[Value]])
    is not Object, throw a TypeError exception.
10. Return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completion=).

* 7.4.7AsyncIteratorClose ( =iteratorRecord=, =completion= )
  :PROPERTIES:
  :CUSTOM_ID: asynciteratorclose-iteratorrecord-completion
  :END:

The abstract operation AsyncIteratorClose with arguments
=iteratorRecord= and =completion= is used to notify an async iterator
that it should perform any actions it would normally perform when it has
reached its completed state:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=iteratorRecord=.[[Iterator]])
    is Object.
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =completion= is a
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
    Record]].
3.  Let =iterator= be =iteratorRecord=.[[Iterator]].
4.  Let =return= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=iterator=,
    "return").
5.  If =return= is undefined, return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completion=).
6.  Let =innerResult= be
    [[https://tc39.es/ecma262/#sec-call][Call]](=return=, =iterator=).
7.  If =innerResult=.[[Type]] is normal, set =innerResult= to
    [[https://tc39.es/ecma262/#await][Await]](=innerResult=.[[Value]]).
8.  If =completion=.[[Type]] is throw, return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completion=).
9.  If =innerResult=.[[Type]] is throw, return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=innerResult=).
10. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerResult=.[[Value]])
    is not Object, throw a TypeError exception.
11. Return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=completion=).

* 7.4.8CreateIterResultObject ( =value=, =done= )
  :PROPERTIES:
  :CUSTOM_ID: createiterresultobject-value-done
  :END:

The abstract operation CreateIterResultObject with arguments =value= and
=done= creates an object that supports the IteratorResult interface by
performing the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=done=)
   is Boolean.
2. Let =obj= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
3. Perform
   ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
   "value", =value=).
4. Perform
   ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
   "done", =done=).
5. Return =obj=.

<<sec-createlistiterator>>
* 7.4.9CreateListIteratorRecord ( =list= )
  :PROPERTIES:
  :CUSTOM_ID: createlistiteratorrecord-list
  :END:

The abstract operation CreateListIteratorRecord with argument =list=
creates an Iterator
([[https://tc39.es/ecma262/#sec-iterator-interface][25.1.1.2]]) object
record whose next method returns the successive elements of =list=. It
performs the following steps:

1. Let =iterator= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]]([[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]],
   « [[IteratedList]], [[ListNextIndex]] »).
2. Set =iterator=.[[IteratedList]] to =list=.
3. Set =iterator=.[[ListNextIndex]] to 0.
4. Let =steps= be the algorithm steps defined in
   [[https://tc39.es/ecma262/#sec-listiteratornext-functions][ListIteratorNext
   Functions]].
5. Let =next= be
   ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
   « »).
6. Return
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Iterator]]: =iterator=, [[NextMethod]]: =next=, [[Done]]: false
   }.

Note

The list iterator object is never directly accessible to ECMAScript
code.

<<sec-listiterator-next>>
* 7.4.9.1ListIteratorNext Functions
  :PROPERTIES:
  :CUSTOM_ID: listiteratornext-functions
  :END:

A ListIteratorNext function is an anonymous built-in function. When
called with no arguments, it performs the following steps:

1. Let =O= be the this value.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has an
   [[IteratedList]] internal slot.
4. Let =list= be =O=.[[IteratedList]].
5. Let =index= be =O=.[[ListNextIndex]].
6. Let =len= be the number of elements of =list=.
7. If =index= ≥ =len=, then

   1. Return
      [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
      true).

8. Set =O=.[[ListNextIndex]] to =index= + 1.
9. Return
   [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=list=[=index=],
   false).

The "length" property of a ListIteratorNext function is 0.

* 8Executable Code and Execution Contexts
  :PROPERTIES:
  :CUSTOM_ID: executable-code-and-execution-contexts
  :END:

* 8.1Lexical Environments
  :PROPERTIES:
  :CUSTOM_ID: lexical-environments
  :END:

A Lexical Environment is a specification type used to define the
association of [[https://tc39.es/ecma262/#prod-Identifier][Identifier]]s
to specific variables and functions based upon the lexical nesting
structure of ECMAScript code. A Lexical Environment consists of an
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
and a possibly null reference to an /outer/ Lexical Environment. Usually
a Lexical Environment is associated with some specific syntactic
structure of ECMAScript code such as a
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
a [[https://tc39.es/ecma262/#prod-BlockStatement][BlockStatement]], or a
[[https://tc39.es/ecma262/#prod-Catch][Catch]] clause of a
[[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]] and a new
Lexical Environment is created each time such code is evaluated.

An [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]] records the identifier bindings that are created within the
scope of its associated Lexical Environment. It is referred to as the
Lexical Environment's EnvironmentRecord.

The outer environment reference is used to model the logical nesting of
Lexical Environment values. The outer reference of a (inner) Lexical
Environment is a reference to the Lexical Environment that logically
surrounds the inner Lexical Environment. An outer Lexical Environment
may, of course, have its own outer Lexical Environment. A Lexical
Environment may serve as the outer environment for multiple inner
Lexical Environments. For example, if a
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
contains two nested
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]s
then the Lexical Environments of each of the nested functions will have
as their outer Lexical Environment the Lexical Environment of the
current evaluation of the surrounding function.

A global environment is a Lexical Environment which does not have an
outer environment. The
[[https://tc39.es/ecma262/#global-environment][global environment]]'s
outer environment reference is null. A
[[https://tc39.es/ecma262/#global-environment][global environment]]'s
EnvironmentRecord may be prepopulated with identifier bindings and
includes an associated
[[https://tc39.es/ecma262/#sec-global-object][global object]] whose
properties provide some of the
[[https://tc39.es/ecma262/#global-environment][global environment]]'s
identifier bindings. As ECMAScript code is executed, additional
properties may be added to the
[[https://tc39.es/ecma262/#sec-global-object][global object]] and the
initial properties may be modified.

A module environment is a Lexical Environment that contains the bindings
for the top level declarations of a
[[https://tc39.es/ecma262/#prod-Module][Module]]. It also contains the
bindings that are explicitly imported by the
[[https://tc39.es/ecma262/#prod-Module][Module]]. The outer environment
of a [[https://tc39.es/ecma262/#module-environment][module environment]]
is a [[https://tc39.es/ecma262/#global-environment][global
environment]].

A function environment is a Lexical Environment that corresponds to the
invocation of an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]]. A
[[https://tc39.es/ecma262/#function-environment][function environment]]
may establish a new =this= binding. A
[[https://tc39.es/ecma262/#function-environment][function environment]]
also captures the state necessary to support =super= method invocations.

Lexical Environments and
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
values are purely specification mechanisms and need not correspond to
any specific artefact of an ECMAScript implementation. It is impossible
for an ECMAScript program to directly access or manipulate such values.

* 8.1.1Environment Records
  :PROPERTIES:
  :CUSTOM_ID: environment-records
  :END:

There are two primary kinds of Environment Record values used in this
specification: /declarative Environment Records/ and /object Environment
Records/. Declarative Environment Records are used to define the effect
of ECMAScript language syntactic elements such as
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]s,
[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]s,
and [[https://tc39.es/ecma262/#prod-Catch][Catch]] clauses that directly
associate identifier bindings with ECMAScript language values. Object
Environment Records are used to define the effect of ECMAScript elements
such as [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]
that associate identifier bindings with the properties of some object.
Global Environment Records and function Environment Records are
specializations that are used for specifically for
[[https://tc39.es/ecma262/#prod-Script][Script]] global declarations and
for top-level declarations within functions.

For specification purposes Environment Record values are values of the
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
specification type and can be thought of as existing in a simple
object-oriented hierarchy where Environment Record is an abstract class
with three concrete subclasses, declarative Environment Record, object
Environment Record, and global Environment Record. Function Environment
Records and module Environment Records are subclasses of declarative
Environment Record. The abstract class includes the abstract
specification methods defined in
[[https://tc39.es/ecma262/#table-15][Table 16]]. These abstract methods
have distinct concrete algorithms for each of the concrete subclasses.

Table 16: Abstract Methods of Environment Records
| Method                         | Purpose|
|--------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| HasBinding(N)                  | Determine if an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] has a binding for the String value =N=. Return true if it does and false if it does not.                                                                                                                                                                                                                                                                                                                                                                                |
| CreateMutableBinding(N, D)     | Create a new but uninitialized mutable binding in an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The String value =N= is the text of the bound name. If the Boolean argument =D= is true the binding may be subsequently deleted.                                                                                                                                                                                                                                                                                                  |
| CreateImmutableBinding(N, S)   | Create a new but uninitialized immutable binding in an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The String value =N= is the text of the bound name. If =S= is true then attempts to set it after it has been initialized will always throw an exception, regardless of the strict mode setting of operations that reference that binding.                                                                                                                                                                                       |
| InitializeBinding(N, V)        | Set the value of an already existing but uninitialized binding in an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The String value =N= is the text of the bound name. =V= is the value for the binding and is a value of any [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript language type]].                                                                                                                                                                                                                  |
| SetMutableBinding(N, V, S)     | Set the value of an already existing mutable binding in an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The String value =N= is the text of the bound name. =V= is the value for the binding and may be a value of any [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript language type]]. =S= is a Boolean flag. If =S= is true and the binding cannot be set throw a TypeError exception.                                                                                                                       |
| GetBindingValue(N, S)          | Returns the value of an already existing binding from an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The String value =N= is the text of the bound name. =S= is used to identify references originating in [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]] or that otherwise require strict mode reference semantics. If =S= is true and the binding does not exist throw a ReferenceError exception. If the binding exists but is uninitialized a ReferenceError is thrown, regardless of the value of =S=.   |
| DeleteBinding(N)               | Delete a binding from an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The String value =N= is the text of the bound name. If a binding for =N= exists, remove the binding and return true. If the binding exists but cannot be removed return false. If the binding does not exist return true.                                                                                                                                                                                                                                     |
| HasThisBinding()               | Determine if an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] establishes a =this= binding. Return true if it does and false if it does not.                                                                                                                                                                                                                                                                                                                                                                                          |
| HasSuperBinding()              | Determine if an [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] establishes a =super= method binding. Return true if it does and false if it does not.                                                                                                                                                                                                                                                                                                                                                                                  |
| WithBaseObject()               | If this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] is associated with a =with= statement, return the with object. Otherwise, return undefined.                                                                                                                                                                                                                                                                                                                                                                                     |

* 8.1.1.1Declarative Environment Records
  :PROPERTIES:
  :CUSTOM_ID: declarative-environment-records
  :END:

Each declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
is associated with an ECMAScript program scope containing variable,
constant, let, class, module, import, and/or function declarations. A
declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
binds the set of identifiers defined by the declarations contained
within its scope.

The behaviour of the concrete specification methods for declarative
Environment Records is defined by the following algorithms.

* 8.1.1.1.1HasBinding ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: hasbinding-n
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method HasBinding for declarative Environment Records simply determines
if the argument identifier is one of the identifiers bound by the
record:

1. Let =envRec= be the declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. If =envRec= has a binding for the name that is the value of =N=,
   return true.
3. Return false.

* 8.1.1.1.2CreateMutableBinding ( =N=, =D= )
  :PROPERTIES:
  :CUSTOM_ID: createmutablebinding-n-d
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateMutableBinding for declarative Environment Records creates
a new mutable binding for the name =N= that is uninitialized. A binding
must not already exist in this
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
for =N=. If Boolean argument =D= has the value true the new binding is
marked as being subject to deletion.

1. Let =envRec= be the declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= does not
   already have a binding for =N=.
3. Create a mutable binding in =envRec= for =N= and record that it is
   uninitialized. If =D= is true, record that the newly created binding
   may be deleted by a subsequent DeleteBinding call.
4. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 8.1.1.1.3CreateImmutableBinding ( =N=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: createimmutablebinding-n-s
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateImmutableBinding for declarative Environment Records
creates a new immutable binding for the name =N= that is uninitialized.
A binding must not already exist in this
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
for =N=. If the Boolean argument =S= has the value true the new binding
is marked as a strict binding.

1. Let =envRec= be the declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= does not
   already have a binding for =N=.
3. Create an immutable binding in =envRec= for =N= and record that it is
   uninitialized. If =S= is true, record that the newly created binding
   is a strict binding.
4. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 8.1.1.1.4InitializeBinding ( =N=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: initializebinding-n-v
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method InitializeBinding for declarative Environment Records is used to
set the bound value of the current binding of the identifier whose name
is the value of the argument =N= to the value of argument =V=. An
uninitialized binding for =N= must already exist.

1. Let =envRec= be the declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= must have an
   uninitialized binding for =N=.
3. Set the bound value for =N= in =envRec= to =V=.
4. [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   that the binding for =N= in =envRec= has been initialized.
5. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 8.1.1.1.5SetMutableBinding ( =N=, =V=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: setmutablebinding-n-v-s
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method SetMutableBinding for declarative Environment Records attempts to
change the bound value of the current binding of the identifier whose
name is the value of the argument =N= to the value of argument =V=. A
binding for =N= normally already exists, but in rare cases it may not.
If the binding is an immutable binding, a TypeError is thrown if =S= is
true.

1. Let =envRec= be the declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. If =envRec= does not have a binding for =N=, then

   1. If =S= is true, throw a ReferenceError exception.
   2. Perform =envRec=.CreateMutableBinding(=N=, true).
   3. Perform =envRec=.InitializeBinding(=N=, =V=).
   4. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

3. If the binding for =N= in =envRec= is a strict binding, set =S= to
   true.
4. If the binding for =N= in =envRec= has not yet been initialized,
   throw a ReferenceError exception.
5. Else if the binding for =N= in =envRec= is a mutable binding, change
   its bound value to =V=.
6. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: This is an attempt to
      change the value of an immutable binding.
   2. If =S= is true, throw a TypeError exception.

7. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

Note

An example of ECMAScript code that results in a missing binding at step
2 is:

#+BEGIN_EXAMPLE
  function f() { eval("var x; x = (delete x, 0);"); }
#+END_EXAMPLE

* 8.1.1.1.6GetBindingValue ( =N=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: getbindingvalue-n-s
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method GetBindingValue for declarative Environment Records simply
returns the value of its bound identifier whose name is the value of the
argument =N=. If the binding exists but is uninitialized a
ReferenceError is thrown, regardless of the value of =S=.

1. Let =envRec= be the declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= has a binding
   for =N=.
3. If the binding for =N= in =envRec= is an uninitialized binding, throw
   a ReferenceError exception.
4. Return the value currently bound to =N= in =envRec=.

* 8.1.1.1.7DeleteBinding ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: deletebinding-n
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method DeleteBinding for declarative Environment Records can only delete
bindings that have been explicitly designated as being subject to
deletion.

1. Let =envRec= be the declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= has a binding
   for the name that is the value of =N=.
3. If the binding for =N= in =envRec= cannot be deleted, return false.
4. Remove the binding for =N= from =envRec=.
5. Return true.

* 8.1.1.1.8HasThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hasthisbinding
  :END:

Regular declarative Environment Records do not provide a =this= binding.

1. Return false.

* 8.1.1.1.9HasSuperBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hassuperbinding
  :END:

Regular declarative Environment Records do not provide a =super=
binding.

1. Return false.

* 8.1.1.1.10WithBaseObject ( )
  :PROPERTIES:
  :CUSTOM_ID: withbaseobject
  :END:

Declarative Environment Records always return undefined as their
WithBaseObject.

1. Return undefined.

* 8.1.1.2Object Environment Records
  :PROPERTIES:
  :CUSTOM_ID: object-environment-records
  :END:

Each object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
is associated with an object called its /binding object/. An object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
binds the set of string identifier names that directly correspond to the
property names of its binding object. Property keys that are not strings
in the form of an
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] are not
included in the set of bound identifiers. Both own and inherited
properties are included in the set regardless of the setting of their
[[Enumerable]] attribute. Because properties can be dynamically added
and deleted from objects, the set of identifiers bound by an object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
may potentially change as a side-effect of any operation that adds or
deletes properties. Any bindings that are created as a result of such a
side-effect are considered to be a mutable binding even if the Writable
attribute of the corresponding property has the value false. Immutable
bindings do not exist for object Environment Records.

Object Environment Records created for =with= statements
([[https://tc39.es/ecma262/#sec-with-statement][13.11]]) can provide
their binding object as an implicit this value for use in function
calls. The capability is controlled by a =withEnvironment= Boolean value
that is associated with each object
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]. By default, the value of =withEnvironment= is false for any
object [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]].

The behaviour of the concrete specification methods for object
Environment Records is defined by the following algorithms.

* 8.1.1.2.1HasBinding ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: hasbinding-n-1
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method HasBinding for object Environment Records determines if its
associated binding object has a property whose name is the value of the
argument =N=:

1. Let =envRec= be the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =bindings= be the binding object for =envRec=.
3. Let =foundBinding= be
   ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=bindings=,
   =N=).
4. If =foundBinding= is false, return false.
5. If the =withEnvironment= flag of =envRec= is false, return true.
6. Let =unscopables= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=bindings=,
   @@unscopables).
7. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=unscopables=)
   is Object, then

   1. Let =blocked= be
      ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
      [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=unscopables=,
      =N=)).
   2. If =blocked= is true, return false.

8. Return true.

* 8.1.1.2.2CreateMutableBinding ( =N=, =D= )
  :PROPERTIES:
  :CUSTOM_ID: createmutablebinding-n-d-1
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateMutableBinding for object Environment Records creates in an
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]'s associated binding object a property whose name is the String
value and initializes it to the value undefined. If Boolean argument =D=
has the value true the new property's [[Configurable]] attribute is set
to true; otherwise it is set to false.

1. Let =envRec= be the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =bindings= be the binding object for =envRec=.
3. Return
   ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=bindings=,
   =N=, PropertyDescriptor { [[Value]]: undefined, [[Writable]]: true,
   [[Enumerable]]: true, [[Configurable]]: =D= }).

Note

Normally =envRec= will not have a binding for =N= but if it does, the
semantics of
[[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]]
may result in an existing binding being replaced or shadowed or cause an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] to be returned.

* 8.1.1.2.3CreateImmutableBinding ( =N=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: createimmutablebinding-n-s-1
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateImmutableBinding is never used within this specification in
association with object Environment Records.

* 8.1.1.2.4InitializeBinding ( =N=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: initializebinding-n-v-1
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method InitializeBinding for object Environment Records is used to set
the bound value of the current binding of the identifier whose name is
the value of the argument =N= to the value of argument =V=. An
uninitialized binding for =N= must already exist.

1. Let =envRec= be the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= must have an
   uninitialized binding for =N=.
3. [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   that the binding for =N= in =envRec= has been initialized.
4. Return ? =envRec=.SetMutableBinding(=N=, =V=, false).

Note

In this specification, all uses of CreateMutableBinding for object
Environment Records are immediately followed by a call to
InitializeBinding for the same name. Hence, implementations do not need
to explicitly track the initialization state of individual object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
bindings.

* 8.1.1.2.5SetMutableBinding ( =N=, =V=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: setmutablebinding-n-v-s-1
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method SetMutableBinding for object Environment Records attempts to set
the value of the
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]'s associated binding object's property whose name is the value
of the argument =N= to the value of argument =V=. A property named =N=
normally already exists but if it does not or is not currently writable,
error handling is determined by the value of the Boolean argument =S=.

1. Let =envRec= be the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =bindings= be the binding object for =envRec=.
3. Return
   ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=bindings=,
   =N=, =V=, =S=).

* 8.1.1.2.6GetBindingValue ( =N=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: getbindingvalue-n-s-1
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method GetBindingValue for object Environment Records returns the value
of its associated binding object's property whose name is the String
value of the argument identifier =N=. The property should already exist
but if it does not the result depends upon the value of the =S=
argument:

1. Let =envRec= be the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =bindings= be the binding object for =envRec=.
3. Let =value= be
   ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=bindings=,
   =N=).
4. If =value= is false, then

   1. If =S= is false, return the value undefined; otherwise throw a
      ReferenceError exception.

5. Return ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=bindings=,
   =N=).

* 8.1.1.2.7DeleteBinding ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: deletebinding-n-1
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method DeleteBinding for object Environment Records can only delete
bindings that correspond to properties of the environment object whose
[[Configurable]] attribute have the value true.

1. Let =envRec= be the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =bindings= be the binding object for =envRec=.
3. Return ? =bindings=.[[Delete]](=N=).

* 8.1.1.2.8HasThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hasthisbinding-1
  :END:

Regular object Environment Records do not provide a =this= binding.

1. Return false.

* 8.1.1.2.9HasSuperBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hassuperbinding-1
  :END:

Regular object Environment Records do not provide a =super= binding.

1. Return false.

* 8.1.1.2.10WithBaseObject ( )
  :PROPERTIES:
  :CUSTOM_ID: withbaseobject-1
  :END:

Object Environment Records return undefined as their WithBaseObject
unless their =withEnvironment= flag is true.

1. Let =envRec= be the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. If the =withEnvironment= flag of =envRec= is true, return the binding
   object for =envRec=.
3. Otherwise, return undefined.

* 8.1.1.3Function Environment Records
  :PROPERTIES:
  :CUSTOM_ID: function-environment-records
  :END:

A function Environment Record is a declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
that is used to represent the top-level scope of a function and, if the
function is not an
[[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]], provides
a =this= binding. If a function is not an
[[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] function
and references =super=, its function Environment Record also contains
the state that is used to perform =super= method invocations from within
the function.

Function Environment Records have the additional state fields listed in
[[https://tc39.es/ecma262/#table-16][Table 17]].

Table 17: Additional Fields of Function Environment Records
| Field Name              | Value                                   | Meaning                                                                                                                                                                                                                                                             |
|-------------------------+-----------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[ThisValue]]           | Any                                     | This is the this value used for this invocation of the function.                                                                                                                                                                                                    |
| [[ThisBindingStatus]]   | lexical | initialized | uninitialized   | If the value is lexical, this is an [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] and does not have a local this value.                                                                                                                            |
| [[FunctionObject]]      | Object                                  | The [[https://tc39.es/ecma262/#function-object][function object]] whose invocation caused this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] to be created.                                                                              |
| [[HomeObject]]          | Object | undefined                      | If the associated function has =super= property accesses and is not an [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]], [[HomeObject]] is the object that the function is bound to as a method. The default value for [[HomeObject]] is undefined.   |
| [[NewTarget]]           | Object | undefined                      | If this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] was created by the [[Construct]] internal method, [[NewTarget]] is the value of the [[Construct]] =newTarget= parameter. Otherwise, its value is undefined.                        |

Function Environment Records support all of the declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
methods listed in [[https://tc39.es/ecma262/#table-15][Table 16]] and
share the same specifications for all of those methods except for
HasThisBinding and HasSuperBinding. In addition, function Environment
Records support the methods listed in
[[https://tc39.es/ecma262/#table-17][Table 18]]:

Table 18: Additional Methods of Function Environment Records
| Method             | Purpose                                                                                                                                                                                                                                                                                                                                                                               |
|--------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| BindThisValue(V)   | Set the [[ThisValue]] and record that it has been initialized.                                                                                                                                                                                                                                                                                                                        |
| GetThisBinding()   | Return the value of this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]'s =this= binding. Throws a ReferenceError if the =this= binding has not been initialized.                                                                                                                                                                                           |
| GetSuperBase()     | Return the object that is the base for =super= property accesses bound in this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The object is derived from this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]'s [[HomeObject]] field. The value undefined indicates that =super= property accesses will produce runtime errors.   |

The behaviour of the additional concrete specification methods for
function Environment Records is defined by the following algorithms:

* 8.1.1.3.1BindThisValue ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: bindthisvalue-v
  :END:

1. Let =envRec= be the
   [[https://tc39.es/ecma262/#sec-function-environment-records][function
   Environment Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   =envRec=.[[ThisBindingStatus]] is not lexical.
3. If =envRec=.[[ThisBindingStatus]] is initialized, throw a
   ReferenceError exception.
4. Set =envRec=.[[ThisValue]] to =V=.
5. Set =envRec=.[[ThisBindingStatus]] to initialized.
6. Return =V=.

* 8.1.1.3.2HasThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hasthisbinding-2
  :END:

1. Let =envRec= be the
   [[https://tc39.es/ecma262/#sec-function-environment-records][function
   Environment Record]] for which the method was invoked.
2. If =envRec=.[[ThisBindingStatus]] is lexical, return false;
   otherwise, return true.

* 8.1.1.3.3HasSuperBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hassuperbinding-2
  :END:

1. Let =envRec= be the
   [[https://tc39.es/ecma262/#sec-function-environment-records][function
   Environment Record]] for which the method was invoked.
2. If =envRec=.[[ThisBindingStatus]] is lexical, return false.
3. If =envRec=.[[HomeObject]] has the value undefined, return false;
   otherwise, return true.

* 8.1.1.3.4GetThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: getthisbinding
  :END:

1. Let =envRec= be the
   [[https://tc39.es/ecma262/#sec-function-environment-records][function
   Environment Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   =envRec=.[[ThisBindingStatus]] is not lexical.
3. If =envRec=.[[ThisBindingStatus]] is uninitialized, throw a
   ReferenceError exception.
4. Return =envRec=.[[ThisValue]].

* 8.1.1.3.5GetSuperBase ( )
  :PROPERTIES:
  :CUSTOM_ID: getsuperbase
  :END:

1. Let =envRec= be the
   [[https://tc39.es/ecma262/#sec-function-environment-records][function
   Environment Record]] for which the method was invoked.
2. Let =home= be =envRec=.[[HomeObject]].
3. If =home= has the value undefined, return undefined.
4. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=home=)
   is Object.
5. Return ? =home=.[[GetPrototypeOf]]().

* 8.1.1.4Global Environment Records
  :PROPERTIES:
  :CUSTOM_ID: global-environment-records
  :END:

A global [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]] is used to represent the outer most scope that is shared by all
of the ECMAScript [[https://tc39.es/ecma262/#prod-Script][Script]]
elements that are processed in a common
[[https://tc39.es/ecma262/#realm][realm]]. A global
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
provides the bindings for built-in globals (clause
[[https://tc39.es/ecma262/#sec-global-object][18]]), properties of the
[[https://tc39.es/ecma262/#sec-global-object][global object]], and for
all top-level declarations
([[https://tc39.es/ecma262/#sec-block-static-semantics-toplevellexicallyscopeddeclarations][13.2.8]],
[[https://tc39.es/ecma262/#sec-block-static-semantics-toplevelvarscopeddeclarations][13.2.10]])
that occur within a [[https://tc39.es/ecma262/#prod-Script][Script]].

A global [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]] is logically a single record but it is specified as a composite
encapsulating an object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
and a declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]. The object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
has as its base object the
[[https://tc39.es/ecma262/#sec-global-object][global object]] of the
associated [[https://tc39.es/ecma262/#realm-record][Realm Record]]. This
[[https://tc39.es/ecma262/#sec-global-object][global object]] is the
value returned by the global
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]'s GetThisBinding concrete method. The object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
component of a global
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
contains the bindings for all built-in globals (clause
[[https://tc39.es/ecma262/#sec-global-object][18]]) and all bindings
introduced by a
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
[[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
[[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
or
[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
contained in global code. The bindings for all other ECMAScript
declarations in global code are contained in the declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
component of the global
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]].

Properties may be created directly on a
[[https://tc39.es/ecma262/#sec-global-object][global object]]. Hence,
the object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
component of a global
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
may contain both bindings created explicitly by
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
[[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
[[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
or
[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
declarations and bindings created implicitly as properties of the
[[https://tc39.es/ecma262/#sec-global-object][global object]]. In order
to identify which bindings were explicitly created using declarations, a
global [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]] maintains a list of the names bound using its
CreateGlobalVarBinding and CreateGlobalFunctionBinding concrete methods.

Global Environment Records have the additional fields listed in
[[https://tc39.es/ecma262/#table-18][Table 19]] and the additional
methods listed in [[https://tc39.es/ecma262/#table-19][Table 20]].

Table 19: Additional Fields of Global Environment Records
| Field Name              | Value                                                                                  | Meaning|
||
| [[ObjectRecord]]        | Object [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]        | Binding object is the [[https://tc39.es/ecma262/#sec-global-object][global object]]. It contains global built-in bindings as well as [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]], [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]], [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]], [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]], and [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]] bindings in global code for the associated [[https://tc39.es/ecma262/#realm][realm]].   |
| [[GlobalThisValue]]     | Object                                                                                 | The value returned by =this= in global scope. Hosts may provide any ECMAScript Object value|
| [[DeclarativeRecord]]   | Declarative [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]   | Contains bindings for all declarations in global code for the associated [[https://tc39.es/ecma262/#realm][realm]] code except for [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]], [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]], [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]], [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]], and [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]] =bindings=.                                                                               |
| [[VarNames]]            | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of String    | The string names bound by [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]], [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]], [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]], [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]], and [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]] declarations in global code for the associated [[https://tc39.es/ecma262/#realm][realm]].                                                                                                          |

Table 20: Additional Methods of Global Environment Records
| Method                                 | Purpose|
||
| GetThisBinding()                       | Return the value of this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]'s =this= binding|
| HasVarDeclaration (N)                  | Determines if the argument identifier has a binding in this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] that was created using a [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]], [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]], [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]], [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]], or [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].                                                                         |
| HasLexicalDeclaration (N)              | Determines if the argument identifier has a binding in this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]] that was created using a lexical declaration such as a [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]] or a [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].                                                                                                                                                                                                                                                                                                              |
| HasRestrictedGlobalProperty (N)        | Determines if the argument is the name of a [[https://tc39.es/ecma262/#sec-global-object][global object]] property that may not be shadowed by a global lexical binding.                                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
| CanDeclareGlobalVar (N)                | Determines if a corresponding CreateGlobalVarBinding call would succeed if called for the same argument|
| CanDeclareGlobalFunction (N)           | Determines if a corresponding CreateGlobalFunctionBinding call would succeed if called for the same argument|
| CreateGlobalVarBinding(N, D)           | Used to create and initialize to undefined a global =var= binding in the [[ObjectRecord]] component of a global [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The binding will be a mutable binding. The corresponding [[https://tc39.es/ecma262/#sec-global-object][global object]] property will have attribute values appropriate for a =var=. The String value =N= is the bound name. If =D= is true the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows var declarations to receive special treatment.                                                   |
| CreateGlobalFunctionBinding(N, V, D)   | Create and initialize a global =function= binding in the [[ObjectRecord]] component of a global [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The binding will be a mutable binding. The corresponding [[https://tc39.es/ecma262/#sec-global-object][global object]] property will have attribute values appropriate for a =function=. The String value =N= is the bound name. =V= is the initialization value. If the Boolean argument =D= is true the binding may be deleted. Logically equivalent to CreateMutableBinding followed by a SetMutableBinding but it allows function declarations to receive special treatment.   |

The behaviour of the concrete specification methods for global
Environment Records is defined by the following algorithms.

* 8.1.1.4.1HasBinding ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: hasbinding-n-2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method HasBinding for global Environment Records simply determines if
the argument identifier is one of the identifiers bound by the record:

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. If =DclRec=.HasBinding(=N=) is true, return true.
4. Let =ObjRec= be =envRec=.[[ObjectRecord]].
5. Return ? =ObjRec=.HasBinding(=N=).

* 8.1.1.4.2CreateMutableBinding ( =N=, =D= )
  :PROPERTIES:
  :CUSTOM_ID: createmutablebinding-n-d-2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateMutableBinding for global Environment Records creates a new
mutable binding for the name =N= that is uninitialized. The binding is
created in the associated DeclarativeRecord. A binding for =N= must not
already exist in the DeclarativeRecord. If Boolean argument =D= has the
value true the new binding is marked as being subject to deletion.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. If =DclRec=.HasBinding(=N=) is true, throw a TypeError exception.
4. Return =DclRec=.CreateMutableBinding(=N=, =D=).

* 8.1.1.4.3CreateImmutableBinding ( =N=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: createimmutablebinding-n-s-2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateImmutableBinding for global Environment Records creates a
new immutable binding for the name =N= that is uninitialized. A binding
must not already exist in this
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
for =N=. If the Boolean argument =S= has the value true the new binding
is marked as a strict binding.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. If =DclRec=.HasBinding(=N=) is true, throw a TypeError exception.
4. Return =DclRec=.CreateImmutableBinding(=N=, =S=).

* 8.1.1.4.4InitializeBinding ( =N=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: initializebinding-n-v-2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method InitializeBinding for global Environment Records is used to set
the bound value of the current binding of the identifier whose name is
the value of the argument =N= to the value of argument =V=. An
uninitialized binding for =N= must already exist.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. If =DclRec=.HasBinding(=N=) is true, then

   1. Return =DclRec=.InitializeBinding(=N=, =V=).

4. [[https://tc39.es/ecma262/#assert][Assert]]: If the binding exists,
   it must be in the object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]].
5. Let =ObjRec= be =envRec=.[[ObjectRecord]].
6. Return ? =ObjRec=.InitializeBinding(=N=, =V=).

* 8.1.1.4.5SetMutableBinding ( =N=, =V=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: setmutablebinding-n-v-s-2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method SetMutableBinding for global Environment Records attempts to
change the bound value of the current binding of the identifier whose
name is the value of the argument =N= to the value of argument =V=. If
the binding is an immutable binding, a TypeError is thrown if =S= is
true. A property named =N= normally already exists but if it does not or
is not currently writable, error handling is determined by the value of
the Boolean argument =S=.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. If =DclRec=.HasBinding(=N=) is true, then

   1. Return =DclRec=.SetMutableBinding(=N=, =V=, =S=).

4. Let =ObjRec= be =envRec=.[[ObjectRecord]].
5. Return ? =ObjRec=.SetMutableBinding(=N=, =V=, =S=).

* 8.1.1.4.6GetBindingValue ( =N=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: getbindingvalue-n-s-2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method GetBindingValue for global Environment Records returns the value
of its bound identifier whose name is the value of the argument =N=. If
the binding is an uninitialized binding throw a ReferenceError
exception. A property named =N= normally already exists but if it does
not or is not currently writable, error handling is determined by the
value of the Boolean argument =S=.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. If =DclRec=.HasBinding(=N=) is true, then

   1. Return =DclRec=.GetBindingValue(=N=, =S=).

4. Let =ObjRec= be =envRec=.[[ObjectRecord]].
5. Return ? =ObjRec=.GetBindingValue(=N=, =S=).

* 8.1.1.4.7DeleteBinding ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: deletebinding-n-2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method DeleteBinding for global Environment Records can only delete
bindings that have been explicitly designated as being subject to
deletion.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. If =DclRec=.HasBinding(=N=) is true, then

   1. Return =DclRec=.DeleteBinding(=N=).

4. Let =ObjRec= be =envRec=.[[ObjectRecord]].
5. Let =globalObject= be the binding object for =ObjRec=.
6. Let =existingProp= be
   ? [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=globalObject=,
   =N=).
7. If =existingProp= is true, then

   1. Let =status= be ? =ObjRec=.DeleteBinding(=N=).
   2. If =status= is true, then

      1. Let =varNames= be =envRec=.[[VarNames]].
      2. If =N= is an element of =varNames=, remove that element from
         the =varNames=.

   3. Return =status=.

8. Return true.

* 8.1.1.4.8HasThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hasthisbinding-3
  :END:

1. Return true.

* 8.1.1.4.9HasSuperBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hassuperbinding-3
  :END:

1. Return false.

* 8.1.1.4.10WithBaseObject ( )
  :PROPERTIES:
  :CUSTOM_ID: withbaseobject-2
  :END:

Global Environment Records always return undefined as their
WithBaseObject.

1. Return undefined.

* 8.1.1.4.11GetThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: getthisbinding-1
  :END:

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Return =envRec=.[[GlobalThisValue]].

* 8.1.1.4.12HasVarDeclaration ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: hasvardeclaration-n
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method HasVarDeclaration for global Environment Records determines if
the argument identifier has a binding in this record that was created
using a
[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
or a
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =varDeclaredNames= be =envRec=.[[VarNames]].
3. If =varDeclaredNames= contains =N=, return true.
4. Return false.

* 8.1.1.4.13HasLexicalDeclaration ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: haslexicaldeclaration-n
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method HasLexicalDeclaration for global Environment Records determines
if the argument identifier has a binding in this record that was created
using a lexical declaration such as a
[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]
or a
[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =DclRec= be =envRec=.[[DeclarativeRecord]].
3. Return =DclRec=.HasBinding(=N=).

* 8.1.1.4.14HasRestrictedGlobalProperty ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: hasrestrictedglobalproperty-n
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method HasRestrictedGlobalProperty for global Environment Records
determines if the argument identifier is the name of a property of the
[[https://tc39.es/ecma262/#sec-global-object][global object]] that must
not be shadowed by a global lexical binding:

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =ObjRec= be =envRec=.[[ObjectRecord]].
3. Let =globalObject= be the binding object for =ObjRec=.
4. Let =existingProp= be ? =globalObject=.[[GetOwnProperty]](=N=).
5. If =existingProp= is undefined, return false.
6. If =existingProp=.[[Configurable]] is true, return false.
7. Return true.

Note

Properties may exist upon a
[[https://tc39.es/ecma262/#sec-global-object][global object]] that were
directly created rather than being declared using a var or function
declaration. A global lexical binding may not be created that has the
same name as a non-configurable property of the
[[https://tc39.es/ecma262/#sec-global-object][global object]]. The
global property "undefined" is an example of such a property.

* 8.1.1.4.15CanDeclareGlobalVar ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: candeclareglobalvar-n
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CanDeclareGlobalVar for global Environment Records determines if
a corresponding CreateGlobalVarBinding call would succeed if called for
the same argument =N=. Redundant var declarations and var declarations
for pre-existing [[https://tc39.es/ecma262/#sec-global-object][global
object]] properties are allowed.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =ObjRec= be =envRec=.[[ObjectRecord]].
3. Let =globalObject= be the binding object for =ObjRec=.
4. Let =hasProperty= be
   ? [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=globalObject=,
   =N=).
5. If =hasProperty= is true, return true.
6. Return
   ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=globalObject=).

* 8.1.1.4.16CanDeclareGlobalFunction ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: candeclareglobalfunction-n
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CanDeclareGlobalFunction for global Environment Records
determines if a corresponding CreateGlobalFunctionBinding call would
succeed if called for the same argument =N=.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =ObjRec= be =envRec=.[[ObjectRecord]].
3. Let =globalObject= be the binding object for =ObjRec=.
4. Let =existingProp= be ? =globalObject=.[[GetOwnProperty]](=N=).
5. If =existingProp= is undefined, return
   ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=globalObject=).
6. If =existingProp=.[[Configurable]] is true, return true.
7. If
   [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=existingProp=)
   is true and =existingProp= has attribute values { [[Writable]]: true,
   [[Enumerable]]: true }, return true.
8. Return false.

* 8.1.1.4.17CreateGlobalVarBinding ( =N=, =D= )
  :PROPERTIES:
  :CUSTOM_ID: createglobalvarbinding-n-d
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateGlobalVarBinding for global Environment Records creates and
initializes a mutable binding in the associated object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
and records the bound name in the associated [[VarNames]]
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
If a binding already exists, it is reused and assumed to be initialized.

1. Let =envRec= be the global
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. Let =ObjRec= be =envRec=.[[ObjectRecord]].
3. Let =globalObject= be the binding object for =ObjRec=.
4. Let =hasProperty= be
   ? [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=globalObject=,
   =N=).
5. Let =extensible= be
   ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=globalObject=).
6. If =hasProperty= is false and =extensible= is true, then

   1. Perform ? =ObjRec=.CreateMutableBinding(=N=, =D=).
   2. Perform ? =ObjRec=.InitializeBinding(=N=, undefined).

7. Let =varDeclaredNames= be =envRec=.[[VarNames]].
8. If =varDeclaredNames= does not contain =N=, then

   1. Append =N= to =varDeclaredNames=.

9. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 8.1.1.4.18CreateGlobalFunctionBinding ( =N=, =V=, =D= )
  :PROPERTIES:
  :CUSTOM_ID: createglobalfunctionbinding-n-v-d
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateGlobalFunctionBinding for global Environment Records
creates and initializes a mutable binding in the associated object
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
and records the bound name in the associated [[VarNames]]
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
If a binding already exists, it is replaced.

1.  Let =envRec= be the global
    [[https://tc39.es/ecma262/#sec-environment-records][Environment
    Record]] for which the method was invoked.
2.  Let =ObjRec= be =envRec=.[[ObjectRecord]].
3.  Let =globalObject= be the binding object for =ObjRec=.
4.  Let =existingProp= be ? =globalObject=.[[GetOwnProperty]](=N=).
5.  If =existingProp= is undefined or =existingProp=.[[Configurable]] is
    true, then

    1. Let =desc= be the PropertyDescriptor { [[Value]]: =V=,
       [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]: =D=
       }.

6.  Else,

    1. Let =desc= be the PropertyDescriptor { [[Value]]: =V= }.

7.  Perform
    ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=globalObject=,
    =N=, =desc=).
8.  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
    that the binding for =N= in =ObjRec= has been initialized.
9.  Perform
    ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=globalObject=,
    =N=, =V=, false).
10. Let =varDeclaredNames= be =envRec=.[[VarNames]].
11. If =varDeclaredNames= does not contain =N=, then

    1. Append =N= to =varDeclaredNames=.

12. Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

Note

Global function declarations are always represented as own properties of
the [[https://tc39.es/ecma262/#sec-global-object][global object]]. If
possible, an existing own property is reconfigured to have a standard
set of attribute values. Steps 8-9 are equivalent to what calling the
InitializeBinding concrete method would do and if =globalObject= is a
Proxy will produce the same sequence of Proxy trap calls.

* 8.1.1.5Module Environment Records
  :PROPERTIES:
  :CUSTOM_ID: module-environment-records
  :END:

A module [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]] is a declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
that is used to represent the outer scope of an ECMAScript
[[https://tc39.es/ecma262/#prod-Module][Module]]. In additional to
normal mutable and immutable bindings, module Environment Records also
provide immutable import bindings which are bindings that provide
indirect access to a target binding that exists in another
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]].

Module Environment Records support all of the declarative
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
methods listed in [[https://tc39.es/ecma262/#table-15][Table 16]] and
share the same specifications for all of those methods except for
GetBindingValue, DeleteBinding, HasThisBinding and GetThisBinding. In
addition, module Environment Records support the methods listed in
[[https://tc39.es/ecma262/#table-20][Table 21]]:

Table 21: Additional Methods of Module Environment Records
| Method                          | Purpose                                                                                                                                                                                                                                                                                                                                                                                      |
|---------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| CreateImportBinding(N, M, N2)   | Create an immutable indirect binding in a module [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]. The String value =N= is the text of the bound name. =M= is a [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]], and =N2= is a binding that exists in M's module [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]].   |
| GetThisBinding()                | Return the value of this [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]'s =this= binding.                                                                                                                                                                                                                                                                          |

The behaviour of the additional concrete specification methods for
module Environment Records are defined by the following algorithms:

* 8.1.1.5.1GetBindingValue ( =N=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: getbindingvalue-n-s-3
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method GetBindingValue for module Environment Records returns the value
of its bound identifier whose name is the value of the argument =N=.
However, if the binding is an indirect binding the value of the target
binding is returned. If the binding exists but is uninitialized a
ReferenceError is thrown.

1. [[https://tc39.es/ecma262/#assert][Assert]]: =S= is true.
2. Let =envRec= be the module
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
3. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= has a binding
   for =N=.
4. If the binding for =N= is an indirect binding, then

   1. Let =M= and =N2= be the indirection values provided when this
      binding for =N= was created.
   2. Let =targetEnv= be =M=.[[Environment]].
   3. If =targetEnv= is undefined, throw a ReferenceError exception.
   4. Let =targetER= be =targetEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
   5. Return ? =targetER=.GetBindingValue(=N2=, true).

5. If the binding for =N= in =envRec= is an uninitialized binding, throw
   a ReferenceError exception.
6. Return the value currently bound to =N= in =envRec=.

Note

=S= will always be true because a
[[https://tc39.es/ecma262/#prod-Module][Module]] is always
[[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

* 8.1.1.5.2DeleteBinding ( =N= )
  :PROPERTIES:
  :CUSTOM_ID: deletebinding-n-3
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method DeleteBinding for module Environment Records refuses to delete
bindings.

1. [[https://tc39.es/ecma262/#assert][Assert]]: This method is never
   invoked. See
   [[https://tc39.es/ecma262/#sec-delete-operator-static-semantics-early-errors][12.5.3.1]].

Note

Module Environment Records are only used within strict code and an
[[https://tc39.es/ecma262/#early-error][early error]] rule prevents the
delete operator, in strict code, from being applied to a
[[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
that would resolve to a module
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
binding. See
[[https://tc39.es/ecma262/#sec-delete-operator-static-semantics-early-errors][12.5.3.1]].

* 8.1.1.5.3HasThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: hasthisbinding-4
  :END:

Module Environment Records provide a =this= binding.

1. Return true.

* 8.1.1.5.4GetThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: getthisbinding-2
  :END:

1. Return undefined.

* 8.1.1.5.5CreateImportBinding ( =N=, =M=, =N2= )
  :PROPERTIES:
  :CUSTOM_ID: createimportbinding-n-m-n2
  :END:

The concrete
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
method CreateImportBinding for module Environment Records creates a new
initialized immutable indirect binding for the name =N=. A binding must
not already exist in this
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
for =N=. =M= is a
[[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]],
and =N2= is the name of a binding that exists in M's module
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]. Accesses to the value of the new binding will indirectly
access the bound value of the target binding.

1. Let =envRec= be the module
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for which the method was invoked.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= does not
   already have a binding for =N=.
3. [[https://tc39.es/ecma262/#assert][Assert]]: =M= is a
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
   Record]].
4. [[https://tc39.es/ecma262/#assert][Assert]]: When =M=.[[Environment]]
   is instantiated it will have a direct binding for =N2=.
5. Create an immutable indirect binding in =envRec= for =N= that
   references =M= and =N2= as its target binding and record that the
   binding is initialized.
6. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 8.1.2Lexical Environment Operations
  :PROPERTIES:
  :CUSTOM_ID: lexical-environment-operations
  :END:

The following
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are used in this specification to operate upon lexical
environments:

* 8.1.2.1GetIdentifierReference ( =lex=, =name=, =strict= )
  :PROPERTIES:
  :CUSTOM_ID: getidentifierreference-lex-name-strict
  :END:

The abstract operation GetIdentifierReference is called with a
[[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]] =lex=, a String =name=, and a Boolean flag =strict=. The
value of =lex= may be null. When called, the following steps are
performed:

1. If =lex= is the value null, then

   1. Return a value of type
      [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
      whose base value component is undefined, whose referenced name
      component is =name=, and whose strict reference flag is =strict=.

2. Let =envRec= be =lex='s
   [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
3. Let =exists= be ? =envRec=.HasBinding(=name=).
4. If =exists= is true, then

   1. Return a value of type
      [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
      whose base value component is =envRec=, whose referenced name
      component is =name=, and whose strict reference flag is =strict=.

5. Else,

   1. Let =outer= be the value of =lex='s outer environment reference.
   2. Return
      ? [[https://tc39.es/ecma262/#sec-getidentifierreference][GetIdentifierReference]](=outer=,
      =name=, =strict=).

* 8.1.2.2NewDeclarativeEnvironment ( =E= )
  :PROPERTIES:
  :CUSTOM_ID: newdeclarativeenvironment-e
  :END:

When the abstract operation NewDeclarativeEnvironment is called with a
[[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]] as argument =E= the following steps are performed:

1. Let =env= be a new
   [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
   Environment]].
2. Let =envRec= be a new declarative
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] containing no bindings.
3. Set =env='s
   [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]
   to =envRec=.
4. Set the outer lexical environment reference of =env= to =E=.
5. Return =env=.

* 8.1.2.3NewObjectEnvironment ( =O=, =E= )
  :PROPERTIES:
  :CUSTOM_ID: newobjectenvironment-o-e
  :END:

When the abstract operation NewObjectEnvironment is called with an
Object =O= and a
[[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]] =E= as arguments, the following steps are performed:

1. Let =env= be a new
   [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
   Environment]].
2. Let =envRec= be a new object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] containing =O= as the binding object.
3. Set =env='s
   [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]
   to =envRec=.
4. Set the outer lexical environment reference of =env= to =E=.
5. Return =env=.

* 8.1.2.4NewFunctionEnvironment ( =F=, =newTarget= )
  :PROPERTIES:
  :CUSTOM_ID: newfunctionenvironment-f-newtarget
  :END:

When the abstract operation NewFunctionEnvironment is called with
arguments =F= and =newTarget= the following steps are performed:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an ECMAScript
    function.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=newTarget=)
    is Undefined or Object.
3.  Let =env= be a new
    [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
    Environment]].
4.  Let =envRec= be a new
    [[https://tc39.es/ecma262/#sec-function-environment-records][function
    Environment Record]] containing no bindings.
5.  Set =envRec=.[[FunctionObject]] to =F=.
6.  If =F=.[[ThisMode]] is lexical, set =envRec=.[[ThisBindingStatus]]
    to lexical.
7.  Else, set =envRec=.[[ThisBindingStatus]] to uninitialized.
8.  Let =home= be =F=.[[HomeObject]].
9.  Set =envRec=.[[HomeObject]] to =home=.
10. Set =envRec=.[[NewTarget]] to =newTarget=.
11. Set =env='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]
    to =envRec=.
12. Set the outer lexical environment reference of =env= to
    =F=.[[Environment]].
13. Return =env=.

* 8.1.2.5NewGlobalEnvironment ( =G=, =thisValue= )
  :PROPERTIES:
  :CUSTOM_ID: newglobalenvironment-g-thisvalue
  :END:

When the abstract operation NewGlobalEnvironment is called with
arguments =G= and =thisValue=, the following steps are performed:

1.  Let =env= be a new
    [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
    Environment]].
2.  Let =objRec= be a new object
    [[https://tc39.es/ecma262/#sec-environment-records][Environment
    Record]] containing =G= as the binding object.
3.  Let =dclRec= be a new declarative
    [[https://tc39.es/ecma262/#sec-environment-records][Environment
    Record]] containing no bindings.
4.  Let =globalRec= be a new global
    [[https://tc39.es/ecma262/#sec-environment-records][Environment
    Record]].
5.  Set =globalRec=.[[ObjectRecord]] to =objRec=.
6.  Set =globalRec=.[[GlobalThisValue]] to =thisValue=.
7.  Set =globalRec=.[[DeclarativeRecord]] to =dclRec=.
8.  Set =globalRec=.[[VarNames]] to a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
9.  Set =env='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]
    to =globalRec=.
10. Set the outer lexical environment reference of =env= to null.
11. Return =env=.

* 8.1.2.6NewModuleEnvironment ( =E= )
  :PROPERTIES:
  :CUSTOM_ID: newmoduleenvironment-e
  :END:

When the abstract operation NewModuleEnvironment is called with a
[[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]] argument =E= the following steps are performed:

1. Let =env= be a new
   [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
   Environment]].
2. Let =envRec= be a new module
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] containing no bindings.
3. Set =env='s
   [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]
   to =envRec=.
4. Set the outer lexical environment reference of =env= to =E=.
5. Return =env=.

* 8.2Realms
  :PROPERTIES:
  :CUSTOM_ID: realms
  :END:

Before it is evaluated, all ECMAScript code must be associated with a
realm. Conceptually, a [[https://tc39.es/ecma262/#realm][realm]]
consists of a set of intrinsic objects, an ECMAScript
[[https://tc39.es/ecma262/#global-environment][global environment]], all
of the ECMAScript code that is loaded within the scope of that
[[https://tc39.es/ecma262/#global-environment][global environment]], and
other associated state and resources.

A [[https://tc39.es/ecma262/#realm][realm]] is represented in this
specification as a Realm Record with the fields specified in
[[https://tc39.es/ecma262/#table-21][Table 22]]:

Table 22: [[https://tc39.es/ecma262/#realm-record][Realm Record]] Fields
| Field Name         | Value                                                                                                                                                                                                                                                         | Meaning                                                                                                                                                                                                                                                                                                                                                                                                                                                             |
||
| [[Intrinsics]]     | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]] whose field names are intrinsic keys and whose values are objects                                                                                                                 | The intrinsic values used by code associated with this [[https://tc39.es/ecma262/#realm][realm]]                                                                                                                                                                                                                                                                                                                                                                    |
| [[GlobalObject]]   | Object                                                                                                                                                                                                                                                        | The [[https://tc39.es/ecma262/#sec-global-object][global object]] for this [[https://tc39.es/ecma262/#realm][realm]]                                                                                                                                                                                                                                                                                                                                                |
| [[GlobalEnv]]      | [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]]                                                                                                                                                                                    | The [[https://tc39.es/ecma262/#global-environment][global environment]] for this [[https://tc39.es/ecma262/#realm][realm]]                                                                                                                                                                                                                                                                                                                                          |
| [[TemplateMap]]    | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]] { [[Site]]: [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]], [[Array]]: Object }.   | Template objects are canonicalized separately for each [[https://tc39.es/ecma262/#realm][realm]] using its [[https://tc39.es/ecma262/#realm-record][Realm Record]]'s [[TemplateMap]]. Each [[Site]] value is a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]] that is a [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]. The associated [[Array]] value is the corresponding template object that is passed to a tag function.   |
|                    |                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
|                    |                                                                                                                                                                                                                                                               | Note                                                                                                                                                                                                                                                                                                                                                                                                                                                                |
|                    |                                                                                                                                                                                                                                                               |                                                                                                                                                                                                                                                                                                                                                                                                                                                                     |
|                    |                                                                                                                                                                                                                                                               | Once a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]] becomes unreachable, the corresponding [[Array]] is also unreachable, and it would be unobservable if an implementation removed the pair from the [[TemplateMap]] list.                                                                                                                                                                                                                       |
| [[HostDefined]]    | Any, default value is undefined.                                                                                                                                                                                                                              | Field reserved for use by host environments that need to associate additional information with a [[https://tc39.es/ecma262/#realm-record][Realm Record]].                                                                                                                                                                                                                                                                                                           |

* 8.2.1CreateRealm ( )
  :PROPERTIES:
  :CUSTOM_ID: createrealm
  :END:

The abstract operation CreateRealm with no arguments performs the
following steps:

1. Let =realmRec= be a new
   [[https://tc39.es/ecma262/#realm-record][Realm Record]].
2. Perform
   [[https://tc39.es/ecma262/#sec-createintrinsics][CreateIntrinsics]](=realmRec=).
3. Set =realmRec=.[[GlobalObject]] to undefined.
4. Set =realmRec=.[[GlobalEnv]] to undefined.
5. Set =realmRec=.[[TemplateMap]] to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
6. Return =realmRec=.

* 8.2.2CreateIntrinsics ( =realmRec= )
  :PROPERTIES:
  :CUSTOM_ID: createintrinsics-realmrec
  :END:

The abstract operation CreateIntrinsics with argument =realmRec=
performs the following steps:

1. Let =intrinsics= be a new
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
2. Set =realmRec=.[[Intrinsics]] to =intrinsics=.
3. Set fields of =intrinsics= with the values listed in
   [[https://tc39.es/ecma262/#table-7][Table 8]]. The field names are
   the names listed in column one of the table. The value of each field
   is a new object value fully and recursively populated with property
   values as defined by the specification of each object in clauses
   18-26. All object property values are newly created object values.
   All values that are built-in function objects are created by
   performing
   [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](<steps>,
   <slots>, =realmRec=, <prototype>) where <steps> is the definition of
   that function provided by this specification, <slots> is a list of
   the names, if any, of the function's specified internal slots, and
   <prototype> is the specified value of the function's [[Prototype]]
   internal slot. The creation of the intrinsics and their properties
   must be ordered to avoid any dependencies upon objects that have not
   yet been created.
4. Perform
   [[https://tc39.es/ecma262/#sec-addrestrictedfunctionproperties][AddRestrictedFunctionProperties]](=intrinsics=.[[[[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]]]],
   =realmRec=).
5. Return =intrinsics=.

* 8.2.3SetRealmGlobalObject ( =realmRec=, =globalObj=, =thisValue= )
  :PROPERTIES:
  :CUSTOM_ID: setrealmglobalobject-realmrec-globalobj-thisvalue
  :END:

The abstract operation SetRealmGlobalObject with arguments =realmRec=,
=globalObj=, and =thisValue= performs the following steps:

1. If =globalObj= is undefined, then

   1. Let =intrinsics= be =realmRec=.[[Intrinsics]].
   2. Set =globalObj= to
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](=intrinsics=.[[%Object.prototype%]]).

2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=globalObj=)
   is Object.
3. If =thisValue= is undefined, set =thisValue= to =globalObj=.
4. Set =realmRec=.[[GlobalObject]] to =globalObj=.
5. Let =newGlobalEnv= be
   [[https://tc39.es/ecma262/#sec-newglobalenvironment][NewGlobalEnvironment]](=globalObj=,
   =thisValue=).
6. Set =realmRec=.[[GlobalEnv]] to =newGlobalEnv=.
7. Return =realmRec=.

* 8.2.4SetDefaultGlobalBindings ( =realmRec= )
  :PROPERTIES:
  :CUSTOM_ID: setdefaultglobalbindings-realmrec
  :END:

The abstract operation SetDefaultGlobalBindings with argument =realmRec=
performs the following steps:

1. Let =global= be =realmRec=.[[GlobalObject]].
2. For each property of the Global Object specified in clause
   [[https://tc39.es/ecma262/#sec-global-object][18]], do

   1. Let =name= be the String value of the
      [[https://tc39.es/ecma262/#property-name][property name]].
   2. Let =desc= be the fully populated
      [[https://tc39.es/ecma262/#sec-object-type][data property]]
      descriptor for the property containing the specified attributes
      for the property. For properties listed in
      [[https://tc39.es/ecma262/#sec-function-properties-of-the-global-object][18.2]],
      [[https://tc39.es/ecma262/#sec-constructor-properties-of-the-global-object][18.3]],
      or
      [[https://tc39.es/ecma262/#sec-other-properties-of-the-global-object][18.4]]
      the value of the [[Value]] attribute is the corresponding
      intrinsic object from =realmRec=.
   3. Perform
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=global=,
      =name=, =desc=).

3. Return =global=.

* 8.3Execution Contexts
  :PROPERTIES:
  :CUSTOM_ID: execution-contexts
  :END:

An execution context is a specification device that is used to track the
runtime evaluation of code by an ECMAScript implementation. At any point
in time, there is at most one execution context per
[[https://tc39.es/ecma262/#agent][agent]] that is actually executing
code. This is known as the [[https://tc39.es/ecma262/#agent][agent]]'s
running execution context. All references to the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] in this specification denote the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] of the
[[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]].

The execution context stack is used to track execution contexts. The
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] is always the top element of this stack. A new execution
context is created whenever control is transferred from the executable
code associated with the currently
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] to executable code that is not associated with that execution
context. The newly created execution context is pushed onto the stack
and becomes the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]].

An execution context contains whatever implementation specific state is
necessary to track the execution progress of its associated code. Each
execution context has at least the state components listed in
[[https://tc39.es/ecma262/#table-22][Table 23]].

Table 23: State Components for All Execution Contexts
| Component                                   | Purpose                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
|---------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| code evaluation state                       | Any state needed to perform, suspend, and resume evaluation of the code associated with this [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].                                                                                                                                                                                                                                                                                         |
| Function                                    | If this [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] is evaluating the code of a [[https://tc39.es/ecma262/#function-object][function object]], then the value of this component is that [[https://tc39.es/ecma262/#function-object][function object]]. If the context is evaluating the code of a [[https://tc39.es/ecma262/#prod-Script][Script]] or [[https://tc39.es/ecma262/#prod-Module][Module]], the value is null.        |
| [[https://tc39.es/ecma262/#realm][Realm]]   | The [[https://tc39.es/ecma262/#realm-record][Realm Record]] from which associated code accesses ECMAScript resources.                                                                                                                                                                                                                                                                                                                                        |
| ScriptOrModule                              | The [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]] or [[https://tc39.es/ecma262/#script-record][Script Record]] from which associated code originates. If there is no originating script or module, as is the case for the original [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] created in [[https://tc39.es/ecma262/#sec-initializehostdefinedrealm][InitializeHostDefinedRealm]], the value is null.   |

Evaluation of code by the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] may be suspended at various points defined within this
specification. Once the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] has been suspended a different execution context may become
the [[https://tc39.es/ecma262/#running-execution-context][running
execution context]] and commence evaluating its code. At some later time
a suspended execution context may again become the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] and continue evaluating its code at the point where it had
previously been suspended. Transition of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] status among execution contexts usually occurs in stack-like
last-in/first-out manner. However, some ECMAScript features require
non-LIFO transitions of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]].

The value of the [[https://tc39.es/ecma262/#realm][Realm]] component of
the [[https://tc39.es/ecma262/#running-execution-context][running
execution context]] is also called the current Realm Record. The value
of the Function component of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] is also called the active function object.

Execution contexts for ECMAScript code have the additional state
components listed in [[https://tc39.es/ecma262/#table-23][Table 24]].

Table 24: Additional State Components for ECMAScript Code Execution
Contexts
| Component             | Purpose                                                                                                                                                                                                                                                                                                                                                          |
|-----------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| LexicalEnvironment    | Identifies the [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] used to resolve identifier references made by code within this [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].                                                                                                                                 |
| VariableEnvironment   | Identifies the [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] whose [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]] holds bindings created by [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]s within this [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].   |

The LexicalEnvironment and VariableEnvironment components of an
execution context are always Lexical Environments.

Execution contexts representing the evaluation of generator objects have
the additional state components listed in
[[https://tc39.es/ecma262/#table-24][Table 25]].

Table 25: Additional State Components for Generator Execution Contexts
| Component   | Purpose                                                                                                               |
|-------------+-----------------------------------------------------------------------------------------------------------------------|
| Generator   | The GeneratorObject that this [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] is evaluating.   |

In most situations only the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] (the top of the
[[https://tc39.es/ecma262/#execution-context-stack][execution context
stack]]) is directly manipulated by algorithms within this
specification. Hence when the terms “LexicalEnvironment”, and
“VariableEnvironment” are used without qualification they are in
reference to those components of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]].

An execution context is purely a specification mechanism and need not
correspond to any particular artefact of an ECMAScript implementation.
It is impossible for ECMAScript code to directly access or observe an
execution context.

* 8.3.1GetActiveScriptOrModule ( )
  :PROPERTIES:
  :CUSTOM_ID: getactivescriptormodule
  :END:

The GetActiveScriptOrModule abstract operation is used to determine the
running script or module, based on the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]]. GetActiveScriptOrModule performs the following steps:

1. If the [[https://tc39.es/ecma262/#execution-context-stack][execution
   context stack]] is empty, return null.
2. Let =ec= be the topmost
   [[https://tc39.es/ecma262/#sec-execution-contexts][execution
   context]] on the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]] whose ScriptOrModule component is not null.
3. If no such
   [[https://tc39.es/ecma262/#sec-execution-contexts][execution
   context]] exists, return null. Otherwise, return =ec='s
   ScriptOrModule.

* 8.3.2ResolveBinding ( =name= [ , =env= ] )
  :PROPERTIES:
  :CUSTOM_ID: resolvebinding-name-env
  :END:

The ResolveBinding abstract operation is used to determine the binding
of =name= passed as a String value. The optional argument =env= can be
used to explicitly provide the
[[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]] that is to be searched for the binding. During execution
of ECMAScript code, ResolveBinding is performed using the following
algorithm:

1. If =env= is not present or if =env= is undefined, then

   1. Set =env= to the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.

2. [[https://tc39.es/ecma262/#assert][Assert]]: =env= is a
   [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
   Environment]].
3. If the code matching the syntactic production that is being evaluated
   is contained in
   [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
   let =strict= be true; else let =strict= be false.
4. Return
   ? [[https://tc39.es/ecma262/#sec-getidentifierreference][GetIdentifierReference]](=env=,
   =name=, =strict=).

Note

The result of ResolveBinding is always a
[[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
value with its referenced name component equal to the =name= argument.

* 8.3.3GetThisEnvironment ( )
  :PROPERTIES:
  :CUSTOM_ID: getthisenvironment
  :END:

The abstract operation GetThisEnvironment finds the
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
that currently supplies the binding of the
[[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]]
=this=. GetThisEnvironment performs the following steps:

1. Let =lex= be the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]]'s LexicalEnvironment.
2. Repeat,

   1. Let =envRec= be =lex='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
   2. Let =exists= be =envRec=.HasThisBinding().
   3. If =exists= is true, return =envRec=.
   4. Let =outer= be the value of =lex='s outer environment reference.
   5. [[https://tc39.es/ecma262/#assert][Assert]]: =outer= is not null.
   6. Set =lex= to =outer=.

Note

The loop in step 2 will always terminate because the list of
environments always ends with the
[[https://tc39.es/ecma262/#global-environment][global environment]]
which has a =this= binding.

* 8.3.4ResolveThisBinding ( )
  :PROPERTIES:
  :CUSTOM_ID: resolvethisbinding
  :END:

The abstract operation ResolveThisBinding determines the binding of the
[[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]]
=this= using the LexicalEnvironment of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]]. ResolveThisBinding performs the following steps:

1. Let =envRec= be
   [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
2. Return ? =envRec=.GetThisBinding().

* 8.3.5GetNewTarget ( )
  :PROPERTIES:
  :CUSTOM_ID: getnewtarget
  :END:

The abstract operation GetNewTarget determines the NewTarget value using
the LexicalEnvironment of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]]. GetNewTarget performs the following steps:

1. Let =envRec= be
   [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= has a
   [[NewTarget]] field.
3. Return =envRec=.[[NewTarget]].

* 8.3.6GetGlobalObject ( )
  :PROPERTIES:
  :CUSTOM_ID: getglobalobject
  :END:

The abstract operation GetGlobalObject returns the
[[https://tc39.es/ecma262/#sec-global-object][global object]] used by
the currently
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]]. GetGlobalObject performs the following steps:

1. Let =currentRealm= be [[https://tc39.es/ecma262/#current-realm][the
   current Realm Record]].
2. Return =currentRealm=.[[GlobalObject]].

* 8.4Jobs and Job Queues
  :PROPERTIES:
  :CUSTOM_ID: jobs-and-job-queues
  :END:

A Job is an abstract operation that initiates an ECMAScript computation
when no other ECMAScript computation is currently in progress. A
[[https://tc39.es/ecma262/#job][Job]] abstract operation may be defined
to accept an arbitrary set of job parameters.

Execution of a [[https://tc39.es/ecma262/#job][Job]] can be initiated
only when there is no
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] and the
[[https://tc39.es/ecma262/#execution-context-stack][execution context
stack]] is empty. A PendingJob is a request for the future execution of
a [[https://tc39.es/ecma262/#job][Job]]. A PendingJob is an internal
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
whose fields are specified in [[https://tc39.es/ecma262/#table-25][Table
26]]. Once execution of a [[https://tc39.es/ecma262/#job][Job]] is
initiated, the [[https://tc39.es/ecma262/#job][Job]] always executes to
completion. No other [[https://tc39.es/ecma262/#job][Job]] may be
initiated until the currently running
[[https://tc39.es/ecma262/#job][Job]] completes. However, the currently
running [[https://tc39.es/ecma262/#job][Job]] or external events may
cause the enqueuing of additional PendingJobs that may be initiated
sometime after completion of the currently running
[[https://tc39.es/ecma262/#job][Job]].

Table 26: PendingJob
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
Fields
| Field Name           | Value                                                                                                                                    | Meaning                                                                                                                                                                                 |
|----------------------+------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[Job]]              | The name of a [[https://tc39.es/ecma262/#job][Job]] abstract operation                                                                   | This is the abstract operation that is performed when execution of this PendingJob is initiated.                                                                                        |
| [[Arguments]]        | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]                                                              | The [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of argument values that are to be passed to [[Job]] when it is activated.                                 |
| [[Realm]]            | A [[https://tc39.es/ecma262/#realm-record][Realm Record]]                                                                                | The [[https://tc39.es/ecma262/#realm-record][Realm Record]] for the initial [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] when this PendingJob is initiated.   |
| [[ScriptOrModule]]   | A [[https://tc39.es/ecma262/#script-record][Script Record]] or [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]   | The script or module for the initial [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] when this PendingJob is initiated.                                          |
| [[HostDefined]]      | Any, default value is undefined.                                                                                                         | Field reserved for use by host environments that need to associate additional information with a pending [[https://tc39.es/ecma262/#job][Job]].                                         |

A Job Queue is a FIFO queue of PendingJob records. Each
[[https://tc39.es/ecma262/#job-queue][Job Queue]] has a name and the
full set of available [[https://tc39.es/ecma262/#job][Job]] Queues are
defined by an ECMAScript implementation. Every ECMAScript implementation
has at least the [[https://tc39.es/ecma262/#job][Job]] Queues defined in
[[https://tc39.es/ecma262/#table-26][Table 27]].

Each [[https://tc39.es/ecma262/#agent][agent]] has its own set of named
[[https://tc39.es/ecma262/#job][Job]] Queues. All references to a named
job queue in this specification denote the named job queue of the
[[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]].

Table 27: Required [[https://tc39.es/ecma262/#job][Job]] Queues
| Name          | Purpose                                                                                                                                                                                |
|---------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| ScriptJobs    | Jobs that validate and evaluate ECMAScript [[https://tc39.es/ecma262/#prod-Script][Script]] and [[https://tc39.es/ecma262/#prod-Module][Module]] source text. See clauses 10 and 15.   |
| PromiseJobs   | Jobs that are responses to the settlement of a Promise (see [[https://tc39.es/ecma262/#sec-promise-objects][25.6]]).                                                                   |

A request for the future execution of a
[[https://tc39.es/ecma262/#job][Job]] is made by enqueueing, on a
[[https://tc39.es/ecma262/#job-queue][Job Queue]], a PendingJob record
that includes a [[https://tc39.es/ecma262/#job][Job]] abstract operation
name and any necessary argument values. When there is no
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] and the
[[https://tc39.es/ecma262/#execution-context-stack][execution context
stack]] is empty, the ECMAScript implementation removes the first
PendingJob from a [[https://tc39.es/ecma262/#job-queue][Job Queue]] and
uses the information contained in it to create an
[[https://tc39.es/ecma262/#sec-execution-contexts][execution context]]
and starts execution of the associated
[[https://tc39.es/ecma262/#job][Job]] abstract operation.

The PendingJob records from a single
[[https://tc39.es/ecma262/#job-queue][Job Queue]] are always initiated
in FIFO order. This specification does not define the order in which
multiple [[https://tc39.es/ecma262/#job][Job]] Queues are serviced. An
ECMAScript implementation may interweave the FIFO evaluation of the
PendingJob records of a [[https://tc39.es/ecma262/#job-queue][Job
Queue]] with the evaluation of the PendingJob records of one or more
other [[https://tc39.es/ecma262/#job][Job]] Queues. An implementation
must define what occurs when there are no
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] and all [[https://tc39.es/ecma262/#job][Job]] Queues are
empty.

Note

Typically an ECMAScript implementation will have its
[[https://tc39.es/ecma262/#job][Job]] Queues pre-initialized with at
least one PendingJob and one of those Jobs will be the first to be
executed. An implementation might choose to free all resources and
terminate if the current [[https://tc39.es/ecma262/#job][Job]] completes
and all [[https://tc39.es/ecma262/#job][Job]] Queues are empty.
Alternatively, it might choose to wait for a some implementation
specific [[https://tc39.es/ecma262/#agent][agent]] or mechanism to
enqueue new PendingJob requests.

The following
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are used to create and manage Jobs and
[[https://tc39.es/ecma262/#job][Job]] Queues:

* 8.4.1EnqueueJob ( =queueName=, =job=, =arguments= )
  :PROPERTIES:
  :CUSTOM_ID: enqueuejob-queuename-job-arguments
  :END:

The EnqueueJob abstract operation requires three arguments: =queueName=,
=job=, and =arguments=. It performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=queueName=)
    is String and its value is the name of a
    [[https://tc39.es/ecma262/#job-queue][Job Queue]] recognized by this
    implementation.
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =job= is the name of a
    [[https://tc39.es/ecma262/#job][Job]].
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =arguments= is a
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    that has the same number of elements as the number of parameters
    required by =job=.
4.  Let =callerContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
5.  Let =callerRealm= be =callerContext='s
    [[https://tc39.es/ecma262/#realm][Realm]].
6.  Let =callerScriptOrModule= be =callerContext='s ScriptOrModule.
7.  Let =pending= be PendingJob { [[Job]]: =job=, [[Arguments]]:
    =arguments=, [[Realm]]: =callerRealm=, [[ScriptOrModule]]:
    =callerScriptOrModule=, [[HostDefined]]: undefined }.
8.  Perform any implementation or host environment defined processing of
    =pending=. This may include modifying the [[HostDefined]] field or
    any other field of =pending=.
9.  Add =pending= at the back of the
    [[https://tc39.es/ecma262/#job-queue][Job Queue]] named by
    =queueName=.
10. Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 8.5InitializeHostDefinedRealm ( )
  :PROPERTIES:
  :CUSTOM_ID: initializehostdefinedrealm
  :END:

The abstract operation InitializeHostDefinedRealm performs the following
steps:

1.  Let =realm= be
    [[https://tc39.es/ecma262/#sec-createrealm][CreateRealm]]().
2.  Let =newContext= be a new
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]].
3.  Set the Function of =newContext= to null.
4.  Set the [[https://tc39.es/ecma262/#realm][Realm]] of =newContext= to
    =realm=.
5.  Set the ScriptOrModule of =newContext= to null.
6.  Push =newContext= onto the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]]; =newContext= is now the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
7.  If the host requires use of an
    [[https://tc39.es/ecma262/#exotic-object][exotic object]] to serve
    as =realm='s [[https://tc39.es/ecma262/#sec-global-object][global
    object]], let =global= be such an object created in an
    implementation-defined manner. Otherwise, let =global= be undefined,
    indicating that an ordinary object should be created as the
    [[https://tc39.es/ecma262/#sec-global-object][global object]].
8.  If the host requires that the =this= binding in =realm='s global
    scope return an object other than the
    [[https://tc39.es/ecma262/#sec-global-object][global object]], let
    =thisValue= be such an object created in an implementation-defined
    manner. Otherwise, let =thisValue= be undefined, indicating that
    =realm='s global =this= binding should be the
    [[https://tc39.es/ecma262/#sec-global-object][global object]].
9.  Perform
    [[https://tc39.es/ecma262/#sec-setrealmglobalobject][SetRealmGlobalObject]](=realm=,
    =global=, =thisValue=).
10. Let =globalObj= be
    ? [[https://tc39.es/ecma262/#sec-setdefaultglobalbindings][SetDefaultGlobalBindings]](=realm=).
11. Create any implementation-defined
    [[https://tc39.es/ecma262/#sec-global-object][global object]]
    properties on =globalObj=.
12. Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 8.6RunJobs ( )
  :PROPERTIES:
  :CUSTOM_ID: runjobs
  :END:

The abstract operation RunJobs performs the following steps:

1. Perform
   ? [[https://tc39.es/ecma262/#sec-initializehostdefinedrealm][InitializeHostDefinedRealm]]().
2. In an implementation-dependent manner, obtain the ECMAScript source
   texts (see clause
   [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]])
   and any associated host-defined values for zero or more ECMAScript
   scripts and/or ECMAScript modules. For each such =sourceText= and
   =hostDefined=, do

   1. If =sourceText= is the source code of a script, then

      1. Perform
         [[https://tc39.es/ecma262/#sec-enqueuejob][EnqueueJob]]("ScriptJobs",
         [[https://tc39.es/ecma262/#sec-scriptevaluationjob][ScriptEvaluationJob]],
         « =sourceText=, =hostDefined= »).

   2. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is
         the source code of a module.
      2. Perform
         [[https://tc39.es/ecma262/#sec-enqueuejob][EnqueueJob]]("ScriptJobs",
         [[https://tc39.es/ecma262/#sec-toplevelmoduleevaluationjob][TopLevelModuleEvaluationJob]],
         « =sourceText=, =hostDefined= »).

3. Repeat,

   1.  [[https://tc39.es/ecma262/#sec-suspend][Suspend]] the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]] and remove it from the
       [[https://tc39.es/ecma262/#execution-context-stack][execution
       context stack]].
   2.  [[https://tc39.es/ecma262/#assert][Assert]]: The
       [[https://tc39.es/ecma262/#execution-context-stack][execution
       context stack]] is now empty.
   3.  Let =nextQueue= be a non-empty
       [[https://tc39.es/ecma262/#job-queue][Job Queue]] chosen in an
       implementation-defined manner. If all
       [[https://tc39.es/ecma262/#job][Job]] Queues are empty, the
       result is implementation-defined.
   4.  Let =nextPending= be the PendingJob record at the front of
       =nextQueue=. Remove that record from =nextQueue=.
   5.  Let =newContext= be a new
       [[https://tc39.es/ecma262/#sec-execution-contexts][execution
       context]].
   6.  Set =newContext='s Function to null.
   7.  Set =newContext='s [[https://tc39.es/ecma262/#realm][Realm]] to
       =nextPending=.[[Realm]].
   8.  Set =newContext='s ScriptOrModule to
       =nextPending=.[[ScriptOrModule]].
   9.  Push =newContext= onto the
       [[https://tc39.es/ecma262/#execution-context-stack][execution
       context stack]]; =newContext= is now the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]].
   10. Perform any implementation or host environment defined job
       initialization using =nextPending=.
   11. Let =result= be the result of performing the abstract operation
       named by =nextPending=.[[Job]] using the elements of
       =nextPending=.[[Arguments]] as its arguments.
   12. If =result= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], perform
       [[https://tc39.es/ecma262/#sec-host-report-errors][HostReportErrors]](«
       =result=.[[Value]] »).

* 8.7Agents
  :PROPERTIES:
  :CUSTOM_ID: agents
  :END:

An agent comprises a set of ECMAScript execution contexts, an
[[https://tc39.es/ecma262/#execution-context-stack][execution context
stack]], a [[https://tc39.es/ecma262/#running-execution-context][running
execution context]], a set of named job queues, an Agent Record, and an
executing thread. Except for the
[[https://tc39.es/ecma262/#executing-thread][executing thread]], the
constituents of an [[https://tc39.es/ecma262/#agent][agent]] belong
exclusively to that [[https://tc39.es/ecma262/#agent][agent]].

An [[https://tc39.es/ecma262/#agent][agent]]'s
[[https://tc39.es/ecma262/#executing-thread][executing thread]] executes
the jobs in the [[https://tc39.es/ecma262/#agent][agent]]'s job queues
on the [[https://tc39.es/ecma262/#agent][agent]]'s execution contexts
independently of other agents, except that an
[[https://tc39.es/ecma262/#executing-thread][executing thread]] may be
used as the [[https://tc39.es/ecma262/#executing-thread][executing
thread]] by multiple agents, provided none of the agents sharing the
thread have an [[https://tc39.es/ecma262/#agent-record][Agent Record]]
whose [[CanBlock]] property is true.

Note 1

Some web browsers share a single
[[https://tc39.es/ecma262/#executing-thread][executing thread]] across
multiple unrelated tabs of a browser window, for example.

While an [[https://tc39.es/ecma262/#agent][agent]]'s
[[https://tc39.es/ecma262/#executing-thread][executing thread]] executes
the jobs in the [[https://tc39.es/ecma262/#agent][agent]]'s job queues,
the [[https://tc39.es/ecma262/#agent][agent]] is the surrounding agent
for the code in those jobs. The code uses the
[[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]] to
access the specification level execution objects held within the
[[https://tc39.es/ecma262/#agent][agent]]: the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]], the
[[https://tc39.es/ecma262/#execution-context-stack][execution context
stack]], the named job queues, and the
[[https://tc39.es/ecma262/#agent-record][Agent Record]]'s fields.

Table 28: [[https://tc39.es/ecma262/#agent-record][Agent Record]] Fields
| Field Name               | Value                                                                                                                                                      | Meaning                                                                                                                                                                                                                                                                                                                                                                                                                     |
|--------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[LittleEndian]]         | Boolean                                                                                                                                                    | The default value computed for the /isLittleEndian/ parameter when it is needed by the algorithms [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]] and [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]]. The choice is implementation-dependent and should be the alternative that is most efficient for the implementation. Once the value has been observed it cannot change.   |
| [[CanBlock]]             | Boolean                                                                                                                                                    | Determines whether the [[https://tc39.es/ecma262/#agent][agent]] can block or not.                                                                                                                                                                                                                                                                                                                                          |
| [[Signifier]]            | Any globally-unique value                                                                                                                                  | Uniquely identifies the [[https://tc39.es/ecma262/#agent][agent]] within its [[https://tc39.es/ecma262/#sec-agent-clusters][agent cluster]].                                                                                                                                                                                                                                                                                |
| [[IsLockFree1]]          | Boolean                                                                                                                                                    | true if atomic operations on one-byte values are lock-free, false otherwise.                                                                                                                                                                                                                                                                                                                                                |
| [[IsLockFree2]]          | Boolean                                                                                                                                                    | true if atomic operations on two-byte values are lock-free, false otherwise.                                                                                                                                                                                                                                                                                                                                                |
| [[IsLockFree8]]          | Boolean                                                                                                                                                    | true if atomic operations on eight-byte values are lock-free, false otherwise.                                                                                                                                                                                                                                                                                                                                              |
| [[CandidateExecution]]   | A [[https://tc39.es/ecma262/#sec-candidate-executions][candidate execution]] [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]   | See the [[https://tc39.es/ecma262/#sec-memory-model][memory model]].                                                                                                                                                                                                                                                                                                                                                        |

Once the values of [[Signifier]], [[IsLockFree1]], and [[IsLockFree2]]
have been observed by any [[https://tc39.es/ecma262/#agent][agent]] in
the [[https://tc39.es/ecma262/#sec-agent-clusters][agent cluster]] they
cannot change.

Note 2

The values of [[IsLockFree1]] and [[IsLockFree2]] are not necessarily
determined by the hardware, but may also reflect implementation choices
that can vary over time and between ECMAScript implementations.

There is no [[IsLockFree4]] property: 4-byte atomic operations are
always lock-free.

In practice, if an atomic operation is implemented with any type of lock
the operation is not lock-free. Lock-free does not imply wait-free:
there is no upper bound on how many machine steps may be required to
complete a lock-free atomic operation.

That an atomic access of size /n/ is lock-free does not imply anything
about the (perceived) atomicity of non-atomic accesses of size /n/,
specifically, non-atomic accesses may still be performed as a sequence
of several separate memory accesses. See
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
and
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
for details.

Note 3

An [[https://tc39.es/ecma262/#agent][agent]] is a specification
mechanism and need not correspond to any particular artefact of an
ECMAScript implementation.

* 8.7.1AgentSignifier ( )
  :PROPERTIES:
  :CUSTOM_ID: agentsignifier
  :END:

The abstract operation AgentSignifier takes no arguments. It performs
the following steps:

1. Let =AR= be the [[https://tc39.es/ecma262/#agent-record][Agent
   Record]] of the
   [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]].
2. Return =AR=.[[Signifier]].

* 8.7.2AgentCanSuspend ( )
  :PROPERTIES:
  :CUSTOM_ID: agentcansuspend
  :END:

The abstract operation AgentCanSuspend takes no arguments. It performs
the following steps:

1. Let =AR= be the [[https://tc39.es/ecma262/#agent-record][Agent
   Record]] of the
   [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]].
2. Return =AR=.[[CanBlock]].

Note

In some environments it may not be reasonable for a given
[[https://tc39.es/ecma262/#agent][agent]] to suspend. For example, in a
web browser environment, it may be reasonable to disallow suspending a
document's main event handling thread, while still allowing workers'
event handling threads to suspend.

* 8.8Agent Clusters
  :PROPERTIES:
  :CUSTOM_ID: agent-clusters
  :END:

An agent cluster is a maximal set of agents that can communicate by
operating on shared memory.

Note 1

Programs within different agents may share memory by unspecified means.
At a minimum, the backing memory for SharedArrayBuffer objects can be
shared among the agents in the cluster.

There may be agents that can communicate by message passing that cannot
share memory; they are never in the same agent cluster.

Every [[https://tc39.es/ecma262/#agent][agent]] belongs to exactly one
agent cluster.

Note 2

The agents in a cluster need not all be alive at some particular point
in time. If [[https://tc39.es/ecma262/#agent][agent]] *A* creates
another [[https://tc39.es/ecma262/#agent][agent]] *B*, after which *A*
terminates and *B* creates [[https://tc39.es/ecma262/#agent][agent]]
*C*, the three agents are in the same cluster if *A* could share some
memory with *B* and *B* could share some memory with *C*.

All agents within a cluster must have the same value for the
[[LittleEndian]] property in their respective
[[https://tc39.es/ecma262/#agent][Agent]] Records.

Note 3

If different agents within an agent cluster have different values of
[[LittleEndian]] it becomes hard to use shared memory for multi-byte
data.

All agents within a cluster must have the same values for the
[[IsLockFree1]] property in their respective
[[https://tc39.es/ecma262/#agent][Agent]] Records; similarly for the
[[IsLockFree2]] property.

All agents within a cluster must have different values for the
[[Signifier]] property in their respective
[[https://tc39.es/ecma262/#agent][Agent]] Records.

An embedding may deactivate (stop forward progress) or activate (resume
forward progress) an [[https://tc39.es/ecma262/#agent][agent]] without
the [[https://tc39.es/ecma262/#agent][agent]]'s knowledge or
cooperation. If the embedding does so, it must not leave some agents in
the cluster active while other agents in the cluster are deactivated
indefinitely.

Note 4

The purpose of the preceding restriction is to avoid a situation where
an [[https://tc39.es/ecma262/#agent][agent]] deadlocks or starves
because another [[https://tc39.es/ecma262/#agent][agent]] has been
deactivated. For example, if an HTML shared worker that has a lifetime
independent of documents in any windows were allowed to share memory
with the dedicated worker of such an independent document, and the
document and its dedicated worker were to be deactivated while the
dedicated worker holds a lock (say, the document is pushed into its
window's history), and the shared worker then tries to acquire the lock,
then the shared worker will be blocked until the dedicated worker is
activated again, if ever. Meanwhile other workers trying to access the
shared worker from other windows will starve.

The implication of the restriction is that it will not be possible to
share memory between agents that don't belong to the same suspend/wake
collective within the embedding.

An embedding may terminate an [[https://tc39.es/ecma262/#agent][agent]]
without any of the [[https://tc39.es/ecma262/#agent][agent]]'s cluster's
other agents' prior knowledge or cooperation. If an
[[https://tc39.es/ecma262/#agent][agent]] is terminated not by
programmatic action of its own or of another
[[https://tc39.es/ecma262/#agent][agent]] in the cluster but by forces
external to the cluster, then the embedding must choose one of two
strategies: Either terminate all the agents in the cluster, or provide
reliable APIs that allow the agents in the cluster to coordinate so that
at least one remaining member of the cluster will be able to detect the
termination, with the termination data containing enough information to
identify the [[https://tc39.es/ecma262/#agent][agent]] that was
terminated.

Note 5

Examples of that type of termination are: operating systems or users
terminating agents that are running in separate processes; the embedding
itself terminating an [[https://tc39.es/ecma262/#agent][agent]] that is
running in-process with the other agents when
per-[[https://tc39.es/ecma262/#agent][agent]] resource accounting
indicates that the [[https://tc39.es/ecma262/#agent][agent]] is runaway.

Prior to any evaluation of any ECMAScript code by any
[[https://tc39.es/ecma262/#agent][agent]] in a cluster, the
[[CandidateExecution]] field of the
[[https://tc39.es/ecma262/#agent-record][Agent Record]] for all agents
in the cluster is set to the initial
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]]. The initial
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] is an
[[https://tc39.es/ecma262/#sec-candidate-executions][empty candidate
execution]] whose [[EventsRecords]] field is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
containing, for each [[https://tc39.es/ecma262/#agent][agent]], an
[[https://tc39.es/ecma262/#sec-agent-event-records][Agent Events
Record]] whose [[AgentSignifier]] field is that
[[https://tc39.es/ecma262/#agent][agent]]'s signifier, and whose
[[EventList]] and [[AgentSynchronizesWith]] fields are empty Lists.

Note 6

All agents in an agent cluster share the same
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] in its [[https://tc39.es/ecma262/#agent-record][Agent
Record]]'s [[CandidateExecution]] field. The
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] is a specification mechanism used by the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]].

Note 7

An agent cluster is a specification mechanism and need not correspond to
any particular artefact of an ECMAScript implementation.

* 8.9Forward Progress
  :PROPERTIES:
  :CUSTOM_ID: forward-progress
  :END:

For an [[https://tc39.es/ecma262/#agent][agent]] to /make forward
progress/ is for it to perform an evaluation step according to this
specification.

An [[https://tc39.es/ecma262/#agent][agent]] becomes /blocked/ when its
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]] waits synchronously and indefinitely for an external event.
Only agents whose [[https://tc39.es/ecma262/#agent-record][Agent
Record]]'s [[CanBlock]] property is true can become blocked in this
sense. An /unblocked/ [[https://tc39.es/ecma262/#agent][agent]] is one
that is not blocked.

Implementations must ensure that:

- every unblocked [[https://tc39.es/ecma262/#agent][agent]] with a
  dedicated [[https://tc39.es/ecma262/#executing-thread][executing
  thread]] eventually makes forward progress
- in a set of agents that share an
  [[https://tc39.es/ecma262/#executing-thread][executing thread]], one
  [[https://tc39.es/ecma262/#agent][agent]] eventually makes forward
  progress
- an [[https://tc39.es/ecma262/#agent][agent]] does not cause another
  [[https://tc39.es/ecma262/#agent][agent]] to become blocked except via
  explicit APIs that provide blocking.

Note

This, along with the liveness guarantee in the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]], ensures
that all SeqCst writes eventually become observable to all agents.

* 9Ordinary and Exotic Objects Behaviours
  :PROPERTIES:
  :CUSTOM_ID: ordinary-and-exotic-objects-behaviours
  :END:

* 9.1Ordinary Object Internal Methods and Internal Slots
  :PROPERTIES:
  :CUSTOM_ID: ordinary-object-internal-methods-and-internal-slots
  :END:

All ordinary objects have an internal slot called [[Prototype]]. The
value of this internal slot is either null or an object and is used for
implementing inheritance. Data properties of the [[Prototype]] object
are inherited (and visible as properties of the child object) for the
purposes of get access, but not for set access. Accessor properties are
inherited for both get access and set access.

Every ordinary object has a Boolean-valued [[Extensible]] internal slot
which is used to fulfill the extensibility-related internal method
invariants specified in
[[https://tc39.es/ecma262/#sec-invariants-of-the-essential-internal-methods][6.1.7.3]].
Namely, once the value of an object's [[Extensible]] internal slot has
been set to false, it is no longer possible to add properties to the
object, to modify the value of the object's [[Prototype]] internal slot,
or to subsequently change the value of [[Extensible]] to true.

In the following algorithm descriptions, assume =O= is an ordinary
object, =P= is a property key value, =V= is any
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]], and =Desc= is a
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] record.

Each ordinary object internal method delegates to a similarly-named
abstract operation. If such an abstract operation depends on another
internal method, then the internal method is invoked on =O= rather than
calling the similarly-named abstract operation directly. These semantics
ensure that exotic objects have their overridden internal methods
invoked when ordinary object internal methods are applied to them.

* 9.1.1[[GetPrototypeOf]] ( )
  :PROPERTIES:
  :CUSTOM_ID: getprototypeof-1
  :END:

When the [[GetPrototypeOf]] internal method of =O= is called, the
following steps are taken:

1. Return
   ! [[https://tc39.es/ecma262/#sec-ordinarygetprototypeof][OrdinaryGetPrototypeOf]](=O=).

* 9.1.1.1OrdinaryGetPrototypeOf ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarygetprototypeof-o
  :END:

When the abstract operation OrdinaryGetPrototypeOf is called with Object
=O=, the following steps are taken:

1. Return =O=.[[Prototype]].

* 9.1.2[[SetPrototypeOf]] ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: setprototypeof-v-1
  :END:

When the [[SetPrototypeOf]] internal method of =O= is called with
argument =V=, the following steps are taken:

1. Return
   ! [[https://tc39.es/ecma262/#sec-ordinarysetprototypeof][OrdinarySetPrototypeOf]](=O=,
   =V=).

* 9.1.2.1OrdinarySetPrototypeOf ( =O=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarysetprototypeof-o-v
  :END:

When the abstract operation OrdinarySetPrototypeOf is called with Object
=O= and value =V=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: Either
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
    is Object or
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
    is Null.
2.  Let =current= be =O=.[[Prototype]].
3.  If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=V=,
    =current=) is true, return true.
4.  Let =extensible= be =O=.[[Extensible]].
5.  If =extensible= is false, return false.
6.  Let =p= be =V=.
7.  Let =done= be false.
8.  Repeat, while =done= is false,

    1. If =p= is null, set =done= to true.
    2. Else if
       [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=p=, =O=)
       is true, return false.
    3. Else,

       1. If =p=.[[GetPrototypeOf]] is not the ordinary object internal
          method defined in
          [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof][9.1.1]],
          set =done= to true.
       2. Else, set =p= to =p=.[[Prototype]].

9.  Set =O=.[[Prototype]] to =V=.
10. Return true.

Note

The loop in step 8 guarantees that there will be no circularities in any
prototype chain that only includes objects that use the ordinary object
definitions for [[GetPrototypeOf]] and [[SetPrototypeOf]].

* 9.1.3[[IsExtensible]] ( )
  :PROPERTIES:
  :CUSTOM_ID: isextensible-1
  :END:

When the [[IsExtensible]] internal method of =O= is called, the
following steps are taken:

1. Return
   ! [[https://tc39.es/ecma262/#sec-ordinaryisextensible][OrdinaryIsExtensible]](=O=).

* 9.1.3.1OrdinaryIsExtensible ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: ordinaryisextensible-o
  :END:

When the abstract operation OrdinaryIsExtensible is called with Object
=O=, the following steps are taken:

1. Return =O=.[[Extensible]].

* 9.1.4[[PreventExtensions]] ( )
  :PROPERTIES:
  :CUSTOM_ID: preventextensions-1
  :END:

When the [[PreventExtensions]] internal method of =O= is called, the
following steps are taken:

1. Return
   ! [[https://tc39.es/ecma262/#sec-ordinarypreventextensions][OrdinaryPreventExtensions]](=O=).

* 9.1.4.1OrdinaryPreventExtensions ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarypreventextensions-o
  :END:

When the abstract operation OrdinaryPreventExtensions is called with
Object =O=, the following steps are taken:

1. Set =O=.[[Extensible]] to false.
2. Return true.

* 9.1.5[[GetOwnProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: getownproperty-p-1
  :END:

When the [[GetOwnProperty]] internal method of =O= is called with
property key =P=, the following steps are taken:

1. Return
   ! [[https://tc39.es/ecma262/#sec-ordinarygetownproperty][OrdinaryGetOwnProperty]](=O=,
   =P=).

* 9.1.5.1OrdinaryGetOwnProperty ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarygetownproperty-o-p
  :END:

When the abstract operation OrdinaryGetOwnProperty is called with Object
=O= and with property key =P=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. If =O= does not have an own property with key =P=, return undefined.
3. Let =D= be a newly created
   [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
   Descriptor]] with no fields.
4. Let =X= be =O='s own property whose key is =P=.
5. If =X= is a [[https://tc39.es/ecma262/#sec-object-type][data
   property]], then

   1. Set =D=.[[Value]] to the value of =X='s [[Value]] attribute.
   2. Set =D=.[[Writable]] to the value of =X='s [[Writable]] attribute.

6. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =X= is an
      [[https://tc39.es/ecma262/#sec-object-type][accessor property]].
   2. Set =D=.[[Get]] to the value of =X='s [[Get]] attribute.
   3. Set =D=.[[Set]] to the value of =X='s [[Set]] attribute.

7. Set =D=.[[Enumerable]] to the value of =X='s [[Enumerable]]
   attribute.
8. Set =D=.[[Configurable]] to the value of =X='s [[Configurable]]
   attribute.
9. Return =D=.

* 9.1.6[[DefineOwnProperty]] ( =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: defineownproperty-p-desc-1
  :END:

When the [[DefineOwnProperty]] internal method of =O= is called with
property key =P= and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=O=,
   =P=, =Desc=).

* 9.1.6.1OrdinaryDefineOwnProperty ( =O=, =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarydefineownproperty-o-p-desc
  :END:

When the abstract operation OrdinaryDefineOwnProperty is called with
Object =O=, property key =P=, and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. Let =current= be ? =O=.[[GetOwnProperty]](=P=).
2. Let =extensible= be
   ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=O=).
3. Return
   [[https://tc39.es/ecma262/#sec-validateandapplypropertydescriptor][ValidateAndApplyPropertyDescriptor]](=O=,
   =P=, =extensible=, =Desc=, =current=).

* 9.1.6.2IsCompatiblePropertyDescriptor ( =Extensible=, =Desc=,
=Current= )
  :PROPERTIES:
  :CUSTOM_ID: iscompatiblepropertydescriptor-extensible-desc-current
  :END:

When the abstract operation IsCompatiblePropertyDescriptor is called
with Boolean value =Extensible=, and Property Descriptors =Desc=, and
=Current=, the following steps are taken:

1. Return
   [[https://tc39.es/ecma262/#sec-validateandapplypropertydescriptor][ValidateAndApplyPropertyDescriptor]](undefined,
   undefined, =Extensible=, =Desc=, =Current=).

* 9.1.6.3ValidateAndApplyPropertyDescriptor ( =O=, =P=, =extensible=,
=Desc=, =current= )
  :PROPERTIES:
  :CUSTOM_ID: validateandapplypropertydescriptor-o-p-extensible-desc-current
  :END:

When the abstract operation ValidateAndApplyPropertyDescriptor is called
with Object =O=, property key =P=, Boolean value =extensible=, and
Property Descriptors =Desc=, and =current=, the following steps are
taken:

Note

If undefined is passed as =O=, only validation is performed and no
object updates are performed.

1.  [[https://tc39.es/ecma262/#assert][Assert]]: If =O= is not
    undefined, then
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  If =current= is undefined, then

    1. If =extensible= is false, return false.
    2. [[https://tc39.es/ecma262/#assert][Assert]]: =extensible= is
       true.
    3. If
       [[https://tc39.es/ecma262/#sec-isgenericdescriptor][IsGenericDescriptor]](=Desc=)
       is true or
       [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=Desc=)
       is true, then

       1. If =O= is not undefined, create an own
          [[https://tc39.es/ecma262/#sec-object-type][data property]]
          named =P= of object =O= whose [[Value]], [[Writable]],
          [[Enumerable]], and [[Configurable]] attribute values are
          described by =Desc=. If the value of an attribute field of
          =Desc= is absent, the attribute of the newly created property
          is set to its
          [[https://tc39.es/ecma262/#table-default-attribute-values][default
          value]].

    4. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]:
          ! [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=Desc=)
          is true.
       2. If =O= is not undefined, create an own
          [[https://tc39.es/ecma262/#sec-object-type][accessor
          property]] named =P= of object =O= whose [[Get]], [[Set]],
          [[Enumerable]], and [[Configurable]] attribute values are
          described by =Desc=. If the value of an attribute field of
          =Desc= is absent, the attribute of the newly created property
          is set to its
          [[https://tc39.es/ecma262/#table-default-attribute-values][default
          value]].

    5. Return true.

3.  If every field in =Desc= is absent, return true.
4.  If =current=.[[Configurable]] is false, then

    1. If =Desc=.[[Configurable]] is present and its value is true,
       return false.
    2. If =Desc=.[[Enumerable]] is present and
       ! [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=Desc=.[[Enumerable]],
       =current=.[[Enumerable]]) is false, return false.

5.  If
    ! [[https://tc39.es/ecma262/#sec-isgenericdescriptor][IsGenericDescriptor]](=Desc=)
    is true, then

    1. NOTE: No further validation is required.

6.  Else if ! [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](!
    [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=current=),
    ! [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=Desc=))
    is false, then

    1. If =current=.[[Configurable]] is false, return false.
    2. If
       [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=current=)
       is true, then

       1. If =O= is not undefined, convert the property named =P= of
          object =O= from a
          [[https://tc39.es/ecma262/#sec-object-type][data property]] to
          an [[https://tc39.es/ecma262/#sec-object-type][accessor
          property]]. Preserve the existing values of the converted
          property's [[Configurable]] and [[Enumerable]] attributes and
          set the rest of the property's attributes to their
          [[https://tc39.es/ecma262/#table-default-attribute-values][default
          values]].

    3. Else,

       1. If =O= is not undefined, convert the property named =P= of
          object =O= from an
          [[https://tc39.es/ecma262/#sec-object-type][accessor
          property]] to a
          [[https://tc39.es/ecma262/#sec-object-type][data property]].
          Preserve the existing values of the converted property's
          [[Configurable]] and [[Enumerable]] attributes and set the
          rest of the property's attributes to their
          [[https://tc39.es/ecma262/#table-default-attribute-values][default
          values]].

7.  Else if
    [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=current=)
    and
    [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=Desc=)
    are both true, then

    1. If =current=.[[Configurable]] is false and =current=.[[Writable]]
       is false, then

       1. If =Desc=.[[Writable]] is present and =Desc=.[[Writable]] is
          true, return false.
       2. If =Desc=.[[Value]] is present and
          [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=Desc=.[[Value]],
          =current=.[[Value]]) is false, return false.
       3. Return true.

8.  Else,

    1. [[https://tc39.es/ecma262/#assert][Assert]]:
       ! [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=current=)
       and
       ! [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=Desc=)
       are both true.
    2. If =current=.[[Configurable]] is false, then

       1. If =Desc=.[[Set]] is present and
          [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=Desc=.[[Set]],
          =current=.[[Set]]) is false, return false.
       2. If =Desc=.[[Get]] is present and
          [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=Desc=.[[Get]],
          =current=.[[Get]]) is false, return false.
       3. Return true.

9.  If =O= is not undefined, then

    1. For each field of =Desc= that is present, set the corresponding
       attribute of the property named =P= of object =O= to the value of
       the field.

10. Return true.

* 9.1.7[[HasProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: hasproperty-p-1
  :END:

When the [[HasProperty]] internal method of =O= is called with property
key =P=, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryhasproperty][OrdinaryHasProperty]](=O=,
   =P=).

* 9.1.7.1OrdinaryHasProperty ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: ordinaryhasproperty-o-p
  :END:

When the abstract operation OrdinaryHasProperty is called with Object
=O= and with property key =P=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =hasOwn= be ? =O=.[[GetOwnProperty]](=P=).
3. If =hasOwn= is not undefined, return true.
4. Let =parent= be ? =O=.[[GetPrototypeOf]]().
5. If =parent= is not null, then

   1. Return ? =parent=.[[HasProperty]](=P=).

6. Return false.

* 9.1.8[[Get]] ( =P=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: get-p-receiver-1
  :END:

When the [[Get]] internal method of =O= is called with property key =P=
and [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryget][OrdinaryGet]](=O=, =P=,
   =Receiver=).

* 9.1.8.1OrdinaryGet ( =O=, =P=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: ordinaryget-o-p-receiver
  :END:

When the abstract operation OrdinaryGet is called with Object =O=,
property key =P=, and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =desc= be ? =O=.[[GetOwnProperty]](=P=).
3. If =desc= is undefined, then

   1. Let =parent= be ? =O=.[[GetPrototypeOf]]().
   2. If =parent= is null, return undefined.
   3. Return ? =parent=.[[Get]](=P=, =Receiver=).

4. If
   [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=desc=)
   is true, return =desc=.[[Value]].
5. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=desc=)
   is true.
6. Let =getter= be =desc=.[[Get]].
7. If =getter= is undefined, return undefined.
8. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=getter=,
   =Receiver=).

* 9.1.9[[Set]] ( =P=, =V=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: set-p-v-receiver-1
  :END:

When the [[Set]] internal method of =O= is called with property key =P=,
value =V=, and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryset][OrdinarySet]](=O=, =P=,
   =V=, =Receiver=).

* 9.1.9.1OrdinarySet ( =O=, =P=, =V=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: ordinaryset-o-p-v-receiver
  :END:

When the abstract operation OrdinarySet is called with Object =O=,
property key =P=, value =V=, and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =ownDesc= be ? =O=.[[GetOwnProperty]](=P=).
3. Return
   [[https://tc39.es/ecma262/#sec-ordinarysetwithowndescriptor][OrdinarySetWithOwnDescriptor]](=O=,
   =P=, =V=, =Receiver=, =ownDesc=).

* 9.1.9.2OrdinarySetWithOwnDescriptor ( =O=, =P=, =V=, =Receiver=,
=ownDesc= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarysetwithowndescriptor-o-p-v-receiver-owndesc
  :END:

When the abstract operation OrdinarySetWithOwnDescriptor is called with
Object =O=, property key =P=, value =V=,
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] (or undefined) =ownDesc=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. If =ownDesc= is undefined, then

   1. Let =parent= be ? =O=.[[GetPrototypeOf]]().
   2. If =parent= is not null, then

      1. Return ? =parent=.[[Set]](=P=, =V=, =Receiver=).

   3. Else,

      1. Set =ownDesc= to the PropertyDescriptor { [[Value]]: undefined,
         [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]:
         true }.

3. If
   [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=ownDesc=)
   is true, then

   1. If =ownDesc=.[[Writable]] is false, return false.
   2. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=Receiver=)
      is not Object, return false.
   3. Let =existingDescriptor= be ? =Receiver=.[[GetOwnProperty]](=P=).
   4. If =existingDescriptor= is not undefined, then

      1. If
         [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=existingDescriptor=)
         is true, return false.
      2. If =existingDescriptor=.[[Writable]] is false, return false.
      3. Let =valueDesc= be the PropertyDescriptor { [[Value]]: =V= }.
      4. Return ? =Receiver=.[[DefineOwnProperty]](=P=, =valueDesc=).

   5. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =Receiver= does
         not currently have a property =P=.
      2. Return
         ? [[https://tc39.es/ecma262/#sec-createdataproperty][CreateDataProperty]](=Receiver=,
         =P=, =V=).

4. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=ownDesc=)
   is true.
5. Let =setter= be =ownDesc=.[[Set]].
6. If =setter= is undefined, return false.
7. Perform ? [[https://tc39.es/ecma262/#sec-call][Call]](=setter=,
   =Receiver=, « =V= »).
8. Return true.

* 9.1.10[[Delete]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: delete-p-1
  :END:

When the [[Delete]] internal method of =O= is called with property key
=P=, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-ordinarydelete][OrdinaryDelete]](=O=,
   =P=).

* 9.1.10.1OrdinaryDelete ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarydelete-o-p
  :END:

When the abstract operation OrdinaryDelete is called with Object =O= and
property key =P=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =desc= be ? =O=.[[GetOwnProperty]](=P=).
3. If =desc= is undefined, return true.
4. If =desc=.[[Configurable]] is true, then

   1. Remove the own property with name =P= from =O=.
   2. Return true.

5. Return false.

* 9.1.11[[OwnPropertyKeys]] ( )
  :PROPERTIES:
  :CUSTOM_ID: ownpropertykeys-1
  :END:

When the [[OwnPropertyKeys]] internal method of =O= is called, the
following steps are taken:

1. Return
   ! [[https://tc39.es/ecma262/#sec-ordinaryownpropertykeys][OrdinaryOwnPropertyKeys]](=O=).

* 9.1.11.1OrdinaryOwnPropertyKeys ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: ordinaryownpropertykeys-o
  :END:

When the abstract operation OrdinaryOwnPropertyKeys is called with
Object =O=, the following steps are taken:

1. Let =keys= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
2. For each own property key =P= of =O= that is an
   [[https://tc39.es/ecma262/#array-index][array index]], in ascending
   numeric index order, do

   1. Add =P= as the last element of =keys=.

3. For each own property key =P= of =O= that is a String but is not an
   [[https://tc39.es/ecma262/#array-index][array index]], in ascending
   chronological order of property creation, do

   1. Add =P= as the last element of =keys=.

4. For each own property key =P= of =O= that is a Symbol, in ascending
   chronological order of property creation, do

   1. Add =P= as the last element of =keys=.

5. Return =keys=.

* 9.1.12ObjectCreate ( =proto= [ , =internalSlotsList= ] )
  :PROPERTIES:
  :CUSTOM_ID: objectcreate-proto-internalslotslist
  :END:

The abstract operation ObjectCreate with argument =proto= (an object or
null) is used to specify the runtime creation of new ordinary objects.
The optional argument =internalSlotsList= is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of the names of additional internal slots that must be defined as part
of the object. If the list is not provided, a new empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
is used. This abstract operation performs the following steps:

1. If =internalSlotsList= is not present, set =internalSlotsList= to a
   new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
2. Let =obj= be a newly created object with an internal slot for each
   name in =internalSlotsList=.
3. Set =obj='s essential internal methods to the default ordinary object
   definitions specified in
   [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
4. Set =obj=.[[Prototype]] to =proto=.
5. Set =obj=.[[Extensible]] to true.
6. Return =obj=.

* 9.1.13OrdinaryCreateFromConstructor ( =constructor=,
=intrinsicDefaultProto= [ , =internalSlotsList= ] )
  :PROPERTIES:
  :CUSTOM_ID: ordinarycreatefromconstructor-constructor-intrinsicdefaultproto-internalslotslist
  :END:

The abstract operation OrdinaryCreateFromConstructor creates an ordinary
object whose [[Prototype]] value is retrieved from a
[[https://tc39.es/ecma262/#constructor][constructor]]'s "prototype"
property, if it exists. Otherwise the intrinsic named by
=intrinsicDefaultProto= is used for [[Prototype]]. The optional
=internalSlotsList= is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of the names of additional internal slots that must be defined as part
of the object. If the list is not provided, a new empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
is used. This abstract operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =intrinsicDefaultProto=
   is a String value that is this specification's name of an intrinsic
   object. The corresponding object must be an intrinsic that is
   intended to be used as the [[Prototype]] value of an object.
2. Let =proto= be
   ? [[https://tc39.es/ecma262/#sec-getprototypefromconstructor][GetPrototypeFromConstructor]](=constructor=,
   =intrinsicDefaultProto=).
3. Return
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](=proto=,
   =internalSlotsList=).

* 9.1.14GetPrototypeFromConstructor ( =constructor=,
=intrinsicDefaultProto= )
  :PROPERTIES:
  :CUSTOM_ID: getprototypefromconstructor-constructor-intrinsicdefaultproto
  :END:

The abstract operation GetPrototypeFromConstructor determines the
[[Prototype]] value that should be used to create an object
corresponding to a specific
[[https://tc39.es/ecma262/#constructor][constructor]]. The value is
retrieved from the
[[https://tc39.es/ecma262/#constructor][constructor]]'s "prototype"
property, if it exists. Otherwise the intrinsic named by
=intrinsicDefaultProto= is used for [[Prototype]]. This abstract
operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =intrinsicDefaultProto=
   is a String value that is this specification's name of an intrinsic
   object. The corresponding object must be an intrinsic that is
   intended to be used as the [[Prototype]] value of an object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=constructor=)
   is true.
3. Let =proto= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=constructor=,
   "prototype").
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=proto=)
   is not Object, then

   1. Let =realm= be
      ? [[https://tc39.es/ecma262/#sec-getfunctionrealm][GetFunctionRealm]](=constructor=).
   2. Set =proto= to =realm='s intrinsic object named
      =intrinsicDefaultProto=.

5. Return =proto=.

Note

If =constructor= does not supply a [[Prototype]] value, the default
value that is used is obtained from the
[[https://tc39.es/ecma262/#realm][realm]] of the =constructor= function
rather than from the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]].

* 9.1.15RequireInternalSlot ( =O=, =internalSlot= )
  :PROPERTIES:
  :CUSTOM_ID: requireinternalslot-o-internalslot
  :END:

The abstract operation RequireInternalSlot throws an exception unless
=O= is an Object and has the given internal slot.

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, throw a TypeError exception.
2. If =O= does not have an =internalSlot= internal slot, throw a
   TypeError exception.

* 9.2ECMAScript Function Objects
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-function-objects
  :END:

ECMAScript function objects encapsulate parameterized ECMAScript code
closed over a lexical environment and support the dynamic evaluation of
that code. An ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] is an
ordinary object and has the same internal slots and the same internal
methods as other ordinary objects. The code of an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] may be
either [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
code]] ([[https://tc39.es/ecma262/#sec-strict-mode-code][10.2.1]]) or
[[https://tc39.es/ecma262/#non-strict-code][non-strict code]]. An
ECMAScript [[https://tc39.es/ecma262/#function-object][function object]]
whose code is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict
mode code]] is called a strict function. One whose code is not
[[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]] is
called a non-strict function.

ECMAScript function objects have the additional internal slots listed in
[[https://tc39.es/ecma262/#table-27][Table 29]].

Table 29: Internal Slots of ECMAScript Function Objects
| Internal Slot            | Type                                                                                                                                   | Description                                                                                                                                                                                                                                                                                                                                                                                                                                      |
||
| [[Environment]]          | [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]]                                                             | The [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] that the function was closed over. Used as the outer environment when evaluating the code of the function.                                                                                                                                                                                                                                                        |
| [[FormalParameters]]     | [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]                                                                         | The root parse node of the source text that defines the function's formal parameter list.                                                                                                                                                                                                                                                                                                                                                        |
| [[ECMAScriptCode]]       | [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]                                                                         | The root parse node of the source text that defines the function's body.                                                                                                                                                                                                                                                                                                                                                                         |
| [[ConstructorKind]]      | base | derived                                                                                                                         | Whether or not the function is a derived class [[https://tc39.es/ecma262/#constructor][constructor]].                                                                                                                                                                                                                                                                                                                                            |
| [[Realm]]                | [[https://tc39.es/ecma262/#realm-record][Realm Record]]                                                                                | The [[https://tc39.es/ecma262/#realm][realm]] in which the function was created and which provides any intrinsic objects that are accessed when evaluating the function.                                                                                                                                                                                                                                                                         |
| [[ScriptOrModule]]       | [[https://tc39.es/ecma262/#script-record][Script Record]] or [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]   | The script or module in which the function was created.                                                                                                                                                                                                                                                                                                                                                                                          |
| [[ThisMode]]             | lexical | strict | global                                                                                                              | Defines how =this= references are interpreted within the formal parameters and code body of the function. lexical means that =this= refers to the this value of a lexically enclosing function. strict means that the this value is used exactly as provided by an invocation of the function. global means that a this value of undefined is interpreted as a reference to the [[https://tc39.es/ecma262/#sec-global-object][global object]].   |
| [[Strict]]               | Boolean                                                                                                                                | true if this is a [[https://tc39.es/ecma262/#strict-function][strict function]], false if this is a [[https://tc39.es/ecma262/#non-strict-function][non-strict function]].                                                                                                                                                                                                                                                                       |
| [[HomeObject]]           | Object                                                                                                                                 | If the function uses =super=, this is the object whose [[GetPrototypeOf]] provides the object where =super= property lookups begin.                                                                                                                                                                                                                                                                                                              |
| [[SourceText]]           | String                                                                                                                                 | The [[https://tc39.es/ecma262/#sec-source-text][source text]] that defines the function.                                                                                                                                                                                                                                                                                                                                                         |
| [[IsClassConstructor]]   | Boolean                                                                                                                                | Indicates whether the function is a class [[https://tc39.es/ecma262/#constructor][constructor]]. (If true, invoking the function's [[Call]] will immediately throw a TypeError exception.)                                                                                                                                                                                                                                                       |

All ECMAScript function objects have the [[Call]] internal method
defined here. ECMAScript functions that are also constructors in
addition have the [[Construct]] internal method.

* 9.2.1[[Call]] ( =thisArgument=, =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: call-thisargument-argumentslist
  :END:

The [[Call]] internal method for an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] =F= is
called with parameters =thisArgument= and =argumentsList=, a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of ECMAScript language values. The following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an ECMAScript
    [[https://tc39.es/ecma262/#function-object][function object]].
2.  If =F=.[[IsClassConstructor]] is true, throw a TypeError exception.
3.  Let =callerContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
4.  Let =calleeContext= be
    [[https://tc39.es/ecma262/#sec-prepareforordinarycall][PrepareForOrdinaryCall]](=F=,
    undefined).
5.  [[https://tc39.es/ecma262/#assert][Assert]]: =calleeContext= is now
    the [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
6.  Perform
    [[https://tc39.es/ecma262/#sec-ordinarycallbindthis][OrdinaryCallBindThis]](=F=,
    =calleeContext=, =thisArgument=).
7.  Let =result= be
    [[https://tc39.es/ecma262/#sec-ordinarycallevaluatebody][OrdinaryCallEvaluateBody]](=F=,
    =argumentsList=).
8.  Remove =calleeContext= from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and restore =callerContext= as the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
9.  If =result=.[[Type]] is return, return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=result=.[[Value]]).
10. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=result=).
11. Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

Note

When =calleeContext= is removed from the
[[https://tc39.es/ecma262/#execution-context-stack][execution context
stack]] in step 8 it must not be destroyed if it is suspended and
retained for later resumption by an accessible generator object.

* 9.2.1.1PrepareForOrdinaryCall ( =F=, =newTarget= )
  :PROPERTIES:
  :CUSTOM_ID: prepareforordinarycall-f-newtarget
  :END:

When the abstract operation PrepareForOrdinaryCall is called with
[[https://tc39.es/ecma262/#function-object][function object]] =F= and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =newTarget=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=newTarget=)
    is Undefined or Object.
2.  Let =callerContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
3.  Let =calleeContext= be a new ECMAScript code
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]].
4.  Set the Function of =calleeContext= to =F=.
5.  Let =calleeRealm= be =F=.[[Realm]].
6.  Set the [[https://tc39.es/ecma262/#realm][Realm]] of =calleeContext=
    to =calleeRealm=.
7.  Set the ScriptOrModule of =calleeContext= to =F=.[[ScriptOrModule]].
8.  Let =localEnv= be
    [[https://tc39.es/ecma262/#sec-newfunctionenvironment][NewFunctionEnvironment]](=F=,
    =newTarget=).
9.  Set the LexicalEnvironment of =calleeContext= to =localEnv=.
10. Set the VariableEnvironment of =calleeContext= to =localEnv=.
11. If =callerContext= is not already suspended, suspend
    =callerContext=.
12. Push =calleeContext= onto the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]]; =calleeContext= is now the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
13. NOTE: Any exception objects produced after this point are associated
    with =calleeRealm=.
14. Return =calleeContext=.

* 9.2.1.2OrdinaryCallBindThis ( =F=, =calleeContext=, =thisArgument= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarycallbindthis-f-calleecontext-thisargument
  :END:

When the abstract operation OrdinaryCallBindThis is called with
[[https://tc39.es/ecma262/#function-object][function object]] =F=,
[[https://tc39.es/ecma262/#sec-execution-contexts][execution context]]
=calleeContext=, and ECMAScript value =thisArgument=, the following
steps are taken:

1.  Let =thisMode= be =F=.[[ThisMode]].
2.  If =thisMode= is lexical, return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).
3.  Let =calleeRealm= be =F=.[[Realm]].
4.  Let =localEnv= be the LexicalEnvironment of =calleeContext=.
5.  If =thisMode= is strict, let =thisValue= be =thisArgument=.
6.  Else,

    1. If =thisArgument= is undefined or null, then

       1. Let =globalEnv= be =calleeRealm=.[[GlobalEnv]].
       2. Let =globalEnvRec= be =globalEnv='s
          [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
       3. [[https://tc39.es/ecma262/#assert][Assert]]: =globalEnvRec= is
          a global
          [[https://tc39.es/ecma262/#sec-environment-records][Environment
          Record]].
       4. Let =thisValue= be =globalEnvRec=.[[GlobalThisValue]].

    2. Else,

       1. Let =thisValue= be
          ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=thisArgument=).
       2. NOTE: [[https://tc39.es/ecma262/#sec-toobject][ToObject]]
          produces wrapper objects using =calleeRealm=.

7.  Let =envRec= be =localEnv='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
8.  [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= is a
    [[https://tc39.es/ecma262/#sec-function-environment-records][function
    Environment Record]].
9.  [[https://tc39.es/ecma262/#assert][Assert]]: The next step never
    returns an
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
    completion]] because =envRec=.[[ThisBindingStatus]] is not
    initialized.
10. Return =envRec=.BindThisValue(=thisValue=).

* 9.2.1.3OrdinaryCallEvaluateBody ( =F=, =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: ordinarycallevaluatebody-f-argumentslist
  :END:

When the abstract operation OrdinaryCallEvaluateBody is called with
[[https://tc39.es/ecma262/#function-object][function object]] =F= and
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
=argumentsList=, the following steps are taken:

1. Return the result of EvaluateBody of the parsed code that is
   =F=.[[ECMAScriptCode]] passing =F= and =argumentsList= as the
   arguments.

* 9.2.2[[Construct]] ( =argumentsList=, =newTarget= )
  :PROPERTIES:
  :CUSTOM_ID: construct-argumentslist-newtarget
  :END:

The [[Construct]] internal method for an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] =F= is
called with parameters =argumentsList= and =newTarget=. =argumentsList=
is a possibly empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of ECMAScript language values. The following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an ECMAScript
    [[https://tc39.es/ecma262/#function-object][function object]].
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=newTarget=)
    is Object.
3.  Let =callerContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
4.  Let =kind= be =F=.[[ConstructorKind]].
5.  If =kind= is base, then

    1. Let =thisArgument= be
       ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=newTarget=,
       "%Object.prototype%").

6.  Let =calleeContext= be
    [[https://tc39.es/ecma262/#sec-prepareforordinarycall][PrepareForOrdinaryCall]](=F=,
    =newTarget=).
7.  [[https://tc39.es/ecma262/#assert][Assert]]: =calleeContext= is now
    the [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
8.  If =kind= is base, perform
    [[https://tc39.es/ecma262/#sec-ordinarycallbindthis][OrdinaryCallBindThis]](=F=,
    =calleeContext=, =thisArgument=).
9.  Let =constructorEnv= be the LexicalEnvironment of =calleeContext=.
10. Let =envRec= be =constructorEnv='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
11. Let =result= be
    [[https://tc39.es/ecma262/#sec-ordinarycallevaluatebody][OrdinaryCallEvaluateBody]](=F=,
    =argumentsList=).
12. Remove =calleeContext= from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and restore =callerContext= as the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
13. If =result=.[[Type]] is return, then

    1. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=.[[Value]])
       is Object, return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=result=.[[Value]]).
    2. If =kind= is base, return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=thisArgument=).
    3. If =result=.[[Value]] is not undefined, throw a TypeError
       exception.

14. Else,
    [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=result=).
15. Return ? =envRec=.GetThisBinding().

<<sec-async-functions-abstract-operations-async-function-create>><<sec-asyncgeneratorfunctioncreate>><<sec-generatorfunctioncreate>><<sec-functioncreate>><<sec-functioninitialize>><<sec-functionallocate>>
* 9.2.3OrdinaryFunctionCreate ( =functionPrototype=, =ParameterList=,
=Body=, =thisMode=, =Scope= )
  :PROPERTIES:
  :CUSTOM_ID: ordinaryfunctioncreate-functionprototype-parameterlist-body-thismode-scope
  :END:

The abstract operation OrdinaryFunctionCreate requires the arguments: an
object =functionPrototype=, a parameter list
[[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]] specified
by =ParameterList=, a body
[[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]] specified
by =Body=, =thisMode= which is either lexical-this or non-lexical-this,
and a [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
Environment]] specified by =Scope=. OrdinaryFunctionCreate performs the
following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=functionPrototype=)
    is Object.
2.  Let =F= be a newly created ECMAScript
    [[https://tc39.es/ecma262/#function-object][function object]] with
    the internal slots listed in
    [[https://tc39.es/ecma262/#table-27][Table 29]].
3.  Set =F='s essential internal methods to the default ordinary object
    definitions specified in
    [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
4.  Set =F=.[[Call]] to the definition specified in
    [[https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist][9.2.1]].
5.  Set =F=.[[Prototype]] to =functionPrototype=.
6.  Set =F=.[[Extensible]] to true.
7.  Set =F=.[[FormalParameters]] to =ParameterList=.
8.  Set =F=.[[ECMAScriptCode]] to =Body=.
9.  If the source text matching =Body= is
    [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
    let =Strict= be true; else let =Strict= be false.
10. Set =F=.[[Strict]] to =Strict=.
11. If =thisMode= is lexical-this, set =F=.[[ThisMode]] to lexical.
12. Else if =Strict= is true, set =F=.[[ThisMode]] to strict.
13. Else, set =F=.[[ThisMode]] to global.
14. Set =F=.[[IsClassConstructor]] to false.
15. Set =F=.[[Environment]] to =Scope=.
16. Set =F=.[[ScriptOrModule]] to
    [[https://tc39.es/ecma262/#sec-getactivescriptormodule][GetActiveScriptOrModule]]().
17. Set =F=.[[Realm]] to [[https://tc39.es/ecma262/#current-realm][the
    current Realm Record]].
18. Let =len= be the ExpectedArgumentCount of =ParameterList=.
19. Perform
    ! [[https://tc39.es/ecma262/#sec-setfunctionlength][SetFunctionLength]](=F=,
    =len=).
20. Return =F=.

* 9.2.4AddRestrictedFunctionProperties ( =F=, =realm= )
  :PROPERTIES:
  :CUSTOM_ID: addrestrictedfunctionproperties-f-realm
  :END:

The abstract operation AddRestrictedFunctionProperties is called with a
[[https://tc39.es/ecma262/#function-object][function object]] =F= and
[[https://tc39.es/ecma262/#realm-record][Realm Record]] =realm= as its
argument. It performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   =realm=.[[Intrinsics]].[[[[https://tc39.es/ecma262/#sec-%throwtypeerror%][%ThrowTypeError%]]]]
   exists and has been initialized.
2. Let =thrower= be
   =realm=.[[Intrinsics]].[[[[https://tc39.es/ecma262/#sec-%throwtypeerror%][%ThrowTypeError%]]]].
3. Perform
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
   "caller", PropertyDescriptor { [[Get]]: =thrower=, [[Set]]:
   =thrower=, [[Enumerable]]: false, [[Configurable]]: true }).
4. Return
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
   "arguments", PropertyDescriptor { [[Get]]: =thrower=, [[Set]]:
   =thrower=, [[Enumerable]]: false, [[Configurable]]: true }).

* 9.2.4.1%ThrowTypeError% ( )
  :PROPERTIES:
  :CUSTOM_ID: throwtypeerror
  :END:

The %ThrowTypeError% intrinsic is an anonymous built-in
[[https://tc39.es/ecma262/#function-object][function object]] that is
defined once for each [[https://tc39.es/ecma262/#realm][realm]]. When
%ThrowTypeError% is called it performs the following steps:

1. Throw a TypeError exception.

The value of the [[Extensible]] internal slot of a %ThrowTypeError%
function is false.

The "length" property of a %ThrowTypeError% function has the attributes
{ [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]: false }.

* 9.2.5MakeConstructor ( =F= [ , =writablePrototype= [ , =prototype= ] ]
)
  :PROPERTIES:
  :CUSTOM_ID: makeconstructor-f-writableprototype-prototype
  :END:

The abstract operation MakeConstructor requires a Function argument =F=
and optionally, a Boolean =writablePrototype= and an object =prototype=.
If =prototype= is provided it is assumed to already contain, if needed,
a "constructor" property whose value is =F=. This operation converts =F=
into a [[https://tc39.es/ecma262/#constructor][constructor]] by
performing the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an ECMAScript
   [[https://tc39.es/ecma262/#function-object][function object]].
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=F=) is
   false.
3. [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an extensible
   object that does not have a "prototype" own property.
4. Set =F=.[[Construct]] to the definition specified in
   [[https://tc39.es/ecma262/#sec-ecmascript-function-objects-construct-argumentslist-newtarget][9.2.2]].
5. Set =F=.[[ConstructorKind]] to base.
6. If =writablePrototype= is not present, set =writablePrototype= to
   true.
7. If =prototype= is not present, then

   1. Set =prototype= to
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
   2. Perform
      ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=prototype=,
      "constructor", PropertyDescriptor { [[Value]]: =F=, [[Writable]]:
      =writablePrototype=, [[Enumerable]]: false, [[Configurable]]: true
      }).

8. Perform
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
   "prototype", PropertyDescriptor { [[Value]]: =prototype=,
   [[Writable]]: =writablePrototype=, [[Enumerable]]: false,
   [[Configurable]]: false }).
9. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

* 9.2.6MakeClassConstructor ( =F= )
  :PROPERTIES:
  :CUSTOM_ID: makeclassconstructor-f
  :END:

The abstract operation MakeClassConstructor with argument =F= performs
the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an ECMAScript
   [[https://tc39.es/ecma262/#function-object][function object]].
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   =F=.[[IsClassConstructor]] is false.
3. Set =F=.[[IsClassConstructor]] to true.
4. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

* 9.2.7MakeMethod ( =F=, =homeObject= )
  :PROPERTIES:
  :CUSTOM_ID: makemethod-f-homeobject
  :END:

The abstract operation MakeMethod with arguments =F= and =homeObject=
configures =F= as a method by performing the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an ECMAScript
   [[https://tc39.es/ecma262/#function-object][function object]].
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=homeObject=)
   is Object.
3. Set =F=.[[HomeObject]] to =homeObject=.
4. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

* 9.2.8SetFunctionName ( =F=, =name= [ , =prefix= ] )
  :PROPERTIES:
  :CUSTOM_ID: setfunctionname-f-name-prefix
  :END:

The abstract operation SetFunctionName requires a Function argument =F=,
a String or Symbol argument =name= and optionally a String argument
=prefix=. This operation adds a "name" property to =F= by performing the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an extensible
   object that does not have a "name" own property.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=name=)
   is either Symbol or String.
3. [[https://tc39.es/ecma262/#assert][Assert]]: If =prefix= is present,
   then
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=prefix=)
   is String.
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=name=)
   is Symbol, then

   1. Let =description= be =name='s [[Description]] value.
   2. If =description= is undefined, set =name= to the empty String.
   3. Else, set =name= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of "[", =description=, and "]".

5. If =prefix= is present, then

   1. Set =name= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of =prefix=, the code unit 0x0020 (SPACE), and =name=.

6. Return
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
   "name", PropertyDescriptor { [[Value]]: =name=, [[Writable]]: false,
   [[Enumerable]]: false, [[Configurable]]: true }).

* 9.2.9SetFunctionLength ( =F=, =length= )
  :PROPERTIES:
  :CUSTOM_ID: setfunctionlength-f-length
  :END:

The abstract operation SetFunctionLength requires a Function argument
=F= and a Number argument =length=. This operation adds a "length"
property to =F= by performing the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =F= is an extensible
   object that does not have a "length" own property.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=length=)
   is Number.
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=length=)
   is true.
4. Return
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
   "length", PropertyDescriptor { [[Value]]: =length=, [[Writable]]:
   false, [[Enumerable]]: false, [[Configurable]]: true }).

* 9.2.10FunctionDeclarationInstantiation ( =func=, =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: functiondeclarationinstantiation-func-argumentslist
  :END:

Note 1

When an [[https://tc39.es/ecma262/#sec-execution-contexts][execution
context]] is established for evaluating an ECMAScript function a new
[[https://tc39.es/ecma262/#sec-function-environment-records][function
Environment Record]] is created and bindings for each formal parameter
are instantiated in that
[[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]]. Each declaration in the function body is also instantiated. If
the function's formal parameters do not include any default value
initializers then the body declarations are instantiated in the same
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
as the parameters. If default value parameter initializers exist, a
second [[https://tc39.es/ecma262/#sec-environment-records][Environment
Record]] is created for the body declarations. Formal parameters and
functions are initialized as part of FunctionDeclarationInstantiation.
All other bindings are initialized during evaluation of the function
body.

FunctionDeclarationInstantiation is performed as follows using arguments
=func= and =argumentsList=. =func= is the
[[https://tc39.es/ecma262/#function-object][function object]] for which
the [[https://tc39.es/ecma262/#sec-execution-contexts][execution
context]] is being established.

1.  Let =calleeContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
2.  Let =env= be the LexicalEnvironment of =calleeContext=.
3.  Let =envRec= be =env='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
4.  Let =code= be =func=.[[ECMAScriptCode]].
5.  Let =strict= be =func=.[[Strict]].
6.  Let =formals= be =func=.[[FormalParameters]].
7.  Let =parameterNames= be the BoundNames of =formals=.
8.  If =parameterNames= has any duplicate entries, let =hasDuplicates=
    be true. Otherwise, let =hasDuplicates= be false.
9.  Let =simpleParameterList= be IsSimpleParameterList of =formals=.
10. Let =hasParameterExpressions= be ContainsExpression of =formals=.
11. Let =varNames= be the VarDeclaredNames of =code=.
12. Let =varDeclarations= be the VarScopedDeclarations of =code=.
13. Let =lexicalNames= be the LexicallyDeclaredNames of =code=.
14. Let =functionNames= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
15. Let =functionsToInitialize= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
16. For each =d= in =varDeclarations=, in reverse list order, do

    1. If =d= is neither a
       [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
       nor a [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]
       nor a
       [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]],
       then

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =d= is either a
          [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
          a
          [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
          an
          [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
          or an
          [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
       2. Let =fn= be the sole element of the BoundNames of =d=.
       3. If =fn= is not an element of =functionNames=, then

          1. Insert =fn= as the first element of =functionNames=.
          2. NOTE: If there are multiple function declarations for the
             same name, the last declaration is used.
          3. Insert =d= as the first element of =functionsToInitialize=.

17. Let =argumentsObjectNeeded= be true.
18. If =func=.[[ThisMode]] is lexical, then

    1. NOTE: Arrow functions never have an arguments objects.
    2. Set =argumentsObjectNeeded= to false.

19. Else if "arguments" is an element of =parameterNames=, then

    1. Set =argumentsObjectNeeded= to false.

20. Else if =hasParameterExpressions= is false, then

    1. If "arguments" is an element of =functionNames= or if "arguments"
       is an element of =lexicalNames=, then

       1. Set =argumentsObjectNeeded= to false.

21. For each String =paramName= in =parameterNames=, do

    1. Let =alreadyDeclared= be =envRec=.HasBinding(=paramName=).
    2. NOTE: Early errors ensure that duplicate parameter names can only
       occur in non-strict functions that do not have parameter default
       values or rest parameters.
    3. If =alreadyDeclared= is false, then

       1. Perform ! =envRec=.CreateMutableBinding(=paramName=, false).
       2. If =hasDuplicates= is true, then

          1. Perform ! =envRec=.InitializeBinding(=paramName=,
             undefined).

22. If =argumentsObjectNeeded= is true, then

    1. If =strict= is true or if =simpleParameterList= is false, then

       1. Let =ao= be
          [[https://tc39.es/ecma262/#sec-createunmappedargumentsobject][CreateUnmappedArgumentsObject]](=argumentsList=).

    2. Else,

       1. NOTE: mapped argument object is only provided for non-strict
          functions that don't have a rest parameter, any parameter
          default value initializers, or any destructured parameters.
       2. Let =ao= be
          [[https://tc39.es/ecma262/#sec-createmappedargumentsobject][CreateMappedArgumentsObject]](=func=,
          =formals=, =argumentsList=, =envRec=).

    3. If =strict= is true, then

       1. Perform ! =envRec=.CreateImmutableBinding("arguments", false).

    4. Else,

       1. Perform ! =envRec=.CreateMutableBinding("arguments", false).

    5. Call =envRec=.InitializeBinding("arguments", =ao=).
    6. Let =parameterBindings= be a new
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       of =parameterNames= with "arguments" appended.

23. Else,

    1. Let =parameterBindings= be =parameterNames=.

24. Let =iteratorRecord= be
    [[https://tc39.es/ecma262/#sec-createlistiteratorRecord][CreateListIteratorRecord]](=argumentsList=).
25. If =hasDuplicates= is true, then

    1. Perform ? IteratorBindingInitialization for =formals= with
       =iteratorRecord= and undefined as arguments.

26. Else,

    1. Perform ? IteratorBindingInitialization for =formals= with
       =iteratorRecord= and =env= as arguments.

27. If =hasParameterExpressions= is false, then

    1. NOTE: Only a single lexical environment is needed for the
       parameters and top-level vars.
    2. Let =instantiatedVarNames= be a copy of the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       =parameterBindings=.
    3. For each =n= in =varNames=, do

       1. If =n= is not an element of =instantiatedVarNames=, then

          1. Append =n= to =instantiatedVarNames=.
          2. Perform ! =envRec=.CreateMutableBinding(=n=, false).
          3. Call =envRec=.InitializeBinding(=n=, undefined).

    4. Let =varEnv= be =env=.
    5. Let =varEnvRec= be =envRec=.

28. Else,

    1. NOTE: A separate
       [[https://tc39.es/ecma262/#sec-environment-records][Environment
       Record]] is needed to ensure that closures created by expressions
       in the formal parameter list do not have visibility of
       declarations in the function body.
    2. Let =varEnv= be
       [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=env=).
    3. Let =varEnvRec= be =varEnv='s
       [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
    4. Set the VariableEnvironment of =calleeContext= to =varEnv=.
    5. Let =instantiatedVarNames= be a new empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    6. For each =n= in =varNames=, do

       1. If =n= is not an element of =instantiatedVarNames=, then

          1. Append =n= to =instantiatedVarNames=.
          2. Perform ! =varEnvRec=.CreateMutableBinding(=n=, false).
          3. If =n= is not an element of =parameterBindings= or if =n=
             is an element of =functionNames=, let =initialValue= be
             undefined.
          4. Else,

             1. Let =initialValue= be ! =envRec=.GetBindingValue(=n=,
                false).

          5. Call =varEnvRec=.InitializeBinding(=n=, =initialValue=).
          6. NOTE: vars whose names are the same as a formal parameter,
             initially have the same value as the corresponding
             initialized parameter.

29. NOTE: Annex
    [[https://tc39.es/ecma262/#sec-web-compat-functiondeclarationinstantiation][B.3.3.1]]
    adds additional steps at this point.
30. If =strict= is false, then

    1. Let =lexEnv= be
       [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=varEnv=).
    2. NOTE: Non-strict functions use a separate lexical
       [[https://tc39.es/ecma262/#sec-environment-records][Environment
       Record]] for top-level lexical declarations so that a
       [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
       eval]] can determine whether any var scoped declarations
       introduced by the eval code conflict with pre-existing top-level
       lexically scoped declarations. This is not needed for strict
       functions because a strict
       [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
       eval]] always places all declarations into a new
       [[https://tc39.es/ecma262/#sec-environment-records][Environment
       Record]].

31. Else, let =lexEnv= be =varEnv=.
32. Let =lexEnvRec= be =lexEnv='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
33. Set the LexicalEnvironment of =calleeContext= to =lexEnv=.
34. Let =lexDeclarations= be the LexicallyScopedDeclarations of =code=.
35. For each element =d= in =lexDeclarations=, do

    1. NOTE: A lexically declared name cannot be the same as a
       function/generator declaration, formal parameter, or a var name.
       Lexically declared names are only instantiated here but not
       initialized.
    2. For each element =dn= of the BoundNames of =d=, do

       1. If IsConstantDeclaration of =d= is true, then

          1. Perform ! =lexEnvRec=.CreateImmutableBinding(=dn=, true).

       2. Else,

          1. Perform ! =lexEnvRec=.CreateMutableBinding(=dn=, false).

36. For each [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse
    Node]] =f= in =functionsToInitialize=, do

    1. Let =fn= be the sole element of the BoundNames of =f=.
    2. Let =fo= be InstantiateFunctionObject of =f= with argument
       =lexEnv=.
    3. Perform ! =varEnvRec=.SetMutableBinding(=fn=, =fo=, false).

37. Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

Note 2

[[https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics][B.3.3]]
provides an extension to the above algorithm that is necessary for
backwards compatibility with web browser implementations of ECMAScript
that predate ECMAScript 2015.

Note 3

Parameter [[https://tc39.es/ecma262/#prod-Initializer][Initializer]]s
may contain
[[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
eval]] expressions. Any top level declarations of such evals are only
visible to the eval code
([[https://tc39.es/ecma262/#sec-types-of-source-code][10.2]]). The
creation of the environment for such declarations is described in
[[https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-iteratorbindinginitialization][14.1.19]].

* 9.3Built-in Function Objects
  :PROPERTIES:
  :CUSTOM_ID: built-in-function-objects
  :END:

The built-in function objects defined in this specification may be
implemented as either ECMAScript function objects
([[https://tc39.es/ecma262/#sec-ecmascript-function-objects][9.2]])
whose behaviour is provided using ECMAScript code or as implementation
provided function exotic objects whose behaviour is provided in some
other manner. In either case, the effect of calling such functions must
conform to their specifications. An implementation may also provide
additional built-in function objects that are not defined in this
specification.

If a built-in [[https://tc39.es/ecma262/#function-object][function
object]] is implemented as an
[[https://tc39.es/ecma262/#exotic-object][exotic object]] it must have
the ordinary object behaviour specified in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
All such function exotic objects also have [[Prototype]],
[[Extensible]], [[Realm]], and [[ScriptOrModule]] internal slots.

Unless otherwise specified every built-in
[[https://tc39.es/ecma262/#function-object][function object]] has the
[[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]]
object as the initial value of its [[Prototype]] internal slot.

The behaviour specified for each built-in function via algorithm steps
or other means is the specification of the function body behaviour for
both [[Call]] and [[Construct]] invocations of the function. However,
[[Construct]] invocation is not supported by all built-in functions. For
each built-in function, when invoked with [[Call]], the [[Call]]
=thisArgument= provides the this value, the [[Call]] =argumentsList=
provides the named parameters, and the NewTarget value is undefined.
When invoked with [[Construct]], the this value is uninitialized, the
[[Construct]] =argumentsList= provides the named parameters, and the
[[Construct]] =newTarget= parameter provides the NewTarget value. If the
built-in function is implemented as an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] then this
specified behaviour must be implemented by the ECMAScript code that is
the body of the function. Built-in functions that are ECMAScript
function objects must be strict functions. If a built-in
[[https://tc39.es/ecma262/#constructor][constructor]] has any [[Call]]
behaviour other than throwing a TypeError exception, an ECMAScript
implementation of the function must be done in a manner that does not
cause the function's [[IsClassConstructor]] internal slot to have the
value true.

Built-in function objects that are not identified as constructors do not
implement the [[Construct]] internal method unless otherwise specified
in the description of a particular function. When a built-in
[[https://tc39.es/ecma262/#constructor][constructor]] is called as part
of a =new= expression the =argumentsList= parameter of the invoked
[[Construct]] internal method provides the values for the built-in
[[https://tc39.es/ecma262/#constructor][constructor]]'s named
parameters.

Built-in functions that are not constructors do not have a "prototype"
property unless otherwise specified in the description of a particular
function.

If a built-in [[https://tc39.es/ecma262/#function-object][function
object]] is not implemented as an ECMAScript function it must provide
[[Call]] and [[Construct]] internal methods that conform to the
following definitions:

* 9.3.1[[Call]] ( =thisArgument=, =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: call-thisargument-argumentslist-1
  :END:

The [[Call]] internal method for a built-in
[[https://tc39.es/ecma262/#function-object][function object]] =F= is
called with parameters =thisArgument= and =argumentsList=, a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of ECMAScript language values. The following steps are taken:

1.  Let =callerContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
2.  If =callerContext= is not already suspended, suspend
    =callerContext=.
3.  Let =calleeContext= be a new
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]].
4.  Set the Function of =calleeContext= to =F=.
5.  Let =calleeRealm= be =F=.[[Realm]].
6.  Set the [[https://tc39.es/ecma262/#realm][Realm]] of =calleeContext=
    to =calleeRealm=.
7.  Set the ScriptOrModule of =calleeContext= to =F=.[[ScriptOrModule]].
8.  Perform any necessary implementation-defined initialization of
    =calleeContext=.
9.  Push =calleeContext= onto the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]]; =calleeContext= is now the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
10. Let =result= be the
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
    Record]] that is the result of evaluating =F= in a manner that
    conforms to the specification of =F=. =thisArgument= is the this
    value, =argumentsList= provides the named parameters, and the
    NewTarget value is undefined.
11. Remove =calleeContext= from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and restore =callerContext= as the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
12. Return =result=.

Note

When =calleeContext= is removed from the
[[https://tc39.es/ecma262/#execution-context-stack][execution context
stack]] it must not be destroyed if it has been suspended and retained
by an accessible generator object for later resumption.

* 9.3.2[[Construct]] ( =argumentsList=, =newTarget= )
  :PROPERTIES:
  :CUSTOM_ID: construct-argumentslist-newtarget-1
  :END:

The [[Construct]] internal method for built-in
[[https://tc39.es/ecma262/#function-object][function object]] =F= is
called with parameters =argumentsList= and =newTarget=. The steps
performed are the same as [[Call]] (see
[[https://tc39.es/ecma262/#sec-built-in-function-objects-call-thisargument-argumentslist][9.3.1]])
except that step 10 is replaced by:

10. Let =result= be the
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
    Record]] that is the result of evaluating =F= in a manner that
    conforms to the specification of =F=. The this value is
    uninitialized, =argumentsList= provides the named parameters, and
    =newTarget= provides the NewTarget value.

* 9.3.3CreateBuiltinFunction ( =steps=, =internalSlotsList= [ , =realm=
[ , =prototype= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: createbuiltinfunction-steps-internalslotslist-realm-prototype
  :END:

The abstract operation CreateBuiltinFunction takes arguments =steps=,
=internalSlotsList=, =realm=, and =prototype=. The argument
=internalSlotsList= is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of the names of additional internal slots that must be defined as part
of the object. CreateBuiltinFunction returns a built-in
[[https://tc39.es/ecma262/#function-object][function object]] created by
the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =steps= is either a set
    of algorithm steps or other definition of a function's behaviour
    provided in this specification.
2.  If =realm= is not present, set =realm= to
    [[https://tc39.es/ecma262/#current-realm][the current Realm
    Record]].
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =realm= is a
    [[https://tc39.es/ecma262/#realm-record][Realm Record]].
4.  If =prototype= is not present, set =prototype= to
    =realm=.[[Intrinsics]].[[[[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]]]].
5.  Let =func= be a new built-in
    [[https://tc39.es/ecma262/#function-object][function object]] that
    when called performs the action described by =steps=. The new
    [[https://tc39.es/ecma262/#function-object][function object]] has
    internal slots whose names are the elements of =internalSlotsList=.
6.  Set =func=.[[Realm]] to =realm=.
7.  Set =func=.[[Prototype]] to =prototype=.
8.  Set =func=.[[Extensible]] to true.
9.  Set =func=.[[ScriptOrModule]] to null.
10. Return =func=.

Each built-in function defined in this specification is created by
calling the CreateBuiltinFunction abstract operation.

* 9.4Built-in Exotic Object Internal Methods and Slots
  :PROPERTIES:
  :CUSTOM_ID: built-in-exotic-object-internal-methods-and-slots
  :END:

This specification defines several kinds of built-in exotic objects.
These objects generally behave similar to ordinary objects except for a
few specific situations. The following exotic objects use the ordinary
object internal methods except where it is explicitly specified
otherwise below:

* 9.4.1Bound Function Exotic Objects
  :PROPERTIES:
  :CUSTOM_ID: bound-function-exotic-objects
  :END:

A bound function is an [[https://tc39.es/ecma262/#exotic-object][exotic
object]] that wraps another
[[https://tc39.es/ecma262/#function-object][function object]]. A bound
function is callable (it has a [[Call]] internal method and may have a
[[Construct]] internal method). Calling a bound function generally
results in a call of its wrapped function.

Bound function objects do not have the internal slots of ECMAScript
function objects defined in [[https://tc39.es/ecma262/#table-27][Table
29]]. Instead they have the internal slots defined in
[[https://tc39.es/ecma262/#table-28][Table 30]].

Table 30: Internal Slots of Bound Function Exotic Objects
| Internal Slot             | Type                                                                               | Description                                                                                            |
|---------------------------+------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------|
| [[BoundTargetFunction]]   | Callable Object                                                                    | The wrapped [[https://tc39.es/ecma262/#function-object][function object]].                             |
| [[BoundThis]]             | Any                                                                                | The value that is always passed as the this value when calling the wrapped function.                   |
| [[BoundArguments]]        | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of Any   | A list of values whose elements are used as the first arguments to any call to the wrapped function.   |

Bound function objects provide all of the essential internal methods as
specified in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
However, they use the following definitions for the essential internal
methods of function objects.

* 9.4.1.1[[Call]] ( =thisArgument=, =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: call-thisargument-argumentslist-2
  :END:

When the [[Call]] internal method of a
[[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
function]] [[https://tc39.es/ecma262/#exotic-object][exotic object]],
=F=, which was created using the bind function is called with parameters
=thisArgument= and =argumentsList=, a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of ECMAScript language values, the following steps are taken:

1. Let =target= be =F=.[[BoundTargetFunction]].
2. Let =boundThis= be =F=.[[BoundThis]].
3. Let =boundArgs= be =F=.[[BoundArguments]].
4. Let =args= be a new list containing the same values as the list
   =boundArgs= in the same order followed by the same values as the list
   =argumentsList= in the same order.
5. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=target=,
   =boundThis=, =args=).

* 9.4.1.2[[Construct]] ( =argumentsList=, =newTarget= )
  :PROPERTIES:
  :CUSTOM_ID: construct-argumentslist-newtarget-2
  :END:

When the [[Construct]] internal method of a
[[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
function]] [[https://tc39.es/ecma262/#exotic-object][exotic object]],
=F= that was created using the bind function is called with a list of
arguments =argumentsList= and =newTarget=, the following steps are
taken:

1. Let =target= be =F=.[[BoundTargetFunction]].
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=target=)
   is true.
3. Let =boundArgs= be =F=.[[BoundArguments]].
4. Let =args= be a new list containing the same values as the list
   =boundArgs= in the same order followed by the same values as the list
   =argumentsList= in the same order.
5. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=F=,
   =newTarget=) is true, set =newTarget= to =target=.
6. Return
   ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=target=,
   =args=, =newTarget=).

* 9.4.1.3BoundFunctionCreate ( =targetFunction=, =boundThis=,
=boundArgs= )
  :PROPERTIES:
  :CUSTOM_ID: boundfunctioncreate-targetfunction-boundthis-boundargs
  :END:

The abstract operation BoundFunctionCreate with arguments
=targetFunction=, =boundThis= and =boundArgs= is used to specify the
creation of new Bound Function exotic objects. It performs the following
steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=targetFunction=)
    is Object.
2.  Let =proto= be ? =targetFunction=.[[GetPrototypeOf]]().
3.  Let =obj= be a newly created
    [[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
    function]] [[https://tc39.es/ecma262/#exotic-object][exotic object]]
    with the internal slots listed in
    [[https://tc39.es/ecma262/#table-28][Table 30]].
4.  Set =obj='s essential internal methods to the default ordinary
    object definitions specified in
    [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
5.  Set =obj=.[[Call]] as described in
    [[https://tc39.es/ecma262/#sec-bound-function-exotic-objects-call-thisargument-argumentslist][9.4.1.1]].
6.  If
    [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=targetFunction=)
    is true, then

    1. Set =obj=.[[Construct]] as described in
       [[https://tc39.es/ecma262/#sec-bound-function-exotic-objects-construct-argumentslist-newtarget][9.4.1.2]].

7.  Set =obj=.[[Prototype]] to =proto=.
8.  Set =obj=.[[Extensible]] to true.
9.  Set =obj=.[[BoundTargetFunction]] to =targetFunction=.
10. Set =obj=.[[BoundThis]] to =boundThis=.
11. Set =obj=.[[BoundArguments]] to =boundArgs=.
12. Return =obj=.

* 9.4.2Array Exotic Objects
  :PROPERTIES:
  :CUSTOM_ID: array-exotic-objects
  :END:

An /Array object/ is an [[https://tc39.es/ecma262/#exotic-object][exotic
object]] that gives special treatment to
[[https://tc39.es/ecma262/#array-index][array index]] property keys (see
[[https://tc39.es/ecma262/#sec-object-type][6.1.7]]). A property whose
[[https://tc39.es/ecma262/#property-name][property name]] is an
[[https://tc39.es/ecma262/#array-index][array index]] is also called an
/element/. Every Array object has a non-configurable "length" property
whose value is always a nonnegative
[[https://tc39.es/ecma262/#integer][integer]] less than 2^{32}. The
value of the "length" property is numerically greater than the name of
every own property whose name is an
[[https://tc39.es/ecma262/#array-index][array index]]; whenever an own
property of an Array object is created or changed, other properties are
adjusted as necessary to maintain this invariant. Specifically, whenever
an own property is added whose name is an
[[https://tc39.es/ecma262/#array-index][array index]], the value of the
"length" property is changed, if necessary, to be one more than the
numeric value of that [[https://tc39.es/ecma262/#array-index][array
index]]; and whenever the value of the "length" property is changed,
every own property whose name is an
[[https://tc39.es/ecma262/#array-index][array index]] whose value is not
smaller than the new length is deleted. This constraint applies only to
own properties of an Array object and is unaffected by "length" or
[[https://tc39.es/ecma262/#array-index][array index]] properties that
may be inherited from its prototypes.

Note

A String [[https://tc39.es/ecma262/#property-name][property name]] =P=
is an /[[https://tc39.es/ecma262/#array-index][array index]]/ if and
only if
[[https://tc39.es/ecma262/#sec-tostring][ToString]]([[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=P=))
is equal to =P= and
[[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=P=) is not equal to
2^{32} - 1.

Array exotic objects provide an alternative definition for the
[[DefineOwnProperty]] internal method. Except for that internal method,
Array exotic objects provide all of the other essential internal methods
as specified in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].

* 9.4.2.1[[DefineOwnProperty]] ( =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: defineownproperty-p-desc-2
  :END:

When the [[DefineOwnProperty]] internal method of an Array
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =A= is called
with property key =P=, and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. If =P= is "length", then

   1. Return
      ? [[https://tc39.es/ecma262/#sec-arraysetlength][ArraySetLength]](=A=,
      =Desc=).

3. Else if =P= is an [[https://tc39.es/ecma262/#array-index][array
   index]], then

   1. Let =oldLenDesc= be
      [[https://tc39.es/ecma262/#sec-ordinarygetownproperty][OrdinaryGetOwnProperty]](=A=,
      "length").
   2. [[https://tc39.es/ecma262/#assert][Assert]]: =oldLenDesc= will
      never be undefined or an accessor descriptor because Array objects
      are created with a length
      [[https://tc39.es/ecma262/#sec-object-type][data property]] that
      cannot be deleted or reconfigured.
   3. Let =oldLen= be =oldLenDesc=.[[Value]].
   4. Let =index= be
      ! [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=P=).
   5. If =index= ≥ =oldLen= and =oldLenDesc=.[[Writable]] is false,
      return false.
   6. Let =succeeded= be
      ! [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
      =P=, =Desc=).
   7. If =succeeded= is false, return false.
   8. If =index= ≥ =oldLen=, then

      1. Set =oldLenDesc=.[[Value]] to =index= + 1.
      2. Let =succeeded= be
         [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
         "length", =oldLenDesc=).
      3. [[https://tc39.es/ecma262/#assert][Assert]]: =succeeded= is
         true.

   9. Return true.

4. Return
   [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
   =P=, =Desc=).

* 9.4.2.2ArrayCreate ( =length= [ , =proto= ] )
  :PROPERTIES:
  :CUSTOM_ID: arraycreate-length-proto
  :END:

The abstract operation ArrayCreate with argument =length= (either 0 or a
positive [[https://tc39.es/ecma262/#integer][integer]]) and optional
argument =proto= is used to specify the creation of new Array exotic
objects. It performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=length=)
    is true.
2.  If =length= is -0, set =length= to +0.
3.  If =length= > 2^{32} - 1, throw a RangeError exception.
4.  If =proto= is not present, set =proto= to %Array.prototype%.
5.  Let =A= be a newly created Array
    [[https://tc39.es/ecma262/#exotic-object][exotic object]].
6.  Set =A='s essential internal methods to the default ordinary object
    definitions specified in
    [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
7.  Set =A=.[[DefineOwnProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-array-exotic-objects-defineownproperty-p-desc][9.4.2.1]].
8.  Set =A=.[[Prototype]] to =proto=.
9.  Set =A=.[[Extensible]] to true.
10. Perform
    ! [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
    "length", PropertyDescriptor { [[Value]]: =length=, [[Writable]]:
    true, [[Enumerable]]: false, [[Configurable]]: false }).
11. Return =A=.

* 9.4.2.3ArraySpeciesCreate ( =originalArray=, =length= )
  :PROPERTIES:
  :CUSTOM_ID: arrayspeciescreate-originalarray-length
  :END:

The abstract operation ArraySpeciesCreate with arguments =originalArray=
and =length= is used to specify the creation of a new Array object using
a [[https://tc39.es/ecma262/#constructor][constructor]] function that is
derived from =originalArray=. It performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=length=)
    is true.
2.  If =length= is -0, set =length= to +0.
3.  Let =isArray= be
    ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=originalArray=).
4.  If =isArray= is false, return
    ? [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=length=).
5.  Let =C= be
    ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=originalArray=,
    "constructor").
6.  If
    [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
    is true, then

    1. Let =thisRealm= be [[https://tc39.es/ecma262/#current-realm][the
       current Realm Record]].
    2. Let =realmC= be
       ? [[https://tc39.es/ecma262/#sec-getfunctionrealm][GetFunctionRealm]](=C=).
    3. If =thisRealm= and =realmC= are not the same
       [[https://tc39.es/ecma262/#realm-record][Realm Record]], then

       1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=C=,
          =realmC=.[[Intrinsics]].[[[[https://tc39.es/ecma262/#sec-array-constructor][%Array%]]]])
          is true, set =C= to undefined.

7.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=C=)
    is Object, then

    1. Set =C= to ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=C=,
       @@species).
    2. If =C= is null, set =C= to undefined.

8.  If =C= is undefined, return
    ? [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=length=).
9.  If
    [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
    is false, throw a TypeError exception.
10. Return ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=C=,
    « =length= »).

Note

If =originalArray= was created using the standard built-in Array
[[https://tc39.es/ecma262/#constructor][constructor]] for a
[[https://tc39.es/ecma262/#realm][realm]] that is not the
[[https://tc39.es/ecma262/#realm][realm]] of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]], then a new Array is created using the
[[https://tc39.es/ecma262/#realm][realm]] of the
[[https://tc39.es/ecma262/#running-execution-context][running execution
context]]. This maintains compatibility with Web browsers that have
historically had that behaviour for the =Array.prototype= methods that
now are defined using ArraySpeciesCreate.

* 9.4.2.4ArraySetLength ( =A=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: arraysetlength-a-desc
  :END:

When the abstract operation ArraySetLength is called with an Array
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =A=, and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1.  If =Desc=.[[Value]] is absent, then

    1. Return
       [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
       "length", =Desc=).

2.  Let =newLenDesc= be a copy of =Desc=.
3.  Let =newLen= be
    ? [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=Desc=.[[Value]]).
4.  Let =numberLen= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=Desc=.[[Value]]).
5.  If =newLen= ≠ =numberLen=, throw a RangeError exception.
6.  Set =newLenDesc=.[[Value]] to =newLen=.
7.  Let =oldLenDesc= be
    [[https://tc39.es/ecma262/#sec-ordinarygetownproperty][OrdinaryGetOwnProperty]](=A=,
    "length").
8.  [[https://tc39.es/ecma262/#assert][Assert]]: =oldLenDesc= will never
    be undefined or an accessor descriptor because Array objects are
    created with a length
    [[https://tc39.es/ecma262/#sec-object-type][data property]] that
    cannot be deleted or reconfigured.
9.  Let =oldLen= be =oldLenDesc=.[[Value]].
10. If =newLen= ≥ =oldLen=, then

    1. Return
       [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
       "length", =newLenDesc=).

11. If =oldLenDesc=.[[Writable]] is false, return false.
12. If =newLenDesc=.[[Writable]] is absent or has the value true, let
    =newWritable= be true.
13. Else,

    1. Need to defer setting the [[Writable]] attribute to false in case
       any elements cannot be deleted.
    2. Let =newWritable= be false.
    3. Set =newLenDesc=.[[Writable]] to true.

14. Let =succeeded= be
    ! [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
    "length", =newLenDesc=).
15. If =succeeded= is false, return false.
16. For each own property key =P= of =A= that is an
    [[https://tc39.es/ecma262/#array-index][array index]], whose numeric
    value is greater than or equal to =newLen=, in descending numeric
    index order, do

    1. Let =deleteSucceeded= be ! =A=.[[Delete]](=P=).
    2. If =deleteSucceeded= is false, then

       1. Set =newLenDesc=.[[Value]] to
          ! [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=P=) +
          1.
       2. If =newWritable= is false, set =newLenDesc=.[[Writable]] to
          false.
       3. Perform
          ! [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
          "length", =newLenDesc=).
       4. Return false.

17. If =newWritable= is false, then

    1. Return
       [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=A=,
       "length", PropertyDescriptor { [[Writable]]: false }). This call
       will always return true.

18. Return true.

Note

In steps 3 and 4, if =Desc=.[[Value]] is an object then its =valueOf=
method is called twice. This is legacy behaviour that was specified with
this effect starting with the 2^{nd} Edition of this specification.

* 9.4.3String Exotic Objects
  :PROPERTIES:
  :CUSTOM_ID: string-exotic-objects
  :END:

A /String object/ is an [[https://tc39.es/ecma262/#exotic-object][exotic
object]] that encapsulates a String value and exposes virtual
[[https://tc39.es/ecma262/#integer][integer]]-indexed data properties
corresponding to the individual code unit elements of the String value.
String exotic objects always have a
[[https://tc39.es/ecma262/#sec-object-type][data property]] named
"length" whose value is the number of code unit elements in the
encapsulated String value. Both the code unit data properties and the
"length" property are non-writable and non-configurable.

String exotic objects have the same internal slots as ordinary objects.
They also have a [[StringData]] internal slot.

String exotic objects provide alternative definitions for the following
internal methods. All of the other String
[[https://tc39.es/ecma262/#exotic-object][exotic object]] essential
internal methods that are not defined below are as specified in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].

* 9.4.3.1[[GetOwnProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: getownproperty-p-2
  :END:

When the [[GetOwnProperty]] internal method of a String
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =S= is called
with property key =P=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =desc= be
   [[https://tc39.es/ecma262/#sec-ordinarygetownproperty][OrdinaryGetOwnProperty]](=S=,
   =P=).
3. If =desc= is not undefined, return =desc=.
4. Return
   ! [[https://tc39.es/ecma262/#sec-stringgetownproperty][StringGetOwnProperty]](=S=,
   =P=).

* 9.4.3.2[[DefineOwnProperty]] ( =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: defineownproperty-p-desc-3
  :END:

When the [[DefineOwnProperty]] internal method of a String
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =S= is called
with property key =P=, and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. Let =stringDesc= be
   ! [[https://tc39.es/ecma262/#sec-stringgetownproperty][StringGetOwnProperty]](=S=,
   =P=).
3. If =stringDesc= is not undefined, then

   1. Let =extensible= be =S=.[[Extensible]].
   2. Return
      ! [[https://tc39.es/ecma262/#sec-iscompatiblepropertydescriptor][IsCompatiblePropertyDescriptor]](=extensible=,
      =Desc=, =stringDesc=).

4. Return
   ! [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=S=,
   =P=, =Desc=).

* 9.4.3.3[[OwnPropertyKeys]] ( )
  :PROPERTIES:
  :CUSTOM_ID: ownpropertykeys-2
  :END:

When the [[OwnPropertyKeys]] internal method of a String
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1. Let =keys= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
2. Let =str= be =O=.[[StringData]].
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=str=)
   is String.
4. Let =len= be the length of =str=.
5. For each [[https://tc39.es/ecma262/#integer][integer]] =i= starting
   with 0 such that =i= < =len=, in ascending order, do

   1. Add ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=i=) as
      the last element of =keys=.

6. For each own property key =P= of =O= such that =P= is an
   [[https://tc39.es/ecma262/#array-index][array index]] and
   [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=P=) ≥ =len=,
   in ascending numeric index order, do

   1. Add =P= as the last element of =keys=.

7. For each own property key =P= of =O= such that
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is String and =P= is not an
   [[https://tc39.es/ecma262/#array-index][array index]], in ascending
   chronological order of property creation, do

   1. Add =P= as the last element of =keys=.

8. For each own property key =P= of =O= such that
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is Symbol, in ascending chronological order of property creation, do

   1. Add =P= as the last element of =keys=.

9. Return =keys=.

* 9.4.3.4StringCreate ( =value=, =prototype= )
  :PROPERTIES:
  :CUSTOM_ID: stringcreate-value-prototype
  :END:

The abstract operation StringCreate with arguments =value= and
=prototype= is used to specify the creation of new String exotic
objects. It performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is String.
2.  Let =S= be a newly created String
    [[https://tc39.es/ecma262/#exotic-object][exotic object]] with a
    [[StringData]] internal slot.
3.  Set =S=.[[StringData]] to =value=.
4.  Set =S='s essential internal methods to the default ordinary object
    definitions specified in
    [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
5.  Set =S=.[[GetOwnProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-string-exotic-objects-getownproperty-p][9.4.3.1]].
6.  Set =S=.[[DefineOwnProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-string-exotic-objects-defineownproperty-p-desc][9.4.3.2]].
7.  Set =S=.[[OwnPropertyKeys]] as specified in
    [[https://tc39.es/ecma262/#sec-string-exotic-objects-ownpropertykeys][9.4.3.3]].
8.  Set =S=.[[Prototype]] to =prototype=.
9.  Set =S=.[[Extensible]] to true.
10. Let =length= be the number of code unit elements in =value=.
11. Perform
    ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=S=,
    "length", PropertyDescriptor { [[Value]]: =length=, [[Writable]]:
    false, [[Enumerable]]: false, [[Configurable]]: false }).
12. Return =S=.

* 9.4.3.5StringGetOwnProperty ( =S=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: stringgetownproperty-s-p
  :END:

The abstract operation StringGetOwnProperty called with arguments =S=
and =P= performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =S= is an Object that
    has a [[StringData]] internal slot.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
3.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
    is not String, return undefined.
4.  Let =index= be
    ! [[https://tc39.es/ecma262/#sec-canonicalnumericindexstring][CanonicalNumericIndexString]](=P=).
5.  If =index= is undefined, return undefined.
6.  If [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=index=) is
    false, return undefined.
7.  If =index= = -0, return undefined.
8.  Let =str= be =S=.[[StringData]].
9.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=str=)
    is String.
10. Let =len= be the length of =str=.
11. If =index= < 0 or =len= ≤ =index=, return undefined.
12. Let =resultStr= be the String value of length 1, containing one code
    unit from =str=, specifically the code unit at index =index=.
13. Return the PropertyDescriptor { [[Value]]: =resultStr=,
    [[Writable]]: false, [[Enumerable]]: true, [[Configurable]]: false
    }.

* 9.4.4Arguments Exotic Objects
  :PROPERTIES:
  :CUSTOM_ID: arguments-exotic-objects
  :END:

Most ECMAScript functions make an arguments object available to their
code. Depending upon the characteristics of the function definition, its
arguments object is either an ordinary object or an /arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]]/. An arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] is an
[[https://tc39.es/ecma262/#exotic-object][exotic object]] whose
[[https://tc39.es/ecma262/#array-index][array index]] properties map to
the formal parameters bindings of an invocation of its associated
ECMAScript function.

Arguments exotic objects have the same internal slots as ordinary
objects. They also have a [[ParameterMap]] internal slot. Ordinary
arguments objects also have a [[ParameterMap]] internal slot whose value
is always undefined. For ordinary argument objects the [[ParameterMap]]
internal slot is only used by =Object.prototype.toString=
([[https://tc39.es/ecma262/#sec-object.prototype.tostring][19.1.3.6]])
to identify them as such.

Arguments exotic objects provide alternative definitions for the
following internal methods. All of the other arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] essential
internal methods that are not defined below are as specified in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]]

Note 1

The [[https://tc39.es/ecma262/#integer][integer]]-indexed data
properties of an arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] whose numeric
name values are less than the number of formal parameters of the
corresponding [[https://tc39.es/ecma262/#function-object][function
object]] initially share their values with the corresponding argument
bindings in the function's
[[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].
This means that changing the property changes the corresponding value of
the argument binding and vice-versa. This correspondence is broken if
such a property is deleted and then redefined or if the property is
changed into an [[https://tc39.es/ecma262/#sec-object-type][accessor
property]]. If the arguments object is an ordinary object, the values of
its properties are simply a copy of the arguments passed to the function
and there is no dynamic linkage between the property values and the
formal parameter values.

Note 2

The ParameterMap object and its property values are used as a device for
specifying the arguments object correspondence to argument bindings. The
ParameterMap object and the objects that are the values of its
properties are not directly observable from ECMAScript code. An
ECMAScript implementation does not need to actually create or use such
objects to implement the specified semantics.

Note 3

Ordinary arguments objects define a non-configurable
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] named
"callee" which throws a TypeError exception on access. The "callee"
property has a more specific meaning for arguments exotic objects, which
are created only for some class of non-strict functions. The definition
of this property in the ordinary variant exists to ensure that it is not
defined in any other manner by conforming ECMAScript implementations.

Note 4

ECMAScript implementations of arguments exotic objects have historically
contained an [[https://tc39.es/ecma262/#sec-object-type][accessor
property]] named "caller". Prior to ECMAScript 2017, this specification
included the definition of a throwing "caller" property on ordinary
arguments objects. Since implementations do not contain this extension
any longer, ECMAScript 2017 dropped the requirement for a throwing
"caller" accessor.

* 9.4.4.1[[GetOwnProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: getownproperty-p-3
  :END:

The [[GetOwnProperty]] internal method of an arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] when called
with a property key =P= performs the following steps:

1. Let =args= be the arguments object.
2. Let =desc= be
   [[https://tc39.es/ecma262/#sec-ordinarygetownproperty][OrdinaryGetOwnProperty]](=args=,
   =P=).
3. If =desc= is undefined, return =desc=.
4. Let =map= be =args=.[[ParameterMap]].
5. Let =isMapped= be
   ! [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=map=,
   =P=).
6. If =isMapped= is true, then

   1. Set =desc=.[[Value]] to
      [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=map=, =P=).

7. Return =desc=.

* 9.4.4.2[[DefineOwnProperty]] ( =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: defineownproperty-p-desc-4
  :END:

The [[DefineOwnProperty]] internal method of an arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] when called
with a property key =P= and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc= performs the following steps:

1. Let =args= be the arguments object.
2. Let =map= be =args=.[[ParameterMap]].
3. Let =isMapped= be
   [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=map=,
   =P=).
4. Let =newArgDesc= be =Desc=.
5. If =isMapped= is true and
   [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=Desc=)
   is true, then

   1. If =Desc=.[[Value]] is not present and =Desc=.[[Writable]] is
      present and its value is false, then

      1. Set =newArgDesc= to a copy of =Desc=.
      2. Set =newArgDesc=.[[Value]] to
         [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=map=, =P=).

6. Let =allowed= be
   ? [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=args=,
   =P=, =newArgDesc=).
7. If =allowed= is false, return false.
8. If =isMapped= is true, then

   1. If
      [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=Desc=)
      is true, then

      1. Call =map=.[[Delete]](=P=).

   2. Else,

      1. If =Desc=.[[Value]] is present, then

         1. Let =setStatus= be
            [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=map=,
            =P=, =Desc=.[[Value]], false).
         2. [[https://tc39.es/ecma262/#assert][Assert]]: =setStatus= is
            true because formal parameters mapped by argument objects
            are always writable.

      2. If =Desc=.[[Writable]] is present and its value is false, then

         1. Call =map=.[[Delete]](=P=).

9. Return true.

* 9.4.4.3[[Get]] ( =P=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: get-p-receiver-2
  :END:

The [[Get]] internal method of an arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] when called
with a property key =P= and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver= performs the following steps:

1. Let =args= be the arguments object.
2. Let =map= be =args=.[[ParameterMap]].
3. Let =isMapped= be
   ! [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=map=,
   =P=).
4. If =isMapped= is false, then

   1. Return
      ? [[https://tc39.es/ecma262/#sec-ordinaryget][OrdinaryGet]](=args=,
      =P=, =Receiver=).

5. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =map= contains a
      formal parameter mapping for =P=.
   2. Return [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=map=, =P=).

* 9.4.4.4[[Set]] ( =P=, =V=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: set-p-v-receiver-2
  :END:

The [[Set]] internal method of an arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] when called
with property key =P=, value =V=, and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver= performs the following steps:

1. Let =args= be the arguments object.
2. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=args=,
   =Receiver=) is false, then

   1. Let =isMapped= be false.

3. Else,

   1. Let =map= be =args=.[[ParameterMap]].
   2. Let =isMapped= be
      ! [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=map=,
      =P=).

4. If =isMapped= is true, then

   1. Let =setStatus= be
      [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=map=, =P=,
      =V=, false).
   2. [[https://tc39.es/ecma262/#assert][Assert]]: =setStatus= is true
      because formal parameters mapped by argument objects are always
      writable.

5. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryset][OrdinarySet]](=args=,
   =P=, =V=, =Receiver=).

* 9.4.4.5[[Delete]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: delete-p-2
  :END:

The [[Delete]] internal method of an arguments
[[https://tc39.es/ecma262/#exotic-object][exotic object]] when called
with a property key =P= performs the following steps:

1. Let =args= be the arguments object.
2. Let =map= be =args=.[[ParameterMap]].
3. Let =isMapped= be
   ! [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=map=,
   =P=).
4. Let =result= be
   ? [[https://tc39.es/ecma262/#sec-ordinarydelete][OrdinaryDelete]](=args=,
   =P=).
5. If =result= is true and =isMapped= is true, then

   1. Call =map=.[[Delete]](=P=).

6. Return =result=.

* 9.4.4.6CreateUnmappedArgumentsObject ( =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: createunmappedargumentsobject-argumentslist
  :END:

The abstract operation CreateUnmappedArgumentsObject called with an
argument =argumentsList= performs the following steps:

1. Let =len= be the number of elements in =argumentsList=.
2. Let =obj= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%,
   « [[ParameterMap]] »).
3. Set =obj=.[[ParameterMap]] to undefined.
4. Perform
   [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=obj=,
   "length", PropertyDescriptor { [[Value]]: =len=, [[Writable]]: true,
   [[Enumerable]]: false, [[Configurable]]: true }).
5. Let =index= be 0.
6. Repeat, while =index= < =len=,

   1. Let =val= be =argumentsList=[=index=].
   2. Perform
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=index=),
      =val=).
   3. Set =index= to =index= + 1.

7. Perform
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=obj=,
   @@iterator, PropertyDescriptor { [[Value]]: %Array.prototype.values%,
   [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true }).
8. Perform
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=obj=,
   "callee", PropertyDescriptor { [[Get]]:
   [[https://tc39.es/ecma262/#sec-%throwtypeerror%][%ThrowTypeError%]],
   [[Set]]:
   [[https://tc39.es/ecma262/#sec-%throwtypeerror%][%ThrowTypeError%]],
   [[Enumerable]]: false, [[Configurable]]: false }).
9. Return =obj=.

* 9.4.4.7CreateMappedArgumentsObject ( =func=, =formals=,
=argumentsList=, =env= )
  :PROPERTIES:
  :CUSTOM_ID: createmappedargumentsobject-func-formals-argumentslist-env
  :END:

The abstract operation CreateMappedArgumentsObject is called with object
=func=, [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]
=formals=,
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
=argumentsList=, and
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
=env=. The following steps are performed:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =formals= does not
    contain a rest parameter, any binding patterns, or any initializers.
    It may contain duplicate identifiers.
2.  Let =len= be the number of elements in =argumentsList=.
3.  Let =obj= be a newly created arguments
    [[https://tc39.es/ecma262/#exotic-object][exotic object]] with a
    [[ParameterMap]] internal slot.
4.  Set =obj='s essential internal methods to the default ordinary
    object definitions specified in
    [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
5.  Set =obj=.[[GetOwnProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-arguments-exotic-objects-getownproperty-p][9.4.4.1]].
6.  Set =obj=.[[DefineOwnProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-arguments-exotic-objects-defineownproperty-p-desc][9.4.4.2]].
7.  Set =obj=.[[Get]] as specified in
    [[https://tc39.es/ecma262/#sec-arguments-exotic-objects-get-p-receiver][9.4.4.3]].
8.  Set =obj=.[[Set]] as specified in
    [[https://tc39.es/ecma262/#sec-arguments-exotic-objects-set-p-v-receiver][9.4.4.4]].
9.  Set =obj=.[[Delete]] as specified in
    [[https://tc39.es/ecma262/#sec-arguments-exotic-objects-delete-p][9.4.4.5]].
10. Set =obj=.[[Prototype]] to %Object.prototype%.
11. Set =obj=.[[Extensible]] to true.
12. Let =map= be
    [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](null).
13. Set =obj=.[[ParameterMap]] to =map=.
14. Let =parameterNames= be the BoundNames of =formals=.
15. Let =numberOfParameters= be the number of elements in
    =parameterNames=.
16. Let =index= be 0.
17. Repeat, while =index= < =len=,

    1. Let =val= be =argumentsList=[=index=].
    2. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=index=),
       =val=).
    3. Set =index= to =index= + 1.

18. Perform
    ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=obj=,
    "length", PropertyDescriptor { [[Value]]: =len=, [[Writable]]: true,
    [[Enumerable]]: false, [[Configurable]]: true }).
19. Let =mappedNames= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
20. Let =index= be =numberOfParameters= - 1.
21. Repeat, while =index= ≥ 0,

    1. Let =name= be =parameterNames=[=index=].
    2. If =name= is not an element of =mappedNames=, then

       1. Add =name= as an element of the list =mappedNames=.
       2. If =index= < =len=, then

          1. Let =g= be
             [[https://tc39.es/ecma262/#sec-makearggetter][MakeArgGetter]](=name=,
             =env=).
          2. Let =p= be
             [[https://tc39.es/ecma262/#sec-makeargsetter][MakeArgSetter]](=name=,
             =env=).
          3. Perform =map=.[[DefineOwnProperty]](!
             [[https://tc39.es/ecma262/#sec-tostring][ToString]](=index=),
             PropertyDescriptor { [[Set]]: =p=, [[Get]]: =g=,
             [[Enumerable]]: false, [[Configurable]]: true }).

    3. Set =index= to =index= - 1.

22. Perform
    ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=obj=,
    @@iterator, PropertyDescriptor { [[Value]]:
    %Array.prototype.values%, [[Writable]]: true, [[Enumerable]]: false,
    [[Configurable]]: true }).
23. Perform
    ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=obj=,
    "callee", PropertyDescriptor { [[Value]]: =func=, [[Writable]]:
    true, [[Enumerable]]: false, [[Configurable]]: true }).
24. Return =obj=.

* 9.4.4.7.1MakeArgGetter ( =name=, =env= )
  :PROPERTIES:
  :CUSTOM_ID: makearggetter-name-env
  :END:

The abstract operation MakeArgGetter called with String =name= and
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
=env= creates a built-in
[[https://tc39.es/ecma262/#function-object][function object]] that when
executed returns the value bound for =name= in =env=. It performs the
following steps:

1. Let =steps= be the steps of an ArgGetter function as specified below.
2. Let =getter= be
   ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
   « [[Name]], [[Env]] »).
3. Set =getter=.[[Name]] to =name=.
4. Set =getter=.[[Env]] to =env=.
5. Return =getter=.

An ArgGetter function is an anonymous built-in function with [[Name]]
and [[Env]] internal slots. When an ArgGetter function that expects no
arguments is called it performs the following steps:

1. Let =f= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =name= be =f=.[[Name]].
3. Let =env= be =f=.[[Env]].
4. Return =env=.GetBindingValue(=name=, false).

Note

ArgGetter functions are never directly accessible to ECMAScript code.

* 9.4.4.7.2MakeArgSetter ( =name=, =env= )
  :PROPERTIES:
  :CUSTOM_ID: makeargsetter-name-env
  :END:

The abstract operation MakeArgSetter called with String =name= and
[[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
=env= creates a built-in
[[https://tc39.es/ecma262/#function-object][function object]] that when
executed sets the value bound for =name= in =env=. It performs the
following steps:

1. Let =steps= be the steps of an ArgSetter function as specified below.
2. Let =setter= be
   ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
   « [[Name]], [[Env]] »).
3. Set =setter=.[[Name]] to =name=.
4. Set =setter=.[[Env]] to =env=.
5. Return =setter=.

An ArgSetter function is an anonymous built-in function with [[Name]]
and [[Env]] internal slots. When an ArgSetter function is called with
argument =value= it performs the following steps:

1. Let =f= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =name= be =f=.[[Name]].
3. Let =env= be =f=.[[Env]].
4. Return =env=.SetMutableBinding(=name=, =value=, false).

Note

ArgSetter functions are never directly accessible to ECMAScript code.

* 9.4.5Integer-Indexed Exotic Objects
  :PROPERTIES:
  :CUSTOM_ID: integer-indexed-exotic-objects
  :END:

An Integer-Indexed exotic object is an
[[https://tc39.es/ecma262/#exotic-object][exotic object]] that performs
special handling of [[https://tc39.es/ecma262/#integer-index][integer
index]] property keys.

[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic objects]] have the same internal slots as ordinary objects and
additionally [[ViewedArrayBuffer]], [[ArrayLength]], [[ByteOffset]],
[[ContentType]], and [[TypedArrayName]] internal slots.

[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic objects]] provide alternative definitions for the following
internal methods. All of the other
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic object]] essential internal methods that are not defined below
are as specified in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].

* 9.4.5.1[[GetOwnProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: getownproperty-p-4
  :END:

When the [[GetOwnProperty]] internal method of an
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic object]] =O= is called with property key =P=, the following steps
are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an
   [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
   exotic object]].
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is String, then

   1. Let =numericIndex= be
      ! [[https://tc39.es/ecma262/#sec-canonicalnumericindexstring][CanonicalNumericIndexString]](=P=).
   2. If =numericIndex= is not undefined, then

      1. Let =value= be
         ? [[https://tc39.es/ecma262/#sec-integerindexedelementget][IntegerIndexedElementGet]](=O=,
         =numericIndex=).
      2. If =value= is undefined, return undefined.
      3. Return the PropertyDescriptor { [[Value]]: =value=,
         [[Writable]]: true, [[Enumerable]]: true, [[Configurable]]:
         false }.

4. Return
   [[https://tc39.es/ecma262/#sec-ordinarygetownproperty][OrdinaryGetOwnProperty]](=O=,
   =P=).

* 9.4.5.2[[HasProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: hasproperty-p-2
  :END:

When the [[HasProperty]] internal method of an
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic object]] =O= is called with property key =P=, the following steps
are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an
   [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
   exotic object]].
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is String, then

   1. Let =numericIndex= be
      ! [[https://tc39.es/ecma262/#sec-canonicalnumericindexstring][CanonicalNumericIndexString]](=P=).
   2. If =numericIndex= is not undefined, then

      1. Let =buffer= be =O=.[[ViewedArrayBuffer]].
      2. If
         [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
         is true, throw a TypeError exception.
      3. If
         ! [[https://tc39.es/ecma262/#sec-isvalidintegerindex][IsValidIntegerIndex]](=O=,
         =numericIndex=) is false, return false.
      4. Return true.

4. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryhasproperty][OrdinaryHasProperty]](=O=,
   =P=).

* 9.4.5.3[[DefineOwnProperty]] ( =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: defineownproperty-p-desc-5
  :END:

When the [[DefineOwnProperty]] internal method of an
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic object]] =O= is called with property key =P=, and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an
   [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
   exotic object]].
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is String, then

   1. Let =numericIndex= be
      ! [[https://tc39.es/ecma262/#sec-canonicalnumericindexstring][CanonicalNumericIndexString]](=P=).
   2. If =numericIndex= is not undefined, then

      1. If
         ! [[https://tc39.es/ecma262/#sec-isvalidintegerindex][IsValidIntegerIndex]](=O=,
         =numericIndex=) is false, return false.
      2. If
         [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=Desc=)
         is true, return false.
      3. If =Desc= has a [[Configurable]] field and if
         =Desc=.[[Configurable]] is true, return false.
      4. If =Desc= has an [[Enumerable]] field and if
         =Desc=.[[Enumerable]] is false, return false.
      5. If =Desc= has a [[Writable]] field and if =Desc=.[[Writable]]
         is false, return false.
      6. If =Desc= has a [[Value]] field, then

         1. Let =value= be =Desc=.[[Value]].
         2. Return
            ? [[https://tc39.es/ecma262/#sec-integerindexedelementset][IntegerIndexedElementSet]](=O=,
            =numericIndex=, =value=).

      7. Return true.

4. Return
   ! [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=O=,
   =P=, =Desc=).

* 9.4.5.4[[Get]] ( =P=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: get-p-receiver-3
  :END:

When the [[Get]] internal method of an
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic object]] =O= is called with property key =P= and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is String, then

   1. Let =numericIndex= be
      ! [[https://tc39.es/ecma262/#sec-canonicalnumericindexstring][CanonicalNumericIndexString]](=P=).
   2. If =numericIndex= is not undefined, then

      1. Return
         ? [[https://tc39.es/ecma262/#sec-integerindexedelementget][IntegerIndexedElementGet]](=O=,
         =numericIndex=).

3. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryget][OrdinaryGet]](=O=, =P=,
   =Receiver=).

* 9.4.5.5[[Set]] ( =P=, =V=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: set-p-v-receiver-3
  :END:

When the [[Set]] internal method of an
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic object]] =O= is called with property key =P=, value =V=, and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is String, then

   1. Let =numericIndex= be
      ! [[https://tc39.es/ecma262/#sec-canonicalnumericindexstring][CanonicalNumericIndexString]](=P=).
   2. If =numericIndex= is not undefined, then

      1. Return
         ? [[https://tc39.es/ecma262/#sec-integerindexedelementset][IntegerIndexedElementSet]](=O=,
         =numericIndex=, =V=).

3. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryset][OrdinarySet]](=O=, =P=,
   =V=, =Receiver=).

* 9.4.5.6[[OwnPropertyKeys]] ( )
  :PROPERTIES:
  :CUSTOM_ID: ownpropertykeys-3
  :END:

When the [[OwnPropertyKeys]] internal method of an
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic object]] =O= is called, the following steps are taken:

1. Let =keys= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
2. [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an
   [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
   exotic object]].
3. Let =len= be =O=.[[ArrayLength]].
4. For each [[https://tc39.es/ecma262/#integer][integer]] =i= starting
   with 0 such that =i= < =len=, in ascending order, do

   1. Add ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=i=) as
      the last element of =keys=.

5. For each own property key =P= of =O= such that
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is String and =P= is not an
   [[https://tc39.es/ecma262/#integer-index][integer index]], in
   ascending chronological order of property creation, do

   1. Add =P= as the last element of =keys=.

6. For each own property key =P= of =O= such that
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is Symbol, in ascending chronological order of property creation, do

   1. Add =P= as the last element of =keys=.

7. Return =keys=.

* 9.4.5.7IntegerIndexedObjectCreate ( =prototype=, =internalSlotsList= )
  :PROPERTIES:
  :CUSTOM_ID: integerindexedobjectcreate-prototype-internalslotslist
  :END:

The abstract operation IntegerIndexedObjectCreate with arguments
=prototype= and =internalSlotsList= is used to specify the creation of
new
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic objects]]. The argument =internalSlotsList= is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of the names of additional internal slots that must be defined as part
of the object. IntegerIndexedObjectCreate performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =internalSlotsList=
    contains the names [[ViewedArrayBuffer]], [[ArrayLength]],
    [[ByteOffset]], [[ContentType]], and [[TypedArrayName]].
2.  Let =A= be a newly created
    [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
    exotic object]] with an internal slot for each name in
    =internalSlotsList=.
3.  Set =A='s essential internal methods to the default ordinary object
    definitions specified in
    [[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][9.1]].
4.  Set =A=.[[GetOwnProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-getownproperty-p][9.4.5.1]].
5.  Set =A=.[[HasProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-hasproperty-p][9.4.5.2]].
6.  Set =A=.[[DefineOwnProperty]] as specified in
    [[https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-defineownproperty-p-desc][9.4.5.3]].
7.  Set =A=.[[Get]] as specified in
    [[https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-get-p-receiver][9.4.5.4]].
8.  Set =A=.[[Set]] as specified in
    [[https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-set-p-v-receiver][9.4.5.5]].
9.  Set =A=.[[OwnPropertyKeys]] as specified in
    [[https://tc39.es/ecma262/#sec-integer-indexed-exotic-objects-ownpropertykeys][9.4.5.6]].
10. Set =A=.[[Prototype]] to =prototype=.
11. Set =A=.[[Extensible]] to true.
12. Return =A=.

* 9.4.5.8IsValidIntegerIndex ( =O=, =index= )
  :PROPERTIES:
  :CUSTOM_ID: isvalidintegerindex-o-index
  :END:

The abstract operation IsValidIntegerIndex with arguments =O= and
=index= performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an
   [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
   exotic object]].
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=index=)
   is Number.
3. If ! [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=index=)
   is false, return false.
4. If =index= is -0, return false.
5. If =index= < 0 or =index= ≥ =O=.[[ArrayLength]], return false.
6. Return true.

* 9.4.5.9IntegerIndexedElementGet ( =O=, =index= )
  :PROPERTIES:
  :CUSTOM_ID: integerindexedelementget-o-index
  :END:

The abstract operation IntegerIndexedElementGet with arguments =O= and
=index= performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an
    [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
    exotic object]].
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=index=)
    is Number.
3.  Let =buffer= be =O=.[[ViewedArrayBuffer]].
4.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
    is true, throw a TypeError exception.
5.  If
    ! [[https://tc39.es/ecma262/#sec-isvalidintegerindex][IsValidIntegerIndex]](=O=,
    =index=) is false, return undefined.
6.  Let =offset= be =O=.[[ByteOffset]].
7.  Let =arrayTypeName= be the String value of =O=.[[TypedArrayName]].
8.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
9.  Let =indexedPosition= be (=index= × =elementSize=) + =offset=.
10. Let =elementType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
11. Return
    [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=buffer=,
    =indexedPosition=, =elementType=, true, Unordered).

* 9.4.5.10IntegerIndexedElementSet ( =O=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: integerindexedelementset-o-index-value
  :END:

The abstract operation IntegerIndexedElementSet with arguments =O=,
=index=, and =value= performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an
    [[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
    exotic object]].
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=index=)
    is Number.
3.  If =O=.[[ContentType]] is BigInt, let =numValue= be
    ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=value=).
4.  Otherwise, let =numValue= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=value=).
5.  Let =buffer= be =O=.[[ViewedArrayBuffer]].
6.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
    is true, throw a TypeError exception.
7.  If
    ! [[https://tc39.es/ecma262/#sec-isvalidintegerindex][IsValidIntegerIndex]](=O=,
    =index=) is false, return false.
8.  Let =offset= be =O=.[[ByteOffset]].
9.  Let =arrayTypeName= be the String value of =O=.[[TypedArrayName]].
10. Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
11. Let =indexedPosition= be (=index= × =elementSize=) + =offset=.
12. Let =elementType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
13. Perform
    [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=buffer=,
    =indexedPosition=, =elementType=, =numValue=, true, Unordered).
14. Return true.

* 9.4.6Module Namespace Exotic Objects
  :PROPERTIES:
  :CUSTOM_ID: module-namespace-exotic-objects
  :END:

A /module namespace object/ is an
[[https://tc39.es/ecma262/#exotic-object][exotic object]] that exposes
the bindings exported from an ECMAScript
[[https://tc39.es/ecma262/#prod-Module][Module]] (See
[[https://tc39.es/ecma262/#sec-exports][15.2.3]]). There is a one-to-one
correspondence between the String-keyed own properties of a module
namespace [[https://tc39.es/ecma262/#exotic-object][exotic object]] and
the binding names exported by the
[[https://tc39.es/ecma262/#prod-Module][Module]]. The exported bindings
include any bindings that are indirectly exported using =export *=
export items. Each String-valued own property key is the StringValue of
the corresponding exported binding name. These are the only String-keyed
properties of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]]. Each such
property has the attributes { [[Writable]]: true, [[Enumerable]]: true,
[[Configurable]]: false }. Module namespace objects are not extensible.

Module namespace objects have the internal slots defined in
[[https://tc39.es/ecma262/#table-29][Table 31]].

Table 31: Internal Slots of Module Namespace Exotic Objects
| Internal Slot   | Type                                                                                  | Description                                                                                                                                                                                                                                                                                                       |
|-----------------+---------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[Module]]      | [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]               | The [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]] whose exports this namespace exposes.                                                                                                                                                                                                 |
| [[Exports]]     | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of String   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] containing the String values of the exported names exposed as own properties of this object. The list is ordered as if an Array of those String values had been sorted using =Array.prototype.sort= using undefined as =comparefn=.   |
| [[Prototype]]   | Null                                                                                  | This slot always contains the value null (see [[https://tc39.es/ecma262/#sec-module-namespace-exotic-objects-setprototypeof-v][9.4.6.1]]).                                                                                                                                                                        |

Module namespace exotic objects provide alternative definitions for all
of the internal methods except [[GetPrototypeOf]], which behaves as
defined in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots-getprototypeof][9.1.1]].

* 9.4.6.1[[SetPrototypeOf]] ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: setprototypeof-v-2
  :END:

When the [[SetPrototypeOf]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with argument =V=, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-set-immutable-prototype][SetImmutablePrototype]](=O=,
   =V=).

* 9.4.6.2[[IsExtensible]] ( )
  :PROPERTIES:
  :CUSTOM_ID: isextensible-2
  :END:

When the [[IsExtensible]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1. Return false.

* 9.4.6.3[[PreventExtensions]] ( )
  :PROPERTIES:
  :CUSTOM_ID: preventextensions-2
  :END:

When the [[PreventExtensions]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1. Return true.

* 9.4.6.4[[GetOwnProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: getownproperty-p-5
  :END:

When the [[GetOwnProperty]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is Symbol, return
   [[https://tc39.es/ecma262/#sec-ordinarygetownproperty][OrdinaryGetOwnProperty]](=O=,
   =P=).
2. Let =exports= be =O=.[[Exports]].
3. If =P= is not an element of =exports=, return undefined.
4. Let =value= be ? =O=.[[Get]](=P=, =O=).
5. Return PropertyDescriptor { [[Value]]: =value=, [[Writable]]: true,
   [[Enumerable]]: true, [[Configurable]]: false }.

* 9.4.6.5[[DefineOwnProperty]] ( =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: defineownproperty-p-desc-6
  :END:

When the [[DefineOwnProperty]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P= and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is Symbol, return
   [[https://tc39.es/ecma262/#sec-ordinarydefineownproperty][OrdinaryDefineOwnProperty]](=O=,
   =P=, =Desc=).
2. Let =current= be ? =O=.[[GetOwnProperty]](=P=).
3. If =current= is undefined, return false.
4. If
   [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=Desc=)
   is true, return false.
5. If =Desc=.[[Writable]] is present and has value false, return false.
6. If =Desc=.[[Enumerable]] is present and has value false, return
   false.
7. If =Desc=.[[Configurable]] is present and has value true, return
   false.
8. If =Desc=.[[Value]] is present, return
   [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=Desc=.[[Value]],
   =current=.[[Value]]).
9. Return true.

* 9.4.6.6[[HasProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: hasproperty-p-3
  :END:

When the [[HasProperty]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is Symbol, return
   [[https://tc39.es/ecma262/#sec-ordinaryhasproperty][OrdinaryHasProperty]](=O=,
   =P=).
2. Let =exports= be =O=.[[Exports]].
3. If =P= is an element of =exports=, return true.
4. Return false.

* 9.4.6.7[[Get]] ( =P=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: get-p-receiver-4
  :END:

When the [[Get]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P= and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
    is Symbol, then

    1. Return
       ? [[https://tc39.es/ecma262/#sec-ordinaryget][OrdinaryGet]](=O=,
       =P=, =Receiver=).

3.  Let =exports= be =O=.[[Exports]].
4.  If =P= is not an element of =exports=, return undefined.
5.  Let =m= be =O=.[[Module]].
6.  Let =binding= be ! =m=.ResolveExport(=P=).
7.  [[https://tc39.es/ecma262/#assert][Assert]]: =binding= is a
    [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
    Record]].
8.  Let =targetModule= be =binding=.[[Module]].
9.  [[https://tc39.es/ecma262/#assert][Assert]]: =targetModule= is not
    undefined.
10. If =binding=.[[BindingName]] is "*namespace*", then

    1. Return
       ? [[https://tc39.es/ecma262/#sec-getmodulenamespace][GetModuleNamespace]](=targetModule=).

11. Let =targetEnv= be =targetModule=.[[Environment]].
12. If =targetEnv= is undefined, throw a ReferenceError exception.
13. Let =targetEnvRec= be =targetEnv='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
14. Return ? =targetEnvRec=.GetBindingValue(=binding=.[[BindingName]],
    true).

Note

ResolveExport is idempotent and side-effect free. An implementation
might choose to pre-compute or cache the ResolveExport results for the
[[Exports]] of each module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]].

* 9.4.6.8[[Set]] ( =P=, =V=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: set-p-v-receiver-4
  :END:

When the [[Set]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, value =V=, and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1. Return false.

* 9.4.6.9[[Delete]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: delete-p-3
  :END:

When the [[Delete]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=) is
   true.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=P=)
   is Symbol, then

   1. Return
      ? [[https://tc39.es/ecma262/#sec-ordinarydelete][OrdinaryDelete]](=O=,
      =P=).

3. Let =exports= be =O=.[[Exports]].
4. If =P= is an element of =exports=, return false.
5. Return true.

* 9.4.6.10[[OwnPropertyKeys]] ( )
  :PROPERTIES:
  :CUSTOM_ID: ownpropertykeys-4
  :END:

When the [[OwnPropertyKeys]] internal method of a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1. Let =exports= be a copy of =O=.[[Exports]].
2. Let =symbolKeys= be
   ! [[https://tc39.es/ecma262/#sec-ordinaryownpropertykeys][OrdinaryOwnPropertyKeys]](=O=).
3. Append all the entries of =symbolKeys= to the end of =exports=.
4. Return =exports=.

* 9.4.6.11ModuleNamespaceCreate ( =module=, =exports= )
  :PROPERTIES:
  :CUSTOM_ID: modulenamespacecreate-module-exports
  :END:

The abstract operation ModuleNamespaceCreate with arguments =module=,
and =exports= is used to specify the creation of new module namespace
exotic objects. It performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =module= is a
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
    Record]].
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Namespace]]
    is undefined.
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =exports= is a
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    of String values.
4.  Let =M= be a newly created module namespace
    [[https://tc39.es/ecma262/#exotic-object][exotic object]] with the
    internal slots listed in [[https://tc39.es/ecma262/#table-29][Table
    31]].
5.  Set =M='s essential internal methods to the definitions specified in
    [[https://tc39.es/ecma262/#sec-module-namespace-exotic-objects][9.4.6]].
6.  Set =M=.[[Module]] to =module=.
7.  Let =sortedExports= be a new
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    containing the same values as the list =exports= where the values
    are ordered as if an Array of the same values had been sorted using
    =Array.prototype.sort= using undefined as =comparefn=.
8.  Set =M=.[[Exports]] to =sortedExports=.
9.  Create own properties of =M= corresponding to the definitions in
    [[https://tc39.es/ecma262/#sec-module-namespace-objects][26.3]].
10. Set =module=.[[Namespace]] to =M=.
11. Return =M=.

* 9.4.7Immutable Prototype Exotic Objects
  :PROPERTIES:
  :CUSTOM_ID: immutable-prototype-exotic-objects
  :END:

An immutable prototype exotic object is an
[[https://tc39.es/ecma262/#exotic-object][exotic object]] that has a
[[Prototype]] internal slot that will not change once it is initialized.

Immutable prototype exotic objects have the same internal slots as
ordinary objects. They are exotic only in the following internal
methods. All other internal methods of immutable prototype exotic
objects that are not explicitly defined below are instead defined as in
[[https://tc39.es/ecma262/#sec-ordinary-object-internal-methods-and-internal-slots][ordinary
objects.]]

* 9.4.7.1[[SetPrototypeOf]] ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: setprototypeof-v-3
  :END:

When the [[SetPrototypeOf]] internal method of an
[[https://tc39.es/ecma262/#sec-immutable-prototype-exotic-objects][immutable
prototype exotic object]] =O= is called with argument =V=, the following
steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-set-immutable-prototype][SetImmutablePrototype]](=O=,
   =V=).

* 9.4.7.2SetImmutablePrototype ( =O=, =V= )
  :PROPERTIES:
  :CUSTOM_ID: setimmutableprototype-o-v
  :END:

When the SetImmutablePrototype abstract operation is called with
arguments =O= and =V=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: Either
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is Object or
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is Null.
2. Let =current= be ? =O=.[[GetPrototypeOf]]().
3. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=V=,
   =current=) is true, return true.
4. Return false.

* 9.5Proxy Object Internal Methods and Internal Slots
  :PROPERTIES:
  :CUSTOM_ID: proxy-object-internal-methods-and-internal-slots
  :END:

A proxy object is an [[https://tc39.es/ecma262/#exotic-object][exotic
object]] whose essential internal methods are partially implemented
using ECMAScript code. Every proxy object has an internal slot called
[[ProxyHandler]]. The value of [[ProxyHandler]] is an object, called the
proxy's /handler object/, or null. Methods (see
[[https://tc39.es/ecma262/#table-30][Table 32]]) of a handler object may
be used to augment the implementation for one or more of the proxy
object's internal methods. Every proxy object also has an internal slot
called [[ProxyTarget]] whose value is either an object or the null
value. This object is called the proxy's /target object/.

Table 32: Proxy Handler Methods
| Internal Method         | Handler Method               |
|-------------------------+------------------------------|
| [[GetPrototypeOf]]      | =getPrototypeOf=             |
| [[SetPrototypeOf]]      | =setPrototypeOf=             |
| [[IsExtensible]]        | =isExtensible=               |
| [[PreventExtensions]]   | =preventExtensions=          |
| [[GetOwnProperty]]      | =getOwnPropertyDescriptor=   |
| [[DefineOwnProperty]]   | =defineProperty=             |
| [[HasProperty]]         | =has=                        |
| [[Get]]                 | =get=                        |
| [[Set]]                 | =set=                        |
| [[Delete]]              | =deleteProperty=             |
| [[OwnPropertyKeys]]     | =ownKeys=                    |
| [[Call]]                | =apply=                      |
| [[Construct]]           | =construct=                  |

When a handler method is called to provide the implementation of a proxy
object internal method, the handler method is passed the proxy's target
object as a parameter. A proxy's handler object does not necessarily
have a method corresponding to every essential internal method. Invoking
an internal method on the proxy results in the invocation of the
corresponding internal method on the proxy's target object if the
handler object does not have a method corresponding to the internal
trap.

The [[ProxyHandler]] and [[ProxyTarget]] internal slots of a proxy
object are always initialized when the object is created and typically
may not be modified. Some proxy objects are created in a manner that
permits them to be subsequently /revoked/. When a proxy is revoked, its
[[ProxyHandler]] and [[ProxyTarget]] internal slots are set to null
causing subsequent invocations of internal methods on that proxy object
to throw a TypeError exception.

Because proxy objects permit the implementation of internal methods to
be provided by arbitrary ECMAScript code, it is possible to define a
proxy object whose handler methods violates the invariants defined in
[[https://tc39.es/ecma262/#sec-invariants-of-the-essential-internal-methods][6.1.7.3]].
Some of the internal method invariants defined in
[[https://tc39.es/ecma262/#sec-invariants-of-the-essential-internal-methods][6.1.7.3]]
are essential integrity invariants. These invariants are explicitly
enforced by the proxy object internal methods specified in this section.
An ECMAScript implementation must be robust in the presence of all
possible invariant violations.

In the following algorithm descriptions, assume =O= is an ECMAScript
proxy object, =P= is a property key value, =V= is any
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] and =Desc= is a
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] record.

* 9.5.1[[GetPrototypeOf]] ( )
  :PROPERTIES:
  :CUSTOM_ID: getprototypeof-2
  :END:

When the [[GetPrototypeOf]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1.  Let =handler= be =O=.[[ProxyHandler]].
2.  If =handler= is null, throw a TypeError exception.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
4.  Let =target= be =O=.[[ProxyTarget]].
5.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "getPrototypeOf").
6.  If =trap= is undefined, then

    1. Return ? =target=.[[GetPrototypeOf]]().

7.  Let =handlerProto= be
    ? [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target= »).
8.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handlerProto=)
    is neither Object nor Null, throw a TypeError exception.
9.  Let =extensibleTarget= be
    ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
10. If =extensibleTarget= is true, return =handlerProto=.
11. Let =targetProto= be ? =target=.[[GetPrototypeOf]]().
12. If
    [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=handlerProto=,
    =targetProto=) is false, throw a TypeError exception.
13. Return =handlerProto=.

Note

[[GetPrototypeOf]] for proxy objects enforces the following invariants:

- The result of [[GetPrototypeOf]] must be either an Object or null.
- If the target object is not extensible, [[GetPrototypeOf]] applied to
  the proxy object must return the same value as [[GetPrototypeOf]]
  applied to the proxy object's target object.

* 9.5.2[[SetPrototypeOf]] ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: setprototypeof-v-4
  :END:

When the [[SetPrototypeOf]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with argument =V=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: Either
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
    is Object or
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
    is Null.
2.  Let =handler= be =O=.[[ProxyHandler]].
3.  If =handler= is null, throw a TypeError exception.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
5.  Let =target= be =O=.[[ProxyTarget]].
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "setPrototypeOf").
7.  If =trap= is undefined, then

    1. Return ? =target=.[[SetPrototypeOf]](=V=).

8.  Let =booleanTrapResult= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =V= »)).
9.  If =booleanTrapResult= is false, return false.
10. Let =extensibleTarget= be
    ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
11. If =extensibleTarget= is true, return true.
12. Let =targetProto= be ? =target=.[[GetPrototypeOf]]().
13. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=V=,
    =targetProto=) is false, throw a TypeError exception.
14. Return true.

Note

[[SetPrototypeOf]] for proxy objects enforces the following invariants:

- The result of [[SetPrototypeOf]] is a Boolean value.
- If the target object is not extensible, the argument value must be the
  same as the result of [[GetPrototypeOf]] applied to target object.

* 9.5.3[[IsExtensible]] ( )
  :PROPERTIES:
  :CUSTOM_ID: isextensible-3
  :END:

When the [[IsExtensible]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1.  Let =handler= be =O=.[[ProxyHandler]].
2.  If =handler= is null, throw a TypeError exception.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
4.  Let =target= be =O=.[[ProxyTarget]].
5.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "isExtensible").
6.  If =trap= is undefined, then

    1. Return
       ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).

7.  Let =booleanTrapResult= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target= »)).
8.  Let =targetResult= be
    ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
9.  If
    [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=booleanTrapResult=,
    =targetResult=) is false, throw a TypeError exception.
10. Return =booleanTrapResult=.

Note

[[IsExtensible]] for proxy objects enforces the following invariants:

- The result of [[IsExtensible]] is a Boolean value.
- [[IsExtensible]] applied to the proxy object must return the same
  value as [[IsExtensible]] applied to the proxy object's target object
  with the same argument.

* 9.5.4[[PreventExtensions]] ( )
  :PROPERTIES:
  :CUSTOM_ID: preventextensions-3
  :END:

When the [[PreventExtensions]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1. Let =handler= be =O=.[[ProxyHandler]].
2. If =handler= is null, throw a TypeError exception.
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
   is Object.
4. Let =target= be =O=.[[ProxyTarget]].
5. Let =trap= be
   ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
   "preventExtensions").
6. If =trap= is undefined, then

   1. Return ? =target=.[[PreventExtensions]]().

7. Let =booleanTrapResult= be
   ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
   [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
   =target= »)).
8. If =booleanTrapResult= is true, then

   1. Let =extensibleTarget= be
      ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
   2. If =extensibleTarget= is true, throw a TypeError exception.

9. Return =booleanTrapResult=.

Note

[[PreventExtensions]] for proxy objects enforces the following
invariants:

- The result of [[PreventExtensions]] is a Boolean value.
- [[PreventExtensions]] applied to the proxy object only returns true if
  [[IsExtensible]] applied to the proxy object's target object is false.

* 9.5.5[[GetOwnProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: getownproperty-p-6
  :END:

When the [[GetOwnProperty]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  Let =handler= be =O=.[[ProxyHandler]].
3.  If =handler= is null, throw a TypeError exception.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
5.  Let =target= be =O=.[[ProxyTarget]].
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "getOwnPropertyDescriptor").
7.  If =trap= is undefined, then

    1. Return ? =target=.[[GetOwnProperty]](=P=).

8.  Let =trapResultObj= be
    ? [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =P= »).
9.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=trapResultObj=)
    is neither Object nor Undefined, throw a TypeError exception.
10. Let =targetDesc= be ? =target=.[[GetOwnProperty]](=P=).
11. If =trapResultObj= is undefined, then

    1. If =targetDesc= is undefined, return undefined.
    2. If =targetDesc=.[[Configurable]] is false, throw a TypeError
       exception.
    3. Let =extensibleTarget= be
       ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
    4. If =extensibleTarget= is false, throw a TypeError exception.
    5. Return undefined.

12. Let =extensibleTarget= be
    ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
13. Let =resultDesc= be
    ? [[https://tc39.es/ecma262/#sec-topropertydescriptor][ToPropertyDescriptor]](=trapResultObj=).
14. Call
    [[https://tc39.es/ecma262/#sec-completepropertydescriptor][CompletePropertyDescriptor]](=resultDesc=).
15. Let =valid= be
    [[https://tc39.es/ecma262/#sec-iscompatiblepropertydescriptor][IsCompatiblePropertyDescriptor]](=extensibleTarget=,
    =resultDesc=, =targetDesc=).
16. If =valid= is false, throw a TypeError exception.
17. If =resultDesc=.[[Configurable]] is false, then

    1. If =targetDesc= is undefined or =targetDesc=.[[Configurable]] is
       true, then

       1. Throw a TypeError exception.

18. Return =resultDesc=.

Note

[[GetOwnProperty]] for proxy objects enforces the following invariants:

- The result of [[GetOwnProperty]] must be either an Object or
  undefined.
- A property cannot be reported as non-existent, if it exists as a
  non-configurable own property of the target object.
- A property cannot be reported as non-existent, if it exists as an own
  property of the target object and the target object is not extensible.
- A property cannot be reported as existent, if it does not exist as an
  own property of the target object and the target object is not
  extensible.
- A property cannot be reported as non-configurable, if it does not
  exist as an own property of the target object or if it exists as a
  configurable own property of the target object.

* 9.5.6[[DefineOwnProperty]] ( =P=, =Desc= )
  :PROPERTIES:
  :CUSTOM_ID: defineownproperty-p-desc-7
  :END:

When the [[DefineOwnProperty]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P= and
[[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
Descriptor]] =Desc=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  Let =handler= be =O=.[[ProxyHandler]].
3.  If =handler= is null, throw a TypeError exception.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
5.  Let =target= be =O=.[[ProxyTarget]].
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "defineProperty").
7.  If =trap= is undefined, then

    1. Return ? =target=.[[DefineOwnProperty]](=P=, =Desc=).

8.  Let =descObj= be
    [[https://tc39.es/ecma262/#sec-frompropertydescriptor][FromPropertyDescriptor]](=Desc=).
9.  Let =booleanTrapResult= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =P=, =descObj= »)).
10. If =booleanTrapResult= is false, return false.
11. Let =targetDesc= be ? =target=.[[GetOwnProperty]](=P=).
12. Let =extensibleTarget= be
    ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
13. If =Desc= has a [[Configurable]] field and if
    =Desc=.[[Configurable]] is false, then

    1. Let =settingConfigFalse= be true.

14. Else, let =settingConfigFalse= be false.
15. If =targetDesc= is undefined, then

    1. If =extensibleTarget= is false, throw a TypeError exception.
    2. If =settingConfigFalse= is true, throw a TypeError exception.

16. Else,

    1. If
       [[https://tc39.es/ecma262/#sec-iscompatiblepropertydescriptor][IsCompatiblePropertyDescriptor]](=extensibleTarget=,
       =Desc=, =targetDesc=) is false, throw a TypeError exception.
    2. If =settingConfigFalse= is true and =targetDesc=.[[Configurable]]
       is true, throw a TypeError exception.

17. Return true.

Note

[[DefineOwnProperty]] for proxy objects enforces the following
invariants:

- The result of [[DefineOwnProperty]] is a Boolean value.
- A property cannot be added, if the target object is not extensible.
- A property cannot be non-configurable, unless there exists a
  corresponding non-configurable own property of the target object.
- If a property has a corresponding target object property then applying
  the
  [[https://tc39.es/ecma262/#sec-property-descriptor-specification-type][Property
  Descriptor]] of the property to the target object using
  [[DefineOwnProperty]] will not throw an exception.

* 9.5.7[[HasProperty]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: hasproperty-p-4
  :END:

When the [[HasProperty]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  Let =handler= be =O=.[[ProxyHandler]].
3.  If =handler= is null, throw a TypeError exception.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
5.  Let =target= be =O=.[[ProxyTarget]].
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "has").
7.  If =trap= is undefined, then

    1. Return ? =target=.[[HasProperty]](=P=).

8.  Let =booleanTrapResult= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =P= »)).
9.  If =booleanTrapResult= is false, then

    1. Let =targetDesc= be ? =target=.[[GetOwnProperty]](=P=).
    2. If =targetDesc= is not undefined, then

       1. If =targetDesc=.[[Configurable]] is false, throw a TypeError
          exception.
       2. Let =extensibleTarget= be
          ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
       3. If =extensibleTarget= is false, throw a TypeError exception.

10. Return =booleanTrapResult=.

Note

[[HasProperty]] for proxy objects enforces the following invariants:

- The result of [[HasProperty]] is a Boolean value.
- A property cannot be reported as non-existent, if it exists as a
  non-configurable own property of the target object.
- A property cannot be reported as non-existent, if it exists as an own
  property of the target object and the target object is not extensible.

* 9.5.8[[Get]] ( =P=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: get-p-receiver-5
  :END:

When the [[Get]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P= and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  Let =handler= be =O=.[[ProxyHandler]].
3.  If =handler= is null, throw a TypeError exception.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
5.  Let =target= be =O=.[[ProxyTarget]].
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "get").
7.  If =trap= is undefined, then

    1. Return ? =target=.[[Get]](=P=, =Receiver=).

8.  Let =trapResult= be
    ? [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =P=, =Receiver= »).
9.  Let =targetDesc= be ? =target=.[[GetOwnProperty]](=P=).
10. If =targetDesc= is not undefined and =targetDesc=.[[Configurable]]
    is false, then

    1. If
       [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=targetDesc=)
       is true and =targetDesc=.[[Writable]] is false, then

       1. If
          [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=trapResult=,
          =targetDesc=.[[Value]]) is false, throw a TypeError exception.

    2. If
       [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=targetDesc=)
       is true and =targetDesc=.[[Get]] is undefined, then

       1. If =trapResult= is not undefined, throw a TypeError exception.

11. Return =trapResult=.

Note

[[Get]] for proxy objects enforces the following invariants:

- The value reported for a property must be the same as the value of the
  corresponding target object property if the target object property is
  a non-writable, non-configurable own
  [[https://tc39.es/ecma262/#sec-object-type][data property]].
- The value reported for a property must be undefined if the
  corresponding target object property is a non-configurable own
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] that
  has undefined as its [[Get]] attribute.

* 9.5.9[[Set]] ( =P=, =V=, =Receiver= )
  :PROPERTIES:
  :CUSTOM_ID: set-p-v-receiver-5
  :END:

When the [[Set]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, value =V=, and
[[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
language value]] =Receiver=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  Let =handler= be =O=.[[ProxyHandler]].
3.  If =handler= is null, throw a TypeError exception.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
5.  Let =target= be =O=.[[ProxyTarget]].
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "set").
7.  If =trap= is undefined, then

    1. Return ? =target=.[[Set]](=P=, =V=, =Receiver=).

8.  Let =booleanTrapResult= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =P=, =V=, =Receiver= »)).
9.  If =booleanTrapResult= is false, return false.
10. Let =targetDesc= be ? =target=.[[GetOwnProperty]](=P=).
11. If =targetDesc= is not undefined and =targetDesc=.[[Configurable]]
    is false, then

    1. If
       [[https://tc39.es/ecma262/#sec-isdatadescriptor][IsDataDescriptor]](=targetDesc=)
       is true and =targetDesc=.[[Writable]] is false, then

       1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=V=,
          =targetDesc=.[[Value]]) is false, throw a TypeError exception.

    2. If
       [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=targetDesc=)
       is true, then

       1. If =targetDesc=.[[Set]] is undefined, throw a TypeError
          exception.

12. Return true.

Note

[[Set]] for proxy objects enforces the following invariants:

- The result of [[Set]] is a Boolean value.
- Cannot change the value of a property to be different from the value
  of the corresponding target object property if the corresponding
  target object property is a non-writable, non-configurable own
  [[https://tc39.es/ecma262/#sec-object-type][data property]].
- Cannot set the value of a property if the corresponding target object
  property is a non-configurable own
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] that
  has undefined as its [[Set]] attribute.

* 9.5.10[[Delete]] ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: delete-p-4
  :END:

When the [[Delete]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with property key =P=, the following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispropertykey][IsPropertyKey]](=P=)
    is true.
2.  Let =handler= be =O=.[[ProxyHandler]].
3.  If =handler= is null, throw a TypeError exception.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
5.  Let =target= be =O=.[[ProxyTarget]].
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "deleteProperty").
7.  If =trap= is undefined, then

    1. Return ? =target=.[[Delete]](=P=).

8.  Let =booleanTrapResult= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =P= »)).
9.  If =booleanTrapResult= is false, return false.
10. Let =targetDesc= be ? =target=.[[GetOwnProperty]](=P=).
11. If =targetDesc= is undefined, return true.
12. If =targetDesc=.[[Configurable]] is false, throw a TypeError
    exception.
13. Return true.

Note

[[Delete]] for proxy objects enforces the following invariants:

- The result of [[Delete]] is a Boolean value.
- A property cannot be reported as deleted, if it exists as a
  non-configurable own property of the target object.

* 9.5.11[[OwnPropertyKeys]] ( )
  :PROPERTIES:
  :CUSTOM_ID: ownpropertykeys-5
  :END:

When the [[OwnPropertyKeys]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called,
the following steps are taken:

1.  Let =handler= be =O=.[[ProxyHandler]].
2.  If =handler= is null, throw a TypeError exception.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
4.  Let =target= be =O=.[[ProxyTarget]].
5.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "ownKeys").
6.  If =trap= is undefined, then

    1. Return ? =target=.[[OwnPropertyKeys]]().

7.  Let =trapResultArray= be
    ? [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target= »).
8.  Let =trapResult= be
    ? [[https://tc39.es/ecma262/#sec-createlistfromarraylike][CreateListFromArrayLike]](=trapResultArray=,
    « String, Symbol »).
9.  If =trapResult= contains any duplicate entries, throw a TypeError
    exception.
10. Let =extensibleTarget= be
    ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=target=).
11. Let =targetKeys= be ? =target=.[[OwnPropertyKeys]]().
12. [[https://tc39.es/ecma262/#assert][Assert]]: =targetKeys= is a
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    containing only String and Symbol values.
13. [[https://tc39.es/ecma262/#assert][Assert]]: =targetKeys= contains
    no duplicate entries.
14. Let =targetConfigurableKeys= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
15. Let =targetNonconfigurableKeys= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
16. For each element =key= of =targetKeys=, do

    1. Let =desc= be ? =target=.[[GetOwnProperty]](=key=).
    2. If =desc= is not undefined and =desc=.[[Configurable]] is false,
       then

       1. Append =key= as an element of =targetNonconfigurableKeys=.

    3. Else,

       1. Append =key= as an element of =targetConfigurableKeys=.

17. If =extensibleTarget= is true and =targetNonconfigurableKeys= is
    empty, then

    1. Return =trapResult=.

18. Let =uncheckedResultKeys= be a new
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    which is a copy of =trapResult=.
19. For each =key= that is an element of =targetNonconfigurableKeys=, do

    1. If =key= is not an element of =uncheckedResultKeys=, throw a
       TypeError exception.
    2. Remove =key= from =uncheckedResultKeys=.

20. If =extensibleTarget= is true, return =trapResult=.
21. For each =key= that is an element of =targetConfigurableKeys=, do

    1. If =key= is not an element of =uncheckedResultKeys=, throw a
       TypeError exception.
    2. Remove =key= from =uncheckedResultKeys=.

22. If =uncheckedResultKeys= is not empty, throw a TypeError exception.
23. Return =trapResult=.

Note

[[OwnPropertyKeys]] for proxy objects enforces the following invariants:

- The result of [[OwnPropertyKeys]] is a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
- The returned
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  contains no duplicate entries.
- The Type of each result
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  element is either String or Symbol.
- The result
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  must contain the keys of all non-configurable own properties of the
  target object.
- If the target object is not extensible, then the result
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  must contain all the keys of the own properties of the target object
  and no other values.

* 9.5.12[[Call]] ( =thisArgument=, =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: call-thisargument-argumentslist-3
  :END:

The [[Call]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with parameters =thisArgument= and =argumentsList=, a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of ECMAScript language values. The following steps are taken:

1. Let =handler= be =O=.[[ProxyHandler]].
2. If =handler= is null, throw a TypeError exception.
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
   is Object.
4. Let =target= be =O=.[[ProxyTarget]].
5. Let =trap= be
   ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
   "apply").
6. If =trap= is undefined, then

   1. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=target=,
      =thisArgument=, =argumentsList=).

7. Let =argArray= be
   ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=argumentsList=).
8. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=trap=,
   =handler=, « =target=, =thisArgument=, =argArray= »).

Note

A Proxy [[https://tc39.es/ecma262/#exotic-object][exotic object]] only
has a [[Call]] internal method if the initial value of its
[[ProxyTarget]] internal slot is an object that has a [[Call]] internal
method.

* 9.5.13[[Construct]] ( =argumentsList=, =newTarget= )
  :PROPERTIES:
  :CUSTOM_ID: construct-argumentslist-newtarget-3
  :END:

The [[Construct]] internal method of a Proxy
[[https://tc39.es/ecma262/#exotic-object][exotic object]] =O= is called
with parameters =argumentsList= which is a possibly empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of ECMAScript language values and =newTarget=. The following steps are
taken:

1.  Let =handler= be =O=.[[ProxyHandler]].
2.  If =handler= is null, throw a TypeError exception.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is Object.
4.  Let =target= be =O=.[[ProxyTarget]].
5.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=target=)
    is true.
6.  Let =trap= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=handler=,
    "construct").
7.  If =trap= is undefined, then

    1. Return
       ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=target=,
       =argumentsList=, =newTarget=).

8.  Let =argArray= be
    ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=argumentsList=).
9.  Let =newObj= be
    ? [[https://tc39.es/ecma262/#sec-call][Call]](=trap=, =handler=, «
    =target=, =argArray=, =newTarget= »).
10. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=newObj=)
    is not Object, throw a TypeError exception.
11. Return =newObj=.

Note 1

A Proxy [[https://tc39.es/ecma262/#exotic-object][exotic object]] only
has a [[Construct]] internal method if the initial value of its
[[ProxyTarget]] internal slot is an object that has a [[Construct]]
internal method.

Note 2

[[Construct]] for proxy objects enforces the following invariants:

- The result of [[Construct]] must be an Object.

* 9.5.14ProxyCreate ( =target=, =handler= )
  :PROPERTIES:
  :CUSTOM_ID: proxycreate-target-handler
  :END:

The abstract operation ProxyCreate with arguments =target= and =handler=
is used to specify the creation of new Proxy exotic objects. It performs
the following steps:

1.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
    is not Object, throw a TypeError exception.
2.  If =target= is a Proxy
    [[https://tc39.es/ecma262/#exotic-object][exotic object]] and
    =target=.[[ProxyHandler]] is null, throw a TypeError exception.
3.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=handler=)
    is not Object, throw a TypeError exception.
4.  If =handler= is a Proxy
    [[https://tc39.es/ecma262/#exotic-object][exotic object]] and
    =handler=.[[ProxyHandler]] is null, throw a TypeError exception.
5.  Let =P= be a newly created Proxy
    [[https://tc39.es/ecma262/#exotic-object][exotic object]] with
    internal slots [[ProxyTarget]] and [[ProxyHandler]].
6.  Set =P='s essential internal methods (except for [[Call]] and
    [[Construct]]) to the definitions specified in
    [[https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots][9.5]].
7.  If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=target=)
    is true, then

    1. Set =P=.[[Call]] as specified in
       [[https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-call-thisargument-argumentslist][9.5.12]].
    2. If
       [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=target=)
       is true, then

       1. Set =P=.[[Construct]] as specified in
          [[https://tc39.es/ecma262/#sec-proxy-object-internal-methods-and-internal-slots-construct-argumentslist-newtarget][9.5.13]].

8.  Set =P=.[[ProxyTarget]] to =target=.
9.  Set =P=.[[ProxyHandler]] to =handler=.
10. Return =P=.

* ECMAScript Language: Source Code
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-source-code
  :END:

** Source Text
   :PROPERTIES:
   :CUSTOM_ID: source-text
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-1
    :END:

 [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]::any
 Unicode code point
 ECMAScript code is expressed using Unicode. ECMAScript source text is a
 sequence of code points. All Unicode code point values from U+0000 to
 U+10FFFF, including surrogate code points, may occur in source text
 where permitted by the ECMAScript grammars. The actual encodings used to
 store and interchange ECMAScript source text is not relevant to this
 specification. Regardless of the external source text encoding, a
 conforming ECMAScript implementation processes the source text as if it
 was an equivalent sequence of
 [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
 values, each
 [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]] being
 a Unicode code point. Conforming ECMAScript implementations are not
 required to perform any normalization of source text, or behave as
 though they were performing normalization of source text.

 The components of a combining character sequence are treated as
 individual Unicode code points even though a user might think of the
 whole sequence as a single character.

 Note

 In string literals, regular expression literals, template literals and
 identifiers, any Unicode code point may also be expressed using Unicode
 escape sequences that explicitly express a code point's numeric value.
 Within a comment, such an escape sequence is effectively ignored as part
 of the comment.

 ECMAScript differs from the Java programming language in the behaviour
 of Unicode escape sequences. In a Java program, if the Unicode escape
 sequence =\u000A=, for example, occurs within a single-line comment, it
 is interpreted as a line terminator (Unicode code point U+000A is LINE
 FEED (LF)) and therefore the next code point is not part of the comment.
 Similarly, if the Unicode escape sequence =\u000A= occurs within a
 string literal in a Java program, it is likewise interpreted as a line
 terminator, which is not allowed within a string literal---one must
 write =\n= instead of =\u000A= to cause a LINE FEED (LF) to be part of
 the String value of a string literal. In an ECMAScript program, a
 Unicode escape sequence occurring within a comment is never interpreted
 and therefore cannot contribute to termination of the comment.
 Similarly, a Unicode escape sequence occurring within a string literal
 in an ECMAScript program always contributes to the literal and is never
 interpreted as a line terminator or as a code point that might terminate
 the string literal.

*** Static Semantics: UTF16Encoding ( =cp= )
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-utf16encoding-cp
    :END:

  The UTF16Encoding of a numeric code point value, =cp=, is determined as
  follows:

  1. [[https://tc39.es/ecma262/#assert][Assert]]: 0 ≤ =cp= ≤ 0x10FFFF.
  2. If =cp= ≤ 0xFFFF, return =cp=.
  3. Let =cu1= be [[https://tc39.es/ecma262/#eqn-floor][floor]]((=cp= -
     0x10000) / 0x400) + 0xD800.
  4. Let =cu2= be ((=cp= - 0x10000)
     [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 0x400) + 0xDC00.
  5. Return the code unit sequence consisting of =cu1= followed by =cu2=.

*** Static Semantics: UTF16Decode ( =lead=, =trail= )
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-utf16decode-lead-trail
    :END:

  Two code units, =lead= and =trail=, that form a UTF-16
  [[https://tc39.es/ecma262/#surrogate-pair][surrogate pair]] are
  converted to a code point by performing the following steps:

  1. [[https://tc39.es/ecma262/#assert][Assert]]: =lead= is a
     [[https://tc39.es/ecma262/#leading-surrogate][leading surrogate]] and
     =trail= is a [[https://tc39.es/ecma262/#trailing-surrogate][trailing
     surrogate]].
  2. Let =cp= be (=lead= - 0xD800) × 0x400 + (=trail= - 0xDC00) + 0x10000.
  3. Return the code point =cp=.

*** Static Semantics: CodePointAt ( =string=, =position= )
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-codepointat-string-position
    :END:

  The abstract operation CodePointAt interprets a String =string= as a
  sequence of UTF-16 encoded code points, as described in
  [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]],
  and reads from it a single code point starting with the code unit at
  index =position=. When called, the following steps are performed:

  1.  Let =size= be the length of =string=.
  2.  [[https://tc39.es/ecma262/#assert][Assert]]: =position= ≥ 0 and
      =position= < =size=.
  3.  Let =first= be the code unit at index =position= within =string=.
  4.  Let =cp= be the code point whose numeric value is that of =first=.
  5.  If =first= is not a
      [[https://tc39.es/ecma262/#leading-surrogate][leading surrogate]] or
      [[https://tc39.es/ecma262/#trailing-surrogate][trailing surrogate]],
      then

      1. Return the
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
         { [[CodePoint]]: =cp=, [[CodeUnitCount]]: 1,
         [[IsUnpairedSurrogate]]: false }.

  6.  If =first= is a
      [[https://tc39.es/ecma262/#trailing-surrogate][trailing surrogate]]
      or =position= + 1 = =size=, then

      1. Return the
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
         { [[CodePoint]]: =cp=, [[CodeUnitCount]]: 1,
         [[IsUnpairedSurrogate]]: true }.

  7.  Let =second= be the code unit at index =position= + 1 within
      =string=.
  8.  If =second= is not a
      [[https://tc39.es/ecma262/#trailing-surrogate][trailing surrogate]],
      then

      1. Return the
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
         { [[CodePoint]]: =cp=, [[CodeUnitCount]]: 1,
         [[IsUnpairedSurrogate]]: true }.

  9.  Set =cp= to
      ! [[https://tc39.es/ecma262/#sec-utf16decode][UTF16Decode]](=first=,
      =second=).
  10. Return the
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
      { [[CodePoint]]: =cp=, [[CodeUnitCount]]: 2,
      [[IsUnpairedSurrogate]]: false }.

** Types of Source Code
   :PROPERTIES:
   :CUSTOM_ID: types-of-source-code
   :END:

 There are four types of ECMAScript code:

 - /Global code/ is source text that is treated as an ECMAScript
   [[https://tc39.es/ecma262/#prod-Script][Script]]. The global code of a
   particular [[https://tc39.es/ecma262/#prod-Script][Script]] does not
   include any source text that is parsed as part of a
   [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
   [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]],
   [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]],
   [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]],
   [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]],
   [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]],
   or [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]].

 - /Eval code/ is the source text supplied to the built-in =eval=
   function. More precisely, if the parameter to the built-in =eval=
   function is a String, it is treated as an ECMAScript
   [[https://tc39.es/ecma262/#prod-Script][Script]]. The eval code for a
   particular invocation of =eval= is the global code portion of that
   [[https://tc39.es/ecma262/#prod-Script][Script]].

 - /Function code/ is source text that is parsed to supply the value of
   the [[ECMAScriptCode]] and [[FormalParameters]] internal slots (see
   [[https://tc39.es/ecma262/#sec-ecmascript-function-objects][9.2]]) of
   an ECMAScript [[https://tc39.es/ecma262/#function-object][function
   object]]. The function code of a particular ECMAScript function does
   not include any source text that is parsed as the function code of a
   nested
   [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
   [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]],
   [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]],
   [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]],
   [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]],
   [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]],
   or [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]].

   In addition, if the source text referred to above is parsed as:

   - the
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
     and [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] of
     a
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
     or
     [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
   - the
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
     and [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]
     of a
     [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]
     or
     [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
   - the
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
     and
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
     of an
     [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]
     or
     [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
     or
   - the
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
     and
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
     of an
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]
     or
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]],

   then the source text matching the
   [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
   (if any) of that declaration or expression is also included in the
   function code of the corresponding function.

 - /Module code/ is source text that is code that is provided as a
   [[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]. It is the
   code that is directly evaluated when a module is initialized. The
   module code of a particular module does not include any source text
   that is parsed as part of a nested
   [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
   [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]],
   [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]],
   [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]],
   [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]],
   [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]],
   or [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]].

 Note 1

 Function code is generally provided as the bodies of Function
 Definitions
 ([[https://tc39.es/ecma262/#sec-function-definitions][14.1]]), Arrow
 Function Definitions
 ([[https://tc39.es/ecma262/#sec-arrow-function-definitions][14.2]]),
 Method Definitions
 ([[https://tc39.es/ecma262/#sec-method-definitions][14.3]]), Generator
 Function Definitions
 ([[https://tc39.es/ecma262/#sec-generator-function-definitions][14.4]]),
 Async Function Definitions
 ([[https://tc39.es/ecma262/#sec-async-function-definitions][14.7]]),
 Async Generator Function Definitions
 ([[https://tc39.es/ecma262/#sec-async-generator-function-definitions][14.5]]),
 and Async Arrow Functions
 ([[https://tc39.es/ecma262/#sec-async-arrow-function-definitions][14.8]]).
 Function code is also derived from the arguments to the =Function=
 [[https://tc39.es/ecma262/#constructor][constructor]]
 ([[https://tc39.es/ecma262/#sec-function-p1-p2-pn-body][19.2.1.1]]), the
 =GeneratorFunction=
 [[https://tc39.es/ecma262/#constructor][constructor]]
 ([[https://tc39.es/ecma262/#sec-generatorfunction][25.2.1.1]]), and the
 =AsyncFunction= [[https://tc39.es/ecma262/#constructor][constructor]]
 ([[https://tc39.es/ecma262/#sec-async-function-constructor-arguments][25.7.1.1]]).

 Note 2

 The practical effect of including the
 [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
 in function code is that the Early Errors for
 [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]] are
 applied to a
 [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
 that is the name of a function whose body contains a "use strict"
 directive, even if the surrounding code is not
 [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

*** Strict Mode Code
    :PROPERTIES:
    :CUSTOM_ID: strict-mode-code
    :END:

  An ECMAScript [[https://tc39.es/ecma262/#prod-Script][Script]] syntactic
  unit may be processed using either unrestricted or strict mode syntax
  and semantics. Code is interpreted as strict mode code in the following
  situations:

  - Global code is strict mode code if it begins with a
    [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
    that contains a [[https://tc39.es/ecma262/#use-strict-directive][Use
    Strict Directive]].
  - Module code is always strict mode code.
  - All parts of a
    [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]
    or a
    [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]] are
    strict mode code.
  - Eval code is strict mode code if it begins with a
    [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
    that contains a [[https://tc39.es/ecma262/#use-strict-directive][Use
    Strict Directive]] or if the call to =eval= is a
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]] that is contained in strict mode code.
  - Function code is strict mode code if the associated
    [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
    [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
    [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
    [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
    [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
    [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]],
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]],
    [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]], or
    [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]
    is contained in strict mode code or if the code that produces the
    value of the function's [[ECMAScriptCode]] internal slot begins with a
    [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
    that contains a [[https://tc39.es/ecma262/#use-strict-directive][Use
    Strict Directive]].
  - Function code that is supplied as the arguments to the built-in
    =Function=, =Generator=, =AsyncFunction=, and =AsyncGenerator=
    constructors is strict mode code if the last argument is a String that
    when processed is a
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] that
    begins with a [[https://tc39.es/ecma262/#directive-prologue][Directive
    Prologue]] that contains a
    [[https://tc39.es/ecma262/#use-strict-directive][Use Strict
    Directive]].

  ECMAScript code that is not strict mode code is called non-strict code.

*** Non-ECMAScript Functions
    :PROPERTIES:
    :CUSTOM_ID: non-ecmascript-functions
    :END:

  An ECMAScript implementation may support the evaluation of function
  exotic objects whose evaluative behaviour is expressed in some
  implementation-defined form of executable code other than via ECMAScript
  code. Whether a [[https://tc39.es/ecma262/#function-object][function
  object]] is an ECMAScript code function or a non-ECMAScript function is
  not semantically observable from the perspective of an ECMAScript code
  function that calls or is called by such a non-ECMAScript function.

* ECMAScript Language: Lexical Grammar
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-lexical-grammar
  :END:

The source text of an ECMAScript
[[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]] is first converted into
a sequence of input elements, which are tokens, line terminators,
comments, or white space. The source text is scanned from left to right,
repeatedly taking the longest possible sequence of code points as the
next input element.

There are several situations where the identification of lexical input
elements is sensitive to the syntactic grammar context that is consuming
the input elements. This requires multiple goal symbols for the lexical
grammar. The
[[https://tc39.es/ecma262/#prod-InputElementRegExpOrTemplateTail][InputElementRegExpOrTemplateTail]]
goal is used in syntactic grammar contexts where a
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]],
a [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]], or a
[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]] is
permitted. The
[[https://tc39.es/ecma262/#prod-InputElementRegExp][InputElementRegExp]]
[[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]] is
used in all syntactic grammar contexts where a
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
is permitted but neither a
[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]], nor a
[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]] is
permitted. The
[[https://tc39.es/ecma262/#prod-InputElementTemplateTail][InputElementTemplateTail]]
goal is used in all syntactic grammar contexts where a
[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]] or a
[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]] is
permitted but a
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
is not permitted. In all other contexts,
[[https://tc39.es/ecma262/#prod-InputElementDiv][InputElementDiv]] is
used as the lexical
[[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]].

Note

The use of multiple lexical goals ensures that there are no lexical
ambiguities that would affect automatic semicolon insertion. For
example, there are no syntactic grammar contexts where both a leading
division or division-assignment, and a leading
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
are permitted. This is not affected by semicolon insertion (see
[[https://tc39.es/ecma262/#sec-automatic-semicolon-insertion][11.9]]);
in examples such as the following:

#+BEGIN_EXAMPLE
  a = b
  /hi/g.exec(c).map(d);
#+END_EXAMPLE

where the first non-whitespace, non-comment code point after a
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
U+002F (SOLIDUS) and the syntactic context allows division or
division-assignment, no semicolon is inserted at the
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]. That
is, the above example is interpreted in the same way as:

#+BEGIN_EXAMPLE
  a = b / hi / g.exec(c).map(d);
#+END_EXAMPLE

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-2
   :END:

[[https://tc39.es/ecma262/#prod-InputElementDiv][InputElementDiv]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-DivPunctuator][DivPunctuator]]
[[https://tc39.es/ecma262/#prod-RightBracePunctuator][RightBracePunctuator]]
[[https://tc39.es/ecma262/#prod-InputElementRegExp][InputElementRegExp]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-RightBracePunctuator][RightBracePunctuator]]
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
[[https://tc39.es/ecma262/#prod-InputElementRegExpOrTemplateTail][InputElementRegExpOrTemplateTail]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
[[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]
[[https://tc39.es/ecma262/#prod-InputElementTemplateTail][InputElementTemplateTail]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-DivPunctuator][DivPunctuator]]
[[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]
** Unicode Format-Control Characters
   :PROPERTIES:
   :CUSTOM_ID: unicode-format-control-characters
   :END:

 The Unicode format-control characters (i.e., the characters in category
 “Cf” in the Unicode Character Database such as LEFT-TO-RIGHT MARK or
 RIGHT-TO-LEFT MARK) are control codes used to control the formatting of
 a range of text in the absence of higher-level protocols for this (such
 as mark-up languages).

 It is useful to allow format-control characters in source text to
 facilitate editing and display. All format control characters may be
 used within comments, and within string literals, template literals, and
 regular expression literals.

 U+200C (ZERO WIDTH NON-JOINER) and U+200D (ZERO WIDTH JOINER) are
 format-control characters that are used to make necessary distinctions
 when forming words or phrases in certain languages. In ECMAScript source
 text these code points may also be used in an
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] after
 the first character.

 U+FEFF (ZERO WIDTH NO-BREAK SPACE) is a format-control character used
 primarily at the start of a text to mark it as Unicode and to allow
 detection of the text's encoding and byte order. <ZWNBSP> characters
 intended for this purpose can sometimes also appear after the start of a
 text, for example as a result of concatenating files. In ECMAScript
 source text <ZWNBSP> code points are treated as white space characters
 (see [[https://tc39.es/ecma262/#sec-white-space][11.2]]).

 The special treatment of certain format-control characters outside of
 comments, string literals, and regular expression literals is summarized
 in [[https://tc39.es/ecma262/#table-31][Table 33]].

 Table 33: Format-Control Code Point Usage
 | Code Point   | Name                        | Abbreviation   | Usage                                                              |
 |--------------+-----------------------------+----------------+--------------------------------------------------------------------|
 | =U+200C=     | ZERO WIDTH NON-JOINER       | <ZWNJ>         | [[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]   |
 | =U+200D=     | ZERO WIDTH JOINER           | <ZWJ>          | [[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]   |
 | =U+FEFF=     | ZERO WIDTH NO-BREAK SPACE   | <ZWNBSP>       | [[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]           |

** White Space
   :PROPERTIES:
   :CUSTOM_ID: white-space
   :END:

 White space code points are used to improve source text readability and
 to separate tokens (indivisible lexical units) from each other, but are
 otherwise insignificant. White space code points may occur between any
 two tokens and at the start or end of input. White space code points may
 occur within a
 [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]], a
 [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]],
 a [[https://tc39.es/ecma262/#prod-Template][Template]], or a
 [[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]
 where they are considered significant code points forming part of a
 literal value. They may also occur within a
 [[https://tc39.es/ecma262/#prod-Comment][Comment]], but cannot appear
 within any other kind of token.

 The ECMAScript white space code points are listed in
 [[https://tc39.es/ecma262/#table-32][Table 34]].

 Table 34: White Space Code Points
 | Code Point            | Name                                             | Abbreviation   |
 |-----------------------+--------------------------------------------------+----------------|
 | =U+0009=              | CHARACTER TABULATION                             | <TAB>          |
 | =U+000B=              | LINE TABULATION                                  | <VT>           |
 | =U+000C=              | FORM FEED (FF)                                   | <FF>           |
 | =U+0020=              | SPACE                                            | <SP>           |
 | =U+00A0=              | NO-BREAK SPACE                                   | <NBSP>         |
 | =U+FEFF=              | ZERO WIDTH NO-BREAK SPACE                        | <ZWNBSP>       |
 | Other category “Zs”   | Any other Unicode “Space_Separator” code point   | <USP>          |

 ECMAScript implementations must recognize as
 [[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]] code points
 listed in the “Space_Separator” (“Zs”) category.

 Note

 Other than for the code points listed in
 [[https://tc39.es/ecma262/#table-32][Table 34]], ECMAScript
 [[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]] intentionally
 excludes all code points that have the Unicode “White_Space” property
 but which are not classified in category “Space_Separator” (“Zs”).

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-3
    :END:

 [[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]::<TAB> <VT>
 <FF> <SP> <NBSP> <ZWNBSP> <USP>
** Line Terminators
   :PROPERTIES:
   :CUSTOM_ID: line-terminators
   :END:

 Like white space code points, line terminator code points are used to
 improve source text readability and to separate tokens (indivisible
 lexical units) from each other. However, unlike white space code points,
 line terminators have some influence over the behaviour of the syntactic
 grammar. In general, line terminators may occur between any two tokens,
 but there are a few places where they are forbidden by the syntactic
 grammar. Line terminators also affect the process of automatic semicolon
 insertion
 ([[https://tc39.es/ecma262/#sec-automatic-semicolon-insertion][11.9]]).
 A line terminator cannot occur within any token except a
 [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]],
 [[https://tc39.es/ecma262/#prod-Template][Template]], or
 [[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]].
 <LF> and <CR> line terminators cannot occur within a
 [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] token
 except as part of a
 [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]].

 A line terminator can occur within a
 [[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]] but
 cannot occur within a
 [[https://tc39.es/ecma262/#prod-SingleLineComment][SingleLineComment]].

 Line terminators are included in the set of white space code points that
 are matched by the =\s= class in regular expressions.

 The ECMAScript line terminator code points are listed in
 [[https://tc39.es/ecma262/#table-33][Table 35]].

 Table 35: Line Terminator Code Points
 | Code Point   | Unicode Name           | Abbreviation   |
 |--------------+------------------------+----------------|
 | =U+000A=     | LINE FEED (LF)         | <LF>           |
 | =U+000D=     | CARRIAGE RETURN (CR)   | <CR>           |
 | =U+2028=     | LINE SEPARATOR         | <LS>           |
 | =U+2029=     | PARAGRAPH SEPARATOR    | <PS>           |

 Only the Unicode code points in
 [[https://tc39.es/ecma262/#table-33][Table 35]] are treated as line
 terminators. Other new line or line breaking Unicode code points are not
 treated as line terminators but are treated as white space if they meet
 the requirements listed in [[https://tc39.es/ecma262/#table-32][Table
 34]]. The sequence <CR><LF> is commonly used as a line terminator. It
 should be considered a single
 [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]] for
 the purpose of reporting line numbers.

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-4
    :END:

 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]::<LF>
 <CR> <LS> <PS>
 [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]::<LF>
 <CR>[lookahead ≠ <LF>] <LS> <PS> <CR><LF>
** Comments
   :PROPERTIES:
   :CUSTOM_ID: comments
   :END:

 Comments can be either single or multi-line. Multi-line comments cannot
 nest.

 Because a single-line comment can contain any Unicode code point except
 a [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] code
 point, and because of the general rule that a token is always as long as
 possible, a single-line comment always consists of all code points from
 the =//= marker to the end of the line. However, the
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] at the
 end of the line is not considered to be part of the single-line comment;
 it is recognized separately by the lexical grammar and becomes part of
 the stream of input elements for the syntactic grammar. This point is
 very important, because it implies that the presence or absence of
 single-line comments does not affect the process of automatic semicolon
 insertion (see
 [[https://tc39.es/ecma262/#sec-automatic-semicolon-insertion][11.9]]).

 Comments behave like white space and are discarded except that, if a
 [[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]]
 contains a line terminator code point, then the entire comment is
 considered to be a
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] for
 purposes of parsing by the syntactic grammar.

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-5
    :END:

 [[https://tc39.es/ecma262/#prod-Comment][Comment]]::[[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]]
 [[https://tc39.es/ecma262/#prod-SingleLineComment][SingleLineComment]]
 [[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]]::/*[[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]opt*/
 [[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]::[[https://tc39.es/ecma262/#prod-MultiLineNotAsteriskChar][MultiLineNotAsteriskChar]][[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]opt
 *[[https://tc39.es/ecma262/#prod-PostAsteriskCommentChars][PostAsteriskCommentChars]]opt
 [[https://tc39.es/ecma262/#prod-PostAsteriskCommentChars][PostAsteriskCommentChars]]::[[https://tc39.es/ecma262/#prod-MultiLineNotForwardSlashOrAsteriskChar][MultiLineNotForwardSlashOrAsteriskChar]][[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]opt
 *[[https://tc39.es/ecma262/#prod-PostAsteriskCommentChars][PostAsteriskCommentChars]]opt
 [[https://tc39.es/ecma262/#prod-MultiLineNotAsteriskChar][MultiLineNotAsteriskChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
 not *
 [[https://tc39.es/ecma262/#prod-MultiLineNotForwardSlashOrAsteriskChar][MultiLineNotForwardSlashOrAsteriskChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
 not one of / or *
 [[https://tc39.es/ecma262/#prod-SingleLineComment][SingleLineComment]]:://[[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]opt
 [[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]::[[https://tc39.es/ecma262/#prod-SingleLineCommentChar][SingleLineCommentChar]][[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]opt
 [[https://tc39.es/ecma262/#prod-SingleLineCommentChar][SingleLineCommentChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
 not [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
** Tokens
   :PROPERTIES:
   :CUSTOM_ID: tokens
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-6
    :END:

 [[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]::[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
 [[https://tc39.es/ecma262/#prod-Punctuator][Punctuator]]
 [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]
 [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
 [[https://tc39.es/ecma262/#prod-Template][Template]] Note

 The [[https://tc39.es/ecma262/#prod-DivPunctuator][DivPunctuator]],
 [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]],
 [[https://tc39.es/ecma262/#prod-RightBracePunctuator][RightBracePunctuator]],
 and
 [[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]
 productions derive additional tokens that are not included in the
 [[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]] production.

** Names and Keywords
   :PROPERTIES:
   :CUSTOM_ID: names-and-keywords
   :END:

 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] and
 [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]] are tokens
 that are interpreted according to the Default Identifier Syntax given in
 Unicode Standard Annex #31, Identifier and Pattern Syntax, with some
 small modifications.
 [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]] is an
 enumerated subset of
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]. The
 syntactic grammar defines
 [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] as an
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] that is
 not a [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]. The
 Unicode identifier grammar is based on character properties specified by
 the Unicode Standard. The Unicode code points in the specified
 categories in the latest version of the Unicode standard must be treated
 as in those categories by all conforming ECMAScript implementations.
 ECMAScript implementations may recognize identifier code points defined
 in later editions of the Unicode Standard.

 Note 1

 This standard specifies specific code point additions: U+0024 (DOLLAR
 SIGN) and U+005F (LOW LINE) are permitted anywhere in an
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]], and
 the code points U+200C (ZERO WIDTH NON-JOINER) and U+200D (ZERO WIDTH
 JOINER) are permitted anywhere after the first code point of an
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

 Unicode escape sequences are permitted in an
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]], where
 they contribute a single Unicode code point to the
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]. The
 code point is expressed by the
 [[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]] of the
 [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
 (see [[https://tc39.es/ecma262/#sec-literals-string-literals][11.8.4]]).
 The =\= preceding the
 [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
 and the =u= and ={ }= code units, if they appear, do not contribute code
 points to the
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]. A
 [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
 cannot be used to put a code point into an
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] that
 would otherwise be illegal. In other words, if a =\=
 [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
 sequence were replaced by the
 [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]] it
 contributes, the result must still be a valid
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] that
 has the exact same sequence of
 [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
 elements as the original
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]. All
 interpretations of
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] within
 this specification are based upon their actual code points regardless of
 whether or not an escape sequence was used to contribute any particular
 code point.

 Two [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]s
 that are canonically equivalent according to the Unicode standard are
 /not/ equal unless, after replacement of each
 [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]],
 they are represented by the exact same sequence of code points.

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-7
    :END:

 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]::[[https://tc39.es/ecma262/#prod-IdentifierStart][IdentifierStart]]
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]][[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]
 [[https://tc39.es/ecma262/#prod-IdentifierStart][IdentifierStart]]::[[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]
 $ _
 \[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
 [[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]::[[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
 $
 \[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
 <ZWNJ> <ZWJ>
 [[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]::any
 Unicode code point with the Unicode property “ID_Start”
 [[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]::any
 Unicode code point with the Unicode property “ID_Continue”
 The definitions of the nonterminal
 [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
 is given in
 [[https://tc39.es/ecma262/#sec-literals-string-literals][11.8.4]].

 Note 2

 The nonterminal
 [[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]] derives
 =_= via
 [[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]].

 Note 3

 The sets of code points with Unicode properties “ID_Start” and
 “ID_Continue” include, respectively, the code points with Unicode
 properties “Other_ID_Start” and “Other_ID_Continue”.

*** Identifier Names
    :PROPERTIES:
    :CUSTOM_ID: identifier-names
    :END:

**** 11.6.1.1Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors
     :END:

   [[https://tc39.es/ecma262/#prod-IdentifierStart][IdentifierStart]]::\[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]

   - It is a Syntax Error if
     SV([[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]])
     is none of "$", or "_", or the
     [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of a
     code point matched by the
     [[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]
     lexical grammar production.

   [[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]::\[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]

   - It is a Syntax Error if
     SV([[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]])
     is none of "$", or "_", or the
     [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
     either <ZWNJ> or <ZWJ>, or the
     [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of a
     Unicode code point that would be matched by the
     [[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
     lexical grammar production.

**** 11.6.1.2Static Semantics: StringValue
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-stringvalue
     :END:

   [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]::[[https://tc39.es/ecma262/#prod-IdentifierStart][IdentifierStart]]
   [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]][[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]

   1. Return the String value consisting of the sequence of code units
      corresponding to
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]. In
      determining the sequence any occurrences of =\=
      [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
      are first replaced with the code point represented by the
      [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
      and then the code points of the entire
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] are
      converted to code units by
      [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] each
      code point.

   <<sec-future-reserved-words>><<sec-keywords>><<sec-reserved-words>>
*** Keywords and Reserved Words
    :PROPERTIES:
    :CUSTOM_ID: keywords-and-reserved-words
    :END:

  A keyword is a token that matches
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]], but
  also has a syntactic use; that is, it appears literally, in a
  =fixed width= font, in some syntactic production. The keywords of
  ECMAScript include =if=, =while=, =async=, =await=, and many others.

  A reserved word is an
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] that
  cannot be used as an identifier. Many keywords are reserved words, but
  some are not, and some are reserved only in certain contexts. =if= and
  =while= are reserved words. =await= is reserved only inside async
  functions and modules. =async= is not reserved; it can be used as a
  variable name or statement label without restriction.

  This specification uses a combination of grammatical productions and
  [[https://tc39.es/ecma262/#early-error][early error]] rules to specify
  which names are valid identifiers and which are reserved words. All
  tokens in the
  [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]] list below,
  except for =await= and =yield=, are unconditionally reserved. Exceptions
  for =await= and =yield= are specified in
  [[https://tc39.es/ecma262/#sec-identifiers][12.1]], using parameterized
  syntactic productions. Lastly, several
  [[https://tc39.es/ecma262/#early-error][early error]] rules restrict the
  set of valid identifiers. See
  [[https://tc39.es/ecma262/#sec-identifiers-static-semantics-early-errors][12.1.1]],
  [[https://tc39.es/ecma262/#sec-let-and-const-declarations-static-semantics-early-errors][13.3.1.1]],
  [[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-static-semantics-early-errors][13.7.5.1]],
  and
  [[https://tc39.es/ecma262/#sec-class-definitions-static-semantics-early-errors][14.6.1]].
  In summary, there are five categories of identifier names:

  - Those that are always allowed as identifiers, and are not keywords,
    such as =Math=, =window=, =toString=, and =_=;

  - Those that are never allowed as identifiers, namely the
    [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]s listed
    below except =await= and =yield=;

  - Those that are contextually allowed as identifiers, namely =await= and
    =yield=;

  - Those that are contextually disallowed as identifiers, in
    [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]:
    =let=, =static=, =implements=, =interface=, =package=, =private=,
    =protected=, and =public=;

  - Those that are always allowed as identifiers, but also appear as
    keywords within certain syntactic productions, at places where
    [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] is not
    allowed: =as=, =async=, =from=, =get=, =of=, =set=, and =target=.

  The term conditional keyword, or contextual keyword, is sometimes used
  to refer to the keywords that fall in the last three categories, and
  thus can be used as identifiers in some contexts and as keywords in
  others.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-8
     :END:

  [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]::one
  ofawaitbreakcasecatchclassconstcontinuedebuggerdefaultdeletedoelseenumexportextendsfalsefinallyforfunctionifimportininstanceofnewnullreturnsuperswitchthisthrowtruetrytypeofvarvoidwhilewithyield
  Note 1

  Per [[https://tc39.es/ecma262/#sec-grammar-notation][5.1.5]], keywords
  in the grammar match literal sequences of specific
  [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
  elements. A code point in a keyword cannot be expressed by a =\=
  [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]].

  An [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] can
  contain =\=
  [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]s,
  but it is not possible to declare a variable named "else" by spelling it
  =els\u{65}=. The [[https://tc39.es/ecma262/#early-error][early error]]
  rules in
  [[https://tc39.es/ecma262/#sec-identifiers-static-semantics-early-errors][12.1.1]]
  rule out identifiers with the same StringValue as a reserved word.

  Note 2

  =enum= is not currently used as a keyword in this specification. It is a
  /future reserved word/, set aside for use as a keyword in future
  language extensions.

  Similarly, =implements=, =interface=, =package=, =private=, =protected=,
  and =public= are future reserved words in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

  Note 3

  The names =arguments= and =eval= are not keywords, but they are subject
  to some restrictions in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]. See
  [[https://tc39.es/ecma262/#sec-identifiers-static-semantics-early-errors][12.1.1]],
  [[https://tc39.es/ecma262/#sec-identifiers-static-semantics-assignmenttargettype][12.1.3]],
  [[https://tc39.es/ecma262/#sec-function-definitions-static-semantics-early-errors][14.1.2]],
  [[https://tc39.es/ecma262/#sec-generator-function-definitions-static-semantics-early-errors][14.4.1]],
  [[https://tc39.es/ecma262/#sec-async-generator-function-definitions-static-semantics-early-errors][14.5.1]],
  and
  [[https://tc39.es/ecma262/#sec-async-function-definitions-static-semantics-early-errors][14.7.1]].

** Punctuators
   :PROPERTIES:
   :CUSTOM_ID: punctuators
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-9
    :END:

 [[https://tc39.es/ecma262/#prod-Punctuator][Punctuator]]::one
 of{()[]....;,<><=>===!====!==+-*%**++--<<>>>>>&|^!~&&||?:=+=-=*=%=**=<<=>>=>>>=&=|=^==>
 [[https://tc39.es/ecma262/#prod-DivPunctuator][DivPunctuator]]::/ /=
 [[https://tc39.es/ecma262/#prod-RightBracePunctuator][RightBracePunctuator]]::}
** Literals
   :PROPERTIES:
   :CUSTOM_ID: literals
   :END:

*** Null Literals
    :PROPERTIES:
    :CUSTOM_ID: null-literals
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-10
     :END:

  [[https://tc39.es/ecma262/#prod-NullLiteral][NullLiteral]]::null
*** Boolean Literals
    :PROPERTIES:
    :CUSTOM_ID: boolean-literals
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-11
     :END:

  [[https://tc39.es/ecma262/#prod-BooleanLiteral][BooleanLiteral]]::true
  false
*** Numeric Literals
    :PROPERTIES:
    :CUSTOM_ID: numeric-literals
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-12
     :END:

  [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]
  [[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]
  [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]
  [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]
  [[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]
  [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]
  [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]
  [[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]
  [[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]
  [[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]::n
  [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
  .[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
  [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
  [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]::0
  [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]::[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
  [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::one
  of0123456789
  [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::one
  of123456789
  [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]::[[https://tc39.es/ecma262/#prod-ExponentIndicator][ExponentIndicator]][[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]
  [[https://tc39.es/ecma262/#prod-ExponentIndicator][ExponentIndicator]]::one
  ofeE
  [[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
  +[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] -[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
  [[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]::0b[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]
  0B[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]
  [[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]::[[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]
  [[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]][[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]
  [[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]::one of01
  [[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]::0o[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]
  0O[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]
  [[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]::[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  [[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::one of01234567
  [[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]::0x[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
  0X[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
  [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
  [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
  [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::one
  of0123456789abcdefABCDEF
  The [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
  immediately following a
  [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]] must
  not be an
  [[https://tc39.es/ecma262/#prod-IdentifierStart][IdentifierStart]] or
  [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]].

  Note

  For example: =3in= is an error and not the two input elements =3= and
  =in=.

  A conforming implementation, when processing
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  must not extend, as described in
  [[https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals][B.1.1]],
  the syntax of
  [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]] to
  include
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]],
  nor extend the syntax of
  [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
  to include
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]].

**** Static Semantics: MV
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-mv
     :END:

   A numeric literal stands for a value of the Number type or the BigInt
   type.

   - The MV of
     [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
     plus (the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] ×
     10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{-_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}=n=}),
     where =n= is the
     [[https://tc39.es/ecma262/#mathematical-value][mathematical value]] of
     the number of code points in
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
     × 10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e=}, where =e= is
     the MV of
     [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
     is (the MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
     plus (the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] ×
     10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{-_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}=n=}))
     × 10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e=}, where =n= is
     the [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
     integer]] number of code points in
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] and =e=
     is the MV of
     [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::.[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] ×
     10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{-_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}=n=},
     where =n= is the
     [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
     integer]] number of code points in
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::.[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] ×
     10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e= -_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}
     =n=}, where =n= is the
     [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
     integer]] number of code points in
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] and =e=
     is the MV of
     [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
     × 10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=e=}, where =e= is
     the MV of
     [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]::0
     is 0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
     is (the MV of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]] ×
     10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=n=}) plus the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]], where
     =n= is the
     [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
     integer]] number of code points in
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]::[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
     is (the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] ×
     10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) plus the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]::[[https://tc39.es/ecma262/#prod-ExponentIndicator][ExponentIndicator]][[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]::+[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]::-[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
     is the negative of the MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::0 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::0 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::0 or of
     [[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]::0 is
     0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::1 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::1 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::1 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::1 or of
     [[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]::1 is
     1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::2 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::2 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::2 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::2 is
     2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::3 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::3 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::3 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::3 is
     3_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::4 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::4 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::4 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::4 is
     4_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::5 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::5 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::5 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::5 is
     5_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::6 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::6 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::6 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::6 is
     6_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::7 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::7 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::7 or of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::7 is
     7_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::8 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::8 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::8 is
     8_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::9 or of
     [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::9 or of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::9 is
     9_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::a or
     of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::A is
     10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::b or
     of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::B is
     11_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::c or
     of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::C is
     12_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::d or
     of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::D is
     13_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::e or
     of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::E is
     14_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::f or
     of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::F is
     15_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.
   - The MV of
     [[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]::0b[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]::0B[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]::[[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]::[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]][[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]
     is (the MV of
     [[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]] ×
     2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) plus the MV of
     [[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]::0o[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]::0O[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]
     is the MV of
     [[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]::[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
     is the MV of [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]::[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
     is (the MV of
     [[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]] ×
     8_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) plus the MV of
     [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]::0x[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
     is the MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]::0X[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
     is the MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
     is the MV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
   - The MV of
     [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]::[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
     is (the MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]] ×
     16_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}) plus the MV of
     [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].

**** Static Semantics: NumericValue
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-numericvalue
     :END:

   [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]

   1. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
      that results from rounding the MV of
      [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]] as
      described below.

   [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]::[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]

   1. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
      that results from rounding the MV of
      [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]
      as described below.

   Once the exact MV for a numeric literal has been determined, it is then
   rounded to a value of the Number type. If the MV is
   0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, then the rounded value is
   +0; otherwise, the rounded value must be the
   [[https://tc39.es/ecma262/#number-value][Number value]] for the MV (as
   specified in
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type][6.1.6.1]]),
   unless the literal is a
   [[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]] and the
   literal has more than 20 significant digits, in which case the
   [[https://tc39.es/ecma262/#number-value][Number value]] may be either
   the [[https://tc39.es/ecma262/#number-value][Number value]] for the MV
   of a literal produced by replacing each significant digit after the 20th
   with a =0= digit or the [[https://tc39.es/ecma262/#number-value][Number
   value]] for the MV of a literal produced by replacing each significant
   digit after the 20th with a =0= digit and then incrementing the literal
   at the 20th significant digit position. A digit is /significant/ if it
   is not part of an
   [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]] and

   - it is not =0=; or
   - there is a nonzero digit to its left and there is a nonzero digit, not
     in the [[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]],
     to its right.

   [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]::[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]

   1. Return the BigInt value that represents the MV of
      [[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]].

   [[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]

   1. Return the BigInt value that represents
      0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}.

   [[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]

   1. Return the BigInt value that represents the MV of
      [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]].

   [[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]

   1. Let =n= be the
      [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
      integer]] number of code points in
      [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   2. Let =mv= be (the MV of
      [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]] ×
      10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=n=}) plus the MV of
      [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
   3. Return the BigInt value that represents =mv=.

*** String Literals
    :PROPERTIES:
    :CUSTOM_ID: string-literals
    :END:

  Note 1

  A string literal is zero or more Unicode code points enclosed in single
  or double quotes. Unicode code points may also be represented by an
  escape sequence. All code points may appear literally in a string
  literal except for the closing quote code points, U+005C (REVERSE
  SOLIDUS), U+000D (CARRIAGE RETURN), and U+000A (LINE FEED). Any code
  points may appear in the form of an escape sequence. String literals
  evaluate to ECMAScript String values. When generating these String
  values Unicode code points are UTF-16 encoded as defined in
  [[https://tc39.es/ecma262/#sec-utf16encoding][10.1.1]]. Code points
  belonging to the Basic Multilingual Plane are encoded as a single code
  unit element of the string. All other code points are encoded as two
  code unit elements of the string.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-13
     :END:

  [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]::"[[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]opt"
  '[[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]opt'
  [[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]::[[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]][[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]opt
  [[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]::[[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]][[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]opt
  [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
  not one of " or \ or
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] <LS>
  <PS> \[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
  [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
  not one of ' or \ or
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] <LS>
  <PS> \[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]::\[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
  [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]
  0[lookahead ∉
  [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
  [[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
  [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
  A conforming implementation, when processing
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  must not extend the syntax of
  [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]] to
  include
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]
  as described in
  [[https://tc39.es/ecma262/#sec-additional-syntax-string-literals][B.1.2]].

  [[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]::[[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]
  [[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]]
  [[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]::one
  of'"\bfnrtv
  [[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
  not one of
  [[https://tc39.es/ecma262/#prod-EscapeCharacter][EscapeCharacter]] or
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  [[https://tc39.es/ecma262/#prod-EscapeCharacter][EscapeCharacter]]::[[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]
  [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]] x u
  [[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]::x[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
  [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
  u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]}
  [[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
  The definition of the nonterminal
  [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] is given in
  [[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]].
  [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]] is
  defined in [[https://tc39.es/ecma262/#sec-source-text][10.1]].

  Note 2

  <LF> and <CR> cannot appear in a string literal, except as part of a
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]] to
  produce the empty code points sequence. The proper way to include either
  in the String value of a string literal is to use an escape sequence
  such as =\n= or =\u000A=.

**** Static Semantics: StringValue
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-stringvalue-1
     :END:

   [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]::"[[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]opt"
   '[[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]opt'

   1. Return the String value whose code units are the SV of this
      [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]].

**** Static Semantics: SV
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-sv
     :END:

   A string literal stands for a value of the String type. The String value
   (SV) of the literal is described in terms of code unit values
   contributed by the various parts of the string literal. As part of this
   process, some Unicode code points within the string literal are
   interpreted as having a
   [[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
   (MV), as described below or in
   [[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]].

   - The SV of
     [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]::"" is
     the empty code unit sequence.
   - The SV of
     [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]::'' is
     the empty code unit sequence.
   - The SV of
     [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]::"[[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]"
     is the SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]::'[[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]'
     is the SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]::[[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]
     is a sequence of up to two code units that is the SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]::[[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]][[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]
     is a sequence of up to two code units that is the SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]
     followed by the code units of the SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]
     in order.
   - The SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]::[[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]
     is a sequence of up to two code units that is the SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]::[[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]][[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]
     is a sequence of up to two code units that is the SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]
     followed by the code units of the SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]
     in order.
   - The SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
     not one of " or \ or
     [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
     the [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
     the code point value of
     [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]::<LS>
     is the code unit 0x2028 (LINE SEPARATOR).
   - The SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]::<PS>
     is the code unit 0x2029 (PARAGRAPH SEPARATOR).
   - The SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]::\[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
     is the SV of
     [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]::[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
     is the empty code unit sequence.
   - The SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
     not one of ' or \ or
     [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
     the [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
     the code point value of
     [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]::<LS>
     is the code unit 0x2028 (LINE SEPARATOR).
   - The SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]::<PS>
     is the code unit 0x2029 (PARAGRAPH SEPARATOR).
   - The SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]::\[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
     is the SV of
     [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]::[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
     is the empty code unit sequence.
   - The SV of
     [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]
     is the SV of
     [[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::0 is
     the code unit 0x0000 (NULL).
   - The SV of
     [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
     is the SV of
     [[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
     is the SV of
     [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]::[[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]
     is the code unit whose value is determined by the
     [[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]
     according to [[https://tc39.es/ecma262/#table-34][Table 36]].

   Table 36: String Single Character Escape Sequences
   | Escape Sequence   | Code Unit Value   | Unicode Character Name   | Symbol   |
   |-------------------+-------------------+--------------------------+----------|
   | =\b=              | =0x0008=          | BACKSPACE                | <BS>     |
   | =\t=              | =0x0009=          | CHARACTER TABULATION     | <HT>     |
   | =\n=              | =0x000A=          | LINE FEED (LF)           | <LF>     |
   | =\v=              | =0x000B=          | LINE TABULATION          | <VT>     |
   | =\f=              | =0x000C=          | FORM FEED (FF)           | <FF>     |
   | =\r=              | =0x000D=          | CARRIAGE RETURN (CR)     | <CR>     |
   | =\"=              | =0x0022=          | QUOTATION MARK           | ="=      |
   | =\'=              | =0x0027=          | APOSTROPHE               | ='=      |
   | =\\=              | =0x005C=          | REVERSE SOLIDUS          | =\=      |

   - The SV of
     [[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]::[[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]]
     is the SV of
     [[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
     not one of
     [[https://tc39.es/ecma262/#prod-EscapeCharacter][EscapeCharacter]] or
     [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
     the [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
     the code point value of
     [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]::x[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
     is the code unit whose value is
     (16_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} times the MV of the
     first [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]) plus the
     MV of the second [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
     is the SV of [[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
     is the code unit whose value is
     (0x1000_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} times the MV of
     the first [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]) plus
     (0x100_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} times the MV of the
     second [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]) plus
     (0x10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} times the MV of the
     third [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]) plus the
     MV of the fourth [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
   - The SV of
     [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]::u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]}
     is the [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]]
     of the MV of [[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]].

*** Regular Expression Literals
    :PROPERTIES:
    :CUSTOM_ID: regular-expression-literals
    :END:

  Note 1

  A regular expression literal is an input element that is converted to a
  RegExp object (see
  [[https://tc39.es/ecma262/#sec-regexp-regular-expression-objects][21.2]])
  each time the literal is evaluated. Two regular expression literals in a
  program evaluate to regular expression objects that never compare as
  ===== to each other even if the two literals' contents are identical. A
  RegExp object may also be created at runtime by =new RegExp= or calling
  the =RegExp= [[https://tc39.es/ecma262/#constructor][constructor]] as a
  function (see
  [[https://tc39.es/ecma262/#sec-regexp-constructor][21.2.3]]).

  The productions below describe the syntax for a regular expression
  literal and are used by the input element scanner to find the end of the
  regular expression literal. The source text comprising the
  [[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]
  and the
  [[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]
  are subsequently parsed again using the more stringent ECMAScript
  Regular Expression grammar
  ([[https://tc39.es/ecma262/#sec-patterns][21.2.1]]).

  An implementation may extend the ECMAScript Regular Expression grammar
  defined in [[https://tc39.es/ecma262/#sec-patterns][21.2.1]], but it
  must not extend the
  [[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]
  and
  [[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]
  productions defined below or the productions used by these productions.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-14
     :END:

  [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]::/[[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]/[[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]::[[https://tc39.es/ecma262/#prod-RegularExpressionFirstChar][RegularExpressionFirstChar]][[https://tc39.es/ecma262/#prod-RegularExpressionChars][RegularExpressionChars]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionChars][RegularExpressionChars]]::[empty]
  [[https://tc39.es/ecma262/#prod-RegularExpressionChars][RegularExpressionChars]][[https://tc39.es/ecma262/#prod-RegularExpressionChar][RegularExpressionChar]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionFirstChar][RegularExpressionFirstChar]]::[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]but
  not one of * or \ or / or [
  [[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionClass][RegularExpressionClass]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionChar][RegularExpressionChar]]::[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]but
  not one of \ or / or [
  [[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionClass][RegularExpressionClass]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]::\[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
  not [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionClass][RegularExpressionClass]]::[[[https://tc39.es/ecma262/#prod-RegularExpressionClassChars][RegularExpressionClassChars]]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionClassChars][RegularExpressionClassChars]]::[empty]
  [[https://tc39.es/ecma262/#prod-RegularExpressionClassChars][RegularExpressionClassChars]][[https://tc39.es/ecma262/#prod-RegularExpressionClassChar][RegularExpressionClassChar]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionClassChar][RegularExpressionClassChar]]::[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]but
  not one of ] or \
  [[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]
  [[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]::[empty]
  [[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]][[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]
  Note 2

  Regular expression literals may not be empty; instead of representing an
  empty regular expression literal, the code unit sequence =//= starts a
  single-line comment. To specify an empty regular expression, use:
  =/(?:)/=.

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-1
     :END:

   [[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]::[[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]][[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]

   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]
     contains a Unicode escape sequence.

**** Static Semantics: BodyText
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-bodytext
     :END:

   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]::/[[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]/[[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]

   1. Return the source text that was recognized as
      [[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]].

**** Static Semantics: FlagText
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-flagtext
     :END:

   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]::/[[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]/[[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]

   1. Return the source text that was recognized as
      [[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]].

*** Template Literal Lexical Components
    :PROPERTIES:
    :CUSTOM_ID: template-literal-lexical-components
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-15
     :END:

  [[https://tc39.es/ecma262/#prod-Template][Template]]::[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]
  [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]]
  [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt`
  [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt${
  [[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]::[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]
  [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]
  [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt${
  [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt`
  [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]::[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]][[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt
  [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::$[lookahead
  ≠ {] \[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
  \[[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
  [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
  [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
  not one of ` or \ or $ or
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::0[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
  [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]but not 0
  x[lookahead ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
  x[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead ∉
  [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] u[lookahead ∉
  [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]][lookahead ≠ {]
  u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead ∉
  [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
  u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
  ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
  u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
  ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] u{[lookahead ∉
  [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
  u{[[https://tc39.es/ecma262/#prod-NotCodePoint][NotCodePoint]][lookahead
  ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
  u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]][lookahead ∉
  [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]][lookahead ≠ }]
  [[https://tc39.es/ecma262/#prod-NotCodePoint][NotCodePoint]]::[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]but
  only if MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]] >
  0x10FFFF
  [[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]::[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]but
  only if MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]] ≤
  0x10FFFF
  A conforming implementation must not use the extended definition of
  [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
  described in
  [[https://tc39.es/ecma262/#sec-additional-syntax-string-literals][B.1.2]]
  when parsing a
  [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]].

  Note

  [[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]
  is used by the
  [[https://tc39.es/ecma262/#prod-InputElementTemplateTail][InputElementTemplateTail]]
  alternative lexical goal.

*** Static Semantics: TV and TRV
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-tv-and-trv
    :END:

  A template literal component is interpreted as a sequence of Unicode
  code points. The Template Value (TV) of a literal component is described
  in terms of code unit values (SV,
  [[https://tc39.es/ecma262/#sec-literals-string-literals][11.8.4]])
  contributed by the various parts of the template literal component. As
  part of this process, some Unicode code points within the template
  component are interpreted as having a
  [[https://tc39.es/ecma262/#mathematical-value][mathematical value]] (MV,
  [[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]]). In
  determining a TV, escape sequences are replaced by the UTF-16 code
  unit(s) of the Unicode code point represented by the escape sequence.
  The Template Raw Value (TRV) is similar to a Template Value with the
  difference that in TRVs escape sequences are interpreted literally.

  - The TV and TRV of
    [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]::``
    is the empty code unit sequence.
  - The TV and TRV of
    [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]]::`${ is
    the empty code unit sequence.
  - The TV and TRV of
    [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]::}${
    is the empty code unit sequence.
  - The TV and TRV of
    [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]::}` is
    the empty code unit sequence.
  - The TV of
    [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]`
    is the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]${
    is the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]${
    is the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]`
    is the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]::[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]
    is the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]::[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]][[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]
    is undefined if either the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]
    is undefined or the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]
    is undefined. Otherwise, it is a sequence consisting of the code units
    of the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]
    followed by the code units of the TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
    not one of ` or \ or $ or
    [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
    the [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
    the code point value of
    [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::$
    is the code unit 0x0024 (DOLLAR SIGN).
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::\[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
    is the SV of
    [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::\[[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]
    is undefined.
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
    is the TV of
    [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]].
  - The TV of
    [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]::\[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
    is the empty code unit sequence.
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]`
    is the TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]${
    is the TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]${
    is the TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]`
    is the TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]::[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]::[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]][[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]
    is a sequence consisting of the code units of the TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]
    followed by the code units of the TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
    not one of ` or \ or $ or
    [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
    the [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
    the code point value of
    [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::$
    is the code unit 0x0024 (DOLLAR SIGN).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::\[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
    is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS)
    followed by the code units of TRV of
    [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::\[[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]
    is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS)
    followed by the code units of TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::0 is
    the code unit 0x0030 (DIGIT ZERO).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::0[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
    is the sequence consisting of the code unit 0x0030 (DIGIT ZERO)
    followed by the code units of the TRV of
    [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::x[lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] is the code
    unit 0x0078 (LATIN SMALL LETTER X).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::x[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] is the
    sequence consisting of the code unit 0x0078 (LATIN SMALL LETTER X)
    followed by the code units of the TRV of
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::u[lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]][lookahead ≠ {]
    is the code unit 0x0075 (LATIN SMALL LETTER U).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] is the
    sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U)
    followed by the code units of the TRV of
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] is the
    sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U)
    followed by the code units of the TRV of the first
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] followed by the
    code units of the TRV of the second
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] is the
    sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U)
    followed by the code units of the TRV of the first
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] followed by the
    code units of the TRV of the second
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] followed by the
    code units of the TRV of the third
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::u{[lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] is the
    sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U)
    followed by the code unit 0x007B (LEFT CURLY BRACKET).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::u{[[https://tc39.es/ecma262/#prod-NotCodePoint][NotCodePoint]][lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] is the
    sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER U)
    followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by the
    code units of the TRV of
    [[https://tc39.es/ecma262/#prod-NotCodePoint][NotCodePoint]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]][lookahead
    ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]][lookahead ≠ }]
    is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER
    U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by
    the code units of the TRV of
    [[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::one
    of0123456789 is the SV of the
    [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
    that is that single code point.
  - The TRV of
    [[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]::[[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]
    is the TRV of
    [[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]::[[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]]
    is the SV of
    [[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]::one
    of'"\bfnrtv is the SV of the
    [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
    that is that single code point.
  - The TRV of
    [[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]::x[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
    is the sequence consisting of the code unit 0x0078 (LATIN SMALL LETTER
    X) followed by TRV of the first
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] followed by the
    TRV of the second
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
    is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER
    U) followed by TRV of
    [[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]::u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]}
    is the sequence consisting of the code unit 0x0075 (LATIN SMALL LETTER
    U) followed by the code unit 0x007B (LEFT CURLY BRACKET) followed by
    TRV of [[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]] followed
    by the code unit 0x007D (RIGHT CURLY BRACKET).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
    is the sequence consisting of the TRV of the first
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] followed by the
    TRV of the second [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
    followed by the TRV of the third
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] followed by the
    TRV of the fourth
    [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
    is the TRV of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]::[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
    is the sequence consisting of TRV of
    [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]] followed by TRV
    of [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of a [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]] is
    the SV of the
    [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
    that is that [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]::\[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
    is the sequence consisting of the code unit 0x005C (REVERSE SOLIDUS)
    followed by the code units of TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]].
  - The TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]::<LF>
    is the code unit 0x000A (LINE FEED).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]::<CR>
    is the code unit 0x000A (LINE FEED).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]::<LS>
    is the code unit 0x2028 (LINE SEPARATOR).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]::<PS>
    is the code unit 0x2029 (PARAGRAPH SEPARATOR).
  - The TRV of
    [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]::<CR><LF>
    is the sequence consisting of the code unit 0x000A (LINE FEED).

  Note

  TV excludes the code units of
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
  while TRV includes them. <CR><LF> and <CR>
  [[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]s
  are normalized to <LF> for both TV and TRV. An explicit
  [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]] is
  needed to include a <CR> or <CR><LF> sequence.

** Automatic Semicolon Insertion
   :PROPERTIES:
   :CUSTOM_ID: automatic-semicolon-insertion
   :END:

 Most ECMAScript statements and declarations must be terminated with a
 semicolon. Such semicolons may always appear explicitly in the source
 text. For convenience, however, such semicolons may be omitted from the
 source text in certain situations. These situations are described by
 saying that semicolons are automatically inserted into the source code
 token stream in those situations.

*** Rules of Automatic Semicolon Insertion
    :PROPERTIES:
    :CUSTOM_ID: rules-of-automatic-semicolon-insertion
    :END:

  In the following rules, “token” means the actual recognized lexical
  token determined using the current lexical
  [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]] as
  described in clause
  [[https://tc39.es/ecma262/#sec-ecmascript-language-lexical-grammar][11]].

  There are three basic rules of semicolon insertion:

  1. When, as the source text is parsed from left to right, a token
     (called the /offending token/) is encountered that is not allowed by
     any production of the grammar, then a semicolon is automatically
     inserted before the offending token if one or more of the following
     conditions is true:

     - The offending token is separated from the previous token by at
       least one
       [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]].
     - The offending token is =}=.
     - The previous token is =)= and the inserted semicolon would then be
       parsed as the terminating semicolon of a do-while statement
       ([[https://tc39.es/ecma262/#sec-do-while-statement][13.7.2]]).

  2. When, as the source text is parsed from left to right, the end of the
     input stream of tokens is encountered and the parser is unable to
     parse the input token stream as a single instance of the goal
     nonterminal, then a semicolon is automatically inserted at the end of
     the input stream.

  3. When, as the source text is parsed from left to right, a token is
     encountered that is allowed by some production of the grammar, but
     the production is a /restricted production/ and the token would be
     the first token for a terminal or nonterminal immediately following
     the annotation “[no
     [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
     here]” within the restricted production (and therefore such a token
     is called a restricted token), and the restricted token is separated
     from the previous token by at least one
     [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]],
     then a semicolon is automatically inserted before the restricted
     token.

  However, there is an additional overriding condition on the preceding
  rules: a semicolon is never inserted automatically if the semicolon
  would then be parsed as an empty statement or if that semicolon would
  become one of the two semicolons in the header of a =for= statement (see
  [[https://tc39.es/ecma262/#sec-for-statement][13.7.4]]).

  Note

  The following are the only restricted productions in the grammar:

  [[https://tc39.es/ecma262/#prod-asi-rules-UpdateExpression][UpdateExpression]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
  ?Await][no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]++
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
  ?Await][no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]--
  [[https://tc39.es/ecma262/#prod-asi-rules-ContinueStatement][ContinueStatement]][Yield,
  Await]:continue; continue[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
  ?Await];
  [[https://tc39.es/ecma262/#prod-asi-rules-BreakStatement][BreakStatement]][Yield,
  Await]:break; break[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
  ?Await];
  [[https://tc39.es/ecma262/#prod-asi-rules-ReturnStatement][ReturnStatement]][Yield,
  Await]:return; return[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield, ?Await];
  [[https://tc39.es/ecma262/#prod-asi-rules-ThrowStatement][ThrowStatement]][Yield,
  Await]:throw[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield, ?Await];
  [[https://tc39.es/ecma262/#prod-asi-rules-ArrowFunction][ArrowFunction]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][?Yield,
  ?Await][no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]][?In]
  [[https://tc39.es/ecma262/#prod-asi-rules-YieldExpression][YieldExpression]][In,
  Await]:yield yield[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  +Yield, ?Await] yield[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here]*[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  +Yield, ?Await]
  The practical effect of these restricted productions is as follows:

  - When a =++= or =--= token is encountered where the parser would treat
    it as a postfix operator, and at least one
    [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
    occurred between the preceding token and the =++= or =--= token, then
    a semicolon is automatically inserted before the =++= or =--= token.
  - When a =continue=, =break=, =return=, =throw=, or =yield= token is
    encountered and a
    [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] is
    encountered before the next token, a semicolon is automatically
    inserted after the =continue=, =break=, =return=, =throw=, or =yield=
    token.

  The resulting practical advice to ECMAScript programmers is:

  - A postfix =++= or =--= operator should appear on the same line as its
    operand.
  - An [[https://tc39.es/ecma262/#prod-Expression][Expression]] in a
    =return= or =throw= statement or an
    [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
    in a =yield= expression should start on the same line as the =return=,
    =throw=, or =yield= token.
  - A [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]
    in a =break= or =continue= statement should be on the same line as the
    =break= or =continue= token.

*** Examples of Automatic Semicolon Insertion
    :PROPERTIES:
    :CUSTOM_ID: examples-of-automatic-semicolon-insertion
    :END:

  The source

  #+BEGIN_EXAMPLE
    { 1 2 } 3
  #+END_EXAMPLE

  is not a valid sentence in the ECMAScript grammar, even with the
  automatic semicolon insertion rules. In contrast, the source

  #+BEGIN_EXAMPLE
    { 1
    2 } 3
  #+END_EXAMPLE

  is also not a valid ECMAScript sentence, but is transformed by automatic
  semicolon insertion into the following:

  #+BEGIN_EXAMPLE
    { 1
    ;2 ;} 3;
  #+END_EXAMPLE

  which is a valid ECMAScript sentence.

  The source

  #+BEGIN_EXAMPLE
    for (a; b
    )
  #+END_EXAMPLE

  is not a valid ECMAScript sentence and is not altered by automatic
  semicolon insertion because the semicolon is needed for the header of a
  =for= statement. Automatic semicolon insertion never inserts one of the
  two semicolons in the header of a =for= statement.

  The source

  #+BEGIN_EXAMPLE
    return
    a + b
  #+END_EXAMPLE

  is transformed by automatic semicolon insertion into the following:

  #+BEGIN_EXAMPLE
    return;
    a + b;
  #+END_EXAMPLE

  Note 1

  The expression =a + b= is not treated as a value to be returned by the
  =return= statement, because a
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  separates it from the token =return=.

  The source

  #+BEGIN_EXAMPLE
    a = b
    ++c
  #+END_EXAMPLE

  is transformed by automatic semicolon insertion into the following:

  #+BEGIN_EXAMPLE
    a = b;
    ++c;
  #+END_EXAMPLE

  Note 2

  The token =++= is not treated as a postfix operator applying to the
  variable =b=, because a
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] occurs
  between =b= and =++=.

  The source

  #+BEGIN_EXAMPLE
    if (a > b)
    else c = d
  #+END_EXAMPLE

  is not a valid ECMAScript sentence and is not altered by automatic
  semicolon insertion before the =else= token, even though no production
  of the grammar applies at that point, because an automatically inserted
  semicolon would then be parsed as an empty statement.

  The source

  #+BEGIN_EXAMPLE
    a = b + c
    (d + e).print()
  #+END_EXAMPLE

  is /not/ transformed by automatic semicolon insertion, because the
  parenthesized expression that begins the second line can be interpreted
  as an argument list for a function call:

  #+BEGIN_EXAMPLE
    a = b + c(d + e).print()
  #+END_EXAMPLE

  In the circumstance that an assignment statement must begin with a left
  parenthesis, it is a good idea for the programmer to provide an explicit
  semicolon at the end of the preceding statement rather than to rely on
  automatic semicolon insertion.

* ECMAScript Language: Expressions
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-expressions
  :END:

** Identifiers
   :PROPERTIES:
   :CUSTOM_ID: identifiers
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-16
    :END:

 [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]
 [~Yield]yield [~Await]await
 [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]] yield
 await
 [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]
 [~Yield]yield [~Await]await
 [[https://tc39.es/ecma262/#prod-Identifier][Identifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]but
 not [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]] Note

 =yield= and =await= are permitted as
 [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
 in the grammar, and prohibited with
 [[https://tc39.es/ecma262/#sec-static-semantic-rules][static semantics]]
 below, to prohibit automatic semicolon insertion in cases such as

 #+BEGIN_EXAMPLE
   let
   await 0;
 #+END_EXAMPLE

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-2
    :END:

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]

  - It is a Syntax Error if the code matched by this production is
    contained in [[https://tc39.es/ecma262/#sec-strict-mode-code][strict
    mode code]] and the StringValue of
    [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] is
    "arguments" or "eval".

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:yield
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:yield
  [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:yield

  - It is a Syntax Error if the code matched by this production is
    contained in [[https://tc39.es/ecma262/#sec-strict-mode-code][strict
    mode code]].

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:await
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:await
  [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:await

  - It is a Syntax Error if the
    [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]] of
    the syntactic grammar is
    [[https://tc39.es/ecma262/#prod-Module][Module]].

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:yield

  - It is a Syntax Error if this production has a _{[Yield]} parameter.

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:await

  - It is a Syntax Error if this production has an
    _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter.

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]
  [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]

  - It is a Syntax Error if this production has a _{[Yield]} parameter and
    StringValue of
    [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] is "yield".
  - It is a Syntax Error if this production has an
    _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter and
    StringValue of
    [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] is "await".

  [[https://tc39.es/ecma262/#prod-Identifier][Identifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]but
  not [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]

  - It is a Syntax Error if this phrase is contained in
    [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
    and the StringValue of
    [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] is:
    "implements", "interface", "let", "package", "private", "protected",
    "public", "static", or "yield".
  - It is a Syntax Error if the
    [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]] of
    the syntactic grammar is
    [[https://tc39.es/ecma262/#prod-Module][Module]] and the StringValue
    of [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] is
    "await".
  - It is a Syntax Error if StringValue of
    [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] is
    the same String value as the StringValue of any
    [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]] except
    for =yield= or =await=.

  Note

  StringValue of
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
  normalizes any Unicode escape sequences in
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] hence
  such escapes cannot be used to write an
  [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] whose code
  point sequence is the same as a
  [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]].

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames
    :END:

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[https://tc39.es/ecma262/#prod-Identifier][Identifier]].

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:yield

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing "yield".

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:await

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing "await".

  <<sec-identifiers-static-semantics-isvalidsimpleassignmenttarget>>
*** Static Semantics: AssignmentTargetType
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-assignmenttargettype
    :END:

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]

  1. If this
     [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
     is contained in
     [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
     and StringValue of
     [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] is "eval" or
     "arguments", return invalid.
  2. Return simple.

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:yield

  1. Return simple.

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:await

  1. Return simple.

*** Static Semantics: StringValue
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-stringvalue-2
    :END:

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:yield
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:yield
  [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:yield

  1. Return "yield".

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:await
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:await
  [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:await

  1. Return "await".

  [[https://tc39.es/ecma262/#prod-Identifier][Identifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]but
  not [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]

  1. Return the StringValue of
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

*** Runtime Semantics: BindingInitialization
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-bindinginitialization
    :END:

  With parameters =value= and =environment=.

  Note

  undefined is passed for =environment= to indicate that a
  [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
  used to assign the initialization value. This is the case for =var=
  statements and formal parameter lists of some non-strict functions (See
  [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][9.2.10]]).
  In those cases a lexical binding is hoisted and preinitialized prior to
  evaluation of its initializer.

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]

  1. Let =name= be StringValue of
     [[https://tc39.es/ecma262/#prod-Identifier][Identifier]].
  2. Return
     ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]](=name=,
     =value=, =environment=).

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:yield

  1. Return
     ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]]("yield",
     =value=, =environment=).

  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]:await

  1. Return
     ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]]("await",
     =value=, =environment=).

**** Runtime Semantics: InitializeBoundName ( =name=, =value=,
   =environment= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-initializeboundname-name-value-environment
     :END:

   1. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=name=)
      is String.
   2. If =environment= is not undefined, then

      1. Let =env= be the
         [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]
         component of =environment=.
      2. Perform =env=.InitializeBinding(=name=, =value=).
      3. Return
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   3. Else,

      1. Let =lhs= be
         [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=name=).
      2. Return
         ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=,
         =value=).

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation
    :END:

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]

  1. Return
     ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](StringValue
     of [[https://tc39.es/ecma262/#prod-Identifier][Identifier]]).

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:yield

  1. Return
     ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]]("yield").

  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]:await

  1. Return
     ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]]("await").

  Note 1

  The result of evaluating an
  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
  is always a value of type
  [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].

  Note 2

  In [[https://tc39.es/ecma262/#non-strict-code][non-strict code]], the
  [[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]]
  =yield= may be used as an identifier. Evaluating the
  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
  resolves the binding of =yield= as if it was an
  [[https://tc39.es/ecma262/#prod-Identifier][Identifier]]. Early Error
  restriction ensures that such an evaluation only can occur for
  [[https://tc39.es/ecma262/#non-strict-code][non-strict code]].

** Primary Expression
   :PROPERTIES:
   :CUSTOM_ID: primary-expression
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-17
    :END:

 [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]][Yield,
 Await]:this
 [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-Literal][Literal]]
 [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
 [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
 [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
 [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
 [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][?Yield,
 ?Await, ~Tagged]
 [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][Yield,
 Await]:([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield, ?Await])
 ([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
 ?Await],) ()
 (...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await])
 (...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
 ?Await]) ([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await],...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]) ([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await],...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
 ?Await])
*** Supplemental Syntax
    :PROPERTIES:
    :CUSTOM_ID: supplemental-syntax
    :END:

 When processing an instance of the production\\
 [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
 ?Await]\\
 the interpretation of
 [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
 is refined using the following grammar:

 [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]][Yield,
 Await]:([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield, ?Await])
*** Semantics
    :PROPERTIES:
    :CUSTOM_ID: semantics
    :END:

**** Static Semantics: CoveredParenthesizedExpression
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-coveredparenthesizedexpression
     :END:

   [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])

   1. Return the
      [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]
      that is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]]
      by
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].

**** Static Semantics: HasName
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-hasname
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Let =expr= be CoveredParenthesizedExpression of
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   2. If IsFunctionDefinition of =expr= is false, return false.
   3. Return HasName of =expr=.

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:this
   [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
   [[https://tc39.es/ecma262/#prod-Literal][Literal]]
   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Let =expr= be CoveredParenthesizedExpression of
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   2. Return IsFunctionDefinition of =expr=.

**** Static Semantics: IsIdentifierRef
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isidentifierref
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]

   1. Return true.

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:this
   [[https://tc39.es/ecma262/#prod-Literal][Literal]]
   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
   [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
   [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Return false.

   <<sec-semantics-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-1
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:this
   [[https://tc39.es/ecma262/#prod-Literal][Literal]]
   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
   [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. Return invalid.

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Let =expr= be CoveredParenthesizedExpression of
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   2. Return AssignmentTargetType of =expr=.

**** The =this= Keyword
     :PROPERTIES:
     :CUSTOM_ID: the-this-keyword
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-1
      :END:

    [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:this

    1. Return
       ? [[https://tc39.es/ecma262/#sec-resolvethisbinding][ResolveThisBinding]]().

**** Identifier Reference
     :PROPERTIES:
     :CUSTOM_ID: identifier-reference
     :END:

   See [[https://tc39.es/ecma262/#sec-identifiers][12.1]] for
   [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]].

**** Literals
     :PROPERTIES:
     :CUSTOM_ID: literals-1
     :END:

***** Syntax
      :PROPERTIES:
      :CUSTOM_ID: syntax-18
      :END:

   [[https://tc39.es/ecma262/#prod-Literal][Literal]]:[[https://tc39.es/ecma262/#prod-NullLiteral][NullLiteral]]
   [[https://tc39.es/ecma262/#prod-BooleanLiteral][BooleanLiteral]]
   [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]
   [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-2
      :END:

    [[https://tc39.es/ecma262/#prod-Literal][Literal]]:[[https://tc39.es/ecma262/#prod-NullLiteral][NullLiteral]]

    1. Return null.

    [[https://tc39.es/ecma262/#prod-Literal][Literal]]:[[https://tc39.es/ecma262/#prod-BooleanLiteral][BooleanLiteral]]

    1. If [[https://tc39.es/ecma262/#prod-BooleanLiteral][BooleanLiteral]]
       is the token =false=, return false.
    2. If [[https://tc39.es/ecma262/#prod-BooleanLiteral][BooleanLiteral]]
       is the token =true=, return true.

    [[https://tc39.es/ecma262/#prod-Literal][Literal]]:[[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]

    1. Return the NumericValue of
       [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]] as
       defined in
       [[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]].

    [[https://tc39.es/ecma262/#prod-Literal][Literal]]:[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]

    1. Return the StringValue of
       [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] as
       defined in
       [[https://tc39.es/ecma262/#sec-string-literals-static-semantics-stringvalue][11.8.4.1]].

**** Array Initializer
     :PROPERTIES:
     :CUSTOM_ID: array-initializer
     :END:

   Note

   An [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] is an
   expression describing the initialization of an Array object, using a
   list, of zero or more expressions each of which represents an array
   element, enclosed in square brackets. The elements need not be literals;
   they are evaluated each time the array initializer is evaluated.

   Array elements may be elided at the beginning, middle or end of the
   element list. Whenever a comma in the element list is not preceded by an
   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   (i.e., a comma at the beginning or after another comma), the missing
   array element contributes to the length of the Array and increases the
   index of subsequent elements. Elided array elements are not defined. If
   an element is elided at the end of an array, that element does not
   contribute to the length of the Array.

***** Syntax
      :PROPERTIES:
      :CUSTOM_ID: syntax-19
      :END:

   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]][Yield,
   Await]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]
   [[[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
   ?Await]]
   [[[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
   ?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]
   [[https://tc39.es/ecma262/#prod-ElementList][ElementList]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
   ?Yield, ?Await]
   [[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
   ?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
   ?Yield, ?Await]
   [[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
   ?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]][?Yield,
   ?Await] [[https://tc39.es/ecma262/#prod-Elision][Elision]]:,
   [[https://tc39.es/ecma262/#prod-Elision][Elision]],
   [[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]][Yield,
   Await]:...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
   ?Yield, ?Await] <<sec-static-semantics-elisionwidth>>
**** Runtime Semantics: ArrayAccumulation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-arrayaccumulation
     :END:

   With parameters =array= and =nextIndex=.

   [[https://tc39.es/ecma262/#prod-Elision][Elision]]:,

   1. Let =len= be =nextIndex= + 1.
   2. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=array=,
      "length", =len=, true).
   3. NOTE: The above Set throws if =len= exceeds 2^{32}-1.
   4. Return =len=.

   [[https://tc39.es/ecma262/#prod-Elision][Elision]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]],

   1. Return the result of performing ArrayAccumulation for
      [[https://tc39.es/ecma262/#prod-Elision][Elision]] with arguments
      =array= and =nextIndex= + 1.

   [[https://tc39.es/ecma262/#prod-ElementList][ElementList]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Set =nextIndex= to the result of performing ArrayAccumulation for
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with arguments
         =array= and =nextIndex=.
      2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextIndex=).

   2. Let =initResult= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   3. Let =initValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=initResult=).
   4. Let =created= be
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=array=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=nextIndex=),
      =initValue=).
   5. Return =nextIndex= + 1.

   [[https://tc39.es/ecma262/#prod-ElementList][ElementList]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]]

   1. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Set =nextIndex= to the result of performing ArrayAccumulation for
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with arguments
         =array= and =nextIndex=.
      2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextIndex=).

   2. Return the result of performing ArrayAccumulation for
      [[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]] with
      arguments =array= and =nextIndex=.

   [[https://tc39.es/ecma262/#prod-ElementList][ElementList]]:[[https://tc39.es/ecma262/#prod-ElementList][ElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Set =nextIndex= to the result of performing ArrayAccumulation for
      [[https://tc39.es/ecma262/#prod-ElementList][ElementList]] with
      arguments =array= and =nextIndex=.
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextIndex=).
   3. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Set =nextIndex= to the result of performing ArrayAccumulation for
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with arguments
         =array= and =nextIndex=.
      2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextIndex=).

   4. Let =initResult= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   5. Let =initValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=initResult=).
   6. Let =created= be
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=array=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=nextIndex=),
      =initValue=).
   7. Return =nextIndex= + 1.

   [[https://tc39.es/ecma262/#prod-ElementList][ElementList]]:[[https://tc39.es/ecma262/#prod-ElementList][ElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]]

   1. Set =nextIndex= to the result of performing ArrayAccumulation for
      [[https://tc39.es/ecma262/#prod-ElementList][ElementList]] with
      arguments =array= and =nextIndex=.
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextIndex=).
   3. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Set =nextIndex= to the result of performing ArrayAccumulation for
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with arguments
         =array= and =nextIndex=.
      2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextIndex=).

   4. Return the result of performing ArrayAccumulation for
      [[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]] with
      arguments =array= and =nextIndex=.

   [[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]]:...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =spreadRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   2. Let =spreadObj= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=spreadRef=).
   3. Let =iteratorRecord= be
      ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=spreadObj=).
   4. Repeat,

      1. Let =next= be
         ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
      2. If =next= is false, return =nextIndex=.
      3. Let =nextValue= be
         ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
      4. Perform
         ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=array=,
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=nextIndex=),
         =nextValue=).
      5. Set =nextIndex= to =nextIndex= + 1.

   Note

   [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]]
   is used to ensure that own properties are defined for the array even if
   the standard built-in Array prototype object has been modified in a
   manner that would preclude the creation of new own properties using
   [[Set]].

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-3
     :END:

   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]

   1. Let =array= be
      ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
   2. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Let =len= be the result of performing ArrayAccumulation for
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with arguments
         =array= and 0.
      2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=len=).

   3. Return =array=.

   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]:[[[https://tc39.es/ecma262/#prod-ElementList][ElementList]]]

   1. Let =array= be
      ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
   2. Let =len= be the result of performing ArrayAccumulation for
      [[https://tc39.es/ecma262/#prod-ElementList][ElementList]] with
      arguments =array= and 0.
   3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=len=).
   4. Return =array=.

   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]:[[[https://tc39.es/ecma262/#prod-ElementList][ElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]

   1. Let =array= be
      ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
   2. Let =nextIndex= be the result of performing ArrayAccumulation for
      [[https://tc39.es/ecma262/#prod-ElementList][ElementList]] with
      arguments =array= and 0.
   3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextIndex=).
   4. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Let =len= be the result of performing ArrayAccumulation for
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with arguments
         =array= and =nextIndex=.
      2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=len=).

   5. Return =array=.

*** Object Initializer
    :PROPERTIES:
    :CUSTOM_ID: object-initializer
    :END:

  Note 1

  An object initializer is an expression describing the initialization of
  an Object, written in a form resembling a literal. It is a list of zero
  or more pairs of property keys and associated values, enclosed in curly
  brackets. The values need not be literals; they are evaluated each time
  the object initializer is evaluated.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-20
     :END:

  [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]][Yield,
  Await]:{}
  {[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][?Yield,
  ?Await]}
  {[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][?Yield,
  ?Await],}
  [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-CoverInitializedName][CoverInitializedName]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
  ?Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
  ?Await]
  ...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]
  [[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
  [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
  [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]
  [[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]][Yield,
  Await]:[[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
  ?Yield, ?Await]]
  [[https://tc39.es/ecma262/#prod-CoverInitializedName][CoverInitializedName]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-Initializer][Initializer]][In, Yield,
  Await]:=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  ?Yield, ?Await] Note 2

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]] is
  defined in [[https://tc39.es/ecma262/#sec-method-definitions][14.3]].

  Note 3

  In certain contexts,
  [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] is used
  as a cover grammar for a more restricted secondary grammar. The
  [[https://tc39.es/ecma262/#prod-CoverInitializedName][CoverInitializedName]]
  production is necessary to fully cover these secondary grammars.
  However, use of this production results in an early Syntax Error in
  normal contexts where an actual
  [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] is
  expected.

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-3
     :END:

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

   - It is a Syntax Error if HasDirectSuper of
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
     is true.

   In addition to describing an actual object initializer the
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
   productions are also used as a cover grammar for
   [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]]
   and may be recognized as part of a
   [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   When [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
   appears in a context where
   [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]]
   is required the following Early Error rules are *not* applied. In
   addition, they are not applied when initially parsing a
   [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
   or
   [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-CoverInitializedName][CoverInitializedName]]

   - Always throw a Syntax Error if code matches this production.

   Note

   This production exists so that
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] can serve
   as a cover grammar for
   [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]].
   It cannot occur in an actual object initializer.

**** Static Semantics: ComputedPropertyContains
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-computedpropertycontains
     :END:

   With parameter =symbol=.

   [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]]

   1. Return the result of
      [[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]]
      Contains =symbol=.

**** Static Semantics: Contains
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-contains
     :END:

   With parameter =symbol=.

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

   1. If =symbol= is
      [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]],
      return true.
   2. Return the result of ComputedPropertyContains for
      [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
      with argument =symbol=.

   Note

   Static semantic rules that depend upon substructure generally do not
   look into function definitions.

   [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. If =symbol= is a
      [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]], return
      false.
   2. If =symbol= is an
      [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] and
      StringValue of =symbol= is the same value as the StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]],
      return true.
   3. Return false.

**** Static Semantics: IsComputedPropertyKey
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-iscomputedpropertykey
     :END:

   [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]]

   1. Return true.

**** Static Semantics: PropName
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-propname
     :END:

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]

   1. Return StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]].

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return empty.

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return PropName of
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

   [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. Return StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

   [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]

   1. Return the String value whose code units are the SV of
      [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]].

   [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]

   1. Let =nbr= be the NumericValue of
      [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]].
   2. Return ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=nbr=).

   [[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]]:[[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]]

   1. Return empty.

**** Static Semantics: PropertyNameList
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-propertynamelist
     :END:

   [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]:[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]

   1. If PropName of
      [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]
      is empty, return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Return a new
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing PropName of
      [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]].

   [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]:[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]],[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]

   1. Let =list= be PropertyNameList of
      [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]].
   2. If PropName of
      [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]
      is empty, return =list=.
   3. Append PropName of
      [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]
      to the end of =list=.
   4. Return =list=.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-4
     :END:

   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]:{}

   1. Return
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).

   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]:{[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]}
   {[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]],}

   1. Let =obj= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
   2. Perform ? PropertyDefinitionEvaluation of
      [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]
      with arguments =obj= and true.
   3. Return =obj=.

   [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. Return StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

   [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]

   1. Return the String value whose code units are the SV of
      [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]].

   [[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]

   1. Let =nbr= be the NumericValue of
      [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]].
   2. Return ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=nbr=).

   [[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]]:[[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]]

   1. Let =exprValue= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   2. Let =propName= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprValue=).
   3. Return
      ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propName=).

**** Runtime Semantics: PropertyDefinitionEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation
     :END:

   With parameters =object= and =enumerable=.

   [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]:[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]],[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]

   1. Perform ? PropertyDefinitionEvaluation of
      [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]
      with arguments =object= and =enumerable=.
   2. Return the result of performing PropertyDefinitionEvaluation of
      [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]
      with arguments =object= and =enumerable=.

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =exprValue= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   2. Let =fromValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprValue=).
   3. Let =excludedNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   4. Return
      ? [[https://tc39.es/ecma262/#sec-copydataproperties][CopyDataProperties]](=object=,
      =fromValue=, =excludedNames=).

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]

   1. Let =propName= be StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]].
   2. Let =exprValue= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]].
   3. Let =propValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprValue=).
   4. [[https://tc39.es/ecma262/#assert][Assert]]: =enumerable= is true.
   5. [[https://tc39.es/ecma262/#assert][Assert]]: =object= is an ordinary,
      extensible object with no non-configurable properties.
   6. Return
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=object=,
      =propName=, =propValue=).

   [[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =propKey= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
   3. If
      [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])
      is true, then

      1. Let =propValue= be NamedEvaluation of
         [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
         with argument =propKey=.

   4. Else,

      1. Let =exprValueRef= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
      2. Let =propValue= be
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprValueRef=).

   5. [[https://tc39.es/ecma262/#assert][Assert]]: =enumerable= is true.
   6. [[https://tc39.es/ecma262/#assert][Assert]]: =object= is an ordinary,
      extensible object with no non-configurable properties.
   7. Return
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=object=,
      =propKey=, =propValue=).

   Note

   An alternative semantics for this production is given in
   [[https://tc39.es/ecma262/#sec-__proto__-property-names-in-object-initializers][B.3.1]].

*** Function Defining Expressions
    :PROPERTIES:
    :CUSTOM_ID: function-defining-expressions
    :END:

  See [[https://tc39.es/ecma262/#sec-function-definitions][14.1]] for
  [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
  .

  See
  [[https://tc39.es/ecma262/#sec-generator-function-definitions][14.4]]
  for
  [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
  .

  See [[https://tc39.es/ecma262/#sec-class-definitions][14.6]] for
  [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]
  .

  See [[https://tc39.es/ecma262/#sec-async-function-definitions][14.7]]
  for
  [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]
  .

  See
  [[https://tc39.es/ecma262/#sec-async-generator-function-definitions][14.5]]
  for
  [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
  .

*** Regular Expression Literals
    :PROPERTIES:
    :CUSTOM_ID: regular-expression-literals-1
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-21
     :END:

  See
  [[https://tc39.es/ecma262/#sec-literals-regular-expression-literals][11.8.5]].

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-4
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]

   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#sec-isvalidregularexpressionliteral][IsValidRegularExpressionLiteral]]([[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]])
     is false.

**** Static Semantics: IsValidRegularExpressionLiteral ( =literal=
   )
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isvalidregularexpressionliteral-literal
     :END:

   The abstract operation IsValidRegularExpressionLiteral determines if its
   argument is a valid regular expression literal. The following steps are
   taken:

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =literal= is a
      [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]].
   2. If FlagText of =literal= contains any code points other than =g=,
      =i=, =m=, =s=, =u=, or =y=, or if it contains the same code point
      more than once, return false.
   3. Let =P= be BodyText of =literal=.
   4. If FlagText of =literal= contains =u=, then

      1. Parse =P= using the grammars in
         [[https://tc39.es/ecma262/#sec-patterns][21.2.1]]. The
         [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
         symbol]] for the parse is
         [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][+U, +N]. If =P=
         did not conform to the grammar, if any elements of =P= were not
         matched by the parse, or if any Early Error conditions exist,
         return false. Otherwise, return true.

   5. Parse =P= using the grammars in
      [[https://tc39.es/ecma262/#sec-patterns][21.2.1]]. The
      [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
      for the parse is
      [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][~U, ~N]. If the
      result of parsing contains a
      [[https://tc39.es/ecma262/#prod-GroupName][GroupName]], reparse with
      the [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
      symbol]] [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][~U, +N].
      If =P= did not conform to the grammar, if any elements of =P= were
      not matched by the parse, or if any Early Error conditions exist,
      return false. Otherwise, return true.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-5
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]

   1. Let =pattern= be the String value consisting of the
      [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of each
      code point of BodyText of
      [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]].
   2. Let =flags= be the String value consisting of the
      [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of each
      code point of FlagText of
      [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]].
   3. Return
      [[https://tc39.es/ecma262/#sec-regexpcreate][RegExpCreate]](=pattern=,
      =flags=).

*** Template Literals
    :PROPERTIES:
    :CUSTOM_ID: template-literals
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-22
     :END:

  [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][Yield,
  Await,
  Tagged]:[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]
  [[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]][?Yield,
  ?Await, ?Tagged]
  [[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]][Yield,
  Await,
  Tagged]:[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]][?Yield,
  ?Await, ?Tagged]
  [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]][Yield,
  Await,
  Tagged]:[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]
  [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][?Yield,
  ?Await,
  ?Tagged][[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]
  [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][Yield,
  Await,
  Tagged]:[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][?Yield,
  ?Await,
  ?Tagged][[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield, ?Await]
  <<sec-primary-expression-template-literals-static-semantics-early-errors>>
**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-5
     :END:

   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][Yield,
   Await,
   Tagged]:[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]

   - It is a Syntax Error if the number of elements in the result of
     TemplateStrings of
     [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
     with argument false is greater than 2^{32} - 1.
   - It is a Syntax Error if the _{[Tagged]} parameter was not set and
     [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]
     Contains
     [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]].

   [[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]][Yield,
   Await,
   Tagged]:[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
   ?Yield,
   ?Await][[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]][?Yield,
   ?Await, ?Tagged]

   - It is a Syntax Error if the _{[Tagged]} parameter was not set and
     [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]] Contains
     [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]].

   [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]][Yield,
   Await,
   Tagged]:[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]

   - It is a Syntax Error if the _{[Tagged]} parameter was not set and
     [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]] Contains
     [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]].

   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][Yield,
   Await,
   Tagged]:[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
   ?Yield, ?Await]
   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][?Yield,
   ?Await,
   ?Tagged][[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
   ?Yield, ?Await]

   - It is a Syntax Error if the _{[Tagged]} parameter was not set and
     [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]
     Contains
     [[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]].

**** Static Semantics: TemplateStrings
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-templatestrings
     :END:

   With parameter =raw=.

   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]:[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]

   1. If =raw= is false, then

      1. Let =string= be the TV of
         [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]].

   2. Else,

      1. Let =string= be the TRV of
         [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]].

   3. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing the single element, =string=.

   [[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]]:[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]][[https://tc39.es/ecma262/#prod-Expression][Expression]][[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]

   1. If =raw= is false, then

      1. Let =head= be the TV of
         [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]].

   2. Else,

      1. Let =head= be the TRV of
         [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]].

   3. Let =tail= be TemplateStrings of
      [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]] with
      argument =raw=.
   4. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing =head= followed by the elements, in order, of =tail=.

   [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]:[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]

   1. If =raw= is false, then

      1. Let =tail= be the TV of
         [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]].

   2. Else,

      1. Let =tail= be the TRV of
         [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]].

   3. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing the single element, =tail=.

   [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]:[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]

   1. Let =middle= be TemplateStrings of
      [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]
      with argument =raw=.
   2. If =raw= is false, then

      1. Let =tail= be the TV of
         [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]].

   3. Else,

      1. Let =tail= be the TRV of
         [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]].

   4. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing the elements, in order, of =middle= followed by =tail=.

   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]:[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]]

   1. If =raw= is false, then

      1. Let =string= be the TV of
         [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]].

   2. Else,

      1. Let =string= be the TRV of
         [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]].

   3. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing the single element, =string=.

   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]:[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]]

   1. Let =front= be TemplateStrings of
      [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]
      with argument =raw=.
   2. If =raw= is false, then

      1. Let =last= be the TV of
         [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]].

   3. Else,

      1. Let =last= be the TRV of
         [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]].

   4. Append =last= as the last element of the
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      =front=.
   5. Return =front=.

**** Runtime Semantics: ArgumentListEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-argumentlistevaluation
     :END:

   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]:[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]

   1. Let =templateLiteral= be this
      [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]].
   2. Let =siteObj= be
      [[https://tc39.es/ecma262/#sec-gettemplateobject][GetTemplateObject]](=templateLiteral=).
   3. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing the one element which is =siteObj=.

   [[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]]:[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]][[https://tc39.es/ecma262/#prod-Expression][Expression]][[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]

   1. Let =templateLiteral= be this
      [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]].
   2. Let =siteObj= be
      [[https://tc39.es/ecma262/#sec-gettemplateobject][GetTemplateObject]](=templateLiteral=).
   3. Let =firstSubRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   4. Let =firstSub= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=firstSubRef=).
   5. Let =restSub= be ? SubstitutionEvaluation of
      [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]].
   6. [[https://tc39.es/ecma262/#assert][Assert]]: =restSub= is a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   7. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      whose first element is =siteObj=, whose second elements is
      =firstSub=, and whose subsequent elements are the elements of
      =restSub=, in order. =restSub= may contain no elements.

**** Runtime Semantics: GetTemplateObject ( =templateLiteral= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-gettemplateobject-templateliteral
     :END:

   The abstract operation GetTemplateObject is called with a
   [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]],
   =templateLiteral=, as an argument. It performs the following steps:

   1.  Let =rawStrings= be TemplateStrings of =templateLiteral= with
       argument true.
   2.  Let =realm= be [[https://tc39.es/ecma262/#current-realm][the current
       Realm Record]].
   3.  Let =templateRegistry= be =realm=.[[TemplateMap]].
   4.  For each element =e= of =templateRegistry=, do

       1. If =e=.[[Site]] is
          [[https://tc39.es/ecma262/#sec-syntactic-grammar][the same Parse
          Node]] as =templateLiteral=, then

          1. Return =e=.[[Array]].

   5.  Let =cookedStrings= be TemplateStrings of =templateLiteral= with
       argument false.
   6.  Let =count= be the number of elements in the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       =cookedStrings=.
   7.  [[https://tc39.es/ecma262/#assert][Assert]]: =count= ≤ 2^{32} - 1.
   8.  Let =template= be
       ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=count=).
   9.  Let =rawObj= be
       ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=count=).
   10. Let =index= be 0.
   11. Repeat, while =index= < =count=

       1. Let =prop= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=index=).
       2. Let =cookedValue= be the String value =cookedStrings=[=index=].
       3. Call =template=.[[DefineOwnProperty]](=prop=, PropertyDescriptor
          { [[Value]]: =cookedValue=, [[Writable]]: false, [[Enumerable]]:
          true, [[Configurable]]: false }).
       4. Let =rawValue= be the String value =rawStrings=[=index=].
       5. Call =rawObj=.[[DefineOwnProperty]](=prop=, PropertyDescriptor {
          [[Value]]: =rawValue=, [[Writable]]: false, [[Enumerable]]: true,
          [[Configurable]]: false }).
       6. Set =index= to =index= + 1.

   12. Perform
       [[https://tc39.es/ecma262/#sec-setintegritylevel][SetIntegrityLevel]](=rawObj=,
       frozen).
   13. Call =template=.[[DefineOwnProperty]]("raw", PropertyDescriptor {
       [[Value]]: =rawObj=, [[Writable]]: false, [[Enumerable]]: false,
       [[Configurable]]: false }).
   14. Perform
       [[https://tc39.es/ecma262/#sec-setintegritylevel][SetIntegrityLevel]](=template=,
       frozen).
   15. Append the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
       { [[Site]]: =templateLiteral=, [[Array]]: =template= } to
       =templateRegistry=.
   16. Return =template=.

   Note 1

   The creation of a template object cannot result in an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]].

   Note 2

   Each [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
   in the program code of a [[https://tc39.es/ecma262/#realm][realm]] is
   associated with a unique template object that is used in the evaluation
   of tagged Templates
   ([[https://tc39.es/ecma262/#sec-template-literals-runtime-semantics-evaluation][12.2.9.6]]).
   The template objects are frozen and the same template object is used
   each time a specific tagged Template is evaluated. Whether template
   objects are created lazily upon first evaluation of the
   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]] or
   eagerly prior to first evaluation is an implementation choice that is
   not observable to ECMAScript code.

   Note 3

   Future editions of this specification may define additional
   non-enumerable properties of template objects.

**** Runtime Semantics: SubstitutionEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-substitutionevaluation
     :END:

   [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]:[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]:[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]

   1. Return the result of SubstitutionEvaluation of
      [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]].

   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]:[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]]

   1. Let =subRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   2. Let =sub= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=subRef=).
   3. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing only =sub=.

   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]:[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]]

   1. Let =preceding= be ? SubstitutionEvaluation of
      [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]].
   2. Let =nextRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   3. Let =next= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=nextRef=).
   4. Append =next= as the last element of the
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      =preceding=.
   5. Return =preceding=.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-6
     :END:

   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]:[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]

   1. Return the String value whose code units are the elements of the TV
      of
      [[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]
      as defined in
      [[https://tc39.es/ecma262/#sec-template-literal-lexical-components][11.8.6]].

   [[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]]:[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]][[https://tc39.es/ecma262/#prod-Expression][Expression]][[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]

   1. Let =head= be the TV of
      [[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]] as
      defined in
      [[https://tc39.es/ecma262/#sec-template-literal-lexical-components][11.8.6]].
   2. Let =subRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   3. Let =sub= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=subRef=).
   4. Let =middle= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=sub=).
   5. Let =tail= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]].
   6. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=tail=).
   7. Return the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of =head=, =middle=, and =tail=.

   Note 1

   The string conversion semantics applied to the
   [[https://tc39.es/ecma262/#prod-Expression][Expression]] value are like
   =String.prototype.concat= rather than the =+= operator.

   [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]:[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]

   1. Let =tail= be the TV of
      [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]] as
      defined in
      [[https://tc39.es/ecma262/#sec-template-literal-lexical-components][11.8.6]].
   2. Return the String value consisting of the code units of =tail=.

   [[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]]:[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]

   1. Let =head= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=head=).
   3. Let =tail= be the TV of
      [[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]] as
      defined in
      [[https://tc39.es/ecma262/#sec-template-literal-lexical-components][11.8.6]].
   4. Return the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of =head= and =tail=.

   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]:[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]]

   1. Let =head= be the TV of
      [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]] as
      defined in
      [[https://tc39.es/ecma262/#sec-template-literal-lexical-components][11.8.6]].
   2. Let =subRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   3. Let =sub= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=subRef=).
   4. Let =middle= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=sub=).
   5. Return the sequence of code units consisting of the code units of
      =head= followed by the elements of =middle=.

   Note 2

   The string conversion semantics applied to the
   [[https://tc39.es/ecma262/#prod-Expression][Expression]] value are like
   =String.prototype.concat= rather than the =+= operator.

   [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]]:[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]]

   1. Let =rest= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=rest=).
   3. Let =middle= be the TV of
      [[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]] as
      defined in
      [[https://tc39.es/ecma262/#sec-template-literal-lexical-components][11.8.6]].
   4. Let =subRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   5. Let =sub= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=subRef=).
   6. Let =last= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=sub=).
   7. Return the sequence of code units consisting of the elements of
      =rest= followed by the code units of =middle= followed by the
      elements of =last=.

   Note 3

   The string conversion semantics applied to the
   [[https://tc39.es/ecma262/#prod-Expression][Expression]] value are like
   =String.prototype.concat= rather than the =+= operator.

*** The Grouping Operator
    :PROPERTIES:
    :CUSTOM_ID: the-grouping-operator
    :END:

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-6
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
     is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] a
     [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]].
   - All Early Error rules for
     [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]
     and its derived productions also apply to
     CoveredParenthesizedExpression of
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-1
     :END:

   [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])

   1. Return IsFunctionDefinition of
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].

   <<sec-grouping-operator-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-2
     :END:

   [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])

   1. Return AssignmentTargetType of
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].

**** Runtime Semantics: NamedEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-namedevaluation
     :END:

   With parameter =name=.

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Let =expr= be CoveredParenthesizedExpression of
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   2. Return the result of performing NamedEvaluation for =expr= with
      argument =name=.

   [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])

   1. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Expression][Expression]])
      is true.
   2. Return the result of performing NamedEvaluation for
      [[https://tc39.es/ecma262/#prod-Expression][Expression]] with
      argument =name=.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-7
     :END:

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Let =expr= be CoveredParenthesizedExpression of
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   2. Return the result of evaluating =expr=.

   [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])

   1. Return the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]]. This may be
      of type
      [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].

   Note

   This algorithm does not apply
   [[https://tc39.es/ecma262/#sec-getvalue][GetValue]] to the result of
   evaluating [[https://tc39.es/ecma262/#prod-Expression][Expression]]. The
   principal motivation for this is so that operators such as =delete= and
   =typeof= may be applied to parenthesized expressions.

** Left-Hand-Side Expressions
   :PROPERTIES:
   :CUSTOM_ID: left-hand-side-expressions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-23
    :END:

 [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await][[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield, ?Await]]
 [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
 [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][?Yield,
 ?Await, +Tagged]
 [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]
 new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]][Yield,
 Await]:super[[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield, ?Await]]
 super.[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
 [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]:[[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]]
 [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]]:new.target
 [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await]
 new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-ImportCall][ImportCall]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
 ?Await][[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield, ?Await]]
 [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
 ?Await].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
 [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][?Yield,
 ?Await, +Tagged]
 [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]][Yield,
 Await]:super[[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-ImportCall][ImportCall]][Yield,
 Await]:import([[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield, ?Await])
 [[https://tc39.es/ecma262/#prod-Arguments][Arguments]][Yield, Await]:()
 ([[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
 ?Await])
 ([[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
 ?Await],)
 [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield, ?Await]
 ...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield, ?Await]
 [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
 ?Await],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield, ?Await]
 [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
 ?Await],...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield, ?Await]
 [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
 ?Await]
*** Supplemental Syntax
    :PROPERTIES:
    :CUSTOM_ID: supplemental-syntax-1
    :END:

 When processing an instance of the production
 [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
 the interpretation of
 [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
 is refined using the following grammar:

 [[https://tc39.es/ecma262/#prod-CallMemberExpression][CallMemberExpression]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
 ?Await]
*** Static Semantics
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-1
    :END:

**** Static Semantics: CoveredCallExpression
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-coveredcallexpression
     :END:

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]

   1. Return the
      [[https://tc39.es/ecma262/#prod-CallMemberExpression][CallMemberExpression]]
      that is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]]
      by
      [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].

**** Static Semantics: Contains
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-contains-1
     :END:

   With parameter =symbol=.

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. If
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]
      Contains =symbol= is true, return true.
   2. If =symbol= is a
      [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]], return
      false.
   3. If =symbol= is an
      [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] and
      StringValue of =symbol= is the same value as the StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]],
      return true.
   4. Return false.

   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]:super.[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. If =symbol= is the
      [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]] =super=,
      return true.
   2. If =symbol= is a
      [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]], return
      false.
   3. If =symbol= is an
      [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] and
      StringValue of =symbol= is the same value as the StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]],
      return true.
   4. Return false.

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. If [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]
      Contains =symbol= is true, return true.
   2. If =symbol= is a
      [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]], return
      false.
   3. If =symbol= is an
      [[https://tc39.es/ecma262/#prod-Identifier][Identifier]] and
      StringValue of =symbol= is the same value as the StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]],
      return true.
   4. Return false.

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-2
     :END:

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]
   [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]
   new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]:new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]

   1. Return false.

**** Static Semantics: IsDestructuring
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isdestructuring
     :END:

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]

   1. If
      [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]
      is either an
      [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] or an
      [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]], return
      true.
   2. Return false.

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]
   [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]
   new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]:new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]

   1. Return false.

**** Static Semantics: IsIdentifierRef
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isidentifierref-1
     :END:

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]
   [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]
   new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]:new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]

   1. Return false.

   <<sec-static-semantics-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-3
     :END:

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]

   1. Return simple.

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
   [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]]
   [[https://tc39.es/ecma262/#prod-ImportCall][ImportCall]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
   [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]:new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
   new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]]:new.target

   1. Return invalid.

*** Property Accessors
    :PROPERTIES:
    :CUSTOM_ID: property-accessors
    :END:

  Note

  Properties are accessed by name, using either the dot notation:

  [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]] =.=
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]\\
  [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] =.=
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  or the bracket notation:

  [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]] =[=
  [[https://tc39.es/ecma262/#prod-Expression][Expression]] =]=\\
  [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] =[=
  [[https://tc39.es/ecma262/#prod-Expression][Expression]] =]=

  The dot notation is explained by the following syntactic conversion:

  [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]] =.=
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  is identical in its behaviour to

  [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]] =[=
  </identifier-name-string/> =]=

  and similarly

  [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] =.=
  [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  is identical in its behaviour to

  [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] =[=
  </identifier-name-string/> =]=

  where </identifier-name-string/> is the result of evaluating StringValue
  of [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-8
     :END:

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]

   1. Let =baseReference= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].
   2. Let =baseValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=baseReference=).
   3. Let =propertyNameReference= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   4. Let =propertyNameValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=propertyNameReference=).
   5. Let =bv= be
      ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=baseValue=).
   6. Let =propertyKey= be
      ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyNameValue=).
   7. If the code matched by this
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]
      is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
      code]], let =strict= be true; else let =strict= be false.
   8. Return a value of type
      [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
      whose base value component is =bv=, whose referenced name component
      is =propertyKey=, and whose strict reference flag is =strict=.

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. Let =baseReference= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].
   2. Let =baseValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=baseReference=).
   3. Let =bv= be
      ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=baseValue=).
   4. Let =propertyNameString= be StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].
   5. If the code matched by this
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]
      is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
      code]], let =strict= be true; else let =strict= be false.
   6. Return a value of type
      [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
      whose base value component is =bv=, whose referenced name component
      is =propertyNameString=, and whose strict reference flag is =strict=.

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   Is evaluated in exactly the same manner as
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   except that the contained
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] is
   evaluated in step 1.

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   Is evaluated in exactly the same manner as
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   except that the contained
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] is
   evaluated in step 1.

*** The =new= Operator
    :PROPERTIES:
    :CUSTOM_ID: the-new-operator
    :END:

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-9
     :END:

   [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]:new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]

   1. Return
      ? [[https://tc39.es/ecma262/#sec-evaluatenew][EvaluateNew]]([[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]],
      empty).

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

   1. Return
      ? [[https://tc39.es/ecma262/#sec-evaluatenew][EvaluateNew]]([[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]],
      [[https://tc39.es/ecma262/#prod-Arguments][Arguments]]).

***** Runtime Semantics: EvaluateNew ( =constructExpr=,
    =arguments= )
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluatenew-constructexpr-arguments
      :END:

    The abstract operation EvaluateNew with arguments =constructExpr=, and
    =arguments= performs the following steps:

    1. [[https://tc39.es/ecma262/#assert][Assert]]: =constructExpr= is
       either a
       [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]] or a
       [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].
    2. [[https://tc39.es/ecma262/#assert][Assert]]: =arguments= is either
       empty or an [[https://tc39.es/ecma262/#prod-Arguments][Arguments]].
    3. Let =ref= be the result of evaluating =constructExpr=.
    4. Let =constructor= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=ref=).
    5. If =arguments= is empty, let =argList= be a new empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    6. Else,

       1. Let =argList= be ? ArgumentListEvaluation of =arguments=.

    7. If
       [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=constructor=)
       is false, throw a TypeError exception.
    8. Return
       ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=constructor=,
       =argList=).

*** Function Calls
    :PROPERTIES:
    :CUSTOM_ID: function-calls
    :END:

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-10
     :END:

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]

   1. Let =expr= be CoveredCallExpression of
      [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
   2. Let =memberExpr= be the
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]
      of =expr=.
   3. Let =arguments= be the
      [[https://tc39.es/ecma262/#prod-Arguments][Arguments]] of =expr=.
   4. Let =ref= be the result of evaluating =memberExpr=.
   5. Let =func= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=ref=).
   6. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=ref=)
      is
      [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
      and
      [[https://tc39.es/ecma262/#sec-ispropertyreference][IsPropertyReference]](=ref=)
      is false and
      [[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=ref=)
      is "eval", then

      1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=func=,
         [[https://tc39.es/ecma262/#sec-eval-x][%eval%]]) is true, then

         1. Let =argList= be ? ArgumentListEvaluation of =arguments=.
         2. If =argList= has no elements, return undefined.
         3. Let =evalText= be the first element of =argList=.
         4. If the source code matching this
            [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]
            is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
            code]], let =strictCaller= be true. Otherwise let
            =strictCaller= be false.
         5. Let =evalRealm= be
            [[https://tc39.es/ecma262/#current-realm][the current Realm
            Record]].
         6. Return
            ? [[https://tc39.es/ecma262/#sec-performeval][PerformEval]](=evalText=,
            =evalRealm=, =strictCaller=, true).

   7. Let =thisCall= be this
      [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].
   8. Let =tailCall= be
      [[https://tc39.es/ecma262/#sec-isintailposition][IsInTailPosition]](=thisCall=).
   9. Return
      ? [[https://tc39.es/ecma262/#sec-evaluatecall][EvaluateCall]](=func=,
      =ref=, =arguments=, =tailCall=).

   A [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]
   evaluation that executes step 6.a.vi is a direct eval.

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

   1. Let =ref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].
   2. Let =func= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=ref=).
   3. Let =thisCall= be this
      [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].
   4. Let =tailCall= be
      [[https://tc39.es/ecma262/#sec-isintailposition][IsInTailPosition]](=thisCall=).
   5. Return
      ? [[https://tc39.es/ecma262/#sec-evaluatecall][EvaluateCall]](=func=,
      =ref=, [[https://tc39.es/ecma262/#prod-Arguments][Arguments]],
      =tailCall=).

   <<sec-evaluatedirectcall>>
**** Runtime Semantics: EvaluateCall ( =func=, =ref=, =arguments=,
   =tailPosition= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluatecall-func-ref-arguments-tailposition
     :END:

   The abstract operation EvaluateCall takes as arguments a value =func=, a
   value =ref=, a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse
   Node]] =arguments=, and a Boolean argument =tailPosition=. It performs
   the following steps:

   1.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=ref=)
       is
       [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]],
       then

       1. If
          [[https://tc39.es/ecma262/#sec-ispropertyreference][IsPropertyReference]](=ref=)
          is true, then

          1. Let =thisValue= be
             [[https://tc39.es/ecma262/#sec-getthisvalue][GetThisValue]](=ref=).

       2. Else,

          1. [[https://tc39.es/ecma262/#assert][Assert]]: the base of =ref=
             is an
             [[https://tc39.es/ecma262/#sec-environment-records][Environment
             Record]].
          2. Let =refEnv= be
             [[https://tc39.es/ecma262/#sec-getbase][GetBase]](=ref=).
          3. Let =thisValue= be =refEnv=.WithBaseObject().

   2.  Else,

       1. Let =thisValue= be undefined.

   3.  Let =argList= be ? ArgumentListEvaluation of =arguments=.
   4.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=func=)
       is not Object, throw a TypeError exception.
   5.  If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=func=)
       is false, throw a TypeError exception.
   6.  If =tailPosition= is true, perform
       [[https://tc39.es/ecma262/#sec-preparefortailcall][PrepareForTailCall]]().
   7.  Let =result= be [[https://tc39.es/ecma262/#sec-call][Call]](=func=,
       =thisValue=, =argList=).
   8.  [[https://tc39.es/ecma262/#assert][Assert]]: If =tailPosition= is
       true, the above call will not return here, but instead evaluation
       will continue as if the following return has already occurred.
   9.  [[https://tc39.es/ecma262/#assert][Assert]]: If =result= is not an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], then
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=)
       is an
       [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
       language type]].
   10. Return =result=.

*** The =super= Keyword
    :PROPERTIES:
    :CUSTOM_ID: the-super-keyword
    :END:

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-11
     :END:

   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]:super[[[https://tc39.es/ecma262/#prod-Expression][Expression]]]

   1. Let =env= be
      [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
   2. Let =actualThis= be ? =env=.GetThisBinding().
   3. Let =propertyNameReference= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   4. Let =propertyNameValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=propertyNameReference=).
   5. Let =propertyKey= be
      ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyNameValue=).
   6. If the code matched by this
      [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
      [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
      let =strict= be true; else let =strict= be false.
   7. Return
      ? [[https://tc39.es/ecma262/#sec-makesuperpropertyreference][MakeSuperPropertyReference]](=actualThis=,
      =propertyKey=, =strict=).

   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]:super.[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

   1. Let =env= be
      [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
   2. Let =actualThis= be ? =env=.GetThisBinding().
   3. Let =propertyKey= be StringValue of
      [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].
   4. If the code matched by this
      [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
      [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
      let =strict= be true; else let =strict= be false.
   5. Return
      ? [[https://tc39.es/ecma262/#sec-makesuperpropertyreference][MakeSuperPropertyReference]](=actualThis=,
      =propertyKey=, =strict=).

   [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]]:super[[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

   1. Let =newTarget= be
      [[https://tc39.es/ecma262/#sec-getnewtarget][GetNewTarget]]().
   2. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=newTarget=)
      is Object.
   3. Let =func= be
      ? [[https://tc39.es/ecma262/#sec-getsuperconstructor][GetSuperConstructor]]().
   4. Let =argList= be ? ArgumentListEvaluation of
      [[https://tc39.es/ecma262/#prod-Arguments][Arguments]].
   5. Let =result= be
      ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=func=,
      =argList=, =newTarget=).
   6. Let =thisER= be
      [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
   7. Return ? =thisER=.BindThisValue(=result=).

**** Runtime Semantics: GetSuperConstructor ( )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-getsuperconstructor
     :END:

   The abstract operation GetSuperConstructor performs the following steps:

   1. Let =envRec= be
      [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
   2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= is a
      [[https://tc39.es/ecma262/#sec-function-environment-records][function
      Environment Record]].
   3. Let =activeFunction= be =envRec=.[[FunctionObject]].
   4. [[https://tc39.es/ecma262/#assert][Assert]]: =activeFunction= is an
      ECMAScript [[https://tc39.es/ecma262/#function-object][function
      object]].
   5. Let =superConstructor= be ! =activeFunction=.[[GetPrototypeOf]]().
   6. If
      [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=superConstructor=)
      is false, throw a TypeError exception.
   7. Return =superConstructor=.

**** Runtime Semantics: MakeSuperPropertyReference ( =actualThis=,
   =propertyKey=, =strict= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-makesuperpropertyreference-actualthis-propertykey-strict
     :END:

   The abstract operation MakeSuperPropertyReference with arguments
   =actualThis=, =propertyKey=, and =strict= performs the following steps:

   1. Let =env= be
      [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
   2. [[https://tc39.es/ecma262/#assert][Assert]]: =env=.HasSuperBinding()
      is true.
   3. Let =baseValue= be ? =env=.GetSuperBase().
   4. Let =bv= be
      ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=baseValue=).
   5. Return a value of type
      [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
      that is a [[https://tc39.es/ecma262/#super-reference][Super
      Reference]] whose base value component is =bv=, whose referenced name
      component is =propertyKey=, whose thisValue component is
      =actualThis=, and whose strict reference flag is =strict=.

*** Argument Lists
    :PROPERTIES:
    :CUSTOM_ID: argument-lists
    :END:

  Note

  The evaluation of an argument list produces a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of values.

**** Runtime Semantics: ArgumentListEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-argumentlistevaluation-1
     :END:

   [[https://tc39.es/ecma262/#prod-Arguments][Arguments]]:()

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =ref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   2. Let =arg= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=ref=).
   3. Return a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      whose sole item is =arg=.

   [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]]:...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =list= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Let =spreadRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   3. Let =spreadObj= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=spreadRef=).
   4. Let =iteratorRecord= be
      ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=spreadObj=).
   5. Repeat,

      1. Let =next= be
         ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
      2. If =next= is false, return =list=.
      3. Let =nextArg= be
         ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
      4. Append =nextArg= as the last element of =list=.

   [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]]:[[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =precedingArgs= be ? ArgumentListEvaluation of
      [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]].
   2. Let =ref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   3. Let =arg= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=ref=).
   4. Append =arg= to the end of =precedingArgs=.
   5. Return =precedingArgs=.

   [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]]:[[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]],...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =precedingArgs= be ? ArgumentListEvaluation of
      [[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]].
   2. Let =spreadRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   3. Let =iteratorRecord= be
      ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](?
      [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=spreadRef=)).
   4. Repeat,

      1. Let =next= be
         ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
      2. If =next= is false, return =precedingArgs=.
      3. Let =nextArg= be
         ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
      4. Append =nextArg= as the last element of =precedingArgs=.

*** Import Calls
    :PROPERTIES:
    :CUSTOM_ID: import-calls
    :END:

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-12
     :END:

   [[https://tc39.es/ecma262/#prod-ImportCall][ImportCall]]:import([[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])

   1. Let =referencingScriptOrModule= be
      ! [[https://tc39.es/ecma262/#sec-getactivescriptormodule][GetActiveScriptOrModule]]().
   2. Let =argRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   3. Let =specifier= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=argRef=).
   4. Let =promiseCapability= be
      ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
   5. Let =specifierString= be
      [[https://tc39.es/ecma262/#sec-tostring][ToString]](=specifier=).
   6. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=specifierString=,
      =promiseCapability=).
   7. Perform
      ! [[https://tc39.es/ecma262/#sec-hostimportmoduledynamically][HostImportModuleDynamically]](=referencingScriptOrModule=,
      =specifierString=, =promiseCapability=).
   8. Return =promiseCapability=.[[Promise]].

*** Tagged Templates
    :PROPERTIES:
    :CUSTOM_ID: tagged-templates
    :END:

  Note

  A tagged template is a function call where the arguments of the call are
  derived from a
  [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]
  ([[https://tc39.es/ecma262/#sec-template-literals][12.2.9]]). The actual
  arguments include a template object
  ([[https://tc39.es/ecma262/#sec-gettemplateobject][12.2.9.4]]) and the
  values produced by evaluating the expressions embedded within the
  [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]].

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-13
     :END:

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. Let =tagRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].
   2. Let =tagFunc= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=tagRef=).
   3. Let =thisCall= be this
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].
   4. Let =tailCall= be
      [[https://tc39.es/ecma262/#sec-isintailposition][IsInTailPosition]](=thisCall=).
   5. Return
      ? [[https://tc39.es/ecma262/#sec-evaluatecall][EvaluateCall]](=tagFunc=,
      =tagRef=,
      [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]],
      =tailCall=).

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. Let =tagRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].
   2. Let =tagFunc= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=tagRef=).
   3. Let =thisCall= be this
      [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].
   4. Let =tailCall= be
      [[https://tc39.es/ecma262/#sec-isintailposition][IsInTailPosition]](=thisCall=).
   5. Return
      ? [[https://tc39.es/ecma262/#sec-evaluatecall][EvaluateCall]](=tagFunc=,
      =tagRef=,
      [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]],
      =tailCall=).

*** Meta Properties
    :PROPERTIES:
    :CUSTOM_ID: meta-properties
    :END:

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-14
     :END:

   [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]]:new.target

   1. Return [[https://tc39.es/ecma262/#sec-getnewtarget][GetNewTarget]]().

*** Update Expressions
    :PROPERTIES:
    :CUSTOM_ID: update-expressions
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-24
     :END:

  [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
  ?Await][no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]++
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
  ?Await][no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]--
  ++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  --[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-7
     :END:

   [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]++
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]--

   - It is an early Syntax Error if AssignmentTargetType of
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is not simple.

   [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   --[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

   - It is an early Syntax Error if AssignmentTargetType of
     [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] is
     not simple.

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-3
     :END:

   [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]++
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]--
   ++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   --[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

   1. Return false.

   <<sec-update-expressions-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-4
     :END:

   [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]++
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]--
   ++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   --[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

   1. Return invalid.

**** Postfix Increment Operator
     :PROPERTIES:
     :CUSTOM_ID: postfix-increment-operator
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-15
      :END:

    [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]++

    1. Let =lhs= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].
    2. Let =oldValue= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lhs=)).
    3. Let =newValue= be
       ! [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldvalue=)::add(=oldValue=,
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldValue=)::unit).
    4. Perform ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=,
       =newValue=).
    5. Return =oldValue=.

**** Postfix Decrement Operator
     :PROPERTIES:
     :CUSTOM_ID: postfix-decrement-operator
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-16
      :END:

    [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]--

    1. Let =lhs= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].
    2. Let =oldValue= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lhs=)).
    3. Let =newValue= be
       ! [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldvalue=)::subtract(=oldValue=,
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldValue=)::unit).
    4. Perform ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=,
       =newValue=).
    5. Return =oldValue=.

**** Prefix Increment Operator
     :PROPERTIES:
     :CUSTOM_ID: prefix-increment-operator
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-17
      :END:

    [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =expr= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. Let =oldValue= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=expr=)).
    3. Let =newValue= be
       ! [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldvalue=)::add(=oldValue=,
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldValue=)::unit).
    4. Perform ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=expr=,
       =newValue=).
    5. Return =newValue=.

**** Prefix Decrement Operator
     :PROPERTIES:
     :CUSTOM_ID: prefix-decrement-operator
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-18
      :END:

    [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:--[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =expr= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. Let =oldValue= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=expr=)).
    3. Let =newValue= be
       ! [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldvalue=)::subtract(=oldValue=,
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldValue=)::unit).
    4. Perform ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=expr=,
       =newValue=).
    5. Return =newValue=.

*** Unary Operators
    :PROPERTIES:
    :CUSTOM_ID: unary-operators
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-25
     :END:

  [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]][?Yield,
  ?Await]
  delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  void[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  typeof[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  +[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await] -[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  ~[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  ![[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  [+Await][[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]][?Yield]
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-4
     :END:

   [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   void[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   typeof[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   +[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] -[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   ~[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   ![[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]

   1. Return false.

   <<sec-unary-operators-static-semantics-isvalidsimpleassignmenttarget>>
***** atic Semantics: AssignmentTargetType
      :PROPERTIES:
      :CUSTOM_ID: static-semantics-assignmenttargettype-5
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
    void[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
    typeof[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
    +[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] -[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
    ~[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
    ![[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]

    1. Return invalid.

**** The =delete= Operator
     :PROPERTIES:
     :CUSTOM_ID: the-delete-operator
     :END:

***** Static Semantics: Early Errors
      :PROPERTIES:
      :CUSTOM_ID: static-semantics-early-errors-8
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    - It is a Syntax Error if the
      [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] is
      contained in [[https://tc39.es/ecma262/#sec-strict-mode-code][strict
      mode code]] and the derived
      [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] is
      [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
      .

    - It is a Syntax Error if the derived
      [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
      is\\
      [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]\\
      and
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
      ultimately derives a phrase that, if used in place of
      [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]],
      would produce a Syntax Error according to these rules. This rule is
      recursively applied.

    Note

    The last rule means that expressions such as =delete (((foo)))= produce
    early errors because of recursive application of the first rule.

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-19
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =ref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=ref=).
    3. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=ref=)
       is not
       [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]],
       return true.
    4. If
       [[https://tc39.es/ecma262/#sec-isunresolvablereference][IsUnresolvableReference]](=ref=)
       is true, then

       1. [[https://tc39.es/ecma262/#assert][Assert]]:
          [[https://tc39.es/ecma262/#sec-isstrictreference][IsStrictReference]](=ref=)
          is false.
       2. Return true.

    5. If
       [[https://tc39.es/ecma262/#sec-ispropertyreference][IsPropertyReference]](=ref=)
       is true, then

       1. If
          [[https://tc39.es/ecma262/#sec-issuperreference][IsSuperReference]](=ref=)
          is true, throw a ReferenceError exception.
       2. Let =baseObj= be
          ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]]([[https://tc39.es/ecma262/#sec-getbase][GetBase]](=ref=)).
       3. Let =deleteStatus= be ?
          =baseObj=.[[Delete]]([[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=ref=)).
       4. If =deleteStatus= is false and
          [[https://tc39.es/ecma262/#sec-isstrictreference][IsStrictReference]](=ref=)
          is true, throw a TypeError exception.
       5. Return =deleteStatus=.

    6. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =ref= is a
          [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
          to an
          [[https://tc39.es/ecma262/#sec-environment-records][Environment
          Record]] binding.
       2. Let =bindings= be
          [[https://tc39.es/ecma262/#sec-getbase][GetBase]](=ref=).
       3. Return ?
          =bindings=.DeleteBinding([[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=ref=)).

    Note

    When a =delete= operator occurs within
    [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]], a
    SyntaxError exception is thrown if its
    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] is a
    direct reference to a variable, function argument, or function name. In
    addition, if a =delete= operator occurs within
    [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]] and
    the property to be deleted has the attribute { [[Configurable]]: false
    }, a TypeError exception is thrown.

**** The =void= Operator
     :PROPERTIES:
     :CUSTOM_ID: the-void-operator
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-20
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:void[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =expr= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. Perform
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=expr=).
    3. Return undefined.

    Note

    [[https://tc39.es/ecma262/#sec-getvalue][GetValue]] must be called even
    though its value is not used because it may have observable
    side-effects.

**** The =typeof= Operator
     :PROPERTIES:
     :CUSTOM_ID: the-typeof-operator
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-21
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:typeof[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =val= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=val=)
       is
       [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]],
       then

       1. If
          [[https://tc39.es/ecma262/#sec-isunresolvablereference][IsUnresolvableReference]](=val=)
          is true, return "undefined".

    3. Set =val= to
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=val=).
    4. Return a String according to
       [[https://tc39.es/ecma262/#table-35][Table 37]].

    Table 37: typeof Operator Results
    | Type of =val=                          | Result        |
    |----------------------------------------+---------------|
    | Undefined                              | "undefined"   |
    | Null                                   | "object"      |
    | Boolean                                | "boolean"     |
    | Number                                 | "number"      |
    | String                                 | "string"      |
    | Symbol                                 | "symbol"      |
    | BigInt                                 | "bigint"      |
    | Object (does not implement [[Call]])   | "object"      |
    | Object (implements [[Call]])           | "function"    |

**** Unary =+= Operator
     :PROPERTIES:
     :CUSTOM_ID: unary-operator
     :END:

   Note

   The unary + operator converts its operand to Number type.

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-22
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:+[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =expr= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. Return ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=expr=)).

**** Unary =-= Operator
     :PROPERTIES:
     :CUSTOM_ID: unary---operator
     :END:

   Note

   The unary =-= operator converts its operand to Number type and then
   negates it. Negating +0 produces -0, and negating -0 produces +0.

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-23
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:-[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =expr= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. Let =oldValue= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=expr=)).
    3. Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldValue=).
    4. Return ! =T=::unaryMinus(=oldValue=).

*** Bitwise NOT Operator ( =~= )
    :PROPERTIES:
    :CUSTOM_ID: bitwise-not-operator
    :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-24
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:~[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =expr= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. Let =oldValue= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=expr=)).
    3. Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=oldValue=).
    4. Return ! =T=::bitwiseNOT(=oldValue=).

*** Logical NOT Operator ( =!= )
    :PROPERTIES:
    :CUSTOM_ID: logical-not-operator
    :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-25
      :END:

    [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:![[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

    1. Let =expr= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
    2. Let =oldValue= be
       ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
       [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=expr=)).
    3. If =oldValue= is true, return false.
    4. Return true.

*** Exponentiation Operator
    :PROPERTIES:
    :CUSTOM_ID: exponentiation-operator
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-26
     :END:

  [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]][?Yield,
  ?Await]**[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][?Yield,
  ?Await]
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-5
     :END:

   [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]:[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]**[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]

   1. Return false.

   <<sec-exp-operator-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-6
     :END:

   [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]:[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]**[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-26
     :END:

   [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]:[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]**[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]

   1. Let =left= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]].
   2. Let =leftValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=left=).
   3. Let =right= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]].
   4. Let =rightValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=right=).
   5. Let =base= be
      ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=leftValue=).
   6. Let =exponent= be
      ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rightValue=).
   7. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=base=)
      is different from
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=exponent=),
      throw a TypeError exception.
   8. Return
      ? [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=base=)::exponentiate(=base=,
      =exponent=).

*** Multiplicative Operators
    :PROPERTIES:
    :CUSTOM_ID: multiplicative-operators
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-27
     :END:

  [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]][[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]:one
  of*/%
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-6
     :END:

   [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]:[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]][[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]

   1. Return false.

   <<sec-multiplicative-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-7
     :END:

   [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]:[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]][[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-27
     :END:

   [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]:[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]][[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]

   1.  Let =left= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]].
   2.  Let =leftValue= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=left=).
   3.  Let =right= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]].
   4.  Let =rightValue= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=right=).
   5.  Let =lnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=leftValue=).
   6.  Let =rnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rightValue=).
   7.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=)
       is different from
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rnum=),
       throw a TypeError exception.
   8.  Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=).
   9.  If
       [[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]
       is =*=, return =T=::multiply(=lnum=, =rnum=).
   10. If
       [[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]
       is =/=, return =T=::divide(=lnum=, =rnum=).
   11. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]:
          [[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]
          is =%=.
       2. Return =T=::remainder(=lnum=, =rnum=).

*** Additive Operators
    :PROPERTIES:
    :CUSTOM_ID: additive-operators
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-28
     :END:

  [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
  ?Await]+[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
  ?Await]-[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
  ?Await]
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-7
     :END:

   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]+[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]
   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]-[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]

   1. Return false.

   <<sec-additive-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-8
     :END:

   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]+[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]
   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]-[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]

   1. Return invalid.

**** The Addition Operator ( =+= )
     :PROPERTIES:
     :CUSTOM_ID: the-addition-operator
     :END:

   Note

   The addition operator either performs string concatenation or numeric
   addition.

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-28
      :END:

    [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]+[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]

    1.  Let =lref= be the result of evaluating
        [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]].
    2.  Let =lval= be
        ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
    3.  Let =rref= be the result of evaluating
        [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]].
    4.  Let =rval= be
        ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
    5.  Let =lprim= be
        ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=lval=).
    6.  Let =rprim= be
        ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=rval=).
    7.  If
        [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lprim=)
        is String or
        [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rprim=)
        is String, then

        1. Let =lstr= be
           ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=lprim=).
        2. Let =rstr= be
           ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=rprim=).
        3. Return the
           [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
           of =lstr= and =rstr=.

    8.  Let =lnum= be
        ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=lprim=).
    9.  Let =rnum= be
        ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rprim=).
    10. If
        [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=)
        is different from
        [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rnum=),
        throw a TypeError exception.
    11. Let =T= be
        [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=).
    12. Return =T=::add(=lnum=, =rnum=).

    Note 1

    No hint is provided in the calls to
    [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]] in steps 5 and
    6. All standard objects except Date objects handle the absence of a hint
    as if the hint Number were given; Date objects handle the absence of a
    hint as if the hint String were given. Exotic objects may handle the
    absence of a hint in some other manner.

    Note 2

    Step 7 differs from step 3 of the
    [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
    Relational Comparison]] algorithm, by using the logical-or operation
    instead of the logical-and operation.

**** The Subtraction Operator ( =-= )
     :PROPERTIES:
     :CUSTOM_ID: the-subtraction-operator--
     :END:

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-29
      :END:

    [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]-[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]

    1. Let =lref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]].
    2. Let =lval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
    3. Let =rref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]].
    4. Let =rval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
    5. Let =lnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=lval=).
    6. Let =rnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rval=).
    7. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=)
       is different from
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rnum=),
       throw a TypeError exception.
    8. Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=).
    9. Return =T=::subtract(=lnum=, =rnum=).

*** Bitwise Shift Operators
    :PROPERTIES:
    :CUSTOM_ID: bitwise-shift-operators
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-29
     :END:

  [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]<<[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]>>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
  ?Await]
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-8
     :END:

   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]<<[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]

   1. Return false.

   <<sec-bitwise-shift-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-9
     :END:

   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]<<[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]

   1. Return invalid.

**** The Left Shift Operator ( =<<= )
     :PROPERTIES:
     :CUSTOM_ID: the-left-shift-operator
     :END:

   Note

   Performs a bitwise left shift operation on the left operand by the
   amount specified by the right operand.

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-30
      :END:

    [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]<<[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]

    1. Let =lref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
    2. Let =lval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
    3. Let =rref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]].
    4. Let =rval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
    5. Let =lnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=lval=).
    6. Let =rnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rval=).
    7. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=)
       is different from
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rnum=),
       throw a TypeError exception.
    8. Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=).
    9. Return =T=::leftShift(=lnum=, =rnum=).

**** The Signed Right Shift Operator ( =>>= )
     :PROPERTIES:
     :CUSTOM_ID: the-signed-right-shift-operator
     :END:

   Note

   Performs a sign-filling bitwise right shift operation on the left
   operand by the amount specified by the right operand.

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-31
      :END:

    [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]

    1. Let =lref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
    2. Let =lval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
    3. Let =rref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]].
    4. Let =rval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
    5. Let =lnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=lval=).
    6. Let =rnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rval=).
    7. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=)
       is different from
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rnum=),
       throw a TypeError exception.
    8. Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=).
    9. Return =T=::signedRightShift(=lnum=, =rnum=).

**** The Unsigned Right Shift Operator ( =>>>= )
     :PROPERTIES:
     :CUSTOM_ID: the-unsigned-right-shift-operator
     :END:

   Note

   Performs a zero-filling bitwise right shift operation on the left
   operand by the amount specified by the right operand.

***** Runtime Semantics: Evaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-evaluation-32
      :END:

    [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]

    1. Let =lref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
    2. Let =lval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
    3. Let =rref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]].
    4. Let =rval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
    5. Let =lnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=lval=).
    6. Let =rnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rval=).
    7. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=)
       is different from
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rnum=),
       throw a TypeError exception.
    8. Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=).
    9. Return =T=::unsignedRightShift(=lnum=, =rnum=).

*** Relational Operators
    :PROPERTIES:
    :CUSTOM_ID: relational-operators
    :END:

  Note 1

  The result of evaluating a relational operator is always of type
  Boolean, reflecting whether the relationship named by the operator holds
  between its two operands.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-30
     :END:

  [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield,
  ?Await]<[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield,
  ?Await]>[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield,
  ?Await]<=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield,
  ?Await]>=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield,
  ?Await]instanceof[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await]
  [+In][[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][+In,
  ?Yield,
  ?Await]in[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
  ?Await] Note 2

  The _{[In]} grammar parameter is needed to avoid confusing the =in=
  operator in a relational expression with the =in= operator in a =for=
  statement.

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-9
     :END:

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]instanceof[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]in[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Return false.

   <<sec-relational-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-10
     :END:

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]instanceof[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]in[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-33
     :END:

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Let =r= be the result of performing
      [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
      Relational Comparison]] =lval= < =rval=.
   6. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=r=).
   7. If =r= is undefined, return false. Otherwise, return =r=.

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Let =r= be the result of performing
      [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
      Relational Comparison]] =rval= < =lval= with =LeftFirst= equal to
      false.
   6. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=r=).
   7. If =r= is undefined, return false. Otherwise, return =r=.

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Let =r= be the result of performing
      [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
      Relational Comparison]] =rval= < =lval= with =LeftFirst= equal to
      false.
   6. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=r=).
   7. If =r= is true or undefined, return false. Otherwise, return true.

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Let =r= be the result of performing
      [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
      Relational Comparison]] =lval= < =rval=.
   6. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=r=).
   7. If =r= is true or undefined, return false. Otherwise, return true.

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]instanceof[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Return
      ? [[https://tc39.es/ecma262/#sec-instanceofoperator][InstanceofOperator]](=lval=,
      =rval=).

   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]in[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rval=)
      is not Object, throw a TypeError exception.
   6. Return
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=rval=,
      [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=lval=)).

**** Runtime Semantics: InstanceofOperator ( =V=, =target= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-instanceofoperator-v-target
     :END:

   The abstract operation InstanceofOperator(=V=, =target=) implements the
   generic algorithm for determining if ECMAScript value =V= is an instance
   of object =target= either by consulting =target='s @@hasinstance method
   or, if absent, determining whether the value of =target='s "prototype"
   property is present in =V='s prototype chain. This abstract operation
   performs the following steps:

   1. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
      is not Object, throw a TypeError exception.
   2. Let =instOfHandler= be
      ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=target=,
      @@hasInstance).
   3. If =instOfHandler= is not undefined, then

      1. Return ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
         [[https://tc39.es/ecma262/#sec-call][Call]](=instOfHandler=,
         =target=, « =V= »)).

   4. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=target=)
      is false, throw a TypeError exception.
   5. Return
      ? [[https://tc39.es/ecma262/#sec-ordinaryhasinstance][OrdinaryHasInstance]](=target=,
      =V=).

   Note

   Steps 4 and 5 provide compatibility with previous editions of ECMAScript
   that did not use a @@hasInstance method to define the =instanceof=
   operator semantics. If an object does not define or inherit
   @@hasInstance it uses the default =instanceof= semantics.

*** Equality Operators
    :PROPERTIES:
    :CUSTOM_ID: equality-operators
    :END:

  Note

  The result of evaluating an equality operator is always of type Boolean,
  reflecting whether the relationship named by the operator holds between
  its two operands.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-31
     :END:

  [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
  ?Yield,
  ?Await]==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
  ?Yield,
  ?Await]!=[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
  ?Yield,
  ?Await]===[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
  ?Yield,
  ?Await]!==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
  ?Yield, ?Await]
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-10
     :END:

   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!=[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]===[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]

   1. Return false.

   <<sec-equality-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-11
     :END:

   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!=[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]===[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-34
     :END:

   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Return the result of performing
      [[https://tc39.es/ecma262/#sec-abstract-equality-comparison][Abstract
      Equality Comparison]] =rval= == =lval=.

   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!=[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Let =r= be the result of performing
      [[https://tc39.es/ecma262/#sec-abstract-equality-comparison][Abstract
      Equality Comparison]] =rval= == =lval=.
   6. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=r=).
   7. If =r= is true, return false. Otherwise, return true.

   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]===[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Return the result of performing
      [[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
      Equality Comparison]] =rval= === =lval=.

   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Let =r= be the result of performing
      [[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
      Equality Comparison]] =rval= === =lval=.
   6. [[https://tc39.es/ecma262/#assert][Assert]]: =r= is a normal
      completion.
   7. If =r=.[[Value]] is true, return false. Otherwise, return true.

   Note 1

   Given the above definition of equality:

   - String comparison can be forced by: =`${a}` == `${b}`=.
   - Numeric comparison can be forced by: =+a == +b=.
   - Boolean comparison can be forced by: =!a == !b=.

   Note 2

   The equality operators maintain the following invariants:

   - =A != B= is equivalent to =!(A == B)=.
   - =A == B= is equivalent to =B == A=, except in the order of evaluation
     of =A= and =B=.

   Note 3

   The equality operator is not always transitive. For example, there might
   be two distinct String objects, each representing the same String value;
   each String object would be considered equal to the String value by the
   ==== operator, but the two String objects would not be equal to each
   other. For example:

   - =new String("a") == "a"= and ="a" == new String("a")= are both true.
   - =new String("a") == new String("a")= is false.

   Note 4

   Comparison of Strings uses a simple equality test on sequences of code
   unit values. There is no attempt to use the more complex, semantically
   oriented definitions of character or string equality and collating order
   defined in the Unicode specification. Therefore Strings values that are
   canonically equal according to the Unicode standard could test as
   unequal. In effect this algorithm assumes that both Strings are already
   in normalized form.

*** Binary Bitwise Operators
    :PROPERTIES:
    :CUSTOM_ID: binary-bitwise-operators
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-32
     :END:

  [[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][?In,
  ?Yield,
  ?Await]&[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][?In,
  ?Yield,
  ?Await]^[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][?In,
  ?Yield,
  ?Await]|[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][?In,
  ?Yield, ?Await]
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-11
     :END:

   [[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]&[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]^[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]|[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]

   1. Return false.

   <<sec-binary-bitwise-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-12
     :END:

   [[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]&[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]^[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]|[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-35
     :END:

   The production
   [[https://tc39.es/ecma262/#prod-A][A]]:[[https://tc39.es/ecma262/#prod-A][A]]@B
   , where @ is one of the bitwise operators in the productions above, is
   evaluated as follows:

   1.  Let =lref= be the result of evaluating =A=.
   2.  Let =lval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3.  Let =rref= be the result of evaluating =B=.
   4.  Let =rval= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5.  Let =lnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=lval=).
   6.  Let =rnum= be
       ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=rval=).
   7.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=)
       is different from
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rnum=),
       throw a TypeError exception.
   8.  Let =T= be
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=lnum=).
   9.  If @ is =&=, return =T=::bitwiseAND(=lnum=, =rnum=).
   10. If @ is =|=, return =T=::bitwiseOR(=lnum=, =rnum=).
   11. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: @ is =^=.
       2. Return =T=::bitwiseXOR(=lnum=, =rnum=).

*** Binary Logical Operators
    :PROPERTIES:
    :CUSTOM_ID: binary-logical-operators
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-33
     :END:

  [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][?In,
  ?Yield,
  ?Await]&&[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][?In,
  ?Yield,
  ?Await]||[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][?In,
  ?Yield, ?Await] Note

  The value produced by a =&&= or =||= operator is not necessarily of type
  Boolean. The value produced will always be the value of one of the two
  operand expressions.

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-12
     :END:

   [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]:[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]&&[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]
   [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]||[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]

   1. Return false.

   <<sec-binary-logical-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-13
     :END:

   [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]:[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]&&[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]
   [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]||[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-36
     :END:

   [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]:[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]&&[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =lbool= be
      ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=lval=).
   4. If =lbool= is false, return =lval=.
   5. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]].
   6. Return ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).

   [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]||[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =lbool= be
      ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=lval=).
   4. If =lbool= is true, return =lval=.
   5. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]].
   6. Return ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).

*** Conditional Operator ( =? := )
    :PROPERTIES:
    :CUSTOM_ID: conditional-operator
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-34
     :END:

  [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][?In,
  ?Yield,
  ?Await]?[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
  ?Yield,
  ?Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  ?Yield, ?Await] Note

  The grammar for a
  [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]]
  in ECMAScript is slightly different from that in C and Java, which each
  allow the second subexpression to be an
  [[https://tc39.es/ecma262/#prod-Expression][Expression]] but restrict
  the third expression to be a
  [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]].
  The motivation for this difference in ECMAScript is to allow an
  assignment expression to be governed by either arm of a conditional and
  to eliminate the confusing and fairly useless case of a comma expression
  as the centre expression.

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-13
     :END:

   [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]?[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return false.

   <<sec-conditional-operator-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-14
     :END:

   [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]?[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-37
     :END:

   [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]?[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]].
   2. Let =lval= be
      ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
      [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=)).
   3. If =lval= is true, then

      1. Let =trueRef= be the result of evaluating the first
         [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
      2. Return
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=trueRef=).

   4. Else,

      1. Let =falseRef= be the result of evaluating the second
         [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
      2. Return
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=falseRef=).

*** Assignment Operators
    :PROPERTIES:
    :CUSTOM_ID: assignment-operators
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-35
     :END:

  [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]][?In,
  ?Yield, ?Await]
  [+Yield][[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]][?In,
  ?Await]
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
  ?Await]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]]:one
  of*=/=%=+=-=<<=>>=>>>=&=^=|=**=
**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-9
     :END:

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is either an
     [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] or an
     [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] and
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
     [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]].
   - It is an early Syntax Error if
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is neither an
     [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] nor an
     [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] and
     AssignmentTargetType of
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is not simple.

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   - It is an early Syntax Error if AssignmentTargetType of
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is not simple.

**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-14
     :END:

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]
   [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]

   1. Return true.

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return false.

   <<sec-assignment-operators-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-15
     :END:

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
   [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]
   [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-38
     :END:

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. If
      [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
      is neither an
      [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] nor an
      [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]], then

      1. Let =lref= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].
      2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=lref=).
      3. If
         [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])
         and IsIdentifierRef of
         [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
         are both true, then

         1. Let =rval= be NamedEvaluation of
            [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
            with argument
            [[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=lref=).

      4. Else,

         1. Let =rref= be the result of evaluating
            [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
         2. Let =rval= be
            ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).

      5. Perform
         ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lref=,
         =rval=).
      6. Return =rval=.

   2. Let =assignmentPattern= be the
      [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]]
      that is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]]
      by
      [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Perform ? DestructuringAssignmentEvaluation of =assignmentPattern=
      using =rval= as the argument.
   6. Return =rval=.

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].
   2. Let =lval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   4. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).
   5. Let =op= be the =@= where
      [[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]]
      is =@==.
   6. Let =r= be the result of applying =op= to =lval= and =rval= as if
      evaluating the expression =lval= =op= =rval=.
   7. Perform ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lref=,
      =r=).
   8. Return =r=.

   Note

   When an assignment occurs within
   [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]], it
   is a runtime error if =lref= in step 1.f of the first algorithm or step
   7 of the second algorithm it is an unresolvable reference. If it is, a
   ReferenceError exception is thrown. The
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
   also may not be a reference to a
   [[https://tc39.es/ecma262/#sec-object-type][data property]] with the
   attribute value { [[Writable]]: false }, to an
   [[https://tc39.es/ecma262/#sec-object-type][accessor property]] with the
   attribute value { [[Set]]: undefined }, nor to a non-existent property
   of an object for which the
   [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]] predicate
   returns the value false. In these cases a TypeError exception is thrown.

**** Destructuring Assignment
     :PROPERTIES:
     :CUSTOM_ID: destructuring-assignment
     :END:

***** Supplemental Syntax
      :PROPERTIES:
      :CUSTOM_ID: supplemental-syntax-2
      :END:

   In certain circumstances when processing an instance of the production
   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   the following grammar is used to refine the interpretation of
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].

   [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]][Yield,
   Await]:{}
   {[[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]][?Yield,
   ?Await]}
   {[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][?Yield,
   ?Await]}
   {[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][?Yield,
   ?Await],[[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]][?Yield,
   ?Await]opt}
   [[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]][Yield,
   Await]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]][?Yield,
   ?Await]opt]
   [[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][?Yield,
   ?Await]]
   [[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][?Yield,
   ?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]][?Yield,
   ?Await]opt]
   [[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]][Yield,
   Await]:...[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][?Yield,
   ?Await],[[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][?Yield,
   ?Await],[[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
   ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
   ?Yield, ?Await]opt
   [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
   ?Await]:[[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][?Yield,
   ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
   ?Yield, ?Await]opt
   [[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]][Yield,
   Await]:...[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][?Yield,
   ?Await]
   [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][Yield,
   Await]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
   ?Await]
***** Static Semantics: Early Errors
      :PROPERTIES:
      :CUSTOM_ID: static-semantics-early-errors-10
      :END:

    [[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

    - It is a Syntax Error if AssignmentTargetType of
      [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
      is not simple.

    [[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]]:...[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]

    - It is a Syntax Error if
      [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
      is an [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] or
      an [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]].

    [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]

    - It is a Syntax Error if
      [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
      is either an
      [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] or an
      [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] and if
      [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
      is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
      [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]].
    - It is a Syntax Error if
      [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
      is neither an
      [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] nor an
      [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] and
      AssignmentTargetType of
      [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
      is not simple.

***** Runtime Semantics: DestructuringAssignmentEvaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-destructuringassignmentevaluation
      :END:

    With parameter =value=.

    [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]]:{}

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=value=).
    2. Return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

    [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]]:{[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]]}
    {[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]],}

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=value=).
    2. Perform ? PropertyDestructuringAssignmentEvaluation for
       [[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]]
       using =value= as the argument.
    3. Return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

    [[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]]:[]

    1. Let =iteratorRecord= be
       ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=).
    2. Return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty)).

    [[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]]

    1. Let =iteratorRecord= be
       ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=).
    2. Let =result= be IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-Elision][Elision]] with argument
       =iteratorRecord=.
    3. If =iteratorRecord=.[[Done]] is false, return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       =result=).
    4. Return =result=.

    [[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]]]

    1. Let =iteratorRecord= be
       ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=).
    2. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
       then

       1. Let =status= be IteratorDestructuringAssignmentEvaluation of
          [[https://tc39.es/ecma262/#prod-Elision][Elision]] with argument
          =iteratorRecord=.
       2. If =status= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], then

          1. [[https://tc39.es/ecma262/#assert][Assert]]:
             =iteratorRecord=.[[Done]] is true.
          2. Return
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

    3. Let =result= be IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]]
       with argument =iteratorRecord=.
    4. If =iteratorRecord=.[[Done]] is false, return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       =result=).
    5. Return =result=.

    [[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]]:[[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]]]

    1. Let =iteratorRecord= be
       ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=).
    2. Let =result= be IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]]
       with argument =iteratorRecord=.
    3. If =iteratorRecord=.[[Done]] is false, return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       =result=).
    4. Return =result=.

    [[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]]:[[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]]opt]

    1. Let =iteratorRecord= be
       ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=).
    2. Let =status= be IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]]
       with argument =iteratorRecord=.
    3. If =status= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], then

       1. If =iteratorRecord=.[[Done]] is false, return
          ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
          =status=).
       2. Return
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

    4. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
       then

       1. Set =status= to the result of performing
          IteratorDestructuringAssignmentEvaluation of
          [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
          =iteratorRecord= as the argument.
       2. If =status= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], then

          1. [[https://tc39.es/ecma262/#assert][Assert]]:
             =iteratorRecord=.[[Done]] is true.
          2. Return
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

    5. If
       [[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]]
       is present, then

       1. Set =status= to the result of performing
          IteratorDestructuringAssignmentEvaluation of
          [[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]]
          with =iteratorRecord= as the argument.

    6. If =iteratorRecord=.[[Done]] is false, return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       =status=).
    7. Return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

    [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]]:{[[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]]}

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=value=).
    2. Let =excludedNames= be a new empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    3. Return the result of performing RestDestructuringAssignmentEvaluation
       of
       [[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]]
       with =value= and =excludedNames= as the arguments.

    [[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]]:{[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]],[[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]]}

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=value=).
    2. Let =excludedNames= be ? PropertyDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]]
       with argument =value=.
    3. Return the result of performing RestDestructuringAssignmentEvaluation
       of
       [[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]]
       with arguments =value= and =excludedNames=.

***** Runtime Semantics: PropertyDestructuringAssignmentEvaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-propertydestructuringassignmentevaluation
      :END:

    With parameter =value=.

    Note

    The following operations collect a list of all destructured property
    names.

    [[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]]:[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]],[[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]]

    1. Let =propertyNames= be ? PropertyDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]]
       with argument =value=.
    2. Let =nextNames= be ? PropertyDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]]
       with argument =value=.
    3. Append each item in =nextNames= to the end of =propertyNames=.
    4. Return =propertyNames=.

    [[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

    1. Let =P= be StringValue of
       [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]].
    2. Let =lref= be
       ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=P=).
    3. Let =v= be ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=value=,
       =P=).
    4. If [[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt is
       present and =v= is undefined, then

       1. If
          [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
          is true, then

          1. Set =v= to the result of performing NamedEvaluation for
             [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
             argument =P=.

       2. Else,

          1. Let =defaultValue= be the result of evaluating
             [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
          2. Set =v= to
             ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=defaultValue=).

    5. Perform ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lref=,
       =v=).
    6. Return a new
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       containing =P=.

    [[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]

    1. Let =name= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
    2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=name=).
    3. Perform ? KeyedDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]
       with =value= and =name= as the arguments.
    4. Return a new
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       containing =name=.

***** Runtime Semantics: RestDestructuringAssignmentEvaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-restdestructuringassignmentevaluation
      :END:

    With parameters =value= and =excludedNames=.

    [[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]]:...[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]

    1. Let =lref= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]].
    2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=lref=).
    3. Let =restObj= be
       [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
    4. Perform
       ? [[https://tc39.es/ecma262/#sec-copydataproperties][CopyDataProperties]](=restObj=,
       =value=, =excludedNames=).
    5. Return [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lref=,
       =restObj=).

***** Runtime Semantics: IteratorDestructuringAssignmentEvaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-iteratordestructuringassignmentevaluation
      :END:

    With parameter =iteratorRecord=.

    [[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]]:[[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]]

    1. Return the result of performing
       IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]]
       using =iteratorRecord= as the argument.

    [[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]]:[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]],[[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]]

    1. Perform ? IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]]
       using =iteratorRecord= as the argument.
    2. Return the result of performing
       IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]]
       using =iteratorRecord= as the argument.

    [[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]]:[[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]

    1. Return the result of performing
       IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]
       with =iteratorRecord= as the argument.

    [[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]][[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]

    1. Perform ? IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
       =iteratorRecord= as the argument.
    2. Return the result of performing
       IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]
       with =iteratorRecord= as the argument.

    [[https://tc39.es/ecma262/#prod-Elision][Elision]]:,

    1. If =iteratorRecord=.[[Done]] is false, then

       1. Let =next= be
          [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
       2. If =next= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], set =iteratorRecord=.[[Done]] to true.
       3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
       4. If =next= is false, set =iteratorRecord=.[[Done]] to true.

    2. Return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

    [[https://tc39.es/ecma262/#prod-Elision][Elision]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]],

    1. Perform ? IteratorDestructuringAssignmentEvaluation of
       [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
       =iteratorRecord= as the argument.
    2. If =iteratorRecord=.[[Done]] is false, then

       1. Let =next= be
          [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
       2. If =next= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], set =iteratorRecord=.[[Done]] to true.
       3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
       4. If =next= is false, set =iteratorRecord=.[[Done]] to true.

    3. Return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

    [[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]:[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

    1. If
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
       is neither an
       [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] nor an
       [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]], then

       1. Let =lref= be the result of evaluating
          [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]].
       2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=lref=).

    2. If =iteratorRecord=.[[Done]] is false, then

       1. Let =next= be
          [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
       2. If =next= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], set =iteratorRecord=.[[Done]] to true.
       3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
       4. If =next= is false, set =iteratorRecord=.[[Done]] to true.
       5. Else,

          1. Let =value= be
             [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
          2. If =value= is an
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
             completion]], set =iteratorRecord=.[[Done]] to true.
          3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=value=).

    3. If =iteratorRecord=.[[Done]] is true, let =value= be undefined.
    4. If [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is
       present and =value= is undefined, then

       1. If
          [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
          and IsIdentifierRef of
          [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
          are both true, then

          1. Let =v= be NamedEvaluation of
             [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
             argument
             [[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=lref=).

       2. Else,

          1. Let =defaultValue= be the result of evaluating
             [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
          2. Let =v= be
             ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=defaultValue=).

    5. Else, let =v= be =value=.
    6. If
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
       is an [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
       or an [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]],
       then

       1. Let =nestedAssignmentPattern= be the
          [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]]
          that is
          [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]] by
          [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]].
       2. Return the result of performing DestructuringAssignmentEvaluation
          of =nestedAssignmentPattern= with =v= as the argument.

    7. Return ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lref=,
       =v=).

    Note

    Left to right evaluation order is maintained by evaluating a
    [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
    that is not a destructuring pattern prior to accessing the iterator or
    evaluating the
    [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].

    [[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]]:...[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]

    1. If
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
       is neither an
       [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] nor an
       [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]], then

       1. Let =lref= be the result of evaluating
          [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]].
       2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=lref=).

    2. Let =A= be
       ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
    3. Let =n= be 0.
    4. Repeat, while =iteratorRecord=.[[Done]] is false,

       1. Let =next= be
          [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
       2. If =next= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], set =iteratorRecord=.[[Done]] to true.
       3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
       4. If =next= is false, set =iteratorRecord=.[[Done]] to true.
       5. Else,

          1. Let =nextValue= be
             [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
          2. If =nextValue= is an
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
             completion]], set =iteratorRecord=.[[Done]] to true.
          3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextValue=).
          4. Perform
             ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
             ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
             =nextValue=).
          5. Set =n= to =n= + 1.

    5. If
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
       is neither an
       [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] nor an
       [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]], then

       1. Return
          ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lref=,
          =A=).

    6. Let =nestedAssignmentPattern= be the
       [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]]
       that is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]]
       by
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]].
    7. Return the result of performing DestructuringAssignmentEvaluation of
       =nestedAssignmentPattern= with =A= as the argument.

***** Runtime Semantics: KeyedDestructuringAssignmentEvaluation
      :PROPERTIES:
      :CUSTOM_ID: runtime-semantics-keyeddestructuringassignmentevaluation
      :END:

    With parameters =value= and =propertyName=.

    [[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]]:[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

    1. If
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
       is neither an
       [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] nor an
       [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]], then

       1. Let =lref= be the result of evaluating
          [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]].
       2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=lref=).

    2. Let =v= be ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=value=,
       =propertyName=).
    3. If [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is
       present and =v= is undefined, then

       1. If
          [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
          and IsIdentifierRef of
          [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
          are both true, then

          1. Let =rhsValue= be NamedEvaluation of
             [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
             argument
             [[https://tc39.es/ecma262/#sec-getreferencedname][GetReferencedName]](=lref=).

       2. Else,

          1. Let =defaultValue= be the result of evaluating
             [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
          2. Let =rhsValue= be
             ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=defaultValue=).

    4. Else, let =rhsValue= be =v=.
    5. If
       [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]]
       is an [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
       or an [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]],
       then

       1. Let =assignmentPattern= be the
          [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]]
          that is
          [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]] by
          [[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]].
       2. Return the result of performing DestructuringAssignmentEvaluation
          of =assignmentPattern= with =rhsValue= as the argument.

    6. Return ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lref=,
       =rhsValue=).

*** Comma Operator ( =,= )
    :PROPERTIES:
    :CUSTOM_ID: comma-operator
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-36
     :END:

  [[https://tc39.es/ecma262/#prod-Expression][Expression]][In, Yield,
  Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-Expression][Expression]][?In, ?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
  ?Yield, ?Await]
**** Static Semantics: IsFunctionDefinition
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isfunctiondefinition-15
     :END:

   [[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-Expression][Expression]],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return false.

   <<sec-comma-operator-static-semantics-isvalidsimpleassignmenttarget>>
**** Static Semantics: AssignmentTargetType
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-assignmenttargettype-16
     :END:

   [[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-Expression][Expression]],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return invalid.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-39
     :END:

   [[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-Expression][Expression]],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =lref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   2. Perform
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=lref=).
   3. Let =rref= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
   4. Return ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rref=).

   Note

   [[https://tc39.es/ecma262/#sec-getvalue][GetValue]] must be called even
   though its value is not used because it may have observable
   side-effects.

* ECMAScript Language: Statements and Declarations
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-statements-and-declarations
  :END:

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-37
   :END:

[[https://tc39.es/ecma262/#prod-Statement][Statement]][Yield, Await,
Return]:[[https://tc39.es/ecma262/#prod-BlockStatement][BlockStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]][?Yield,
?Await]
[+Return][[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]
[[https://tc39.es/ecma262/#prod-Declaration][Declaration]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]][?Yield,
?Await, ~Default]
[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]][?Yield,
?Await, ~Default]
[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]][Yield,
Await,
Default]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]][Yield,
Await,
Return]:[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]][?Yield,
?Await, ?Return]
** Statement Semantics
   :PROPERTIES:
   :CUSTOM_ID: statement-semantics
   :END:

*** Static Semantics: ContainsDuplicateLabels
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsduplicatelabels
    :END:

  With parameter =labelSet=.

  [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
  [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]
  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]
  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]

  1. Return false.

*** Static Semantics: ContainsUndefinedBreakTarget
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsundefinedbreaktarget
    :END:

  With parameter =labelSet=.

  [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
  [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]
  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]

  1. Return false.

*** Static Semantics: ContainsUndefinedContinueTarget
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget
    :END:

  With parameters =iterationSet= and =labelSet=.

  [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
  [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]
  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]
  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]]:[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]

  1. Let =newIterationSet= be a copy of =iterationSet= with all the
     elements of =labelSet= appended.
  2. Return ContainsUndefinedContinueTarget of
     [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
     with arguments =newIterationSet= and « ».

*** Static Semantics: DeclarationPart
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-declarationpart
    :END:

  [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

  1. Return
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].

  [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]:[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]

  1. Return
     [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]].

  [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]:[[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]

  1. Return
     [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]].

  [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]:[[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]

  1. Return
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].

  [[https://tc39.es/ecma262/#prod-Declaration][Declaration]]:[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]

  1. Return
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].

  [[https://tc39.es/ecma262/#prod-Declaration][Declaration]]:[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]

  1. Return
     [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames
    :END:

  [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]
  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]
  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations
    :END:

  [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]
  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]
  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]
  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Runtime Semantics: LabelledEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-labelledevaluation
    :END:

  With parameter =labelSet=.

  [[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]]:[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]

  1. Let =stmtResult= be LabelledEvaluation of
     [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
     with argument =labelSet=.
  2. If =stmtResult=.[[Type]] is break, then

     1. If =stmtResult=.[[Target]] is empty, then

        1. If =stmtResult=.[[Value]] is empty, set =stmtResult= to
           [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).
        2. Else, set =stmtResult= to
           [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=stmtResult=.[[Value]]).

  3. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=stmtResult=).

  [[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]]:[[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]

  1. Let =stmtResult= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]].
  2. If =stmtResult=.[[Type]] is break, then

     1. If =stmtResult=.[[Target]] is empty, then

        1. If =stmtResult=.[[Value]] is empty, set =stmtResult= to
           [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).
        2. Else, set =stmtResult= to
           [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=stmtResult=.[[Value]]).

  3. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=stmtResult=).

  Note

  A
  [[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]]
  is one that can be exited via an unlabelled
  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]].

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-40
    :END:

  [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]:[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

  1. Return the result of evaluating
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].

  [[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]]:[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
  [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]

  1. Let =newLabelSet= be a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. Return the result of performing LabelledEvaluation of this
     [[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]]
     with argument =newLabelSet=.

** Block
   :PROPERTIES:
   :CUSTOM_ID: block
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-38
    :END:

 [[https://tc39.es/ecma262/#prod-BlockStatement][BlockStatement]][Yield,
 Await, Return]:[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
 ?Await, ?Return] [[https://tc39.es/ecma262/#prod-Block][Block]][Yield,
 Await,
 Return]:{[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
 ?Await, ?Return]opt}
 [[https://tc39.es/ecma262/#prod-StatementList][StatementList]][Yield,
 Await,
 Return]:[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][?Yield,
 ?Await, ?Return]
 [[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
 ?Await,
 ?Return][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][?Yield,
 ?Await, ?Return]
 [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][Yield,
 Await,
 Return]:[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 [[https://tc39.es/ecma262/#prod-Declaration][Declaration]][?Yield,
 ?Await]
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-11
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]}

  - It is a Syntax Error if the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
    contains any duplicate entries.
  - It is a Syntax Error if any element of the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] also
    occurs in the VarDeclaredNames of
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: ContainsDuplicateLabels
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsduplicatelabels-1
    :END:

  With parameter =labelSet=.

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =hasDuplicates= be ContainsDuplicateLabels of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
     argument =labelSet=.
  2. If =hasDuplicates= is true, return true.
  3. Return ContainsDuplicateLabels of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]
     with argument =labelSet=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return false.

*** Static Semantics: ContainsUndefinedBreakTarget
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-1
    :END:

  With parameter =labelSet=.

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
     argument =labelSet=.
  2. If =hasUndefinedLabels= is true, return true.
  3. Return ContainsUndefinedBreakTarget of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]
     with argument =labelSet=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return false.

*** Static Semantics: ContainsUndefinedContinueTarget
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-1
    :END:

  With parameters =iterationSet= and =labelSet=.

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
     arguments =iterationSet= and « ».
  2. If =hasUndefinedLabels= is true, return true.
  3. Return ContainsUndefinedContinueTarget of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]
     with arguments =iterationSet= and « ».

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return false.

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =names= be LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =names= the elements of the LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. If [[https://tc39.es/ecma262/#prod-Statement][Statement]] is
     [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
     , return LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]].
  2. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations
    :END:

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =declarations= be LexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =declarations= the elements of the
     LexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =declarations=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. If [[https://tc39.es/ecma262/#prod-Statement][Statement]] is
     [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
     , return LexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]].
  2. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing DeclarationPart of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

*** Static Semantics: TopLevelLexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-toplevellexicallydeclarednames
    :END:

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =names= be TopLevelLexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =names= the elements of the TopLevelLexicallyDeclaredNames
     of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. If [[https://tc39.es/ecma262/#prod-Declaration][Declaration]] is
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]]:[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]
     , then

     1. Return « ».

  2. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

  Note

  At the top level of a function, or script, function declarations are
  treated like var declarations rather than like lexical declarations.

*** Static Semantics: TopLevelLexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-toplevellexicallyscopeddeclarations
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =declarations= be TopLevelLexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =declarations= the elements of the
     TopLevelLexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =declarations=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. If [[https://tc39.es/ecma262/#prod-Declaration][Declaration]] is
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]]:[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]
     , then

     1. Return « ».

  2. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

*** Static Semantics: TopLevelVarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-toplevelvardeclarednames
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =names= be TopLevelVarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =names= the elements of the TopLevelVarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. If [[https://tc39.es/ecma262/#prod-Declaration][Declaration]] is
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]]:[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]
     , then

     1. Return the BoundNames of
        [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]].

  2. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. If [[https://tc39.es/ecma262/#prod-Statement][Statement]] is
     [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
     , return TopLevelVarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].
  2. Return VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].

  Note

  At the top level of a function or script, inner function declarations
  are treated like var declarations.

*** Static Semantics: TopLevelVarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-toplevelvarscopeddeclarations
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =declarations= be TopLevelVarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =declarations= the elements of the
     TopLevelVarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =declarations=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. If [[https://tc39.es/ecma262/#prod-Statement][Statement]] is
     [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
     , return TopLevelVarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].
  2. Return VarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. If [[https://tc39.es/ecma262/#prod-Declaration][Declaration]] is
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]]:[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]
     , then

     1. Let =declaration= be DeclarationPart of
        [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]].
     2. Return « =declaration= ».

  2. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-1
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =names= be VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =names= the elements of the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-1
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =declarations= be VarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. Append to =declarations= the elements of the VarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  3. Return =declarations=.

  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-41
    :END:

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-Block][Block]]:{[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]}

  1. Let =oldEnv= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  2. Let =blockEnv= be
     [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=oldEnv=).
  3. Perform
     [[https://tc39.es/ecma262/#sec-blockdeclarationinstantiation][BlockDeclarationInstantiation]]([[https://tc39.es/ecma262/#prod-StatementList][StatementList]],
     =blockEnv=).
  4. Set the [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment to =blockEnv=.
  5. Let =blockValue= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  6. Set the [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment to =oldEnv=.
  7. Return =blockValue=.

  Note 1

  No matter how control leaves the
  [[https://tc39.es/ecma262/#prod-Block][Block]] the LexicalEnvironment is
  always restored to its former state.

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =sl= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=sl=).
  3. Let =s= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].
  4. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=s=,
     =sl=)).

  Note 2

  The value of a
  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] is the
  value of the last value-producing item in the
  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]. For
  example, the following calls to the =eval= function all return the value
  1:

  #+BEGIN_EXAMPLE
    eval("1;;;;;")
    eval("1;{}")
    eval("1;var a;")
  #+END_EXAMPLE

*** Runtime Semantics: BlockDeclarationInstantiation ( =code=,
  =env= )
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-blockdeclarationinstantiation-code-env
    :END:

  Note

  When a [[https://tc39.es/ecma262/#prod-Block][Block]] or
  [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] is evaluated a
  new declarative
  [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
  is created and bindings for each block scoped variable, constant,
  function, or class declared in the block are instantiated in the
  [[https://tc39.es/ecma262/#sec-environment-records][Environment
  Record]].

  BlockDeclarationInstantiation is performed as follows using arguments
  =code= and =env=. =code= is the
  [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]
  corresponding to the body of the block. =env= is the
  [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
  Environment]] in which bindings are to be created.

  1. Let =envRec= be =env='s
     [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= is a
     declarative
     [[https://tc39.es/ecma262/#sec-environment-records][Environment
     Record]].
  3. Let =declarations= be the LexicallyScopedDeclarations of =code=.
  4. For each element =d= in =declarations=, do

     1. For each element =dn= of the BoundNames of =d=, do

        1. If IsConstantDeclaration of =d= is true, then

           1. Perform ! =envRec=.CreateImmutableBinding(=dn=, true).

        2. Else,

           1. Perform ! =envRec=.CreateMutableBinding(=dn=, false).

     2. If =d= is a
        [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
        a
        [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
        an
        [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
        or an
        [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
        then

        1. Let =fn= be the sole element of the BoundNames of =d=.
        2. Let =fo= be InstantiateFunctionObject of =d= with argument
           =env=.
        3. Perform =envRec=.InitializeBinding(=fn=, =fo=).

** Declarations and the Variable Statement
   :PROPERTIES:
   :CUSTOM_ID: declarations-and-the-variable-statement
   :END:

*** Let and Const Declarations
    :PROPERTIES:
    :CUSTOM_ID: let-and-const-declarations
    :END:

  Note

  =let= and =const= declarations define variables that are scoped to the
  [[https://tc39.es/ecma262/#running-execution-context][running execution
  context]]'s LexicalEnvironment. The variables are created when their
  containing [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
  Environment]] is instantiated but may not be accessed in any way until
  the variable's
  [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] is
  evaluated. A variable defined by a
  [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] with an
  [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is assigned
  the value of its
  [[https://tc39.es/ecma262/#prod-Initializer][Initializer]]'s
  [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
  when the
  [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] is
  evaluated, not when the variable is created. If a
  [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] in a
  =let= declaration does not have an
  [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] the variable
  is assigned the value undefined when the
  [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] is
  evaluated.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-39
     :END:

  [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-BindingList][BindingList]][?In,
  ?Yield, ?Await];
  [[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]]:let const
  [[https://tc39.es/ecma262/#prod-BindingList][BindingList]][In, Yield,
  Await]:[[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-BindingList][BindingList]][?In, ?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
  ?Yield, ?Await]opt
  [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
  ?Yield, ?Await]
**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-12
     :END:

   [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-BindingList][BindingList]];

   - It is a Syntax Error if the BoundNames of
     [[https://tc39.es/ecma262/#prod-BindingList][BindingList]] contains
     "let".
   - It is a Syntax Error if the BoundNames of
     [[https://tc39.es/ecma262/#prod-BindingList][BindingList]] contains
     any duplicate entries.

   [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is not
     present and IsConstantDeclaration of the
     [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]
     containing this
     [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] is
     true.

**** Static Semantics: BoundNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-boundnames-1
     :END:

   [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-BindingList][BindingList]];

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingList][BindingList]].

   [[https://tc39.es/ecma262/#prod-BindingList][BindingList]]:[[https://tc39.es/ecma262/#prod-BindingList][BindingList]],[[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]

   1. Let =names= be the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingList][BindingList]].
   2. Append to =names= the elements of the BoundNames of
      [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

   [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]].

**** Static Semantics: IsConstantDeclaration
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isconstantdeclaration
     :END:

   [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-BindingList][BindingList]];

   1. Return IsConstantDeclaration of
      [[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]].

   [[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]]:let

   1. Return false.

   [[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]]:const

   1. Return true.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-42
     :END:

   [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-BindingList][BindingList]];

   1. Let =next= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-BindingList][BindingList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
   3. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-BindingList][BindingList]]:[[https://tc39.es/ecma262/#prod-BindingList][BindingList]],[[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]

   1. Let =next= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-BindingList][BindingList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
   3. Return the result of evaluating
      [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]].

   [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Let =lhs= be
      [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](StringValue
      of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]).
   2. Return
      [[https://tc39.es/ecma262/#sec-initializereferencedbinding][InitializeReferencedBinding]](=lhs=,
      undefined).

   Note

   A [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
   semantics]] rule ensures that this form of
   [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] never
   occurs in a =const= declaration.

   [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Let =bindingId= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
   2. Let =lhs= be
      [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=bindingId=).
   3. If
      [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
      is true, then

      1. Let =value= be NamedEvaluation of
         [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
         argument =bindingId=.

   4. Else,

      1. Let =rhs= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
      2. Let =value= be
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rhs=).

   5. Return
      [[https://tc39.es/ecma262/#sec-initializereferencedbinding][InitializeReferencedBinding]](=lhs=,
      =value=).

   [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Let =rhs= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
   2. Let =value= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rhs=).
   3. Let =env= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
   4. Return the result of performing BindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]
      using =value= and =env= as the arguments.

*** Variable Statement
    :PROPERTIES:
    :CUSTOM_ID: variable-statement
    :END:

  Note

  A =var= statement declares variables that are scoped to the
  [[https://tc39.es/ecma262/#running-execution-context][running execution
  context]]'s VariableEnvironment. Var variables are created when their
  containing [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical
  Environment]] is instantiated and are initialized to undefined when
  created. Within the scope of any VariableEnvironment a common
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  may appear in more than one
  [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
  but those declarations collectively define only one variable. A variable
  defined by a
  [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
  with an [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is
  assigned the value of its
  [[https://tc39.es/ecma262/#prod-Initializer][Initializer]]'s
  [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
  when the
  [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
  is executed, not when the variable is created.

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-40
     :END:

  [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]][Yield,
  Await]:var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][+In,
  ?Yield, ?Await];
  [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][?In,
  ?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]][?In,
  ?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]][In,
  Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
  ?Yield, ?Await]opt
  [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
  ?Yield, ?Await]
**** Static Semantics: BoundNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-boundnames-2
     :END:

   [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]]:[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]],[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]

   1. Let =names= be BoundNames of
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].
   2. Append to =names= the elements of BoundNames of
      [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

   [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]].

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-2
     :END:

   [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]:var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];

   1. Return BoundNames of
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-2
     :END:

   [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]]:[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]

   1. Return a new
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing
      [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]].

   [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]]:[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]],[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]

   1. Let =declarations= be VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].
   2. Append
      [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
      to =declarations=.
   3. Return =declarations=.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-43
     :END:

   [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]:var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];

   1. Let =next= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
   3. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]]:[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]],[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]

   1. Let =next= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
   3. Return the result of evaluating
      [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]].

   [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Let =bindingId= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
   2. Let =lhs= be
      ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=bindingId=).
   3. If
      [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
      is true, then

      1. Let =value= be NamedEvaluation of
         [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
         argument =bindingId=.

   4. Else,

      1. Let =rhs= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
      2. Let =value= be
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rhs=).

   5. Return ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=,
      =value=).

   Note

   If a
   [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
   is nested within a with statement and the
   [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
   in the
   [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
   is the same as a [[https://tc39.es/ecma262/#property-name][property
   name]] of the binding object of the with statement's object
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]], then step 6 will assign =value= to the property instead of
   assigning to the VariableEnvironment binding of the
   [[https://tc39.es/ecma262/#prod-Identifier][Identifier]].

   [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Let =rhs= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
   2. Let =rval= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rhs=).
   3. Return the result of performing BindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]
      passing =rval= and undefined as arguments.

*** Destructuring Binding Patterns
    :PROPERTIES:
    :CUSTOM_ID: destructuring-binding-patterns
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-41
     :END:

  [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]][Yield,
  Await]:{}
  {[[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]][?Yield,
  ?Await]}
  {[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][?Yield,
  ?Await]}
  {[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]][?Yield,
  ?Await]opt}
  [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]][Yield,
  Await]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][?Yield,
  ?Await]opt]
  [[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][?Yield,
  ?Await]]
  [[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][?Yield,
  ?Await]opt]
  [[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]][Yield,
  Await]:...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][?Yield,
  ?Await],[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
  ?Await]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
  ?Yield, ?Await]opt
  [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
  ?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
  ?Yield, ?Await]opt
  [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][Yield,
  Await]:...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
  ?Await]
  ...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
  ?Await]
**** Static Semantics: BoundNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-boundnames-3
     :END:

   [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]:{}

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]]

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]].

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]].

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]]

   1. Let =names= be BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]].
   2. Append to =names= the elements of BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]]:[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]],[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]

   1. Let =names= be BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]].
   2. Append to =names= the elements of BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]:[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]

   1. Let =names= be BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]].
   2. Append to =names= the elements of BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

   1. Return BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]].

   [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]].

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]].

**** Static Semantics: ContainsExpression
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsexpression
     :END:

   [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]:{}

   1. Return false.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]]

   1. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]].

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]

   1. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]].

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]]

   1. Let =has= be ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]].
   2. If =has= is true, return true.
   3. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]].

   [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]]:[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]],[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]

   1. Let =has= be ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]].
   2. If =has= is true, return true.
   3. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]].

   [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]:[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]

   1. Let =has= be ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]].
   2. If =has= is true, return true.
   3. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]].

   [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

   1. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]].

   [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

   1. Let =has= be IsComputedPropertyKey of
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
   2. If =has= is true, return true.
   3. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]].

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return true.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return true.

   [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]:...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]:...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]

   1. Return ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]].

**** Static Semantics: HasInitializer
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-hasinitializer
     :END:

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return true.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return true.

**** Static Semantics: IsSimpleParameterList
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-issimpleparameterlist
     :END:

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Return true.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]

   1. Return false.

**** Runtime Semantics: BindingInitialization
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-bindinginitialization-1
     :END:

   With parameters =value= and =environment=.

   Note

   When undefined is passed for =environment= it indicates that a
   [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
   used to assign the initialization value. This is the case for formal
   parameter lists of non-strict functions. In that case the formal
   parameter bindings are preinitialized in order to deal with the
   possibility of multiple parameters with the same name.

   [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]:[[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]

   1. Perform
      ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=value=).
   2. Return the result of performing BindingInitialization for
      [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]
      using =value= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]:[[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]

   1. Let =iteratorRecord= be
      ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=).
   2. Let =result= be IteratorBindingInitialization of
      [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]
      with arguments =iteratorRecord= and =environment=.
   3. If =iteratorRecord=.[[Done]] is false, return
      ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
      =result=).
   4. Return =result=.

   [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]:{}

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]:{[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]]}
   {[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]],}

   1. Perform ? PropertyBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]]
      using =value= and =environment= as the arguments.
   2. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]:{[[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]]}

   1. Let =excludedNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Return the result of performing RestBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]]
      with =value=, =environment=, and =excludedNames= as the arguments.

   [[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]]:{[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]],[[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]]}

   1. Let =excludedNames= be ? PropertyBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]]
      with arguments =value= and =environment=.
   2. Return the result of performing RestBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]]
      with arguments =value=, =environment=, and =excludedNames=.

**** Runtime Semantics: PropertyBindingInitialization
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-propertybindinginitialization
     :END:

   With parameters =value= and =environment=.

   Note

   These collect a list of all bound property names rather than just empty
   completion.

   [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]]:[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]],[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]

   1. Let =boundNames= be ? PropertyBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]]
      with arguments =value= and =environment=.
   2. Let =nextNames= be ? PropertyBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]
      with arguments =value= and =environment=.
   3. Append each item in =nextNames= to the end of =boundNames=.
   4. Return =boundNames=.

   [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]:[[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]

   1. Let =name= be the string that is the only element of BoundNames of
      [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]].
   2. Perform ? KeyedBindingInitialization for
      [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]
      using =value=, =environment=, and =name= as the arguments.
   3. Return a new
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing =name=.

   [[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

   1. Let =P= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=P=).
   3. Perform ? KeyedBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]] with
      =value=, =environment=, and =P= as the arguments.
   4. Return a new
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing =P=.

**** Runtime Semantics: RestBindingInitialization
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-restbindinginitialization
     :END:

   With parameters =value=, =environment=, and =excludedNames=.

   [[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]]:...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Let =lhs= be
      ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](StringValue
      of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]],
      =environment=).
   2. Let =restObj= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
   3. Perform
      ? [[https://tc39.es/ecma262/#sec-copydataproperties][CopyDataProperties]](=restObj=,
      =value=, =excludedNames=).
   4. If =environment= is undefined, return
      [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=,
      =restObj=).
   5. Return
      [[https://tc39.es/ecma262/#sec-initializereferencedbinding][InitializeReferencedBinding]](=lhs=,
      =restObj=).

**** Runtime Semantics: IteratorBindingInitialization
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-iteratorbindinginitialization
     :END:

   With parameters =iteratorRecord= and =environment=.

   Note

   When undefined is passed for =environment= it indicates that a
   [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
   used to assign the initialization value. This is the case for formal
   parameter lists of non-strict functions. In that case the formal
   parameter bindings are preinitialized in order to deal with the
   possibility of multiple parameters with the same name.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[]

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]]

   1. Return the result of performing
      IteratorDestructuringAssignmentEvaluation of
      [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
      =iteratorRecord= as the argument.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]]

   1. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Perform ? IteratorDestructuringAssignmentEvaluation of
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
         =iteratorRecord= as the argument.

   2. Return the result of performing IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      with =iteratorRecord= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]]

   1. Return the result of performing IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]
      with =iteratorRecord= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],]

   1. Return the result of performing IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]
      with =iteratorRecord= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]]

   1. Perform ? IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]
      with =iteratorRecord= and =environment= as arguments.
   2. Return the result of performing
      IteratorDestructuringAssignmentEvaluation of
      [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
      =iteratorRecord= as the argument.

   [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]]:[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]]

   1. Perform ? IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]
      with =iteratorRecord= and =environment= as arguments.
   2. If [[https://tc39.es/ecma262/#prod-Elision][Elision]] is present,
      then

      1. Perform ? IteratorDestructuringAssignmentEvaluation of
         [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
         =iteratorRecord= as the argument.

   3. Return the result of performing IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      with =iteratorRecord= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]:[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]

   1. Return the result of performing IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]
      with =iteratorRecord= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]:[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]],[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]

   1. Perform ? IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]]
      with =iteratorRecord= and =environment= as arguments.
   2. Return the result of performing IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]
      using =iteratorRecord= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

   1. Return the result of performing IteratorBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]] with
      =iteratorRecord= and =environment= as the arguments.

   [[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]]:[[https://tc39.es/ecma262/#prod-Elision][Elision]][[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

   1. Perform ? IteratorDestructuringAssignmentEvaluation of
      [[https://tc39.es/ecma262/#prod-Elision][Elision]] with
      =iteratorRecord= as the argument.
   2. Return the result of performing IteratorBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]] with
      =iteratorRecord= and =environment= as the arguments.

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]

   1. Return the result of performing IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]
      with =iteratorRecord= and =environment= as the arguments.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. Let =bindingId= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
   2. Let =lhs= be
      ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=bindingId=,
      =environment=).
   3. If =iteratorRecord=.[[Done]] is false, then

      1. Let =next= be
         [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
      2. If =next= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], set =iteratorRecord=.[[Done]] to true.
      3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
      4. If =next= is false, set =iteratorRecord=.[[Done]] to true.
      5. Else,

         1. Let =v= be
            [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
         2. If =v= is an
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
            completion]], set =iteratorRecord=.[[Done]] to true.
         3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=v=).

   4. If =iteratorRecord=.[[Done]] is true, let =v= be undefined.
   5. If [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is
      present and =v= is undefined, then

      1. If
         [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
         is true, then

         1. Set =v= to the result of performing NamedEvaluation for
            [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
            argument =bindingId=.

      2. Else,

         1. Let =defaultValue= be the result of evaluating
            [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
         2. Set =v= to
            ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=defaultValue=).

   6. If =environment= is undefined, return
      ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=, =v=).
   7. Return
      [[https://tc39.es/ecma262/#sec-initializereferencedbinding][InitializeReferencedBinding]](=lhs=,
      =v=).

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. If =iteratorRecord=.[[Done]] is false, then

      1. Let =next= be
         [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
      2. If =next= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], set =iteratorRecord=.[[Done]] to true.
      3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
      4. If =next= is false, set =iteratorRecord=.[[Done]] to true.
      5. Else,

         1. Let =v= be
            [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
         2. If =v= is an
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
            completion]], set =iteratorRecord=.[[Done]] to true.
         3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=v=).

   2. If =iteratorRecord=.[[Done]] is true, let =v= be undefined.
   3. If [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is
      present and =v= is undefined, then

      1. Let =defaultValue= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
      2. Set =v= to
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=defaultValue=).

   4. Return the result of performing BindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]] with
      =v= and =environment= as the arguments.

   [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]:...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Let =lhs= be
      ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](StringValue
      of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]],
      =environment=).
   2. Let =A= be
      ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
   3. Let =n= be 0.
   4. Repeat,

      1. If =iteratorRecord=.[[Done]] is false, then

         1. Let =next= be
            [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
         2. If =next= is an
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
            completion]], set =iteratorRecord=.[[Done]] to true.
         3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
         4. If =next= is false, set =iteratorRecord=.[[Done]] to true.

      2. If =iteratorRecord=.[[Done]] is true, then

         1. If =environment= is undefined, return
            ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=,
            =A=).
         2. Return
            [[https://tc39.es/ecma262/#sec-initializereferencedbinding][InitializeReferencedBinding]](=lhs=,
            =A=).

      3. Let =nextValue= be
         [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
      4. If =nextValue= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], set =iteratorRecord=.[[Done]] to true.
      5. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextValue=).
      6. Perform
         ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
         =nextValue=).
      7. Set =n= to =n= + 1.

   [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]:...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]

   1. Let =A= be
      ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
   2. Let =n= be 0.
   3. Repeat,

      1. If =iteratorRecord=.[[Done]] is false, then

         1. Let =next= be
            [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
         2. If =next= is an
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
            completion]], set =iteratorRecord=.[[Done]] to true.
         3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
         4. If =next= is false, set =iteratorRecord=.[[Done]] to true.

      2. If =iteratorRecord=.[[Done]] is true, then

         1. Return the result of performing BindingInitialization of
            [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]
            with =A= and =environment= as the arguments.

      3. Let =nextValue= be
         [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
      4. If =nextValue= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], set =iteratorRecord=.[[Done]] to true.
      5. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextValue=).
      6. Perform
         ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
         =nextValue=).
      7. Set =n= to =n= + 1.

**** Runtime Semantics: KeyedBindingInitialization
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-keyedbindinginitialization
     :END:

   With parameters =value=, =environment=, and =propertyName=.

   Note

   When undefined is passed for =environment= it indicates that a
   [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
   used to assign the initialization value. This is the case for formal
   parameter lists of non-strict functions. In that case the formal
   parameter bindings are preinitialized in order to deal with the
   possibility of multiple parameters with the same name.

   [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. Let =v= be ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=value=,
      =propertyName=).
   2. If [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is
      present and =v= is undefined, then

      1. Let =defaultValue= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
      2. Set =v= to
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=defaultValue=).

   3. Return the result of performing BindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]
      passing =v= and =environment= as arguments.

   [[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]opt

   1. Let =bindingId= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
   2. Let =lhs= be
      ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=bindingId=,
      =environment=).
   3. Let =v= be ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=value=,
      =propertyName=).
   4. If [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] is
      present and =v= is undefined, then

      1. If
         [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
         is true, then

         1. Set =v= to the result of performing NamedEvaluation for
            [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
            argument =bindingId=.

      2. Else,

         1. Let =defaultValue= be the result of evaluating
            [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
         2. Set =v= to
            ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=defaultValue=).

   5. If =environment= is undefined, return
      ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=, =v=).
   6. Return
      [[https://tc39.es/ecma262/#sec-initializereferencedbinding][InitializeReferencedBinding]](=lhs=,
      =v=).

** Empty Statement
   :PROPERTIES:
   :CUSTOM_ID: empty-statement
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-42
    :END:

 [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]:;
*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-44
    :END:

  [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]:;

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

** Expression Statement
   :PROPERTIES:
   :CUSTOM_ID: expression-statement
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-43
    :END:

 [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]][Yield,
 Await]:[lookahead ∉ { {, function, async [no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]
 function, class, let [
 }][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
 ?Await]; Note

 An
 [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
 cannot start with a U+007B (LEFT CURLY BRACKET) because that might make
 it ambiguous with a [[https://tc39.es/ecma262/#prod-Block][Block]]. An
 [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
 cannot start with the =function= or =class= keywords because that would
 make it ambiguous with a
 [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
 a
 [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
 or a
 [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]. An
 [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
 cannot start with =async function= because that would make it ambiguous
 with an
 [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]
 or a
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
 An
 [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
 cannot start with the two token sequence =let [= because that would make
 it ambiguous with a =let=
 [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]
 whose first
 [[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]] was an
 [[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]].

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-45
    :END:

  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]:[[https://tc39.es/ecma262/#prod-Expression][Expression]];

  1. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-Expression][Expression]].
  2. Return
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).

** The =if= Statement
   :PROPERTIES:
   :CUSTOM_ID: the-if-statement
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-44
    :END:

 [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]][Yield, Await,
 Return]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await,
 ?Return]else[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 Each =else= for which the choice of associated =if= is ambiguous shall
 be associated with the nearest possible =if= that would otherwise have
 no corresponding =else=.

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-13
    :END:

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#sec-islabelledfunction][IsLabelledFunction]]([[https://tc39.es/ecma262/#prod-Statement][Statement]])
    is true.

  Note

  It is only necessary to apply this rule if the extension specified in
  [[https://tc39.es/ecma262/#sec-labelled-function-declarations][B.3.2]]
  is implemented.

*** Static Semantics: ContainsDuplicateLabels
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsduplicatelabels-2
    :END:

  With parameter =labelSet=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =hasDuplicate= be ContainsDuplicateLabels of the first
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =labelSet=.
  2. If =hasDuplicate= is true, return true.
  3. Return ContainsDuplicateLabels of the second
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =labelSet=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return ContainsDuplicateLabels of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =labelSet=.

*** Static Semantics: ContainsUndefinedBreakTarget
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-2
    :END:

  With parameter =labelSet=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of the first
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =labelSet=.
  2. If =hasUndefinedLabels= is true, return true.
  3. Return ContainsUndefinedBreakTarget of the second
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =labelSet=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return ContainsUndefinedBreakTarget of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =labelSet=.

*** Static Semantics: ContainsUndefinedContinueTarget
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-2
    :END:

  With parameters =iterationSet= and =labelSet=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of the
     first [[https://tc39.es/ecma262/#prod-Statement][Statement]] with
     arguments =iterationSet= and « ».
  2. If =hasUndefinedLabels= is true, return true.
  3. Return ContainsUndefinedContinueTarget of the second
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
     =iterationSet= and « ».

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return ContainsUndefinedContinueTarget of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
     =iterationSet= and « ».

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-3
    :END:

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =names= be VarDeclaredNames of the first
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].
  2. Append to =names= the elements of the VarDeclaredNames of the second
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-3
    :END:

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =declarations= be VarScopedDeclarations of the first
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].
  2. Append to =declarations= the elements of the VarScopedDeclarations of
     the second [[https://tc39.es/ecma262/#prod-Statement][Statement]].
  3. Return =declarations=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return the VarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-46
    :END:

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-Expression][Expression]].
  2. Let =exprValue= be
     ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
     [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=)).
  3. If =exprValue= is true, then

     1. Let =stmtCompletion= be the result of evaluating the first
        [[https://tc39.es/ecma262/#prod-Statement][Statement]].

  4. Else,

     1. Let =stmtCompletion= be the result of evaluating the second
        [[https://tc39.es/ecma262/#prod-Statement][Statement]].

  5. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=stmtCompletion=,
     undefined)).

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-Expression][Expression]].
  2. Let =exprValue= be
     ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
     [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=)).
  3. If =exprValue= is false, then

     1. Return
        [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

  4. Else,

     1. Let =stmtCompletion= be the result of evaluating
        [[https://tc39.es/ecma262/#prod-Statement][Statement]].
     2. Return
        [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=stmtCompletion=,
        undefined)).

** Iteration Statements
   :PROPERTIES:
   :CUSTOM_ID: iteration-statements
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-45
    :END:

 [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]][Yield,
 Await,
 Return]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await,
 ?Return]while([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield, ?Await]);
 while([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return] for([lookahead ≠ let
 [][[https://tc39.es/ecma262/#prod-Expression][Expression]][~In, ?Yield,
 ?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][~In,
 ?Yield,
 ?Await];[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][~In,
 ?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return] for([lookahead ≠ let
 [][[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
 ?Await]in[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
 ?Await]in[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][?Yield,
 ?Await]in[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return] for([lookahead ≠
 let][[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
 ?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
 ?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][?Yield,
 ?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return] [+Await]forawait([lookahead ≠
 let][[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
 ?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 [+Await]forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
 ?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 [+Await]forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][?Yield,
 ?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ?Yield,
 ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
 ?Await, ?Return]
 [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
 ?Await] Note

 This section is extended by Annex
 [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

*** Semantics
    :PROPERTIES:
    :CUSTOM_ID: semantics-1
    :END:

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-14
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);
   while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#sec-islabelledfunction][IsLabelledFunction]]([[https://tc39.es/ecma262/#prod-Statement][Statement]])
     is true.

   Note

   It is only necessary to apply this rule if the extension specified in
   [[https://tc39.es/ecma262/#sec-labelled-function-declarations][B.3.2]]
   is implemented.

**** Runtime Semantics: LoopContinues ( =completion=, =labelSet= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-loopcontinues-completion-labelset
     :END:

   The abstract operation LoopContinues with arguments =completion= and
   =labelSet= is defined by the following steps:

   1. If =completion=.[[Type]] is normal, return true.
   2. If =completion=.[[Type]] is not continue, return false.
   3. If =completion=.[[Target]] is empty, return true.
   4. If =completion=.[[Target]] is an element of =labelSet=, return true.
   5. Return false.

   Note

   Within the [[https://tc39.es/ecma262/#prod-Statement][Statement]] part
   of an
   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
   a [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
   may be used to begin a new iteration.

*** The =do=-=while= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-do-while-statement
    :END:

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-3
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);

   1. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-3
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);

   1. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-3
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);

   1. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
      =iterationSet= and « ».

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-4
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-4
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Runtime Semantics: LabelledEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-labelledevaluation-1
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);

   1. Let =V= be undefined.
   2. Repeat,

      1. Let =stmtResult= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Statement][Statement]].
      2. If
         [[https://tc39.es/ecma262/#sec-loopcontinues][LoopContinues]](=stmtResult=,
         =labelSet=) is false, return
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=stmtResult=,
         =V=)).
      3. If =stmtResult=.[[Value]] is not empty, set =V= to
         =stmtResult=.[[Value]].
      4. Let =exprRef= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Expression][Expression]].
      5. Let =exprValue= be
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
      6. If
         ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=exprValue=)
         is false, return
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=V=).

*** The =while= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-while-statement
    :END:

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-4
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-4
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-4
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
      =iterationSet= and « ».

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-5
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-5
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Runtime Semantics: LabelledEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-labelledevaluation-2
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =V= be undefined.
   2. Repeat,

      1. Let =exprRef= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Expression][Expression]].
      2. Let =exprValue= be
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
      3. If
         ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=exprValue=)
         is false, return
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=V=).
      4. Let =stmtResult= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-Statement][Statement]].
      5. If
         [[https://tc39.es/ecma262/#sec-loopcontinues][LoopContinues]](=stmtResult=,
         =labelSet=) is false, return
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=stmtResult=,
         =V=)).
      6. If =stmtResult=.[[Value]] is not empty, set =V= to
         =stmtResult=.[[Value]].

*** The =for= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-for-statement
    :END:

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-15
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   - It is a Syntax Error if any element of the BoundNames of
     [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]]
     also occurs in the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-5
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-5
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-5
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
      =iterationSet= and « ».

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-6
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =names= be BoundNames of
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-6
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =declarations= be VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   3. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Runtime Semantics: LabelledEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-labelledevaluation-3
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. If the first [[https://tc39.es/ecma262/#prod-Expression][Expression]]
      is present, then

      1. Let =exprRef= be the result of evaluating the first
         [[https://tc39.es/ecma262/#prod-Expression][Expression]].
      2. Perform
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).

   2. Return
      ? [[https://tc39.es/ecma262/#sec-forbodyevaluation][ForBodyEvaluation]](the
      second [[https://tc39.es/ecma262/#prod-Expression][Expression]], the
      third [[https://tc39.es/ecma262/#prod-Expression][Expression]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], « »,
      =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =varDcl= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=varDcl=).
   3. Return
      ? [[https://tc39.es/ecma262/#sec-forbodyevaluation][ForBodyEvaluation]](the
      first [[https://tc39.es/ecma262/#prod-Expression][Expression]], the
      second [[https://tc39.es/ecma262/#prod-Expression][Expression]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], « »,
      =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1.  Let =oldEnv= be the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]]'s LexicalEnvironment.
   2.  Let =loopEnv= be
       [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=oldEnv=).
   3.  Let =loopEnvRec= be =loopEnv='s
       [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
   4.  Let =isConst= be IsConstantDeclaration of
       [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]].
   5.  Let =boundNames= be the BoundNames of
       [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]].
   6.  For each element =dn= of =boundNames=, do

       1. If =isConst= is true, then

          1. Perform ! =loopEnvRec=.CreateImmutableBinding(=dn=, true).

       2. Else,

          1. Perform ! =loopEnvRec=.CreateMutableBinding(=dn=, false).

   7.  Set the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]]'s LexicalEnvironment to =loopEnv=.
   8.  Let =forDcl= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]].
   9.  If =forDcl= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], then

       1. Set the
          [[https://tc39.es/ecma262/#running-execution-context][running
          execution context]]'s LexicalEnvironment to =oldEnv=.
       2. Return
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=forDcl=).

   10. If =isConst= is false, let =perIterationLets= be =boundNames=;
       otherwise let =perIterationLets= be « ».
   11. Let =bodyResult= be
       [[https://tc39.es/ecma262/#sec-forbodyevaluation][ForBodyEvaluation]](the
       first [[https://tc39.es/ecma262/#prod-Expression][Expression]], the
       second [[https://tc39.es/ecma262/#prod-Expression][Expression]],
       [[https://tc39.es/ecma262/#prod-Statement][Statement]],
       =perIterationLets=, =labelSet=).
   12. Set the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]]'s LexicalEnvironment to =oldEnv=.
   13. Return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=bodyResult=).

**** Runtime Semantics: ForBodyEvaluation ( =test=, =increment=,
   =stmt=, =perIterationBindings=, =labelSet= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-forbodyevaluation-test-increment-stmt-periterationbindings-labelset
     :END:

   The abstract operation ForBodyEvaluation with arguments =test=,
   =increment=, =stmt=, =perIterationBindings=, and =labelSet= is performed
   as follows:

   1. Let =V= be undefined.
   2. Perform
      ? [[https://tc39.es/ecma262/#sec-createperiterationenvironment][CreatePerIterationEnvironment]](=perIterationBindings=).
   3. Repeat,

      1. If =test= is not [empty], then

         1. Let =testRef= be the result of evaluating =test=.
         2. Let =testValue= be
            ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=testRef=).
         3. If
            ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=testValue=)
            is false, return
            [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=V=).

      2. Let =result= be the result of evaluating =stmt=.
      3. If
         [[https://tc39.es/ecma262/#sec-loopcontinues][LoopContinues]](=result=,
         =labelSet=) is false, return
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=result=,
         =V=)).
      4. If =result=.[[Value]] is not empty, set =V= to =result=.[[Value]].
      5. Perform
         ? [[https://tc39.es/ecma262/#sec-createperiterationenvironment][CreatePerIterationEnvironment]](=perIterationBindings=).
      6. If =increment= is not [empty], then

         1. Let =incRef= be the result of evaluating =increment=.
         2. Perform
            ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=incRef=).

**** Runtime Semantics: CreatePerIterationEnvironment (
   =perIterationBindings= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-createperiterationenvironment-periterationbindings
     :END:

   The abstract operation CreatePerIterationEnvironment with argument
   =perIterationBindings= is performed as follows:

   1. If =perIterationBindings= has any elements, then

      1. Let =lastIterationEnv= be the
         [[https://tc39.es/ecma262/#running-execution-context][running
         execution context]]'s LexicalEnvironment.
      2. Let =lastIterationEnvRec= be =lastIterationEnv='s
         [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
      3. Let =outer= be =lastIterationEnv='s outer environment reference.
      4. [[https://tc39.es/ecma262/#assert][Assert]]: =outer= is not null.
      5. Let =thisIterationEnv= be
         [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=outer=).
      6. Let =thisIterationEnvRec= be =thisIterationEnv='s
         [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
      7. For each element =bn= of =perIterationBindings=, do

         1. Perform ! =thisIterationEnvRec=.CreateMutableBinding(=bn=,
            false).
         2. Let =lastValue= be ?
            =lastIterationEnvRec=.GetBindingValue(=bn=, true).
         3. Perform =thisIterationEnvRec=.InitializeBinding(=bn=,
            =lastValue=).

      8. Set the
         [[https://tc39.es/ecma262/#running-execution-context][running
         execution context]]'s LexicalEnvironment to =thisIterationEnv=.

   2. Return undefined.

*** The =for=-=in=, =for=-=of=, and =for=-=await=-=of= Statements
    :PROPERTIES:
    :CUSTOM_ID: the-for-in-for-of-and-for-await-of-statements
    :END:

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-16
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is either an
     [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] or an
     [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] and if
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
     [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]].

   If
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
   is either an
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] or an
   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] and if
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
   is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
   [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]]
   then the following rules are not applied. Instead, the Early Error rules
   for
   [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]]
   are used.

   - It is a Syntax Error if AssignmentTargetType of
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is not simple.
   - It is a Syntax Error if the
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
     is
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])
     and [[https://tc39.es/ecma262/#prod-Expression][Expression]] derives a
     phrase that would produce a Syntax Error according to these rules if
     that phrase were substituted for
     [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].
     This rule is recursively applied.

   Note

   The last rule means that the other rules are applied even if parentheses
   surround [[https://tc39.es/ecma262/#prod-Expression][Expression]].

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   - It is a Syntax Error if the BoundNames of
     [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]
     contains "let".
   - It is a Syntax Error if any element of the BoundNames of
     [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]] also
     occurs in the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   - It is a Syntax Error if the BoundNames of
     [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]
     contains any duplicate entries.

**** Static Semantics: BoundNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-boundnames-4
     :END:

   [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]].

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-6
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

   Note

   This section is extended by Annex
   [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-6
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

   Note

   This section is extended by Annex
   [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-6
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
      =iterationSet= and « ».

   Note

   This section is extended by Annex
   [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

**** Static Semantics: IsDestructuring
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-isdestructuring-1
     :END:

   [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]

   1. Return IsDestructuring of
      [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]].

   [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]:[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]]

   1. Return true.

   Note

   This section is extended by Annex
   [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-7
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =names= be the BoundNames of
      [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   3. Return =names=.

   Note

   This section is extended by Annex
   [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-7
     :END:

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
   forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =declarations= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   3. Return =declarations=.

   Note

   This section is extended by Annex
   [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

**** Runtime Semantics: BindingInitialization
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-bindinginitialization-2
     :END:

   With parameters =value= and =environment=.

   Note

   undefined is passed for =environment= to indicate that a
   [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
   used to assign the initialization value. This is the case for =var=
   statements and the formal parameter lists of some non-strict functions
   (see
   [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][9.2.10]]).
   In those cases a lexical binding is hoisted and preinitialized prior to
   evaluation of its initializer.

   [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]

   1. Return the result of performing BindingInitialization for
      [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]] passing
      =value= and =environment= as the arguments.

**** Runtime Semantics: BindingInstantiation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-bindinginstantiation
     :END:

   With parameter =environment=.

   [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]

   1. Let =envRec= be =environment='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
   2. [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= is a
      declarative
      [[https://tc39.es/ecma262/#sec-environment-records][Environment
      Record]].
   3. For each element =name= of the BoundNames of
      [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]], do

      1. If IsConstantDeclaration of
         [[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]] is true,
         then

         1. Perform ! =envRec=.CreateImmutableBinding(=name=, true).

      2. Else,

         1. Perform ! =envRec=.CreateMutableBinding(=name=, false).

**** Runtime Semantics: LabelledEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-labelledevaluation-4
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](«
      », [[https://tc39.es/ecma262/#prod-Expression][Expression]],
      enumerate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      enumerate, assignment, =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](«
      », [[https://tc39.es/ecma262/#prod-Expression][Expression]],
      enumerate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      enumerate, varBinding, =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](BoundNames
      of [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]],
      [[https://tc39.es/ecma262/#prod-Expression][Expression]], enumerate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      enumerate, lexicalBinding, =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](«
      »,
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]],
      iterate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      iterate, assignment, =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](«
      »,
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]],
      iterate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      iterate, varBinding, =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](BoundNames
      of [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]],
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]],
      iterate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      iterate, lexicalBinding, =labelSet=).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:forawait([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](«
      »,
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]],
      async-iterate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      iterate, assignment, =labelSet=, async).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](«
      »,
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]],
      async-iterate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      iterate, varBinding, =labelSet=, async).

   [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =keyResult= be ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](BoundNames
      of [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]],
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]],
      async-iterate).
   2. Return ?
      [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]],
      [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
      iterate, lexicalBinding, =labelSet=, async).

   Note

   This section is extended by Annex
   [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]].

**** Runtime Semantics: ForIn/OfHeadEvaluation ( =TDZnames=,
   =expr=, =iterationKind= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-forinofheadevaluation-tdznames-expr-iterationkind
     :END:

   The abstract operation ForIn/OfHeadEvaluation is called with arguments
   =TDZnames=, =expr=, and =iterationKind=. The value of =iterationKind= is
   either enumerate, iterate, or async-iterate.

   1. Let =oldEnv= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
   2. If =TDZnames= is not an empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]],
      then

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =TDZnames= has no
         duplicate entries.
      2. Let =TDZ= be
         [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=oldEnv=).
      3. Let =TDZEnvRec= be =TDZ='s
         [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
      4. For each string =name= in =TDZnames=, do

         1. Perform ! =TDZEnvRec=.CreateMutableBinding(=name=, false).

      5. Set the
         [[https://tc39.es/ecma262/#running-execution-context][running
         execution context]]'s LexicalEnvironment to =TDZ=.

   3. Let =exprRef= be the result of evaluating =expr=.
   4. Set the [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =oldEnv=.
   5. Let =exprValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
   6. If =iterationKind= is enumerate, then

      1. If =exprValue= is undefined or null, then

         1. Return
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
            { [[Type]]: break, [[Value]]: empty, [[Target]]: empty }.

      2. Let =obj= be
         ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=exprValue=).
      3. Return
         ? [[https://tc39.es/ecma262/#sec-enumerate-object-properties][EnumerateObjectProperties]](=obj=).

   7. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =iterationKind= is
         iterate.
      2. If =iterationKind= is async-iterate, let =iteratorHint= be async.
      3. Else, let =iteratorHint= be sync.
      4. Return
         ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=exprValue=,
         =iteratorHint=).

**** Runtime Semantics: ForIn/OfBodyEvaluation ( =lhs=, =stmt=,
   =iteratorRecord=, =iterationKind=, =lhsKind=, =labelSet= [ ,
   =iteratorKind= ] )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-forinofbodyevaluation-lhs-stmt-iteratorrecord-iterationkind-lhskind-labelset-iteratorkind
     :END:

   The abstract operation ForIn/OfBodyEvaluation is called with arguments
   =lhs=, =stmt=, =iteratorRecord=, =iterationKind=, =lhsKind=, =labelSet=,
   and optional argument =iteratorKind=. The value of =lhsKind= is either
   assignment, varBinding or lexicalBinding. The value of =iteratorKind= is
   either sync or async.

   1. If =iteratorKind= is not present, set =iteratorKind= to sync.
   2. Let =oldEnv= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
   3. Let =V= be undefined.
   4. Let =destructuring= be IsDestructuring of =lhs=.
   5. If =destructuring= is true and if =lhsKind= is assignment, then

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =lhs= is a
         [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].
      2. Let =assignmentPattern= be the
         [[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]]
         that is
         [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]] by
         =lhs=.

   6. Repeat,

      1.  Let =nextResult= be
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=iteratorRecord=.[[NextMethod]],
          =iteratorRecord=.[[Iterator]]).
      2.  If =iteratorKind= is async, then set =nextResult= to
          ? [[https://tc39.es/ecma262/#await][Await]](=nextResult=).
      3.  If
          [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=nextResult=)
          is not Object, throw a TypeError exception.
      4.  Let =done= be
          ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=nextResult=).
      5.  If =done= is true, return
          [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=V=).
      6.  Let =nextValue= be
          ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=nextResult=).
      7.  If =lhsKind= is either assignment or varBinding, then

          1. If =destructuring= is false, then

             1. Let =lhsRef= be the result of evaluating =lhs=. (It may be
                evaluated repeatedly.)

      8.  Else,

          1. [[https://tc39.es/ecma262/#assert][Assert]]: =lhsKind= is
             lexicalBinding.
          2. [[https://tc39.es/ecma262/#assert][Assert]]: =lhs= is a
             [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]].
          3. Let =iterationEnv= be
             [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=oldEnv=).
          4. Perform BindingInstantiation for =lhs= passing =iterationEnv=
             as the argument.
          5. Set the
             [[https://tc39.es/ecma262/#running-execution-context][running
             execution context]]'s LexicalEnvironment to =iterationEnv=.
          6. If =destructuring= is false, then

             1. [[https://tc39.es/ecma262/#assert][Assert]]: =lhs= binds a
                single name.
             2. Let =lhsName= be the sole element of BoundNames of =lhs=.
             3. Let =lhsRef= be
                ! [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=lhsName=).

      9.  If =destructuring= is false, then

          1. If =lhsRef= is an
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
             completion]], then

             1. Let =status= be =lhsRef=.

          2. Else if =lhsKind= is lexicalBinding, then

             1. Let =status= be
                [[https://tc39.es/ecma262/#sec-initializereferencedbinding][InitializeReferencedBinding]](=lhsRef=,
                =nextValue=).

          3. Else,

             1. Let =status= be
                [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhsRef=,
                =nextValue=).

      10. Else,

          1. If =lhsKind= is assignment, then

             1. Let =status= be DestructuringAssignmentEvaluation of
                =assignmentPattern= with argument =nextValue=.

          2. Else if =lhsKind= is varBinding, then

             1. [[https://tc39.es/ecma262/#assert][Assert]]: =lhs= is a
                [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]].
             2. Let =status= be BindingInitialization of =lhs= with
                arguments =nextValue= and undefined.

          3. Else,

             1. [[https://tc39.es/ecma262/#assert][Assert]]: =lhsKind= is
                lexicalBinding.
             2. [[https://tc39.es/ecma262/#assert][Assert]]: =lhs= is a
                [[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]].
             3. Let =status= be BindingInitialization of =lhs= with
                arguments =nextValue= and =iterationEnv=.

      11. If =status= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], then

          1. Set the
             [[https://tc39.es/ecma262/#running-execution-context][running
             execution context]]'s LexicalEnvironment to =oldEnv=.
          2. If =iteratorKind= is async, return
             ? [[https://tc39.es/ecma262/#sec-asynciteratorclose][AsyncIteratorClose]](=iteratorRecord=,
             =status=).
          3. If =iterationKind= is enumerate, then

             1. Return =status=.

          4. Else,

             1. [[https://tc39.es/ecma262/#assert][Assert]]:
                =iterationKind= is iterate.
             2. Return
                ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
                =status=).

      12. Let =result= be the result of evaluating =stmt=.
      13. Set the
          [[https://tc39.es/ecma262/#running-execution-context][running
          execution context]]'s LexicalEnvironment to =oldEnv=.
      14. If
          [[https://tc39.es/ecma262/#sec-loopcontinues][LoopContinues]](=result=,
          =labelSet=) is false, then

          1. If =iterationKind= is enumerate, then

             1. Return
                [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=result=,
                =V=)).

          2. Else,

             1. [[https://tc39.es/ecma262/#assert][Assert]]:
                =iterationKind= is iterate.
             2. Set =status= to
                [[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=result=,
                =V=).
             3. If =iteratorKind= is async, return
                ? [[https://tc39.es/ecma262/#sec-asynciteratorclose][AsyncIteratorClose]](=iteratorRecord=,
                =status=).
             4. Return
                ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
                =status=).

      15. If =result=.[[Value]] is not empty, set =V= to
          =result=.[[Value]].

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-47
     :END:

   [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

   1. Let =bindingId= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
   2. Return
      ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=bindingId=).

**** EnumerateObjectProperties ( =O= )
     :PROPERTIES:
     :CUSTOM_ID: enumerateobjectproperties-o
     :END:

   When the abstract operation EnumerateObjectProperties is called with
   argument =O=, the following steps are taken:

   1. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
      is Object.
   2. Return an Iterator object
      ([[https://tc39.es/ecma262/#sec-iterator-interface][25.1.1.2]]) whose
      =next= method iterates over all the String-valued keys of enumerable
      properties of =O=. The iterator object is never directly accessible
      to ECMAScript code. The mechanics and order of enumerating the
      properties is not specified but must conform to the rules specified
      below.

   The iterator's =throw= and =return= methods are null and are never
   invoked. The iterator's =next= method processes object properties to
   determine whether the property key should be returned as an iterator
   value. Returned property keys do not include keys that are Symbols.
   Properties of the target object may be deleted during enumeration. A
   property that is deleted before it is processed by the iterator's =next=
   method is ignored. If new properties are added to the target object
   during enumeration, the newly added properties are not guaranteed to be
   processed in the active enumeration. A
   [[https://tc39.es/ecma262/#property-name][property name]] will be
   returned by the iterator's =next= method at most once in any
   enumeration.

   Enumerating the properties of the target object includes enumerating
   properties of its prototype, and the prototype of the prototype, and so
   on, recursively; but a property of a prototype is not processed if it
   has the same name as a property that has already been processed by the
   iterator's =next= method. The values of [[Enumerable]] attributes are
   not considered when determining if a property of a prototype object has
   already been processed. The enumerable property names of prototype
   objects must be obtained by invoking EnumerateObjectProperties passing
   the prototype object as the argument. EnumerateObjectProperties must
   obtain the own property keys of the target object by calling its
   [[OwnPropertyKeys]] internal method. Property attributes of the target
   object must be obtained by calling its [[GetOwnProperty]] internal
   method.

   Note

   The following is an informative definition of an ECMAScript generator
   function that conforms to these rules:

   #+BEGIN_EXAMPLE
     function* EnumerateObjectProperties(obj) {
       const visited = new Set();
       for (const key of Reflect.ownKeys(obj)) {
         if (typeof key === "symbol") continue;
         const desc = Reflect.getOwnPropertyDescriptor(obj, key);
         if (desc) {
           visited.add(key);
           if (desc.enumerable) yield key;
         }
       }
       const proto = Reflect.getPrototypeOf(obj);
       if (proto === null) return;
       for (const protoKey of EnumerateObjectProperties(proto)) {
         if (!visited.has(protoKey)) yield protoKey;
       }
     }
   #+END_EXAMPLE

*** The =continue= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-continue-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-46
     :END:

  [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]][Yield,
  Await]:continue; continue[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
  ?Await];
**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-17
     :END:

   [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]:continue;
   [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]:continue[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]];

   - It is a Syntax Error if this
     [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
     is not nested, directly or indirectly (but not crossing function
     boundaries), within an
     [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]].

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-7
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]:continue;

   1. Return false.

   [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]:continue[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]];

   1. If the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]] is
      not an element of =iterationSet=, return true.
   2. Return false.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-48
     :END:

   [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]:continue;

   1. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
      { [[Type]]: continue, [[Value]]: empty, [[Target]]: empty }.

   [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]:continue[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]];

   1. Let =label= be the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]].
   2. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
      { [[Type]]: continue, [[Value]]: empty, [[Target]]: =label= }.

*** The =break= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-break-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-47
     :END:

  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]][Yield,
  Await]:break; break[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
  ?Await];
**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-18
     :END:

   [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]:break;

   - It is a Syntax Error if this
     [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]] is
     not nested, directly or indirectly (but not crossing function
     boundaries), within an
     [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
     or a
     [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]].

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-7
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]:break;

   1. Return false.

   [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]:break[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]];

   1. If the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]] is
      not an element of =labelSet=, return true.
   2. Return false.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-49
     :END:

   [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]:break;

   1. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
      { [[Type]]: break, [[Value]]: empty, [[Target]]: empty }.

   [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]:break[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]];

   1. Let =label= be the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]].
   2. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
      { [[Type]]: break, [[Value]]: empty, [[Target]]: =label= }.

*** The =return= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-return-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-48
     :END:

  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]][Yield,
  Await]:return; return[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield, ?Await]; Note

  A =return= statement causes a function to cease execution and, in most
  cases, returns a value to the caller. If
  [[https://tc39.es/ecma262/#prod-Expression][Expression]] is omitted, the
  return value is undefined. Otherwise, the return value is the value of
  [[https://tc39.es/ecma262/#prod-Expression][Expression]]. A =return=
  statement may not actually return a value to the caller depending on
  surrounding context. For example, in a =try= block, a =return=
  statement's completion record may be replaced with another completion
  record during evaluation of the =finally= block.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-50
     :END:

   [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]:return;

   1. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
      { [[Type]]: return, [[Value]]: undefined, [[Target]]: empty }.

   [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]:return[[https://tc39.es/ecma262/#prod-Expression][Expression]];

   1. Let =exprRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   2. Let =exprValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
   3. If
      ! [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]()
      is async, set =exprValue= to
      ? [[https://tc39.es/ecma262/#await][Await]](=exprValue=).
   4. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
      { [[Type]]: return, [[Value]]: =exprValue=, [[Target]]: empty }.

*** The =with= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-with-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-49
     :END:

  [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]][Yield,
  Await,
  Return]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield,
  ?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
  ?Await, ?Return] Note

  The =with= statement adds an object
  [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]]
  for a computed object to the lexical environment of the
  [[https://tc39.es/ecma262/#running-execution-context][running execution
  context]]. It then executes a statement using this augmented lexical
  environment. Finally, it restores the original lexical environment.

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-19
     :END:

   [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   - It is a Syntax Error if the code that matches this production is
     contained in [[https://tc39.es/ecma262/#sec-strict-mode-code][strict
     mode code]].
   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#sec-islabelledfunction][IsLabelledFunction]]([[https://tc39.es/ecma262/#prod-Statement][Statement]])
     is true.

   Note

   It is only necessary to apply the second rule if the extension specified
   in
   [[https://tc39.es/ecma262/#sec-labelled-function-declarations][B.3.2]]
   is implemented.

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-7
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-8
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-8
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
      =iterationSet= and « ».

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-8
     :END:

   [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-8
     :END:

   [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-51
     :END:

   [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Let =val= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   2. Let =obj= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](?
      [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=val=)).
   3. Let =oldEnv= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
   4. Let =newEnv= be
      [[https://tc39.es/ecma262/#sec-newobjectenvironment][NewObjectEnvironment]](=obj=,
      =oldEnv=).
   5. Set the =withEnvironment= flag of =newEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]
      to true.
   6. Set the [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =newEnv=.
   7. Let =C= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   8. Set the [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =oldEnv=.
   9. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=C=,
      undefined)).

   Note

   No matter how control leaves the embedded
   [[https://tc39.es/ecma262/#prod-Statement][Statement]], whether normally
   or by some form of
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]] or exception, the LexicalEnvironment is always restored to
   its former state.

*** The =switch= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-switch-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-50
     :END:

  [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]][Yield,
  Await,
  Return]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield,
  ?Await])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]][?Yield,
  ?Await, ?Return]
  [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]][Yield, Await,
  Return]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
  ?Await, ?Return]opt}
  {[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
  ?Await,
  ?Return]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][?Yield,
  ?Await,
  ?Return][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
  ?Await, ?Return]opt}
  [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][Yield, Await,
  Return]:[[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]][?Yield,
  ?Await, ?Return]
  [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
  ?Await,
  ?Return][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]][?Yield,
  ?Await, ?Return]
  [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]][Yield, Await,
  Return]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield,
  ?Await]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
  ?Await, ?Return]opt
  [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][Yield,
  Await,
  Return]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
  ?Await, ?Return]opt
**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-20
     :END:

   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

   - It is a Syntax Error if the LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] contains any
     duplicate entries.
   - It is a Syntax Error if any element of the LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] also occurs in
     the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]].

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-8
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

   1. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return false.

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1. If the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
      present, then

      1. Let =hasDuplicates= be ContainsDuplicateLabels of the first
         [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
         argument =labelSet=.
      2. If =hasDuplicates= is true, return true.

   2. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]] with
      argument =labelSet=.
   3. If =hasDuplicates= is true, return true.
   4. If the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is not
      present, return false.
   5. Return ContainsDuplicateLabels of the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
      argument =labelSet=.

   [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

   1. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
      argument =labelSet=.
   2. If =hasDuplicates= is true, return true.
   3. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] with
      argument =labelSet=.

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
      argument =labelSet=.
   2. Return false.

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
      argument =labelSet=.
   2. Return false.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-9
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

   1. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return false.

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1. If the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
      present, then

      1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of the
         first [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]
         with argument =labelSet=.
      2. If =hasUndefinedLabels= is true, return true.

   2. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]] with
      argument =labelSet=.
   3. If =hasUndefinedLabels= is true, return true.
   4. If the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is not
      present, return false.
   5. Return ContainsUndefinedBreakTarget of the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
      argument =labelSet=.

   [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
      argument =labelSet=.
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] with
      argument =labelSet=.

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
      argument =labelSet=.
   2. Return false.

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
      argument =labelSet=.
   2. Return false.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-9
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

   1. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] with arguments
      =iterationSet= and « ».

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return false.

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1. If the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
      present, then

      1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of the
         first [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]
         with arguments =iterationSet= and « ».
      2. If =hasUndefinedLabels= is true, return true.

   2. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]] with
      arguments =iterationSet= and « ».
   3. If =hasUndefinedLabels= is true, return true.
   4. If the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is not
      present, return false.
   5. Return ContainsUndefinedContinueTarget of the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
      arguments =iterationSet= and « ».

   [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
      arguments =iterationSet= and « ».
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] with
      arguments =iterationSet= and « ».

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
      arguments =iterationSet= and « ».
   2. Return false.

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
      arguments =iterationSet= and « ».
   2. Return false.

**** Static Semantics: LexicallyDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallydeclarednames-1
     :END:

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1. If the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
      present, let =names= be the LexicallyDeclaredNames of the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Else, let =names= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   3. Append to =names= the elements of the LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]].
   4. If the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is not
      present, return =names=.
   5. Return the result of appending to =names= the elements of the
      LexicallyDeclaredNames of the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].

   [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

   1. Let =names= be LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Append to =names= the elements of the LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: LexicallyScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-1
     :END:

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1. If the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
      present, let =declarations= be the LexicallyScopedDeclarations of the
      first [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Else, let =declarations= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   3. Append to =declarations= the elements of the
      LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]].
   4. If the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is not
      present, return =declarations=.
   5. Return the result of appending to =declarations= the elements of the
      LexicallyScopedDeclarations of the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].

   [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

   1. Let =declarations= be LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Append to =declarations= the elements of the
      LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]].
   3. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-9
     :END:

   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]].

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1. If the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
      present, let =names= be the VarDeclaredNames of the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Else, let =names= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   3. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]].
   4. If the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is not
      present, return =names=.
   5. Return the result of appending to =names= the elements of the
      VarDeclaredNames of the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].

   [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

   1. Let =names= be VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-9
     :END:

   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]].

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1. If the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
      present, let =declarations= be the VarScopedDeclarations of the first
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Else, let =declarations= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   3. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]].
   4. If the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is not
      present, return =declarations=.
   5. Return the result of appending to =declarations= the elements of the
      VarScopedDeclarations of the second
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].

   [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

   1. Let =declarations= be VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]].
   3. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

   1. If the [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
      is present, return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Semantics: CaseBlockEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-caseblockevaluation
     :END:

   With parameter =input=.

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]}

   1. Let =V= be undefined.
   2. Let =A= be the
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      of [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] items in
      [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]], in source
      text order.
   3. Let =found= be false.
   4. For each [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] =C=
      in =A=, do

      1. If =found= is false, then

         1. Set =found= to
            ? [[https://tc39.es/ecma262/#sec-runtime-semantics-caseclauseisselected][CaseClauseIsSelected]](=C=,
            =input=).

      2. If =found= is true, then

         1. Let =R= be the result of evaluating =C=.
         2. If =R=.[[Value]] is not empty, set =V= to =R=.[[Value]].
         3. If =R= is an
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
            completion]], return
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=R=,
            =V=)).

   5. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=V=).

   [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

   1.  Let =V= be undefined.
   2.  If the first
       [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
       present, then

       1. Let =A= be the
          [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
          of [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] items
          in the first
          [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]], in
          source text order.

   3.  Else,

       1. Let =A= be « ».

   4.  Let =found= be false.
   5.  For each [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]
       =C= in =A=, do

       1. If =found= is false, then

          1. Set =found= to
             ? [[https://tc39.es/ecma262/#sec-runtime-semantics-caseclauseisselected][CaseClauseIsSelected]](=C=,
             =input=).

       2. If =found= is true, then

          1. Let =R= be the result of evaluating =C=.
          2. If =R=.[[Value]] is not empty, set =V= to =R=.[[Value]].
          3. If =R= is an
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
             completion]], return
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=R=,
             =V=)).

   6.  Let =foundInB= be false.
   7.  If the second
       [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
       present, then

       1. Let =B= be the
          [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
          of [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] items
          in the second
          [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]], in
          source text order.

   8.  Else,

       1. Let =B= be « ».

   9.  If =found= is false, then

       1. For each [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]
          =C= in =B=, do

          1. If =foundInB= is false, then

             1. Set =foundInB= to
                ? [[https://tc39.es/ecma262/#sec-runtime-semantics-caseclauseisselected][CaseClauseIsSelected]](=C=,
                =input=).

          2. If =foundInB= is true, then

             1. Let =R= be the result of evaluating
                [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]
                =C=.
             2. If =R=.[[Value]] is not empty, set =V= to =R=.[[Value]].
             3. If =R= is an
                [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
                completion]], return
                [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=R=,
                =V=)).

   10. If =foundInB= is true, return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=V=).
   11. Let =R= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]].
   12. If =R=.[[Value]] is not empty, set =V= to =R=.[[Value]].
   13. If =R= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=R=,
       =V=)).
   14. For each [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]
       =C= in =B= (NOTE: this is another complete iteration of the second
       [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]), do

       1. Let =R= be the result of evaluating
          [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] =C=.
       2. If =R=.[[Value]] is not empty, set =V= to =R=.[[Value]].
       3. If =R= is an
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
          completion]], return
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=R=,
          =V=)).

   15. Return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=V=).

   <<sec-runtime-semantics-caseselectorevaluation>>
**** Runtime Semantics: CaseClauseIsSelected ( =C=, =input= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-caseclauseisselected-c-input
     :END:

   The abstract operation CaseClauseIsSelected, given
   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] =C= and value
   =input=, determines whether =C= matches =input=.

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =C= is an instance of
      the production
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt
      .
   2. Let =exprRef= be the result of evaluating the
      [[https://tc39.es/ecma262/#prod-Expression][Expression]] of =C=.
   3. Let =clauseSelector= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
   4. Return the result of performing
      [[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
      Equality Comparison]] =input= === =clauseSelector=.

   Note

   This operation does not execute =C='s
   [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] (if any).
   The [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] algorithm
   uses its return value to determine which
   [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] to start
   executing.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-52
     :END:

   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

   1. Let =exprRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   2. Let =switchValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
   3. Let =oldEnv= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
   4. Let =blockEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=oldEnv=).
   5. Perform
      [[https://tc39.es/ecma262/#sec-blockdeclarationinstantiation][BlockDeclarationInstantiation]]([[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]],
      =blockEnv=).
   6. Set the [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =blockEnv=.
   7. Let =R= be CaseBlockEvaluation of
      [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] with argument
      =switchValue=.
   8. Set the [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =oldEnv=.
   9. Return =R=.

   Note

   No matter how control leaves the
   [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]] the
   LexicalEnvironment is always restored to its former state.

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

   1. Return the result of evaluating
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

   1. Return the result of evaluating
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Labelled Statements
    :PROPERTIES:
    :CUSTOM_ID: labelled-statements
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-51
     :END:

  [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]][Yield,
  Await,
  Return]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
  ?Await]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]][?Yield,
  ?Await, ?Return]
  [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]][Yield,
  Await,
  Return]:[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
  ?Await, ?Return]
  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
  ?Await, ~Default] Note

  A [[https://tc39.es/ecma262/#prod-Statement][Statement]] may be prefixed
  by a label. Labelled statements are only used in conjunction with
  labelled =break= and =continue= statements. ECMAScript has no =goto=
  statement. A [[https://tc39.es/ecma262/#prod-Statement][Statement]] can
  be part of a
  [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]],
  which itself can be part of a
  [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]],
  and so on. The labels introduced this way are collectively referred to
  as the “current label set” when describing the semantics of individual
  statements.

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-21
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   - It is a Syntax Error if any source text matches this rule.

   Note

   An alternative definition for this rule is provided in
   [[https://tc39.es/ecma262/#sec-labelled-function-declarations][B.3.2]].

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-9
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Let =label= be the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]].
   2. If =label= is an element of =labelSet=, return true.
   3. Let =newLabelSet= be a copy of =labelSet= with =label= appended.
   4. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]] with
      argument =newLabelSet=.

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return false.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-10
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Let =label= be the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]].
   2. Let =newLabelSet= be a copy of =labelSet= with =label= appended.
   3. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]] with
      argument =newLabelSet=.

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return false.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-10
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Let =label= be the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]].
   2. Let =newLabelSet= be a copy of =labelSet= with =label= appended.
   3. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]] with
      arguments =iterationSet= and =newLabelSet=.

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return false.

**** Static Semantics: IsLabelledFunction ( =stmt= )
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-islabelledfunction-stmt
     :END:

   The abstract operation IsLabelledFunction with argument =stmt= performs
   the following steps:

   1. If =stmt= is not a
      [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]],
      return false.
   2. Let =item= be the
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]] of
      =stmt=.
   3. If =item= is
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
      , return true.
   4. Let =subStmt= be the
      [[https://tc39.es/ecma262/#prod-Statement][Statement]] of =item=.
   5. Return
      [[https://tc39.es/ecma262/#sec-islabelledfunction][IsLabelledFunction]](=subStmt=).

**** Static Semantics: LexicallyDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallydeclarednames-2
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return the LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return BoundNames of
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].

**** Static Semantics: LexicallyScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-2
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return the LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return a new
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].

**** Static Semantics: TopLevelLexicallyDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-toplevellexicallydeclarednames-1
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: TopLevelLexicallyScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-toplevellexicallyscopeddeclarations-1
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: TopLevelVarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-toplevelvardeclarednames-1
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return the TopLevelVarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. If [[https://tc39.es/ecma262/#prod-Statement][Statement]] is
      [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
      , return TopLevelVarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   2. Return VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return BoundNames of
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].

**** Static Semantics: TopLevelVarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-toplevelvarscopeddeclarations-1
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return the TopLevelVarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. If [[https://tc39.es/ecma262/#prod-Statement][Statement]] is
      [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
      , return TopLevelVarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].
   2. Return VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Statement][Statement]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return a new
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-10
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-10
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Runtime Semantics: LabelledEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-labelledevaluation-5
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Let =label= be the StringValue of
      [[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]].
   2. Append =label= as an element of =labelSet=.
   3. Let =stmtResult= be LabelledEvaluation of
      [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]] with
      argument =labelSet=.
   4. If =stmtResult=.[[Type]] is break and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=stmtResult=.[[Target]],
      =label=) is true, then

      1. Set =stmtResult= to
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=stmtResult=.[[Value]]).

   5. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=stmtResult=).

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-Statement][Statement]]

   1. If [[https://tc39.es/ecma262/#prod-Statement][Statement]] is either a
      [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
      or a
      [[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]],
      then

      1. Return LabelledEvaluation of
         [[https://tc39.es/ecma262/#prod-Statement][Statement]] with
         argument =labelSet=.

   2. Else,

      1. Return the result of evaluating
         [[https://tc39.es/ecma262/#prod-Statement][Statement]].

   [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

   1. Return the result of evaluating
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-53
     :END:

   [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

   1. Let =newLabelSet= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Return LabelledEvaluation of this
      [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
      with argument =newLabelSet=.

*** The =throw= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-throw-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-52
     :END:

  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]][Yield,
  Await]:throw[no
  [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
  here][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
  ?Yield, ?Await];
**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-54
     :END:

   [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]:throw[[https://tc39.es/ecma262/#prod-Expression][Expression]];

   1. Let =exprRef= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Expression][Expression]].
   2. Let =exprValue= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
   3. Return
      [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](=exprValue=).

*** The =try= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-try-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-53
     :END:

  [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]][Yield,
  Await, Return]:try[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
  ?Await, ?Return][[https://tc39.es/ecma262/#prod-Catch][Catch]][?Yield,
  ?Await, ?Return]
  try[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield, ?Await,
  ?Return][[https://tc39.es/ecma262/#prod-Finally][Finally]][?Yield,
  ?Await, ?Return]
  try[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield, ?Await,
  ?Return][[https://tc39.es/ecma262/#prod-Catch][Catch]][?Yield, ?Await,
  ?Return][[https://tc39.es/ecma262/#prod-Finally][Finally]][?Yield,
  ?Await, ?Return] [[https://tc39.es/ecma262/#prod-Catch][Catch]][Yield,
  Await,
  Return]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]][?Yield,
  ?Await])[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield, ?Await,
  ?Return] catch[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
  ?Await, ?Return]
  [[https://tc39.es/ecma262/#prod-Finally][Finally]][Yield, Await,
  Return]:finally[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
  ?Await, ?Return]
  [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]][Yield,
  Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
  ?Await]
  [[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
  ?Await] Note

  The =try= statement encloses a block of code in which an exceptional
  condition can occur, such as a runtime error or a =throw= statement. The
  =catch= clause provides the exception-handling code. When a catch clause
  catches an exception, its
  [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]] is
  bound to that exception.

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-22
     :END:

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

   - It is a Syntax Error if BoundNames of
     [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]]
     contains any duplicate elements.
   - It is a Syntax Error if any element of the BoundNames of
     [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]] also
     occurs in the LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-Block][Block]].
   - It is a Syntax Error if any element of the BoundNames of
     [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]] also
     occurs in the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-Block][Block]].

   Note

   An alternative
   [[https://tc39.es/ecma262/#sec-static-semantic-rules][static semantics]]
   for this production is given in
   [[https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks][B.3.5]].

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-10
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

   1. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.
   2. If =hasDuplicates= is true, return true.
   3. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.
   2. If =hasDuplicates= is true, return true.
   3. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.
   2. If =hasDuplicates= is true, return true.
   3. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument
      =labelSet=.
   4. If =hasDuplicates= is true, return true.
   5. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

   1. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-11
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.
   2. If =hasUndefinedLabels= is true, return true.
   3. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument
      =labelSet=.
   4. If =hasUndefinedLabels= is true, return true.
   5. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]] with argument
      =labelSet=.

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

   1. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with argument
      =labelSet=.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-11
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with arguments
      =iterationSet= and « ».
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with arguments
      =iterationSet= and « ».

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with arguments
      =iterationSet= and « ».
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]] with arguments
      =iterationSet= and « ».

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with arguments
      =iterationSet= and « ».
   2. If =hasUndefinedLabels= is true, return true.
   3. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with arguments
      =iterationSet= and « ».
   4. If =hasUndefinedLabels= is true, return true.
   5. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]] with arguments
      =iterationSet= and « ».

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

   1. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-Block][Block]] with arguments
      =iterationSet= and « ».

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-11
     :END:

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

   1. Let =names= be VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =names= be VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =names= be VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]].
   3. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]].
   4. Return =names=.

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

   1. Return the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-Block][Block]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-11
     :END:

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

   1. Let =declarations= be VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]].
   3. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =declarations= be VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]].
   3. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =declarations= be VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]].
   3. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Finally][Finally]].
   4. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

   1. Return the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-Block][Block]].

**** Runtime Semantics: CatchClauseEvaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-catchclauseevaluation
     :END:

   With parameter =thrownValue=.

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

   1.  Let =oldEnv= be the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]]'s LexicalEnvironment.
   2.  Let =catchEnv= be
       [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=oldEnv=).
   3.  Let =catchEnvRec= be =catchEnv='s
       [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
   4.  For each element =argName= of the BoundNames of
       [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]], do

       1. Perform ! =catchEnvRec=.CreateMutableBinding(=argName=, false).

   5.  Set the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]]'s LexicalEnvironment to =catchEnv=.
   6.  Let =status= be BindingInitialization of
       [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]]
       with arguments =thrownValue= and =catchEnv=.
   7.  If =status= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], then

       1. Set the
          [[https://tc39.es/ecma262/#running-execution-context][running
          execution context]]'s LexicalEnvironment to =oldEnv=.
       2. Return
          [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

   8.  Let =B= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-Block][Block]].
   9.  Set the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]]'s LexicalEnvironment to =oldEnv=.
   10. Return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=B=).

   [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch[[https://tc39.es/ecma262/#prod-Block][Block]]

   1. Return the result of evaluating
      [[https://tc39.es/ecma262/#prod-Block][Block]].

   Note

   No matter how control leaves the
   [[https://tc39.es/ecma262/#prod-Block][Block]] the LexicalEnvironment is
   always restored to its former state.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-55
     :END:

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

   1. Let =B= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. If =B=.[[Type]] is throw, let =C= be CatchClauseEvaluation of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument
      =B=.[[Value]].
   3. Else, let =C= be =B=.
   4. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=C=,
      undefined)).

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =B= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. Let =F= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Finally][Finally]].
   3. If =F=.[[Type]] is normal, set =F= to =B=.
   4. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=F=,
      undefined)).

   [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

   1. Let =B= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Block][Block]].
   2. If =B=.[[Type]] is throw, let =C= be CatchClauseEvaluation of
      [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument
      =B=.[[Value]].
   3. Else, let =C= be =B=.
   4. Let =F= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Finally][Finally]].
   5. If =F=.[[Type]] is normal, set =F= to =C=.
   6. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=F=,
      undefined)).

*** The =debugger= Statement
    :PROPERTIES:
    :CUSTOM_ID: the-debugger-statement
    :END:

**** Syntax
     :PROPERTIES:
     :CUSTOM_ID: syntax-54
     :END:

  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]:debugger;
**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-56
     :END:

   Note

   Evaluating a
   [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]
   may allow an implementation to cause a breakpoint when run under a
   debugger. If a debugger is not present or active this statement has no
   observable effect.

   [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]:debugger;

   1. If an implementation-defined debugging facility is available and
      enabled, then

      1. Perform an implementation-defined debugging action.
      2. Let =result= be an implementation-defined
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
         value.

   2. Else,

      1. Let =result= be
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

   3. Return =result=.

* ECMAScript Language: Functions and Classes
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-functions-and-classes
  :END:

Note

Various ECMAScript language elements cause the creation of ECMAScript
function objects
([[https://tc39.es/ecma262/#sec-ecmascript-function-objects][9.2]]).
Evaluation of such functions starts with the execution of their [[Call]]
internal method
([[https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist][9.2.1]]).

** Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-55
    :END:

 [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][Yield,
 Await,
 Default]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 [+Default]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][~Yield,
 ~Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][Yield,
 Await]:[empty]
 [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
 ?Await],
 [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
 ?Await],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
 ?Await],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
 ?Await, +Return]opt
*** Directive Prologues and the Use Strict Directive
    :PROPERTIES:
    :CUSTOM_ID: directive-prologues-and-the-use-strict-directive
    :END:

  A Directive Prologue is the longest sequence of
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]s
  occurring as the initial
  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]s
  or [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]s of a
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]], a
  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]], or a
  [[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]] and where each
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  in the sequence consists entirely of a
  [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] token
  followed by a semicolon. The semicolon may appear explicitly or may be
  inserted by automatic semicolon insertion. A
  [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]] may
  be an empty sequence.

  A Use Strict Directive is an
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  in a [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
  whose [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] is
  either of the exact code point sequences ="use strict"= or
  ='use strict'=. A [[https://tc39.es/ecma262/#use-strict-directive][Use
  Strict Directive]] may not contain an
  [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]] or
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]].

  A [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
  may contain more than one
  [[https://tc39.es/ecma262/#use-strict-directive][Use Strict Directive]].
  However, an implementation may issue a warning if this occurs.

  Note

  The
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]s
  of a [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
  are evaluated normally during evaluation of the containing production.
  Implementations may define implementation specific meanings for
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]s
  which are not a [[https://tc39.es/ecma262/#use-strict-directive][Use
  Strict Directive]] and which occur in a
  [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]. If
  an appropriate notification mechanism exists, an implementation should
  issue a warning if it encounters in a
  [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]] an
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  that is not a [[https://tc39.es/ecma262/#use-strict-directive][Use
  Strict Directive]] and which does not have a meaning defined by the
  implementation.

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-23
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] Contains
    [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is true.

  Note 1

  The LexicallyDeclaredNames of a
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] does not
  include identifiers bound using var or function declarations.

  [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]

  - It is a Syntax Error if BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    contains any duplicate elements.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]

  - It is a Syntax Error if IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
    is false and BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
    contains any duplicate elements.

  Note 2

  Multiple occurrences of the same
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
  is only allowed for functions which have simple parameter lists and
  which are not defined in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]

  - It is a Syntax Error if the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    contains any duplicate entries.
  - It is a Syntax Error if any element of the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    also occurs in the VarDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]].
  - It is a Syntax Error if ContainsDuplicateLabels of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    with argument « » is true.
  - It is a Syntax Error if ContainsUndefinedBreakTarget of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    with argument « » is true.
  - It is a Syntax Error if ContainsUndefinedContinueTarget of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    with arguments « » and « » is true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-5
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Let =names= be BoundNames of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].
  2. Append to =names= the BoundNames of
     [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. Let =names= be BoundNames of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].
  2. Append to =names= the BoundNames of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].
  3. Return =names=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-2
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into function definitions.

*** Static Semantics: ContainsExpression
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsexpression-1
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. If ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true, return true.
  2. Return ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]].

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true, return true.
  2. Return ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].

*** Static Semantics: ContainsUseStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsusestrict
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]

  1. If the [[https://tc39.es/ecma262/#directive-prologue][Directive
     Prologue]] of
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] contains
     a [[https://tc39.es/ecma262/#use-strict-directive][Use Strict
     Directive]], return true; otherwise, return false.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return 0.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Return ExpectedArgumentCount of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].

  Note

  The ExpectedArgumentCount of a
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
  is the number of
  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] to
  the left of either the rest parameter or the first
  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]] with
  an Initializer. A
  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]
  without an initializer is allowed after the first parameter with an
  initializer but such parameters are considered to be optional with
  undefined as their default value.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. Let =count= be ExpectedArgumentCount of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].
  2. If HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true or HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]] is
     true, return =count=.
  3. Return =count= + 1.

*** Static Semantics: HasInitializer
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasinitializer-1
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true, return true.
  2. Return HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-1
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return true.

*** Static Semantics: IsAnonymousFunctionDefinition ( =expr= )
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isanonymousfunctiondefinition-expr
    :END:

  The abstract operation IsAnonymousFunctionDefinition determines if its
  argument is a function definition that does not bind a name. The
  argument =expr= is the result of parsing an
  [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
  or [[https://tc39.es/ecma262/#prod-Initializer][Initializer]]. The
  following steps are taken:

  1. If IsFunctionDefinition of =expr= is false, return false.
  2. Let =hasName= be HasName of =expr=.
  3. If =hasName= is true, return false.
  4. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-1
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-16
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return true.

*** Static Semantics: IsSimpleParameterList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-issimpleparameterlist-1
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If IsSimpleParameterList of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is false, return false.
  2. Return IsSimpleParameterList of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].

  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

  1. Return IsSimpleParameterList of
     [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]].

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-3
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelLexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-3
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return the TopLevelLexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-12
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelVarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-12
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return the TopLevelVarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Return the result of evaluating
     [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]].

*** Runtime Semantics: IteratorBindingInitialization
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-iteratorbindinginitialization-1
    :END:

  With parameters =iteratorRecord= and =environment=.

  Note 1

  When undefined is passed for =environment= it indicates that a
  [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
  used to assign the initialization value. This is the case for formal
  parameter lists of non-strict functions. In that case the formal
  parameter bindings are preinitialized in order to deal with the
  possibility of multiple parameters with the same name.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Perform ? IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     using =iteratorRecord= and =environment= as the arguments.
  2. Return the result of performing IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]
     using =iteratorRecord= and =environment= as the arguments.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. Perform ? IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     using =iteratorRecord= and =environment= as the arguments.
  2. Return the result of performing IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]
     using =iteratorRecord= and =environment= as the arguments.

  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]

  1.  If ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]] is
      false, return the result of performing IteratorBindingInitialization
      for [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]
      using =iteratorRecord= and =environment= as the arguments.
  2.  Let =currentContext= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  3.  Let =originalEnv= be the VariableEnvironment of =currentContext=.
  4.  [[https://tc39.es/ecma262/#assert][Assert]]: The VariableEnvironment
      and LexicalEnvironment of =currentContext= are the same.
  5.  [[https://tc39.es/ecma262/#assert][Assert]]: If =environment= is not
      undefined, then =environment= and =originalEnv= are the same.
  6.  Let =paramVarEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=originalEnv=).
  7.  Set the VariableEnvironment of =currentContext= to =paramVarEnv=.
  8.  Set the LexicalEnvironment of =currentContext= to =paramVarEnv=.
  9.  Let =result= be IteratorBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]
      with arguments =iteratorRecord= and =environment=.
  10. Set the VariableEnvironment of =currentContext= to =originalEnv=.
  11. Set the LexicalEnvironment of =currentContext= to =originalEnv=.
  12. Return =result=.

  Note 2

  The new [[https://tc39.es/ecma262/#sec-environment-records][Environment
  Record]] created in step 6 is only used if the
  [[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]]
  contains a
  [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
  eval]].

  [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]:[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]

  1.  If ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      is false, return the result of performing
      IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      using =iteratorRecord= and =environment= as the arguments.
  2.  Let =currentContext= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  3.  Let =originalEnv= be the VariableEnvironment of =currentContext=.
  4.  [[https://tc39.es/ecma262/#assert][Assert]]: The VariableEnvironment
      and LexicalEnvironment of =currentContext= are the same.
  5.  [[https://tc39.es/ecma262/#assert][Assert]]: If =environment= is not
      undefined, then =environment= and =originalEnv= are the same.
  6.  Let =paramVarEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=originalEnv=).
  7.  Set the VariableEnvironment of =currentContext= to =paramVarEnv=.
  8.  Set the LexicalEnvironment of =currentContext= to =paramVarEnv=.
  9.  Let =result= be IteratorBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      with arguments =iteratorRecord= and =environment=.
  10. Set the VariableEnvironment of =currentContext= to =originalEnv=.
  11. Set the LexicalEnvironment of =currentContext= to =originalEnv=.
  12. Return =result=.

  Note 3

  The new [[https://tc39.es/ecma262/#sec-environment-records][Environment
  Record]] created in step 6 is only used if the
  [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
  contains a
  [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
  eval]].

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject
    :END:

  With parameter =scope=.

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =name= be StringValue of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  3. Perform
     [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=F=).
  4. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  5. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].
  6. Return =F=.

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  2. Perform
     [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=F=).
  3. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  4. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].
  5. Return =F=.

  Note

  An anonymous
  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
  can only occur as part of an =export default= declaration, and its
  function code is therefore always
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-1
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-57
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  Note 1

  An alternative semantics is provided in
  [[https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics][B.3.3]].

  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  3. Perform
     [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=closure=).
  4. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].
  5. Return =closure=.

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  2.  Let =funcEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  5.  Perform =envRec=.CreateImmutableBinding(=name=, false).
  6.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
      non-lexical-this, =funcEnv=).
  7.  Perform
      [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=closure=).
  8.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].
  10. Perform =envRec=.InitializeBinding(=name=, =closure=).
  11. Return =closure=.

  Note 2

  The
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
  can be referenced from inside the
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]'s
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] to allow
  the function to call itself recursively. However, unlike in a
  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
  the
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
  cannot be referenced from and does not affect the scope enclosing the
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].

  Note 3

  A "prototype" property is automatically created for every function
  defined using a
  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
  or
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
  to allow for the possibility that the function will be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

** Arrow Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: arrow-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-56
    :END:

 [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]][In,
 Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][?Yield,
 ?Await][no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]][?In]
 [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]][In]:[lookahead
 ≠
 {][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 ~Yield, ~Await]
 {[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
*** Supplemental Syntax
    :PROPERTIES:
    :CUSTOM_ID: supplemental-syntax-3
    :END:

 When the production\\
 [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
 ?Await]\\
 is recognized the following grammar is used to refine the interpretation
 of
 [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:

 [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]][Yield,
 Await]:([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][?Yield,
 ?Await])
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-24
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]] is true and
    IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]] is
    false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]].

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
    is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
    [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]].
  - All [[https://tc39.es/ecma262/#early-error][early error]] rules for
    [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]]
    and its derived productions also apply to CoveredFormalsList of
    [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-6
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  1. Let =formals= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
  2. Return the BoundNames of =formals=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-3
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. If =symbol= is not one of
     [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]],
     [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]],
     [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]], =super= or
     =this=, return false.
  2. If [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
     Contains =symbol= is true, return true.
  3. Return [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]
     Contains =symbol=.

  Note

  Normally, Contains does not look inside most function forms. However,
  Contains is used to detect =new.target=, =this=, and =super= usage
  within an
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  1. Let =formals= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
  2. Return =formals= Contains =symbol=.

*** Static Semantics: ContainsExpression
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsexpression-2
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. Return false.

*** Static Semantics: ContainsUseStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsusestrict-1
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return false.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount-1
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. Return 1.

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-2
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. Return false.

*** Static Semantics: IsSimpleParameterList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-issimpleparameterlist-2
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  1. Let =formals= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
  2. Return IsSimpleParameterList of =formals=.

*** Static Semantics: CoveredFormalsList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-coveredformalslist
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. Return this
     [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]].

  [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])
  ()
  (...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]])
  (...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]])
  ([[https://tc39.es/ecma262/#prod-Expression][Expression]],...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]])
  ([[https://tc39.es/ecma262/#prod-Expression][Expression]],...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]])

  1. Return the
     [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]]
     that is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]]
     by
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-4
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-4
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-13
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-13
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Runtime Semantics: IteratorBindingInitialization
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-iteratorbindinginitialization-2
    :END:

  With parameters =iteratorRecord= and =environment=.

  Note

  When undefined is passed for =environment= it indicates that a
  [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
  used to assign the initialization value. This is the case for formal
  parameter lists of non-strict functions. In that case the formal
  parameter bindings are preinitialized in order to deal with the
  possibility of multiple parameters with the same name.

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. [[https://tc39.es/ecma262/#assert][Assert]]:
     =iteratorRecord=.[[Done]] is false.
  2. Let =next= be
     [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
  3. If =next= is an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], set =iteratorRecord=.[[Done]] to true.
  4. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
  5. If =next= is false, set =iteratorRecord=.[[Done]] to true.
  6. Else,

     1. Let =v= be
        [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
     2. If =v= is an
        [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
        completion]], set =iteratorRecord=.[[Done]] to true.
     3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=v=).

  7. If =iteratorRecord=.[[Done]] is true, let =v= be undefined.
  8. Return the result of performing BindingInitialization for
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
     using =v= and =environment= as the arguments.

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-1
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
  3. Let =exprValue= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  4. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =exprValue=, [[Target]]: empty }.

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-2
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-58
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =parameters= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]].
  3. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     =parameters=,
     [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]],
     lexical-this, =scope=).
  4. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].
  5. Return =closure=.

  Note

  An [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] does
  not define local bindings for =arguments=, =super=, =this=, or
  =new.target=. Any reference to =arguments=, =super=, =this=, or
  =new.target= within an
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] must
  resolve to a binding in a lexically enclosing environment. Typically
  this will be the Function Environment of an immediately enclosing
  function. Even though an
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] may
  contain references to =super=, the
  [[https://tc39.es/ecma262/#function-object][function object]] created in
  step 4 is not made into a method by performing
  [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]]. An
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] that
  references =super= is always contained within a
  non-[[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] and
  the necessary state to implement =super= is accessible via the =scope=
  that is captured by the
  [[https://tc39.es/ecma262/#function-object][function object]] of the
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].

** Method Definitions
   :PROPERTIES:
   :CUSTOM_ID: method-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-57
    :END:

 [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][~Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]][?Yield,
 ?Await]
 get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][~Yield,
 ~Await]
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-25
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]].

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  - It is a Syntax Error if BoundNames of
    [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
    contains any duplicate elements.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]].

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-1
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount-2
    :END:

  [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]] is
     true, return 0.
  2. Return 1.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-1
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Static Semantics: SpecialMethod
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-specialmethod
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]
  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]
  get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return true.

*** Runtime Semantics: DefineMethod
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-definemethod
    :END:

  With parameter =object= and optional parameter =functionPrototype=.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =propKey= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3. Let =scope= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  4. If =functionPrototype= is present as a parameter, then

     1. Let =prototype= be =functionPrototype=.

  5. Else,

     1. Let =prototype= be
        [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

  6. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](=prototype=,
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  7. Perform
     [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
     =object=).
  8. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]].
  9. Return the
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
     { [[Key]]: =propKey=, [[Closure]]: =closure= }.

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-1
    :END:

  With parameters =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =methodDef= be ? DefineMethod of
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
     with argument =object=.
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=methodDef=.[[Closure]],
     =methodDef=.[[Key]]).
  3. Let =desc= be the PropertyDescriptor { [[Value]]:
     =methodDef=.[[Closure]], [[Writable]]: true, [[Enumerable]]:
     =enumerable=, [[Configurable]]: true }.
  4. Return
     ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
     =methodDef=.[[Key]], =desc=).

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1.  Let =propKey= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  4.  Let =formalParameterList= be an instance of the production
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]
      .
  5.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
      =formalParameterList=,
      [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
      non-lexical-this, =scope=).
  6.  Perform
      [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
      =object=).
  7.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =propKey=, "get").
  8.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]].
  9.  Let =desc= be the PropertyDescriptor { [[Get]]: =closure=,
      [[Enumerable]]: =enumerable=, [[Configurable]]: true }.
  10. Return
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
      =propKey=, =desc=).

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =propKey= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3. Let =scope= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  4. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  5. Perform
     [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
     =object=).
  6. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =propKey=, "set").
  7. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]].
  8. Let =desc= be the PropertyDescriptor { [[Set]]: =closure=,
     [[Enumerable]]: =enumerable=, [[Configurable]]: true }.
  9. Return
     ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
     =propKey=, =desc=).

** Generator Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: generator-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-58
    :END:

 [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]][Yield,
 Await]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]][Yield,
 Await,
 Default]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [+Default]function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][+Yield,
 ~Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][+Yield,
 ~Await]
 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]][In,
 Await]:yield yield[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 +Yield, ?Await] yield[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]*[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 +Yield, ?Await] Note 1

 The syntactic context immediately following =yield= requires use of the
 [[https://tc39.es/ecma262/#prod-InputElementRegExpOrTemplateTail][InputElementRegExpOrTemplateTail]]
 lexical goal.

 Note 2

 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
 cannot be used within the
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] of
 a generator function because any expressions that are part of
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] are
 evaluated before the resulting generator object is in a resumable state.

 Note 3

 [[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][Abstract
 operations]] relating to generator objects are defined in
 [[https://tc39.es/ecma262/#sec-generator-abstract-operations][25.4.3]].

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-26
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]].

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-7
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-2
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-4
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return false.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into function definitions.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper-1
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-3
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-2
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-17
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return true.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-2
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-2
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Let =G= be
     ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=functionObject=,
     "%Generator.prototype%", « [[GeneratorState]], [[GeneratorContext]]
     »).
  3. Perform
     [[https://tc39.es/ecma262/#sec-generatorstart][GeneratorStart]](=G=,
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]).
  4. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =G=, [[Target]]: empty }.

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject-1
    :END:

  With parameter =scope=.

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =name= be StringValue of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  4. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  6. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]].
  7. Return =F=.

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     non-lexical-this, =scope=).
  2. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  3. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  4. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  5. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]].
  6. Return =F=.

  Note

  An anonymous
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]
  can only occur as part of an =export default= declaration, and its
  function code is therefore always
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-2
    :END:

  With parameters =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1.  Let =propKey= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  4.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
      [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
      [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
      non-lexical-this, =scope=).
  5.  Perform
      [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
      =object=).
  6.  Let =prototype= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  7.  Perform
      [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  8.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =propKey=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]].
  10. Let =desc= be the PropertyDescriptor { [[Value]]: =closure=,
      [[Writable]]: true, [[Enumerable]]: =enumerable=, [[Configurable]]:
      true }.
  11. Return
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
      =propKey=, =desc=).

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-3
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-59
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  4. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].
  6. Return =closure=.

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  2.  Let =funcEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  5.  Perform =envRec=.CreateImmutableBinding(=name=, false).
  6.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
      non-lexical-this, =funcEnv=).
  7.  Let =prototype= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  8.  Perform
      [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  9.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  10. Perform =envRec=.InitializeBinding(=name=, =closure=).
  11. Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].
  12. Return =closure=.

  Note

  The
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
  can be referenced from inside the
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]'s
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] to allow
  the generator code to call itself recursively. However, unlike in a
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
  the
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
  cannot be referenced from and does not affect the scope enclosing the
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].

  [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]:yield

  1. Let =generatorKind= be
     ! [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]().
  2. If =generatorKind= is async, then return
     ? [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](undefined).
  3. Otherwise, return
     ? [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]]([[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
     false)).

  [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]:yield[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Let =generatorKind= be
     ! [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]().
  2. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
  3. Let =value= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  4. If =generatorKind= is async, then return
     ? [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](=value=).
  5. Otherwise, return
     ? [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]]([[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=value=,
     false)).

  [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]:yield*[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Let =generatorKind= be
     ! [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]().
  2. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
  3. Let =value= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  4. Let =iteratorRecord= be
     ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=,
     =generatorKind=).
  5. Let =iterator= be =iteratorRecord=.[[Iterator]].
  6. Let =received= be
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).
  7. Repeat,

     1. If =received=.[[Type]] is normal, then

        1. Let =innerResult= be
           ? [[https://tc39.es/ecma262/#sec-call][Call]](=iteratorRecord=.[[NextMethod]],
           =iteratorRecord=.[[Iterator]], « =received=.[[Value]] »).
        2. If =generatorKind= is async, then set =innerResult= to
           ? [[https://tc39.es/ecma262/#await][Await]](=innerResult=).
        3. If
           [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerResult=)
           is not Object, throw a TypeError exception.
        4. Let =done= be
           ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=innerResult=).
        5. If =done= is true, then

           1. Return
              ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=).

        6. If =generatorKind= is async, then set =received= to
           [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](?
           [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=)).
        7. Else, set =received= to
           [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]](=innerResult=).

     2. Else if =received=.[[Type]] is throw, then

        1. Let =throw= be
           ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=iterator=,
           "throw").
        2. If =throw= is not undefined, then

           1. Let =innerResult= be
              ? [[https://tc39.es/ecma262/#sec-call][Call]](=throw=,
              =iterator=, « =received=.[[Value]] »).
           2. If =generatorKind= is async, then set =innerResult= to
              ? [[https://tc39.es/ecma262/#await][Await]](=innerResult=).
           3. NOTE: Exceptions from the inner iterator =throw= method are
              propagated. Normal completions from an inner =throw= method
              are processed similarly to an inner =next=.
           4. If
              [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerResult=)
              is not Object, throw a TypeError exception.
           5. Let =done= be
              ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=innerResult=).
           6. If =done= is true, then

              1. Return
                 ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=).

           7. If =generatorKind= is async, then set =received= to
              [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](?
              [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=)).
           8. Else, set =received= to
              [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]](=innerResult=).

        3. Else,

           1. NOTE: If =iterator= does not have a =throw= method, this
              throw is going to terminate the =yield*= loop. But first we
              need to give =iterator= a chance to clean up.
           2. Let =closeCompletion= be
              [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
              { [[Type]]: normal, [[Value]]: empty, [[Target]]: empty }.
           3. If =generatorKind= is async, perform
              ? [[https://tc39.es/ecma262/#sec-asynciteratorclose][AsyncIteratorClose]](=iteratorRecord=,
              =closeCompletion=).
           4. Else, perform
              ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
              =closeCompletion=).
           5. NOTE: The next step throws a TypeError to indicate that
              there was a =yield*= protocol violation: =iterator= does not
              have a =throw= method.
           6. Throw a TypeError exception.

     3. Else,

        1.  [[https://tc39.es/ecma262/#assert][Assert]]:
            =received=.[[Type]] is return.
        2.  Let =return= be
            ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=iterator=,
            "return").
        3.  If =return= is undefined, then

            1. If =generatorKind= is async, then set =received=.[[Value]]
               to
               ? [[https://tc39.es/ecma262/#await][Await]](=received=.[[Value]]).
            2. Return
               [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=received=).

        4.  Let =innerReturnResult= be
            ? [[https://tc39.es/ecma262/#sec-call][Call]](=return=,
            =iterator=, « =received=.[[Value]] »).
        5.  If =generatorKind= is async, then set =innerReturnResult= to
            ? [[https://tc39.es/ecma262/#await][Await]](=innerReturnResult=).
        6.  If
            [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerReturnResult=)
            is not Object, throw a TypeError exception.
        7.  Let =done= be
            ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=innerReturnResult=).
        8.  If =done= is true, then

            1. Let =value= be
               ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerReturnResult=).
            2. Return
               [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
               { [[Type]]: return, [[Value]]: =value=, [[Target]]: empty
               }.

        9.  If =generatorKind= is async, then set =received= to
            [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](?
            [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerReturnResult=)).
        10. Else, set =received= to
            [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]](=innerReturnResult=).

** Async Generator Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: async-generator-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-59
    :END:

 [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]][Yield,
 Await]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]][Yield,
 Await, Default]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [+Default]async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][+Yield,
 +Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][+Yield,
 +Await] Note 1

 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] and
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]
 cannot be used within the
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] of
 an async generator function because any expressions that are part of
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] are
 evaluated before the resulting async generator object is in a resumable
 state.

 Note 2

 [[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][Abstract
 operations]] relating to async generator objects are defined in
 [[https://tc39.es/ecma262/#sec-asyncgenerator-abstract-operations][25.5.3]].

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-27
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]
    is true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]].

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-8
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-3
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-5
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return false.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into function definitions.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper-2
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-4
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-18
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return true.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-3
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Let =generator= be
     ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=functionObject=,
     "%AsyncGenerator.prototype%", « [[AsyncGeneratorState]],
     [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]] »).
  3. Perform
     ! [[https://tc39.es/ecma262/#sec-asyncgeneratorstart][AsyncGeneratorStart]](=generator=,
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]).
  4. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =generator=, [[Target]]: empty }.

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject-2
    :END:

  With parameter =scope=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =name= be StringValue of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  4. Perform
     ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  6. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
  7. Return =F=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     non-lexical-this, =scope=).
  2. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  3. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  4. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  5. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
  6. Return =F=.

  Note

  An anonymous
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]
  can only occur as part of an =export default= declaration.

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-3
    :END:

  With parameter =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1.  Let =propKey= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  4.  Let =closure= be
      ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
      [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
      non-lexical-this, =scope=).
  5.  Perform
      ! [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
      =object=).
  6.  Let =prototype= be
      ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  7.  Perform
      ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  8.  Perform
      ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =propKey=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]].
  10. Let =desc= be PropertyDescriptor { [[Value]]: =closure=,
      [[Writable]]: true, [[Enumerable]]: =enumerable=, [[Configurable]]:
      true }.
  11. Return
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
      =propKey=, =desc=).

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-4
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-60
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  4. Perform
     ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
  6. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  2.  Let =funcEnv= be
      ! [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  5.  Perform ! =envRec=.CreateImmutableBinding(=name=).
  6.  Let =closure= be
      ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
      non-lexical-this, =funcEnv=).
  7.  Let =prototype= be
      ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  8.  Perform
      ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  9.  Perform
      ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  10. Perform ! =envRec=.InitializeBinding(=name=, =closure=).
  11. Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
  12. Return =closure=.

  Note

  The
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  in an
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
  can be referenced from inside the
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]'s
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
  to allow the generator code to call itself recursively. However, unlike
  in an
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
  the
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  in an
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
  cannot be referenced from and does not affect the scope enclosing the
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].

** Class Definitions
   :PROPERTIES:
   :CUSTOM_ID: class-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-60
    :END:

 [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]][Yield,
 Await,
 Default]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
 ?Await]
 [+Default]class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]][Yield,
 Await]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]opt[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]][?Yield,
 ?Await]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]][?Yield,
 ?Await]opt}
 [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]][Yield,
 Await]:extends[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
 ?Await]
 static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
 ?Await] ; Note

 A class definition is always
 [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-28
    :END:

  [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]}

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]] is not
    present and the following algorithm evaluates to true:

    1. Let =constructor= be ConstructorMethod of
       [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]].
    2. If =constructor= is empty, return false.
    3. Return HasDirectSuper of =constructor=.

  [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]

  - It is a Syntax Error if PrototypePropertyNameList of
    [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]
    contains more than one occurrence of "constructor".

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  - It is a Syntax Error if PropName of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is not "constructor" and HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is true.
  - It is a Syntax Error if PropName of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is "constructor" and SpecialMethod of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is true.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is true.
  - It is a Syntax Error if PropName of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is "prototype".

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-9
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return « "*default*" ».

*** Static Semantics: ConstructorMethod
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-constructormethod
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return empty.
  2. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return empty.
  3. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is not
     "constructor", return empty.
  4. Return [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =head= be ConstructorMethod of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]].
  2. If =head= is not empty, return =head=.
  3. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return empty.
  4. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return empty.
  5. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is not
     "constructor", return empty.
  6. Return [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  Note

  Early Error rules ensure that there is only one method definition named
  "constructor" and that it is not an
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] or
  generator definition.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-6
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]}

  1. If =symbol= is
     [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]], return true.
  2. If =symbol= is
     [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]], then

     1. If [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]
        is present, return true; otherwise return false.

  3. Let =inHeritage= be
     [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]
     Contains =symbol=.
  4. If =inHeritage= is true, return true.
  5. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]] with argument
     =symbol=.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into class bodies except for
  [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]s.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-4
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =inList= be ComputedPropertyContains of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]
     with argument =symbol=.
  2. If =inList= is true, return true.
  3. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] with
     argument =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
     with argument =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
     with argument =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:;

  1. Return false.

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-5
    :END:

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-4
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]
  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-19
    :END:

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return true.

*** Static Semantics: IsStatic
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isstatic
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:;

  1. Return false.

*** Static Semantics: NonConstructorMethodDefinitions
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-nonconstructormethoddefinitions
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is false
     and PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     "constructor", return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  3. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =list= be NonConstructorMethodDefinitions of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]].
  2. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return =list=.
  3. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is false
     and PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     "constructor", return =list=.
  4. Append [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]
     to the end of =list=.
  5. Return =list=.

*** Static Semantics: PrototypePropertyNameList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-prototypepropertynamelist
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     empty, return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  3. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =list= be PrototypePropertyNameList of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]].
  2. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     empty, return =list=.
  3. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return =list=.
  4. Append PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] to the
     end of =list=.
  5. Return =list=.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-4
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:;

  1. Return empty.

*** Semantics: ClassDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-classdefinitionevaluation
    :END:

  With parameters =classBinding= and =className=.

  [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]opt}

  1.  Let =lex= be the LexicalEnvironment of the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  2.  Let =classScope= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=lex=).
  3.  Let =classScopeEnvRec= be =classScope='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  If =classBinding= is not undefined, then

      1. Perform =classScopeEnvRec=.CreateImmutableBinding(=classBinding=,
         true).

  5.  If [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt
      is not present, then

      1. Let =protoParent= be %Object.prototype%.
      2. Let =constructorParent= be
         [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

  6.  Else,

      1. Set the
         [[https://tc39.es/ecma262/#running-execution-context][running
         execution context]]'s LexicalEnvironment to =classScope=.
      2. Let =superclassRef= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]].
      3. Set the
         [[https://tc39.es/ecma262/#running-execution-context][running
         execution context]]'s LexicalEnvironment to =lex=.
      4. Let =superclass= be
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=superclassRef=).
      5. If =superclass= is null, then

         1. Let =protoParent= be null.
         2. Let =constructorParent= be
            [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

      6. Else if
         [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=superclass=)
         is false, throw a TypeError exception.
      7. Else,

         1. Let =protoParent= be
            ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=superclass=,
            "prototype").
         2. If
            [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=protoParent=)
            is neither Object nor Null, throw a TypeError exception.
         3. Let =constructorParent= be =superclass=.

  7.  Let =proto= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](=protoParent=).
  8.  If [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]opt is not
      present, let =constructor= be empty.
  9.  Else, let =constructor= be ConstructorMethod of
      [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]].
  10. If =constructor= is empty, then

      1. If
         [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt
         is present, then

         1. Set =constructor= to the result of parsing the source text

            #+BEGIN_EXAMPLE
              constructor(...args) { super(...args); }
            #+END_EXAMPLE

            using the syntactic grammar with the
            [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
            symbol]]
            [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][~Yield,
            ~Await].

      2. Else,

         1. Set =constructor= to the result of parsing the source text

            #+BEGIN_EXAMPLE
              constructor() {}
            #+END_EXAMPLE

            using the syntactic grammar with the
            [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
            symbol]]
            [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][~Yield,
            ~Await].

  11. Set the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =classScope=.
  12. Let =constructorInfo= be ! DefineMethod of =constructor= with
      arguments =proto= and =constructorParent=.
  13. Let =F= be =constructorInfo=.[[Closure]].
  14. Perform
      [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=F=,
      false, =proto=).
  15. If [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt
      is present, set =F=.[[ConstructorKind]] to derived.
  16. Perform
      [[https://tc39.es/ecma262/#sec-makeclassconstructor][MakeClassConstructor]](=F=).
  17. If =className= is not undefined, then

      1. Perform
         [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
         =className=).

  18. Perform
      [[https://tc39.es/ecma262/#sec-createmethodproperty][CreateMethodProperty]](=proto=,
      "constructor", =F=).
  19. If [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]opt is not
      present, let =methods= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  20. Else, let =methods= be NonConstructorMethodDefinitions of
      [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]].
  21. For each
      [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] =m= in
      order from =methods=, do

      1. If IsStatic of =m= is false, then

         1. Let =status= be PropertyDefinitionEvaluation of =m= with
            arguments =proto= and false.

      2. Else,

         1. Let =status= be PropertyDefinitionEvaluation of =m= with
            arguments =F= and false.

      3. If =status= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], then

         1. Set the
            [[https://tc39.es/ecma262/#running-execution-context][running
            execution context]]'s LexicalEnvironment to =lex=.
         2. Return
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

  22. Set the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =lex=.
  23. If =classBinding= is not undefined, then

      1. Perform =classScopeEnvRec=.InitializeBinding(=classBinding=,
         =F=).

  24. Return =F=.

*** Semantics: BindingClassDeclarationEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-bindingclassdeclarationevaluation
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Let =className= be StringValue of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  2. Let =value= be ? ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     =className= and =className=.
  3. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  4. Let =env= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  5. Perform
     ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]](=className=,
     =value=, =env=).
  6. Return =value=.

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Let =value= be ? ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     undefined and "default".
  2. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  3. Return =value=.

  Note

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]
  only occurs as part of an
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
  and establishing its binding is handled as part of the evaluation action
  for that production. See
  [[https://tc39.es/ecma262/#sec-exports-runtime-semantics-evaluation][15.2.3.11]].

*** Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-5
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Let =value= be the result of ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     undefined and =name=.
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=value=).
  3. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]].
  4. Return =value=.

*** Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-61
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Perform ? BindingClassDeclarationEvaluation of this
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  2. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  Note

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]
  only occurs as part of an
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
  and is never directly evaluated.

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. If
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]opt
     is not present, let =className= be undefined.
  2. Else, let =className= be StringValue of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  3. Let =value= be ? ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     =className= and =className=.
  4. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]].
  5. Return =value=.

** Async Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: async-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-61
    :END:

 [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]][Yield,
 Await, Default]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [+Default]async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][~Yield,
 +Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]][Yield,
 Await]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 +Await]
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]][Yield]:await[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
 +Await] Note 1

 =await= is parsed as an
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] when
 the _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is present.
 The _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is present
 in the following contexts:

 - In an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]].
 - In the
   [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
   of an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
   or
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
   [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] in
   this position is a Syntax error via
   [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
   semantics]].

 When [[https://tc39.es/ecma262/#prod-Module][Module]] is the syntactic
 [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]] and
 the _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is absent,
 =await= is parsed as a
 [[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]]
 and will be a Syntax error. When
 [[https://tc39.es/ecma262/#prod-Script][Script]] is the syntactic
 [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]],
 =await= may be parsed as an identifier when the
 _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is absent. This
 includes the following contexts:

 - Anywhere outside of an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
   or
   [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
   of an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
   or
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
 - In the
   [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
   of a
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
   or
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].

 Note 2

 Unlike
 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]], it
 is a Syntax Error to omit the operand of an
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]. You
 must await something.

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-29
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]] is true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]].

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-10
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-5
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-7
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return false.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-6
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-20
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return true.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject-3
    :END:

  With parameter =scope=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =name= be StringValue of
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  3. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  4. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]].
  5. Return =F=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =F= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  2. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  3. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]].
  4. Return =F=.

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-4
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]

  1. Let =promiseCapability= be
     ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
  2. Let =declResult= be
     [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  3. If =declResult= is not an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], then

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-async-functions-abstract-operations-async-function-start][AsyncFunctionStart]](=promiseCapability=,
        [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]).

  4. Else,

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
        undefined, « =declResult=.[[Value]] »).

  5. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =promiseCapability=.[[Promise]],
     [[Target]]: empty }.

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-4
    :END:

  With parameters =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =propKey= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  4. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  5. Perform
     ! [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
     =object=).
  6. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =propKey=).
  7. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]].
  8. Let =desc= be the PropertyDescriptor { [[Value]]: =closure=,
     [[Writable]]: true, [[Enumerable]]: =enumerable=, [[Configurable]]:
     true }.
  9. Return
     ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
     =propKey=, =desc=).

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-6
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-62
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  3. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]].
  4. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1.  Let =scope= be the LexicalEnvironment of the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  2.  Let =funcEnv= be
      ! [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]].
  5.  Perform ! =envRec=.CreateImmutableBinding(=name=).
  6.  Let =closure= be
      ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
      non-lexical-this, =funcEnv=).
  7.  Perform
      ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  8.  Perform ! =envRec=.InitializeBinding(=name=, =closure=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]].
  10. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]:await[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

  1. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
  2. Let =value= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  3. Return ? [[https://tc39.es/ecma262/#await][Await]](=value=).

** Async Arrow Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: async-arrow-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-62
    :END:

 [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]][In,
 Yield, Await]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][?Yield][no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][?In]
 [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][?Yield,
 ?Await][no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][?In]
 [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][In]:[lookahead
 ≠
 {][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 ~Yield, +Await]
 {[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][Yield]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
 +Await]
 [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
 ?Await]
*** Supplemental Syntax
    :PROPERTIES:
    :CUSTOM_ID: supplemental-syntax-4
    :END:

 When processing an instance of the production
 [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
 the interpretation of
 [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
 is refined using the following grammar:

 [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]][~Yield,
 +Await]
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-30
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]].

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
    [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]].
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]].
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    is false.
  - All Early Error rules for
    [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]] and
    its derived productions apply to CoveredAsyncArrowHead of
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].

*** Static Semantics: CoveredAsyncArrowHead
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-coveredasyncarrowhead
    :END:

  [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

  1. Return the
     [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]] that
     is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]] by
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-11
    :END:

  [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

  1. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  2. Return the BoundNames of =head=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-8
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. If =symbol= is not one of
     [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]],
     [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]],
     [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]], =super=, or
     =this=, return false.
  2. Return
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
     Contains =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. If =symbol= is not one of
     [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]],
     [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]],
     [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]], =super=, or
     =this=, return false.
  2. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  3. If =head= Contains =symbol= is true, return true.
  4. Return
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
     Contains =symbol=.

  Note

  Normally, Contains does not look inside most function forms. However,
  Contains is used to detect =new.target=, =this=, and =super= usage
  within an AsyncArrowFunction.

*** Static Semantics: ContainsExpression
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsexpression-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. Return false.

*** Static Semantics: ContainsUseStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsusestrict-2
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return false.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. Return 1.

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-7
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Return false.

*** Static Semantics: IsSimpleParameterList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-issimpleparameterlist-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][Yield]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
  +Await]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

  1. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  2. Return IsSimpleParameterList of =head=.

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-14
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-14
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Runtime Semantics: IteratorBindingInitialization
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-iteratorbindinginitialization-3
    :END:

  With parameters =iteratorRecord= and =environment=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]

  1. [[https://tc39.es/ecma262/#assert][Assert]]:
     =iteratorRecord=.[[Done]] is false.
  2. Let =next= be
     [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
  3. If =next= is an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], set =iteratorRecord=.[[Done]] to true.
  4. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
  5. If =next= is false, set =iteratorRecord=.[[Done]] to true.
  6. Else,

     1. Let =v= be
        [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
     2. If =v= is an
        [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
        completion]], set =iteratorRecord=.[[Done]] to true.
     3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=v=).

  7. If =iteratorRecord=.[[Done]] is true, let =v= be undefined.
  8. Return the result of performing BindingInitialization for
     [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
     using =v= and =environment= as the arguments.

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-5
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Let =promiseCapability= be
     ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
  2. Let =declResult= be
     [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  3. If =declResult= is not an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], then

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-async-functions-abstract-operations-async-function-start][AsyncFunctionStart]](=promiseCapability=,
        [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]).

  4. Else,

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
        undefined, « =declResult=.[[Value]] »).

  5. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =promiseCapability=.[[Promise]],
     [[Target]]: empty }.

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:{[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return the result of EvaluateBody of
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
     passing =functionObject= and =argumentsList= as the arguments.

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-7
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-63
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =parameters= be
     [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]].
  3. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     =parameters=,
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     lexical-this, =scope=).
  4. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]].
  5. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  3. Let =parameters= be the
     [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]]
     of =head=.
  4. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     =parameters=,
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     lexical-this, =scope=).
  5. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]].
  6. Return =closure=.

** Tail Position Calls
   :PROPERTIES:
   :CUSTOM_ID: tail-position-calls
   :END:

*** Static Semantics: IsInTailPosition ( =call= )
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isintailposition-call
    :END:

  The abstract operation IsInTailPosition with argument =call= performs
  the following steps:

  1. [[https://tc39.es/ecma262/#assert][Assert]]: =call= is a
     [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]].
  2. If the source code matching =call= is
     [[https://tc39.es/ecma262/#non-strict-code][non-strict code]], return
     false.
  3. If =call= is not contained within a
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]], or
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     return false.
  4. Let =body= be the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]], or
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
     that most closely contains =call=.
  5. If =body= is the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] of a
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     return false.
  6. If =body= is the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] of an
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     return false.
  7. If =body= is the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] of an
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     return false.
  8. If =body= is an
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     return false.
  9. Return the result of HasCallInTailPosition of =body= with argument
     =call=.

  Note

  Tail Position calls are only defined in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
  because of a common non-standard language extension (see
  [[https://tc39.es/ecma262/#sec-addrestrictedfunctionproperties][9.2.4]])
  that enables observation of the chain of caller contexts.

*** Static Semantics: HasCallInTailPosition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hascallintailposition
    :END:

  With parameter =call=.

  Note

  =call= is a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse
  Node]] that represents a specific range of source text. When the
  following algorithms compare =call= to another
  [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]], it is a
  test of whether they represent the same source text.

*** Statement Rules
    :PROPERTIES:
    :CUSTOM_ID: statement-rules
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
     with argument =call=.

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =has= be HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
     argument =call=.
  2. If =has= is true, return true.
  3. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]
     with argument =call=.

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]
  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]
  [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
  [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]
  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]
  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]
  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}
  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]:return;
  [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
  [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =has= be HasCallInTailPosition of the first
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =call=.
  2. If =has= is true, return true.
  3. Return HasCallInTailPosition of the second
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);
  while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]] with
     argument =call=.

  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]:return[[https://tc39.es/ecma262/#prod-Expression][Expression]];

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Expression][Expression]] with
     argument =call=.

  [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

  1. Let =has= be false.
  2. If the first
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
     present, let =has= be HasCallInTailPosition of the first
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
     argument =call=.
  3. If =has= is true, return true.
  4. Let =has= be HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]] with
     argument =call=.
  5. If =has= is true, return true.
  6. If the second
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
     present, let =has= be HasCallInTailPosition of the second
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
     argument =call=.
  7. Return =has=.

  [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

  1. Let =has= be HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
     argument =call=.
  2. If =has= is true, return true.
  3. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] with
     argument =call=.

  [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt
  [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

  1. If [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] is
     present, return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
     argument =call=.
  2. Return false.

  [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument =call=.

  [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]
  [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Finally][Finally]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Block][Block]] with argument =call=.

**** Expression Rules
     :PROPERTIES:
     :CUSTOM_ID: expression-rules
     :END:

   Note

   A potential tail position call that is immediately followed by return
   [[https://tc39.es/ecma262/#sec-getvalue][GetValue]] of the call result
   is also a possible tail position call. Function calls cannot return
   reference values, so such a
   [[https://tc39.es/ecma262/#sec-getvalue][GetValue]] operation will
   always return the same value as the actual function call result.

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
   [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]
   [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]&[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]^[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]|[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!=[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]===[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]instanceof[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]in[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]<<[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]+[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]
   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]-[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]
   [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]:[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]][[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]
   [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]:[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]**[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]
   [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]++
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]--
   ++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   --[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   void[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   typeof[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   +[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] -[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   ~[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   ![[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]:new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]
   [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]
   new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:this
   [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
   [[https://tc39.es/ecma262/#prod-Literal][Literal]]
   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
   [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-Expression][Expression]],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]?[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =has= be HasCallInTailPosition of the first
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
      with argument =call=.
   2. If =has= is true, return true.
   3. Return HasCallInTailPosition of the second
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]:[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]&&[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]||[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. If this
      [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] is
      =call=, return true.
   2. Return false.

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. If this
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]
      is =call=, return true.
   2. Return false.

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Let =expr= be CoveredParenthesizedExpression of
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   2. Return HasCallInTailPosition of =expr= with argument =call=.

   [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-Expression][Expression]] with
      argument =call=.

*** Runtime Semantics: PrepareForTailCall ( )
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-preparefortailcall
    :END:

  The abstract operation PrepareForTailCall performs the following steps:

  1. Let =leafContext= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =leafContext=.
  3. Pop =leafContext= from the
     [[https://tc39.es/ecma262/#execution-context-stack][execution context
     stack]]. The
     [[https://tc39.es/ecma262/#sec-execution-contexts][execution
     context]] now on the top of the stack becomes the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  4. [[https://tc39.es/ecma262/#assert][Assert]]: =leafContext= has no
     further use. It will never be activated as the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].

  A tail position call must either release any transient internal
  resources associated with the currently executing function
  [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]]
  before invoking the target function or reuse those resources in support
  of the target function.

  Note

  For example, a tail position call should only grow an implementation's
  activation record stack by the amount that the size of the target
  function's activation record exceeds the size of the calling function's
  activation record. If the target function's activation record is
  smaller, then the total size of the stack should decrease.

* ECMAScript Language: Scripts and Modules
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-scripts-and-modules
  :END:

** Scripts
   :PROPERTIES:
   :CUSTOM_ID: scripts
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-63
    :END:

 [[https://tc39.es/ecma262/#prod-Script][Script]]:[[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]opt
 [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][~Yield,
 ~Await, ~Return]
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-31
    :END:

  [[https://tc39.es/ecma262/#prod-Script][Script]]:[[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]

  - It is a Syntax Error if the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]] contains any
    duplicate entries.
  - It is a Syntax Error if any element of the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]] also occurs
    in the VarDeclaredNames of
    [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]].

  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
    Contains =super= unless the source code containing =super= is eval
    code that is being processed by a
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]]. Additional [[https://tc39.es/ecma262/#early-error][early
    error]] rules for =super= within
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]] are defined in
    [[https://tc39.es/ecma262/#sec-performeval][18.2.1.1]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
    Contains [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]] unless
    the source code containing
    [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]] is eval code
    that is being processed by a
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]]. Additional [[https://tc39.es/ecma262/#early-error][early
    error]] rules for
    [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]] in
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]] are defined in
    [[https://tc39.es/ecma262/#sec-performeval][18.2.1.1]].
  - It is a Syntax Error if ContainsDuplicateLabels of
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
    argument « » is true.
  - It is a Syntax Error if ContainsUndefinedBreakTarget of
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
    argument « » is true.
  - It is a Syntax Error if ContainsUndefinedContinueTarget of
    [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
    arguments « » and « » is true.

*** Static Semantics: IsStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isstrict
    :END:

  [[https://tc39.es/ecma262/#prod-Script][Script]]:[[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]opt

  1. If [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]] is
     present and the
     [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
     of [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]] contains
     a [[https://tc39.es/ecma262/#use-strict-directive][Use Strict
     Directive]], return true; otherwise, return false.

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-6
    :END:

  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelLexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

  Note

  At the top level of a [[https://tc39.es/ecma262/#prod-Script][Script]],
  function declarations are treated like var declarations rather than like
  lexical declarations.

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-6
    :END:

  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelLexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-15
    :END:

  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelVarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-15
    :END:

  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelVarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-64
    :END:

  [[https://tc39.es/ecma262/#prod-Script][Script]]:[empty]

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

*** Script Records
    :PROPERTIES:
    :CUSTOM_ID: script-records
    :END:

  A Script Record encapsulates information about a script being evaluated.
  Each script record contains the fields listed in
  [[https://tc39.es/ecma262/#table-script-records][Table 38]].

  Table 38: [[https://tc39.es/ecma262/#script-record][Script Record]]
  Fields
  | Field Name           | Value Type                                                                               | Meaning                                                                                                                                                                                   |
  |----------------------+------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | [[Realm]]            | [[https://tc39.es/ecma262/#realm-record][Realm Record]] | undefined                      | The [[https://tc39.es/ecma262/#realm][realm]] within which this script was created. undefined if not yet assigned.                                                                        |
  | [[Environment]]      | [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] | undefined   | The [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] containing the top level bindings for this script. This field is set when the script is instantiated.      |
  | [[ECMAScriptCode]]   | a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]                         | The result of parsing the source text of this script using [[https://tc39.es/ecma262/#prod-Script][Script]] as the [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]].   |
  | [[HostDefined]]      | Any, default value is undefined.                                                         | Field reserved for use by host environments that need to associate additional information with a script.                                                                                  |

*** ParseScript ( =sourceText=, =realm=, =hostDefined= )
    :PROPERTIES:
    :CUSTOM_ID: parsescript-sourcetext-realm-hostdefined
    :END:

  The abstract operation ParseScript with arguments =sourceText=, =realm=,
  and =hostDefined= creates a
  [[https://tc39.es/ecma262/#script-record][Script Record]] based upon the
  result of parsing =sourceText= as a
  [[https://tc39.es/ecma262/#prod-Script][Script]]. ParseScript performs
  the following steps:

  1. [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
     ECMAScript source text (see clause
     [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
  2. Parse =sourceText= using
     [[https://tc39.es/ecma262/#prod-Script][Script]] as the
     [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
     and analyse the parse result for any Early Error conditions. If the
     parse was successful and no early errors were found, let =body= be
     the resulting parse tree. Otherwise, let =body= be a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     of one or more SyntaxError objects representing the parsing errors
     and/or early errors. Parsing and
     [[https://tc39.es/ecma262/#early-error][early error]] detection may
     be interweaved in an implementation-dependent manner. If more than
     one parsing error or [[https://tc39.es/ecma262/#early-error][early
     error]] is present, the number and ordering of error objects in the
     list is implementation-dependent, but at least one must be present.
  3. If =body= is a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     of errors, return =body=.
  4. Return [[https://tc39.es/ecma262/#script-record][Script Record]] {
     [[Realm]]: =realm=, [[Environment]]: undefined, [[ECMAScriptCode]]:
     =body=, [[HostDefined]]: =hostDefined= }.

  Note

  An implementation may parse script source text and analyse it for Early
  Error conditions prior to evaluation of ParseScript for that script
  source text. However, the reporting of any errors must be deferred until
  the point where this specification actually performs ParseScript upon
  that source text.

*** ScriptEvaluation ( =scriptRecord= )
    :PROPERTIES:
    :CUSTOM_ID: scriptevaluation-scriptrecord
    :END:

  1.  Let =globalEnv= be =scriptRecord=.[[Realm]].[[GlobalEnv]].
  2.  Let =scriptContext= be a new ECMAScript code
      [[https://tc39.es/ecma262/#sec-execution-contexts][execution
      context]].
  3.  Set the Function of =scriptContext= to null.
  4.  Set the [[https://tc39.es/ecma262/#realm][Realm]] of =scriptContext=
      to =scriptRecord=.[[Realm]].
  5.  Set the ScriptOrModule of =scriptContext= to =scriptRecord=.
  6.  Set the VariableEnvironment of =scriptContext= to =globalEnv=.
  7.  Set the LexicalEnvironment of =scriptContext= to =globalEnv=.
  8.  [[https://tc39.es/ecma262/#sec-suspend][Suspend]] the currently
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  9.  Push =scriptContext= onto the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]]; =scriptContext= is now the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  10. Let =scriptBody= be =scriptRecord=.[[ECMAScriptCode]].
  11. Let =result= be
      [[https://tc39.es/ecma262/#sec-globaldeclarationinstantiation][GlobalDeclarationInstantiation]](=scriptBody=,
      =globalEnv=).
  12. If =result=.[[Type]] is normal, then

      1. Set =result= to the result of evaluating =scriptBody=.

  13. If =result=.[[Type]] is normal and =result=.[[Value]] is empty, then

      1. Set =result= to
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

  14. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =scriptContext=
      and remove it from the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]].
  15. [[https://tc39.es/ecma262/#assert][Assert]]: The
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] is not empty.
  16. Resume the context that is now on the top of the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] as the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  17. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

*** Runtime Semantics: GlobalDeclarationInstantiation ( =script=,
  =env= )
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-globaldeclarationinstantiation-script-env
    :END:

  Note 1

  When an [[https://tc39.es/ecma262/#sec-execution-contexts][execution
  context]] is established for evaluating scripts, declarations are
  instantiated in the current
  [[https://tc39.es/ecma262/#global-environment][global environment]].
  Each global binding declared in the code is instantiated.

  GlobalDeclarationInstantiation is performed as follows using arguments
  =script= and =env=. =script= is the
  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]] for which the
  [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]]
  is being established. =env= is the global lexical environment in which
  bindings are to be created.

  1.  Let =envRec= be =env='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  2.  [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= is a global
      [[https://tc39.es/ecma262/#sec-environment-records][Environment
      Record]].
  3.  Let =lexNames= be the LexicallyDeclaredNames of =script=.
  4.  Let =varNames= be the VarDeclaredNames of =script=.
  5.  For each =name= in =lexNames=, do

      1. If =envRec=.HasVarDeclaration(=name=) is true, throw a
         SyntaxError exception.
      2. If =envRec=.HasLexicalDeclaration(=name=) is true, throw a
         SyntaxError exception.
      3. Let =hasRestrictedGlobal= be ?
         =envRec=.HasRestrictedGlobalProperty(=name=).
      4. If =hasRestrictedGlobal= is true, throw a SyntaxError exception.

  6.  For each =name= in =varNames=, do

      1. If =envRec=.HasLexicalDeclaration(=name=) is true, throw a
         SyntaxError exception.

  7.  Let =varDeclarations= be the VarScopedDeclarations of =script=.
  8.  Let =functionsToInitialize= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  9.  Let =declaredFunctionNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  10. For each =d= in =varDeclarations=, in reverse list order, do

      1. If =d= is neither a
         [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
         nor a [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]
         nor a
         [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]],
         then

         1. [[https://tc39.es/ecma262/#assert][Assert]]: =d= is either a
            [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
            a
            [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
            an
            [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
            or an
            [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
         2. NOTE: If there are multiple function declarations for the same
            name, the last declaration is used.
         3. Let =fn= be the sole element of the BoundNames of =d=.
         4. If =fn= is not an element of =declaredFunctionNames=, then

            1. Let =fnDefinable= be ?
               =envRec=.CanDeclareGlobalFunction(=fn=).
            2. If =fnDefinable= is false, throw a TypeError exception.
            3. Append =fn= to =declaredFunctionNames=.
            4. Insert =d= as the first element of =functionsToInitialize=.

  11. Let =declaredVarNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  12. For each =d= in =varDeclarations=, do

      1. If =d= is a
         [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]],
         a [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]], or a
         [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]],
         then

         1. For each String =vn= in the BoundNames of =d=, do

            1. If =vn= is not an element of =declaredFunctionNames=, then

               1. Let =vnDefinable= be ?
                  =envRec=.CanDeclareGlobalVar(=vn=).
               2. If =vnDefinable= is false, throw a TypeError exception.
               3. If =vn= is not an element of =declaredVarNames=, then

                  1. Append =vn= to =declaredVarNames=.

  13. NOTE: No abnormal terminations occur after this algorithm step if
      the [[https://tc39.es/ecma262/#sec-global-object][global object]] is
      an ordinary object. However, if the
      [[https://tc39.es/ecma262/#sec-global-object][global object]] is a
      Proxy [[https://tc39.es/ecma262/#exotic-object][exotic object]] it
      may exhibit behaviours that cause abnormal terminations in some of
      the following steps.
  14. NOTE: Annex
      [[https://tc39.es/ecma262/#sec-web-compat-globaldeclarationinstantiation][B.3.3.2]]
      adds additional steps at this point.
  15. Let =lexDeclarations= be the LexicallyScopedDeclarations of
      =script=.
  16. For each element =d= in =lexDeclarations=, do

      1. NOTE: Lexically declared names are only instantiated here but not
         initialized.
      2. For each element =dn= of the BoundNames of =d=, do

         1. If IsConstantDeclaration of =d= is true, then

            1. Perform ? =envRec=.CreateImmutableBinding(=dn=, true).

         2. Else,

            1. Perform ? =envRec=.CreateMutableBinding(=dn=, false).

  17. For each [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse
      Node]] =f= in =functionsToInitialize=, do

      1. Let =fn= be the sole element of the BoundNames of =f=.
      2. Let =fo= be InstantiateFunctionObject of =f= with argument =env=.
      3. Perform ? =envRec=.CreateGlobalFunctionBinding(=fn=, =fo=,
         false).

  18. For each String =vn= in =declaredVarNames=, in list order, do

      1. Perform ? =envRec=.CreateGlobalVarBinding(=vn=, false).

  19. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  Note 2

  Early errors specified in
  [[https://tc39.es/ecma262/#sec-scripts-static-semantics-early-errors][15.1.1]]
  prevent name conflicts between function/var declarations and
  let/const/class declarations as well as redeclaration of let/const/class
  bindings for declaration contained within a single
  [[https://tc39.es/ecma262/#prod-Script][Script]]. However, such
  conflicts and redeclarations that span more than one
  [[https://tc39.es/ecma262/#prod-Script][Script]] are detected as runtime
  errors during GlobalDeclarationInstantiation. If any such errors are
  detected, no bindings are instantiated for the script. However, if the
  [[https://tc39.es/ecma262/#sec-global-object][global object]] is defined
  using Proxy exotic objects then the runtime tests for conflicting
  declarations may be unreliable resulting in an
  [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
  completion]] and some global declarations not being instantiated. If
  this occurs, the code for the
  [[https://tc39.es/ecma262/#prod-Script][Script]] is not evaluated.

  Unlike explicit var or function declarations, properties that are
  directly created on the
  [[https://tc39.es/ecma262/#sec-global-object][global object]] result in
  global bindings that may be shadowed by let/const/class declarations.

*** Runtime Semantics: ScriptEvaluationJob ( =sourceText=,
  =hostDefined= )
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-scriptevaluationjob-sourcetext-hostdefined
    :END:

  The job ScriptEvaluationJob with parameters =sourceText= and
  =hostDefined= parses, validates, and evaluates =sourceText= as a
  [[https://tc39.es/ecma262/#prod-Script][Script]].

  1. [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
     ECMAScript source text (see clause
     [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
  2. Let =realm= be [[https://tc39.es/ecma262/#current-realm][the current
     Realm Record]].
  3. Let =s= be
     [[https://tc39.es/ecma262/#sec-parse-script][ParseScript]](=sourceText=,
     =realm=, =hostDefined=).
  4. If =s= is a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     of errors, then

     1. Perform
        [[https://tc39.es/ecma262/#sec-host-report-errors][HostReportErrors]](=s=).
     2. Return
        [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

  5. Return
     ? [[https://tc39.es/ecma262/#sec-runtime-semantics-scriptevaluation][ScriptEvaluation]](=s=).

** Modules
   :PROPERTIES:
   :CUSTOM_ID: modules
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-64
    :END:

 [[https://tc39.es/ecma262/#prod-Module][Module]]:[[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]opt
 [[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]
 [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]
 [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]
 [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
 [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
 [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][~Yield,
 ~Await, ~Return]
*** Module Semantics
    :PROPERTIES:
    :CUSTOM_ID: module-semantics
    :END:

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-32
     :END:

   [[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]

   - It is a Syntax Error if the LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]
     contains any duplicate entries.
   - It is a Syntax Error if any element of the LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] also
     occurs in the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   - It is a Syntax Error if the ExportedNames of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]
     contains any duplicate entries.
   - It is a Syntax Error if any element of the ExportedBindings of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] does
     not also occur in either the VarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]], or
     the LexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]
     Contains =super=.
   - It is a Syntax Error if
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]
     Contains [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]].
   - It is a Syntax Error if ContainsDuplicateLabels of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] with
     argument « » is true.
   - It is a Syntax Error if ContainsUndefinedBreakTarget of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] with
     argument « » is true.
   - It is a Syntax Error if ContainsUndefinedContinueTarget of
     [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] with
     arguments « » and « » is true.

   Note

   The duplicate ExportedNames rule implies that multiple =export default=
   [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
   items within a [[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]
   is a Syntax Error. Additional error conditions relating to conflicting
   or duplicate declarations are checked during module linking prior to
   evaluation of a [[https://tc39.es/ecma262/#prod-Module][Module]]. If any
   such errors are detected the
   [[https://tc39.es/ecma262/#prod-Module][Module]] is not evaluated.

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-11
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] with
      argument =labelSet=.
   2. If =hasDuplicates= is true, return true.
   3. Return ContainsDuplicateLabels of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]] with
      argument =labelSet=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
   [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]

   1. Return false.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-12
     :END:

   With parameter =labelSet=.

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] with
      argument =labelSet=.
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedBreakTarget of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]] with
      argument =labelSet=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
   [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]

   1. Return false.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-12
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] with
      arguments =iterationSet= and « ».
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedContinueTarget of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]] with
      arguments =iterationSet= and « ».

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
   [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]

   1. Return false.

**** Static Semantics: ExportedBindings
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-exportedbindings
     :END:

   Note

   ExportedBindings are the locally bound names that are explicitly
   associated with a [[https://tc39.es/ecma262/#prod-Module][Module]]'s
   ExportedNames.

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =names= be ExportedBindings of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the ExportedBindings of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
   [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ExportedNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-exportednames
     :END:

   Note

   ExportedNames are the externally visible names that a
   [[https://tc39.es/ecma262/#prod-Module][Module]] explicitly maps to one
   of its local name bindings.

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =names= be ExportedNames of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the ExportedNames of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]

   1. Return the ExportedNames of
      [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]].

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
   [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ExportEntries
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-exportentries
     :END:

   [[https://tc39.es/ecma262/#prod-Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =entries= be ExportEntries of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =entries= the elements of the ExportEntries of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =entries=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
   [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ImportEntries
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-importentries
     :END:

   [[https://tc39.es/ecma262/#prod-Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =entries= be ImportEntries of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =entries= the elements of the ImportEntries of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =entries=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
   [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ImportedLocalNames ( =importEntries= )
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-importedlocalnames-importentries
     :END:

   The abstract operation ImportedLocalNames with argument =importEntries=
   creates a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of all of the local name bindings defined by a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of ImportEntry Records (see [[https://tc39.es/ecma262/#table-39][Table
   44]]). ImportedLocalNames performs the following steps:

   1. Let =localNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. For each [[https://tc39.es/ecma262/#importentry-record][ImportEntry
      Record]] =i= in =importEntries=, do

      1. Append =i=.[[LocalName]] to =localNames=.

   3. Return =localNames=.

**** Static Semantics: ModuleRequests
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-modulerequests
     :END:

   [[https://tc39.es/ecma262/#prod-Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Return ModuleRequests of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =moduleNames= be ModuleRequests of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Let =additionalNames= be ModuleRequests of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Append to =moduleNames= each element of =additionalNames= that is not
      already an element of =moduleNames=.
   4. Return =moduleNames=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: LexicallyDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallydeclarednames-7
     :END:

   Note 1

   The LexicallyDeclaredNames of a
   [[https://tc39.es/ecma262/#prod-Module][Module]] includes the names of
   all of its imported bindings.

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =names= be LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]

   1. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]].

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]

   1. If
      [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
      is =export=
      [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]],
      return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Return the BoundNames of
      [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]].

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

   1. Return LexicallyDeclaredNames of
      [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]].

   Note 2

   At the top level of a [[https://tc39.es/ecma262/#prod-Module][Module]],
   function declarations are treated like lexical declarations rather than
   like var declarations.

**** Static Semantics: LexicallyScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-7
     :END:

   [[https://tc39.es/ecma262/#prod-Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =declarations= be LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =declarations= the elements of the
      LexicallyScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-16
     :END:

   [[https://tc39.es/ecma262/#prod-Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =names= be VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =names=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]

   1. If
      [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
      is =export=
      [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]],
      return BoundNames of
      [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-16
     :END:

   [[https://tc39.es/ecma262/#prod-Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =declarations= be VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   3. Return =declarations=.

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]

   1. If
      [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
      is =export=
      [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]],
      return VarScopedDeclarations of
      [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Abstract Module Records
     :PROPERTIES:
     :CUSTOM_ID: abstract-module-records
     :END:

   A Module Record encapsulates structural information about the imports
   and exports of a single module. This information is used to link the
   imports and exports of sets of connected modules. A Module Record
   includes four fields that are only used when evaluating a module.

   For specification purposes Module Record values are values of the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   specification type and can be thought of as existing in a simple
   object-oriented hierarchy where Module Record is an abstract class with
   both abstract and concrete subclasses. This specification defines the
   abstract subclass named
   [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
   and its concrete subclass named
   [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
   Record]]. Other specifications and implementations may define additional
   Module Record subclasses corresponding to alternative module definition
   facilities that they defined.

   Module Record defines the fields listed in
   [[https://tc39.es/ecma262/#table-36][Table 39]]. All Module Definition
   subclasses include at least those fields. Module Record also defines the
   abstract method list in [[https://tc39.es/ecma262/#table-37][Table 40]].
   All Module definition subclasses must provide concrete implementations
   of these abstract methods.

   Table 39: [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
   Record]] Fields
   | Field Name        | Value Type                                                                               | Meaning                                                                                                                                                                          |
   |-------------------+------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[Realm]]         | [[https://tc39.es/ecma262/#realm-record][Realm Record]] | undefined                      | The [[https://tc39.es/ecma262/#realm][Realm]] within which this module was created. undefined if not yet assigned.                                                               |
   | [[Environment]]   | [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] | undefined   | The [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] containing the top level bindings for this module. This field is set when the module is linked.   |
   | [[Namespace]]     | Object | undefined                                                                       | The Module Namespace Object ([[https://tc39.es/ecma262/#sec-module-namespace-objects][26.3]]) if one has been created for this module. Otherwise undefined.                      |
   | [[HostDefined]]   | Any, default value is undefined.                                                         | Field reserved for use by host environments that need to associate additional information with a module.                                                                         |

   Table 40: Abstract Methods of Module Records
   | Method                                         | Purpose                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
   ||
   | GetExportedNames([=exportStarSet=])            | Return a list of all names that are either directly or indirectly exported from this module.                                                                                                                                                                                                                                                                                                                                                                             |
   | ResolveExport(=exportName= [, =resolveSet=])   | Return the binding of a name exported by this module. Bindings are represented by a ResolvedBinding Record, of the form { [[Module]]: [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]], [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to "*namespace*". Return null if the name cannot be resolved, or "ambiguous" if multiple bindings were found.   |
   |                                                |                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
   |                                                | This operation must be idempotent if it completes normally. Each time it is called with a specific =exportName=, =resolveSet= pair as arguments it must return the same result.                                                                                                                                                                                                                                                                                          |
   | Link()                                         | Prepare the module for evaluation by transitively resolving all module dependencies and creating a module [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]].                                                                                                                                                                                                                                                                                      |
   | Evaluate()                                     | If this module has already been evaluated successfully, return undefined; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.                                                                                                                                                                                                 |
   |                                                |                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
   |                                                | Link must have completed successfully prior to invoking this method.                                                                                                                                                                                                                                                                                                                                                                                                     |

**** Cyclic Module Records
     :PROPERTIES:
     :CUSTOM_ID: cyclic-module-records
     :END:

   A Cyclic Module Record is used to represent information about a module
   that can participate in dependency cycles with other modules that are
   subclasses of the
   [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
   type. Module Records that are not subclasses of the
   [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
   type must not participate in dependency cycles with Source Text Module
   Records.

   In addition to the fields defined in
   [[https://tc39.es/ecma262/#table-36][Table 39]] Cyclic Module Records
   have the additional fields listed in
   [[https://tc39.es/ecma262/#table-cyclic-module-fields][Table 41]]

   Table 41: Additional Fields of Cyclic Module Records
   | Field Name             | Value Type                                                                                                | Meaning                                                                                                                                                                                                                                                                                                                                                                    |
   |------------------------+-----------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[Status]]             | unlinked | linking | linked | evaluating | evaluated                                                      | Initially unlinked. Transitions to linking, linked, evaluating, evaluated (in that order) as the module progresses throughout its lifecycle.                                                                                                                                                                                                                               |
   | [[EvaluationError]]    | An [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt completion]] | undefined   | A completion of type throw representing the exception that occurred during evaluation. undefined if no exception occurred or if [[Status]] is not evaluated.                                                                                                                                                                                                               |
   | [[DFSIndex]]           | [[https://tc39.es/ecma262/#integer][Integer]] | undefined                                                 | Auxiliary field used during Link and Evaluate only. If [[Status]] is linking or evaluating, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.                                                                                                                              |
   | [[DFSAncestorIndex]]   | [[https://tc39.es/ecma262/#integer][Integer]] | undefined                                                 | Auxiliary field used during Link and Evaluate only. If [[Status]] is linking or evaluating, this is either the module's own [[DFSIndex]] or that of an "earlier" module in the same strongly connected component.                                                                                                                                                          |
   | [[RequestedModules]]   | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of String                       | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of all the [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]] strings used by the module represented by this record to request the importation of a module. The [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] is source code occurrence ordered.   |

   In addition to the methods defined in
   [[https://tc39.es/ecma262/#table-37][Table 40]] Cyclic Module Records
   have the additional methods listed in
   [[https://tc39.es/ecma262/#table-cyclic-module-methods][Table 42]]

   Table 42: Additional Abstract Methods of Cyclic Module Records
   | Method                                                                                                       | Purpose                                                                                                                                                                                                                                               |
   |--------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment][InitializeEnvironment]]()   | Initialize the [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] of the module, including resolving all imported bindings, and create the module's [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].   |
   | [[https://tc39.es/ecma262/#sec-source-text-module-record-execute-module][ExecuteModule]]()                   | Evaluate the module's code within its [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].                                                                                                                                         |

   <<sec-moduledeclarationinstantiation>>
***** Link ( ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: link-concrete-method
      :END:

    The Link concrete method of a
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    implements the corresponding
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    abstract method.

    On success, Link transitions this module's [[Status]] from unlinked to
    linked. On failure, an exception is thrown and this module's [[Status]]
    remains unlinked.

    This abstract method performs the following steps (most of the work is
    done by the auxiliary function
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]):

    1. Let =module= be this
       [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
       Record]].
    2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
       not linking or evaluating.
    3. Let =stack= be a new empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    4. Let =result= be
       [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]](=module=,
       =stack=, 0).
    5. If =result= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], then

       1. For each [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
          Module Record]] =m= in =stack=, do

          1. [[https://tc39.es/ecma262/#assert][Assert]]: =m=.[[Status]] is
             linking.
          2. Set =m=.[[Status]] to unlinked.
          3. Set =m=.[[Environment]] to undefined.
          4. Set =m=.[[DFSIndex]] to undefined.
          5. Set =m=.[[DFSAncestorIndex]] to undefined.

       2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]]
          is unlinked.
       3. Return =result=.

    6. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
       linked or evaluated.
    7. [[https://tc39.es/ecma262/#assert][Assert]]: =stack= is empty.
    8. Return undefined.

    <<sec-innermoduleinstantiation>>
***** InnerModuleLinking ( =module=, =stack=, =index= )
      :PROPERTIES:
      :CUSTOM_ID: innermodulelinking-module-stack-index
      :END:

    The InnerModuleLinking abstract operation is used by Link to perform the
    actual linking process for the
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    =module=, as well as recursively on all other modules in the dependency
    graph. The =stack= and =index= parameters, as well as a module's
    [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the
    depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]]
    is used to discover strongly connected components (SCCs), such that all
    modules in an SCC transition to linked together.

    This abstract operation performs the following steps:

    1.  If =module= is not a
        [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
        Record]], then

        1. Perform ? =module=.Link().
        2. Return =index=.

    2.  If =module=.[[Status]] is linking, linked, or evaluated, then

        1. Return =index=.

    3.  [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
        unlinked.
    4.  Set =module=.[[Status]] to linking.
    5.  Set =module=.[[DFSIndex]] to =index=.
    6.  Set =module=.[[DFSAncestorIndex]] to =index=.
    7.  Set =index= to =index= + 1.
    8.  Append =module= to =stack=.
    9.  For each String =required= that is an element of
        =module=.[[RequestedModules]], do

        1. Let =requiredModule= be
           ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =required=).
        2. Set =index= to
           ? [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]](=requiredModule=,
           =stack=, =index=).
        3. If =requiredModule= is a
           [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
           Record]], then

           1. [[https://tc39.es/ecma262/#assert][Assert]]:
              =requiredModule=.[[Status]] is either linking, linked, or
              evaluated.
           2. [[https://tc39.es/ecma262/#assert][Assert]]:
              =requiredModule=.[[Status]] is linking if and only if
              =requiredModule= is in =stack=.
           3. If =requiredModule=.[[Status]] is linking, then

              1. Set =module=.[[DFSAncestorIndex]] to
                 [[https://tc39.es/ecma262/#eqn-min][min]](=module=.[[DFSAncestorIndex]],
                 =requiredModule=.[[DFSAncestorIndex]]).

    10. Perform ?
        =module=.[[https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment][InitializeEnvironment]]().
    11. [[https://tc39.es/ecma262/#assert][Assert]]: =module= occurs exactly
        once in =stack=.
    12. [[https://tc39.es/ecma262/#assert][Assert]]:
        =module=.[[DFSAncestorIndex]] is less than or equal to
        =module=.[[DFSIndex]].
    13. If =module=.[[DFSAncestorIndex]] equals =module=.[[DFSIndex]], then

        1. Let =done= be false.
        2. Repeat, while =done= is false,

           1. Let =requiredModule= be the last element in =stack=.
           2. Remove the last element of =stack=.
           3. [[https://tc39.es/ecma262/#assert][Assert]]: =requiredModule=
              is a [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
              Module Record]].
           4. Set =requiredModule=.[[Status]] to linked.
           5. If =requiredModule= and =module= are the same
              [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
              Record]], set =done= to true.

    14. Return =index=.

****** Evaluate ( ) Concrete Method
       :PROPERTIES:
       :CUSTOM_ID: evaluate-concrete-method
       :END:

     The Evaluate concrete method of a
     [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
     implements the corresponding
     [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
     abstract method.

     Evaluate transitions this module's [[Status]] from linked to evaluated.

     If execution results in an exception, that exception is recorded in the
     [[EvaluationError]] field and rethrown by future invocations of
     Evaluate.

     This abstract method performs the following steps (most of the work is
     done by the auxiliary function
     [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]):

     1. Let =module= be this
        [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
        Record]].
     2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
        linked or evaluated.
     3. Let =stack= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
     4. Let =result= be
        [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]](=module=,
        =stack=, 0).
     5. If =result= is an
        [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
        completion]], then

        1. For each [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
           Module Record]] =m= in =stack=, do

           1. [[https://tc39.es/ecma262/#assert][Assert]]: =m=.[[Status]] is
              evaluating.
           2. Set =m=.[[Status]] to evaluated.
           3. Set =m=.[[EvaluationError]] to =result=.

        2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]]
           is evaluated and =module=.[[EvaluationError]] is =result=.
        3. Return =result=.

     6. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
        evaluated and =module=.[[EvaluationError]] is undefined.
     7. [[https://tc39.es/ecma262/#assert][Assert]]: =stack= is empty.
     8. Return undefined.

****** InnerModuleEvaluation ( =module=, =stack=, =index= )
       :PROPERTIES:
       :CUSTOM_ID: innermoduleevaluation-module-stack-index
       :END:

     The InnerModuleEvaluation abstract operation is used by Evaluate to
     perform the actual evaluation process for the
     [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
     Record]] =module=, as well as recursively on all other modules in the
     dependency graph. The =stack= and =index= parameters, as well as
     =module='s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the
     same way as in
     [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]].

     This abstract operation performs the following steps:

     1.  If =module= is not a
         [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
         Record]], then

         1. Perform ? =module=.Evaluate().
         2. Return =index=.

     2.  If =module=.[[Status]] is evaluated, then

         1. If =module=.[[EvaluationError]] is undefined, return =index=.
         2. Otherwise, return =module=.[[EvaluationError]].

     3.  If =module=.[[Status]] is evaluating, return =index=.
     4.  [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
         linked.
     5.  Set =module=.[[Status]] to evaluating.
     6.  Set =module=.[[DFSIndex]] to =index=.
     7.  Set =module=.[[DFSAncestorIndex]] to =index=.
     8.  Set =index= to =index= + 1.
     9.  Append =module= to =stack=.
     10. For each String =required= that is an element of
         =module=.[[RequestedModules]], do

         1. Let =requiredModule= be
            ! [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
            =required=).
         2. NOTE: Link must be completed successfully prior to invoking this
            method, so every requested module is guaranteed to resolve
            successfully.
         3. Set =index= to
            ? [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]](=requiredModule=,
            =stack=, =index=).
         4. If =requiredModule= is a
            [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
            Record]], then

            1. [[https://tc39.es/ecma262/#assert][Assert]]:
               =requiredModule=.[[Status]] is either evaluating or evaluated.
            2. [[https://tc39.es/ecma262/#assert][Assert]]:
               =requiredModule=.[[Status]] is evaluating if and only if
               =requiredModule= is in =stack=.
            3. If =requiredModule=.[[Status]] is evaluating, then

               1. Set =module=.[[DFSAncestorIndex]] to
                  [[https://tc39.es/ecma262/#eqn-min][min]](=module=.[[DFSAncestorIndex]],
                  =requiredModule=.[[DFSAncestorIndex]]).

     11. Perform ?
         =module=.[[https://tc39.es/ecma262/#sec-source-text-module-record-execute-module][ExecuteModule]]().
     12. [[https://tc39.es/ecma262/#assert][Assert]]: =module= occurs exactly
         once in =stack=.
     13. [[https://tc39.es/ecma262/#assert][Assert]]:
         =module=.[[DFSAncestorIndex]] is less than or equal to
         =module=.[[DFSIndex]].
     14. If =module=.[[DFSAncestorIndex]] equals =module=.[[DFSIndex]], then

         1. Let =done= be false.
         2. Repeat, while =done= is false,

            1. Let =requiredModule= be the last element in =stack=.
            2. Remove the last element of =stack=.
            3. [[https://tc39.es/ecma262/#assert][Assert]]: =requiredModule=
               is a [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
               Module Record]].
            4. Set =requiredModule=.[[Status]] to evaluated.
            5. If =requiredModule= and =module= are the same
               [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
               Record]], set =done= to true.

     15. Return =index=.

***** Example Cyclic Module Record Graphs
      :PROPERTIES:
      :CUSTOM_ID: example-cyclic-module-record-graphs
      :END:

    This non-normative section gives a series of examples of the linking and
    evaluation of a few common module graphs, with a specific focus on how
    errors can occur.

    First consider the following simple module graph:

    #+CAPTION: Figure 2: A simple module graph
    [[./ECMAScript®%202020%20Language%C2%A0Specification_files/module-graph-simple.svg]]

    Let's first assume that there are no error conditions. When a host first
    calls =A=.Link(), this will complete successfully by assumption, and
    recursively link modules =B= and =C= as well, such that =A=.[[Status]] =
    =B=.[[Status]] = =C=.[[Status]] = linked. This preparatory step can be
    performed at any time. Later, when the host is ready to incur any
    possible side effects of the modules, it can call =A=.Evaluate(), which
    will complete successfully (again by assumption), recursively having
    evaluated first =C= and then =B=. Each module's [[Status]] at this point
    will be evaluated.

    Consider then cases involving linking errors. If
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    of =C= succeeds but, thereafter, fails for =B=, for example because it
    imports something that =C= does not provide, then the original
    =A=.Link() will fail, and both =A= and =B='s [[Status]] remain unlinked.
    =C='s [[Status]] has become linked, though.

    Finally, consider a case involving evaluation errors. If
    [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]
    of =C= succeeds but, thereafter, fails for =B=, for example because =B=
    contains code that throws an exception, then the original =A=.Evaluate()
    will fail. The resulting exception will be recorded in both =A= and
    =B='s [[EvaluationError]] fields, and their [[Status]] will become
    evaluated. =C= will also become evaluated but, in contrast to =A= and
    =B=, will remain without an [[EvaluationError]], as it successfully
    completed evaluation. Storing the exception ensures that any time a host
    tries to reuse =A= or =B= by calling their Evaluate() method, it will
    encounter the same exception. (Hosts are not required to reuse Cyclic
    Module Records; similarly, hosts are not required to expose the
    exception objects thrown by these methods. However, the specification
    enables such uses.)

    The difference here between linking and evaluation errors is due to how
    evaluation must be only performed once, as it can cause side effects; it
    is thus important to remember whether evaluation has already been
    performed, even if unsuccessfully. (In the error case, it makes sense to
    also remember the exception because otherwise subsequent Evaluate()
    calls would have to synthesize a new one.) Linking, on the other hand,
    is side-effect-free, and thus even if it fails, it can be retried at a
    later time with no issues.

    Now consider a different type of error condition:

    #+CAPTION: Figure 3: A module graph with an unresolvable module
    [[./ECMAScript®%202020%20Language%C2%A0Specification_files/module-graph-missing.svg]]

    In this scenario, module =A= declares a dependency on some other module,
    but no [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
    Record]] exists for that module, i.e.
    [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
    throws an exception when asked for it. This could occur for a variety of
    reasons, such as the corresponding resource not existing, or the
    resource existing but
    [[https://tc39.es/ecma262/#sec-parsemodule][ParseModule]] throwing an
    exception when trying to parse the resulting source text. Hosts can
    choose to expose the cause of failure via the exception they throw from
    [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]].
    In any case, this exception causes a linking failure, which as before
    results in =A='s [[Status]] remaining unlinked.

    Lastly, consider a module graph with a cycle:

    #+CAPTION: Figure 4: A cyclic module graph
    [[./ECMAScript®%202020%20Language%C2%A0Specification_files/module-graph-cycle.svg]]

    Here we assume that the entry point is module =A=, so that the host
    proceeds by calling =A=.Link(), which performs
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=. This in turn calls
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =B=. Because of the cycle, this again triggers
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=, but at this point it is a no-op since =A=.[[Status]] is already
    linking. =B=.[[Status]] itself remains linking when control gets back to
    =A= and
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    is triggered on =C=. After this returns with =C=.[[Status]] being linked
    , both =A= and =B= transition from linking to linked together; this is
    by design, since they form a strongly connected component.

    An analogous story occurs for the evaluation phase of a cyclic module
    graph, in the success case.

    Now consider a case where =A= has an linking error; for example, it
    tries to import a binding from =C= that does not exist. In that case,
    the above steps still occur, including the early return from the second
    call to
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=. However, once we unwind back to the original
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=, it fails during
    [[https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment][InitializeEnvironment]],
    namely right after =C=.ResolveExport(). The thrown SyntaxError exception
    propagates up to =A=.Link, which resets all modules that are currently
    on its =stack= (these are always exactly the modules that are still
    linking). Hence both =A= and =B= become unlinked. Note that =C= is left
    as linked.

    Finally, consider a case where =A= has an evaluation error; for example,
    its source code throws an exception. In that case, the evaluation-time
    analog of the above steps still occurs, including the early return from
    the second call to
    [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]
    on =A=. However, once we unwind back to the original
    [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]
    on =A=, it fails by assumption. The exception thrown propagates up to
    =A=.Evaluate(), which records the error in all modules that are
    currently on its =stack= (i.e., the modules that are still evaluating).
    Hence both =A= and =B= become evaluated and the exception is recorded in
    both =A= and =B='s [[EvaluationError]] fields, while =C= is left as
    evaluated with no [[EvaluationError]].

**** Source Text Module Records
     :PROPERTIES:
     :CUSTOM_ID: source-text-module-records
     :END:

   A Source Text Module Record is used to represent information about a
   module that was defined from ECMAScript source text
   ([[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]])
   that was parsed using the
   [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
   [[https://tc39.es/ecma262/#prod-Module][Module]]. Its fields contain
   digested information about the names that are imported by the module and
   its concrete methods use this digest to link, link, and evaluate the
   module.

   A [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
   Record]] can exist in a module graph with other subclasses of the
   abstract [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
   Record]] type, and can participate in cycles with other subclasses of
   the [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
   Record]] type.

   In addition to the fields defined in
   [[https://tc39.es/ecma262/#table-cyclic-module-fields][Table 41]],
   Source Text Module Records have the additional fields listed in
   [[https://tc39.es/ecma262/#table-38][Table 43]]. Each of these fields is
   initially set in
   [[https://tc39.es/ecma262/#sec-parsemodule][ParseModule]].

   Table 43: Additional Fields of Source Text Module Records
   | Field Name                  | Value Type                                                                                         | Meaning                                                                                                                                                                                                                                                                |
   |-----------------------------+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[ECMAScriptCode]]          | a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]                                   | The result of parsing the source text of this module using [[https://tc39.es/ecma262/#prod-Module][Module]] as the [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]].                                                                                |
   | [[Context]]                 | An ECMAScript [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].              | The [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] associated with this module.                                                                                                                                                                |
   | [[ImportEntries]]           | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ImportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ImportEntry records derived from the code of this module.                                                                                                                               |
   | [[LocalExportEntries]]      | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.                                                                  |
   | [[IndirectExportEntries]]   | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module or exports from =export * as namespace= declarations.       |
   | [[StarExportEntries]]       | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry records derived from the code of this module that correspond to =export *= declarations that occur within the module, not including =export * as namespace= declarations.   |

   An ImportEntry Record is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   that digests information about a single declarative import. Each
   [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] has
   the fields defined in [[https://tc39.es/ecma262/#table-39][Table 44]]:

   Table 44: [[https://tc39.es/ecma262/#importentry-record][ImportEntry
   Record]] Fields
   | Field Name          | Value Type   | Meaning                                                                                                                                                                                            |
   |---------------------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[ModuleRequest]]   | String       | String value of the [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]] of the [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]].                              |
   | [[ImportName]]      | String       | The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value "*" indicates that the import request is for the target module's namespace object.   |
   | [[LocalName]]       | String       | The name that is used to locally access the imported value from within the importing module.                                                                                                       |

   Note 1

   [[https://tc39.es/ecma262/#table-40][Table 45]] gives examples of
   ImportEntry records fields used to represent the syntactic import forms:

   Table 45 (Informative): Import Forms Mappings to ImportEntry Records
   Import Statement Form

   [[ModuleRequest]]

   [[ImportName]]

   [[LocalName]]

   =import v from "mod";=

   "mod"

   "default"

   "v"

   =import * as ns from "mod";=

   "mod"

   "*"

   "ns"

   =import {x} from "mod";=

   "mod"

   "x"

   "x"

   =import {x as v} from "mod";=

   "mod"

   "x"

   "v"

   =import "mod";=

   An [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]]
   is not created.

   An ExportEntry Record is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   that digests information about a single declarative export. Each
   [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] has
   the fields defined in [[https://tc39.es/ecma262/#table-41][Table 46]]:

   Table 46: [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
   Record]] Fields

   | Field Name          | Value Type      | Meaning                                                                                                                                                                                                                                                                                                                                            |
   |---------------------+-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[ExportName]]      | String | null   | The name used to export this binding by this module.                                                                                                                                                                                                                                                                                               |
   | [[ModuleRequest]]   | String | null   | The String value of the [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]] of the [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]. null if the [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]] does not have a [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]].   |
   | [[ImportName]]      | String | null   | The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. null if the [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]] does not have a [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]. "*" indicates that the export request is for all exported bindings.     |
   | [[LocalName]]       | String | null   | The name that is used to locally access the exported value from within the importing module. null if the exported value is not locally accessible from within the module.                                                                                                                                                                          |

   Note 2

   [[https://tc39.es/ecma262/#table-42][Table 47]] gives examples of the
   ExportEntry record fields used to represent the syntactic export forms:

   Table 47 (Informative): Export Forms Mappings to ExportEntry Records
   | Export Statement Form              | [[ExportName]]   | [[ModuleRequest]]   | [[ImportName]]   | [[LocalName]]   |
   |------------------------------------+------------------+---------------------+------------------+-----------------|
   | =export var v;=                    | "v"              | null                | null             | "v"             |
   | =export default function f() {}=   | "default"        | null                | null             | "f"             |
   | =export default function () {}=    | "default"        | null                | null             | "*default*"     |
   | =export default 42;=               | "default"        | null                | null             | "*default*"     |
   | =export {x};=                      | "x"              | null                | null             | "x"             |
   | =export {v as x};=                 | "x"              | null                | null             | "v"             |
   | =export {x} from "mod";=           | "x"              | "mod"               | "x"              | null            |
   | =export {v as x} from "mod";=      | "x"              | "mod"               | "v"              | null            |
   | =export * from "mod";=             | null             | "mod"               | "*"              | null            |
   | =export * as ns from "mod";=       | "ns"             | "mod"               | "*"              | null            |

   The following definitions specify the required concrete methods and
   other
   [[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
   operations]] for Source Text Module Records

***** ParseModule ( =sourceText=, =realm=, =hostDefined= )
      :PROPERTIES:
      :CUSTOM_ID: parsemodule-sourcetext-realm-hostdefined
      :END:

    The abstract operation ParseModule with arguments =sourceText=, =realm=,
    and =hostDefined= creates a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] based upon the result of parsing =sourceText= as a
    [[https://tc39.es/ecma262/#prod-Module][Module]]. ParseModule performs
    the following steps:

    1.  [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
        ECMAScript source text (see clause
        [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
    2.  Parse =sourceText= using
        [[https://tc39.es/ecma262/#prod-Module][Module]] as the
        [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
        and analyse the parse result for any Early Error conditions. If the
        parse was successful and no early errors were found, let =body= be
        the resulting parse tree. Otherwise, let =body= be a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of one or more SyntaxError objects representing the parsing errors
        and/or early errors. Parsing and
        [[https://tc39.es/ecma262/#early-error][early error]] detection may
        be interweaved in an implementation-dependent manner. If more than
        one parsing error or [[https://tc39.es/ecma262/#early-error][early
        error]] is present, the number and ordering of error objects in the
        list is implementation-dependent, but at least one must be present.
    3.  If =body= is a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of errors, return =body=.
    4.  Let =requestedModules= be the ModuleRequests of =body=.
    5.  Let =importEntries= be ImportEntries of =body=.
    6.  Let =importedBoundNames= be
        [[https://tc39.es/ecma262/#sec-importedlocalnames][ImportedLocalNames]](=importEntries=).
    7.  Let =indirectExportEntries= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    8.  Let =localExportEntries= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    9.  Let =starExportEntries= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    10. Let =exportEntries= be ExportEntries of =body=.
    11. For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =ee= in =exportEntries=, do

        1. If =ee=.[[ModuleRequest]] is null, then

           1. If =ee=.[[LocalName]] is not an element of
              =importedBoundNames=, then

              1. Append =ee= to =localExportEntries=.

           2. Else,

              1. Let =ie= be the element of =importEntries= whose
                 [[LocalName]] is the same as =ee=.[[LocalName]].
              2. If =ie=.[[ImportName]] is "*", then

                 1. NOTE: This is a re-export of an imported module
                    namespace object.
                 2. Append =ee= to =localExportEntries=.

              3. Else,

                 1. NOTE: This is a re-export of a single name.
                 2. Append the
                    [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
                    Record]] { [[ModuleRequest]]: =ie=.[[ModuleRequest]],
                    [[ImportName]]: =ie=.[[ImportName]], [[LocalName]]:
                    null, [[ExportName]]: =ee=.[[ExportName]] } to
                    =indirectExportEntries=.

        2. Else if =ee=.[[ImportName]] is "*" and =ee=.[[ExportName]] is
           null, then

           1. Append =ee= to =starExportEntries=.

        3. Else,

           1. Append =ee= to =indirectExportEntries=.

    12. Return [[https://tc39.es/ecma262/#sourctextmodule-record][Source
        Text Module Record]] { [[Realm]]: =realm=, [[Environment]]:
        undefined, [[Namespace]]: undefined, [[Status]]: unlinked,
        [[EvaluationError]]: undefined, [[HostDefined]]: =hostDefined=,
        [[ECMAScriptCode]]: =body=, [[Context]]: empty,
        [[RequestedModules]]: =requestedModules=, [[ImportEntries]]:
        =importEntries=, [[LocalExportEntries]]: =localExportEntries=,
        [[IndirectExportEntries]]: =indirectExportEntries=,
        [[StarExportEntries]]: =starExportEntries=, [[DFSIndex]]: undefined,
        [[DFSAncestorIndex]]: undefined }.

    Note

    An implementation may parse module source text and analyse it for Early
    Error conditions prior to the evaluation of ParseModule for that module
    source text. However, the reporting of any errors must be deferred until
    the point where this specification actually performs ParseModule upon
    that source text.

***** GetExportedNames ( [ =exportStarSet= ] ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: getexportednames-exportstarset-concrete-method
      :END:

    The GetExportedNames concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    abstract method.

    It performs the following steps:

    1.  If =exportStarSet= is not present, set =exportStarSet= to a new
        empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    2.  [[https://tc39.es/ecma262/#assert][Assert]]: =exportStarSet= is a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of Source Text Module Records.
    3.  Let =module= be this
        [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text
        Module Record]].
    4.  If =exportStarSet= contains =module=, then

        1. [[https://tc39.es/ecma262/#assert][Assert]]: We've reached the
           starting point of an =import *= circularity.
        2. Return a new empty
           [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

    5.  Append =module= to =exportStarSet=.
    6.  Let =exportedNames= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    7.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[LocalExportEntries]], do

        1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= provides
           the direct binding for this export.
        2. Append =e=.[[ExportName]] to =exportedNames=.

    8.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[IndirectExportEntries]], do

        1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= imports a
           specific binding for this export.
        2. Append =e=.[[ExportName]] to =exportedNames=.

    9.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[StarExportEntries]], do

        1. Let =requestedModule= be
           ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =e=.[[ModuleRequest]]).
        2. Let =starNames= be ?
           =requestedModule=.GetExportedNames(=exportStarSet=).
        3. For each element =n= of =starNames=, do

           1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=n=,
              "default") is false, then

              1. If =n= is not an element of =exportedNames=, then

                 1. Append =n= to =exportedNames=.

    10. Return =exportedNames=.

    Note

    GetExportedNames does not filter out or throw an exception for names
    that have ambiguous star export bindings.

***** ResolveExport ( =exportName= [ , =resolveSet= ] ) Concrete
    Method
      :PROPERTIES:
      :CUSTOM_ID: resolveexport-exportname-resolveset-concrete-method
      :END:

    The ResolveExport concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    abstract method.

    ResolveExport attempts to resolve an imported binding to the actual
    defining module and local binding name. The defining module may be the
    module represented by the
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    this method was invoked on or some other module that is imported by that
    module. The parameter =resolveSet= is used to detect unresolved circular
    import/export paths. If a pair consisting of specific
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    and =exportName= is reached that is already in =resolveSet=, an import
    circularity has been encountered. Before recursively calling
    ResolveExport, a pair consisting of =module= and =exportName= is added
    to =resolveSet=.

    If a defining module is found, a
    [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
    Record]] { [[Module]], [[BindingName]] } is returned. This record
    identifies the resolved binding of the originally requested export,
    unless this is the export of a namespace with no local binding. In this
    case, [[BindingName]] will be set to "*namespace*". If no definition was
    found or the request is found to be circular, null is returned. If the
    request is found to be ambiguous, the string "ambiguous" is returned.

    This abstract method performs the following steps:

    1.  If =resolveSet= is not present, set =resolveSet= to a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    2.  [[https://tc39.es/ecma262/#assert][Assert]]: =resolveSet= is a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
        { [[Module]], [[ExportName]] }.
    3.  Let =module= be this
        [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text
        Module Record]].
    4.  For each
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
        { [[Module]], [[ExportName]] } =r= in =resolveSet=, do

        1. If =module= and =r=.[[Module]] are the same
           [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
           Record]] and
           [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
           =r=.[[ExportName]]) is true, then

           1. [[https://tc39.es/ecma262/#assert][Assert]]: This is a
              circular import request.
           2. Return null.

    5.  Append the
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
        { [[Module]]: =module=, [[ExportName]]: =exportName= } to
        =resolveSet=.
    6.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[LocalExportEntries]], do

        1. If
           [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
           =e=.[[ExportName]]) is true, then

           1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= provides
              the direct binding for this export.
           2. Return
              [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
              Record]] { [[Module]]: =module=, [[BindingName]]:
              =e=.[[LocalName]] }.

    7.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[IndirectExportEntries]], do

        1. If
           [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
           =e=.[[ExportName]]) is true, then

           1. Let =importedModule= be
              ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
              =e=.[[ModuleRequest]]).
           2. If =e=.[[ImportName]] is "*", then

              1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= does
                 not provide the direct binding for this export.
              2. Return
                 [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
                 Record]] { [[Module]]: =importedModule=, [[BindingName]]:
                 "*namespace*" }.

           3. Else,

              1. [[https://tc39.es/ecma262/#assert][Assert]]: =module=
                 imports a specific binding for this export.
              2. Return =importedModule=.ResolveExport(=e=.[[ImportName]],
                 =resolveSet=).

    8.  If
        [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
        "default") is true, then

        1. [[https://tc39.es/ecma262/#assert][Assert]]: A =default= export
           was not explicitly defined by this module.
        2. Return null.
        3. NOTE: A =default= export cannot be provided by an =export *= or
           =export * from "mod"= declaration.

    9.  Let =starResolution= be null.
    10. For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[StarExportEntries]], do

        1. Let =importedModule= be
           ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =e=.[[ModuleRequest]]).
        2. Let =resolution= be ?
           =importedModule=.ResolveExport(=exportName=, =resolveSet=).
        3. If =resolution= is "ambiguous", return "ambiguous".
        4. If =resolution= is not null, then

           1. [[https://tc39.es/ecma262/#assert][Assert]]: =resolution= is a
              [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
              Record]].
           2. If =starResolution= is null, set =starResolution= to
              =resolution=.
           3. Else,

              1. [[https://tc39.es/ecma262/#assert][Assert]]: There is more
                 than one =*= import that includes the requested name.
              2. If =resolution=.[[Module]] and =starResolution=.[[Module]]
                 are not the same
                 [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
                 Record]] or
                 [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=resolution=.[[BindingName]],
                 =starResolution=.[[BindingName]]) is false, return
                 "ambiguous".

    11. Return =starResolution=.

***** InitializeEnvironment ( ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: initializeenvironment-concrete-method
      :END:

    The InitializeEnvironment concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    abstract method.

    This abstract method performs the following steps:

    1.  Let =module= be this
        [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text
        Module Record]].
    2.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[IndirectExportEntries]], do

        1. Let =resolution= be ? =module=.ResolveExport(=e=.[[ExportName]]).
        2. If =resolution= is null or "ambiguous", throw a SyntaxError
           exception.
        3. [[https://tc39.es/ecma262/#assert][Assert]]: =resolution= is a
           [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
           Record]].

    3.  [[https://tc39.es/ecma262/#assert][Assert]]: All named exports from
        =module= are resolvable.
    4.  Let =realm= be =module=.[[Realm]].
    5.  [[https://tc39.es/ecma262/#assert][Assert]]: =realm= is not
        undefined.
    6.  Let =env= be
        [[https://tc39.es/ecma262/#sec-newmoduleenvironment][NewModuleEnvironment]](=realm=.[[GlobalEnv]]).
    7.  Set =module=.[[Environment]] to =env=.
    8.  Let =envRec= be =env='s
        [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
    9.  For each [[https://tc39.es/ecma262/#importentry-record][ImportEntry
        Record]] =in= in =module=.[[ImportEntries]], do

        1. Let =importedModule= be
           ! [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =in=.[[ModuleRequest]]).
        2. NOTE: The above call cannot fail because imported module requests
           are a subset of =module=.[[RequestedModules]], and these have
           been resolved earlier in this algorithm.
        3. If =in=.[[ImportName]] is "*", then

           1. Let =namespace= be
              ? [[https://tc39.es/ecma262/#sec-getmodulenamespace][GetModuleNamespace]](=importedModule=).
           2. Perform ! =envRec=.CreateImmutableBinding(=in=.[[LocalName]],
              true).
           3. Call =envRec=.InitializeBinding(=in=.[[LocalName]],
              =namespace=).

        4. Else,

           1. Let =resolution= be ?
              =importedModule=.ResolveExport(=in=.[[ImportName]]).
           2. If =resolution= is null or "ambiguous", throw a SyntaxError
              exception.
           3. If =resolution=.[[BindingName]] is "*namespace*", then

              1. Let =namespace= be
                 ? [[https://tc39.es/ecma262/#sec-getmodulenamespace][GetModuleNamespace]](=resolution=.[[Module]]).
              2. Perform !
                 =envRec=.CreateImmutableBinding(=in=.[[LocalName]], true).
              3. Call =envRec=.InitializeBinding(=in=.[[LocalName]],
                 =namespace=).

           4. Else,

              1. Call =envRec=.CreateImportBinding(=in=.[[LocalName]],
                 =resolution=.[[Module]], =resolution=.[[BindingName]]).

    10. Let =moduleContext= be a new ECMAScript code
        [[https://tc39.es/ecma262/#sec-execution-contexts][execution
        context]].
    11. Set the Function of =moduleContext= to null.
    12. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Realm]] is
        not undefined.
    13. Set the [[https://tc39.es/ecma262/#realm][Realm]] of =moduleContext=
        to =module=.[[Realm]].
    14. Set the ScriptOrModule of =moduleContext= to =module=.
    15. Set the VariableEnvironment of =moduleContext= to
        =module=.[[Environment]].
    16. Set the LexicalEnvironment of =moduleContext= to
        =module=.[[Environment]].
    17. Set =module=.[[Context]] to =moduleContext=.
    18. Push =moduleContext= onto the
        [[https://tc39.es/ecma262/#execution-context-stack][execution
        context stack]]; =moduleContext= is now the
        [[https://tc39.es/ecma262/#running-execution-context][running
        execution context]].
    19. Let =code= be =module=.[[ECMAScriptCode]].
    20. Let =varDeclarations= be the VarScopedDeclarations of =code=.
    21. Let =declaredVarNames= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    22. For each element =d= in =varDeclarations=, do

        1. For each element =dn= of the BoundNames of =d=, do

           1. If =dn= is not an element of =declaredVarNames=, then

              1. Perform ! =envRec=.CreateMutableBinding(=dn=, false).
              2. Call =envRec=.InitializeBinding(=dn=, undefined).
              3. Append =dn= to =declaredVarNames=.

    23. Let =lexDeclarations= be the LexicallyScopedDeclarations of =code=.
    24. For each element =d= in =lexDeclarations=, do

        1. For each element =dn= of the BoundNames of =d=, do

           1. If IsConstantDeclaration of =d= is true, then

              1. Perform ! =envRec=.CreateImmutableBinding(=dn=, true).

           2. Else,

              1. Perform ! =envRec=.CreateMutableBinding(=dn=, false).

           3. If =d= is a
              [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
              a
              [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
              an
              [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
              or an
              [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
              then

              1. Let =fo= be InstantiateFunctionObject of =d= with argument
                 =env=.
              2. Call =envRec=.InitializeBinding(=dn=, =fo=).

    25. Remove =moduleContext= from the
        [[https://tc39.es/ecma262/#execution-context-stack][execution
        context stack]].
    26. Return
        [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

***** ExecuteModule ( ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: executemodule-concrete-method
      :END:

    The ExecuteModule concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    abstract method.

    This abstract method performs the following steps:

    1. Let =module= be this
       [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
       Record]].
    2. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] the currently
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]].
    3. Let =moduleContext= be =module=.[[Context]].
    4. Push =moduleContext= onto the
       [[https://tc39.es/ecma262/#execution-context-stack][execution context
       stack]]; =moduleContext= is now the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]].
    5. Let =result= be the result of evaluating =module=.[[ECMAScriptCode]].
    6. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =moduleContext= and
       remove it from the
       [[https://tc39.es/ecma262/#execution-context-stack][execution context
       stack]].
    7. Resume the context that is now on the top of the
       [[https://tc39.es/ecma262/#execution-context-stack][execution context
       stack]] as the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]].
    8. Return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

**** Runtime Semantics: HostResolveImportedModule (
   =referencingScriptOrModule=, =specifier= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-hostresolveimportedmodule-referencingscriptormodule-specifier
     :END:

   HostResolveImportedModule is an implementation-defined abstract
   operation that provides the concrete
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   subclass instance that corresponds to the
   [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]
   String, =specifier=, occurring within the context of the script or
   module represented by the
   [[https://tc39.es/ecma262/#script-record][Script Record]] or
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   =referencingScriptOrModule=. =referencingScriptOrModule= may also be
   null, if the resolution is being performed in the context of an
   [[https://tc39.es/ecma262/#sec-import-calls][=import()=]] expression,
   and there is no active script or module at that time.

   Note

   An example of when =referencingScriptOrModule= can be null is in a web
   browser host. There, if a user clicks on a control given by

   #+BEGIN_EXAMPLE
     <button type="button" onclick="import('./foo.mjs')">Click me</button>
   #+END_EXAMPLE

   there will be no active script or module at the time the
   [[https://tc39.es/ecma262/#sec-import-calls][=import()=]] expression
   runs. More generally, this can happen in any situation where the host
   pushes execution contexts with null ScriptOrModule components onto the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]].

   The implementation of HostResolveImportedModule must conform to the
   following requirements:

   - The normal return value must be an instance of a concrete subclass of
     [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
     Record]].
   - If a [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
     Record]] corresponding to the pair =referencingScriptOrModule=,
     =specifier= does not exist or cannot be created, an exception must be
     thrown.
   - This operation must be idempotent if it completes normally. Each time
     it is called with a specific =referencingScriptOrModule=, =specifier=
     pair as arguments it must return the same
     [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
     Record]] instance.

   Multiple different =referencingScriptOrModule=, =specifier= pairs may
   map to the same
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   instance. The actual mapping semantic is implementation-defined but
   typically a normalization process is applied to =specifier= as part of
   the mapping process. A typical normalization process would include
   actions such as alphabetic case folding and expansion of relative and
   abbreviated path specifiers.

**** Runtime Semantics: HostImportModuleDynamically (
   =referencingScriptOrModule=, =specifier=, =promiseCapability= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-hostimportmoduledynamically-referencingscriptormodule-specifier-promisecapability
     :END:

   HostImportModuleDynamically is an implementation-defined abstract
   operation that performs any necessary setup work in order to make
   available the module corresponding to the
   [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]
   String, =specifier=, occurring within the context of the script or
   module represented by the
   [[https://tc39.es/ecma262/#script-record][Script Record]] or
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   =referencingScriptOrModule=. (=referencingScriptOrModule= may also be
   null, if there is no active script or module when the
   [[https://tc39.es/ecma262/#sec-import-calls][=import()=]] expression
   occurs.) It then performs
   [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]]
   to finish the dynamic import process.

   The implementation of HostImportModuleDynamically must conform to the
   following requirements:

   - The abstract operation must always complete normally with undefined.
     Success or failure must instead be signaled as discussed below.
   - The host environment must conform to one of the two following sets of
     requirements:
     - Success path :: 

       - At some future time, the host environment must perform
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]](=referencingScriptOrModule=,
         =specifier=, =promiseCapability=,
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined)).
       - Any subsequent call to
         [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
         after
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]]
         has completed, given the arguments =referencingScriptOrModule= and
         =specifier=, must complete normally.
       - The completion value of any subsequent call to
         [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
         after
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]]
         has completed, given the arguments =referencingScriptOrModule= and
         =specifier=, must be a module which has already been evaluated,
         i.e. whose Evaluate concrete method has already been called and
         returned a normal completion.

     - Failure path :: 

       - At some future time, the host environment must perform
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]](=referencingScriptOrModule=,
         =specifier=, =promiseCapability=, an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]]), with the
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]] representing the cause of failure.

   - If the host environment takes the success path once for a given
     =referencingScriptOrModule=, =specifier= pair, it must always do so
     for subsequent calls.
   - The operation must not call =promiseCapability=.[[Resolve]] or
     =promiseCapability=.[[Reject]], but instead must treat
     =promiseCapability= as an opaque identifying value to be passed
     through to
     [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]].

   The actual process performed is implementation-defined, but typically
   consists of performing whatever I/O operations are necessary to allow
   [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
   to synchronously retrieve the appropriate
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]],
   and then calling its Evaluate concrete method. This might require
   performing similar normalization as
   [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
   does.

**** Runtime Semantics: FinishDynamicImport (
   =referencingScriptOrModule=, =specifier=, =promiseCapability=,
   =completion= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-finishdynamicimport-referencingscriptormodule-specifier-promisecapability-completion
     :END:

   FinishDynamicImport completes the process of a dynamic import originally
   started by an [[https://tc39.es/ecma262/#sec-import-calls][=import()=]]
   call, resolving or rejecting the promise returned by that call as
   appropriate according to =completion=. It is performed by host
   environments as part of
   [[https://tc39.es/ecma262/#sec-hostimportmoduledynamically][HostImportModuleDynamically]].

   1. If =completion= is an
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
      completion]], then perform
      ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
      undefined, « =completion=.[[Value]] »).
   2. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =completion= is a
         normal completion and =completion=.[[Value]] is undefined.
      2. Let =moduleRecord= be
         ! [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=referencingScriptOrModule=,
         =specifier=).
      3. [[https://tc39.es/ecma262/#assert][Assert]]: Evaluate has already
         been invoked on =moduleRecord= and successfully completed.
      4. Let =namespace= be
         [[https://tc39.es/ecma262/#sec-getmodulenamespace][GetModuleNamespace]](=moduleRecord=).
      5. If =namespace= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], perform
         ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
         undefined, « =namespace=.[[Value]] »).
      6. Else, perform
         ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
         undefined, « =namespace=.[[Value]] »).

**** Runtime Semantics: GetModuleNamespace ( =module= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-getmodulenamespace-module
     :END:

   The GetModuleNamespace abstract operation retrieves the Module Namespace
   [[https://tc39.es/ecma262/#exotic-object][Exotic object]] representing
   =module='s exports, lazily creating it the first time it was requested,
   and storing it in =module=.[[Namespace]] for future retrieval.

   This abstract operation performs the following steps:

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= is an instance
      of a concrete subclass of
      [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
      Record]].
   2. [[https://tc39.es/ecma262/#assert][Assert]]: If =module= is a
      [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
      Record]], then =module=.[[Status]] is not unlinked.
   3. Let =namespace= be =module=.[[Namespace]].
   4. If =namespace= is undefined, then

      1. Let =exportedNames= be ? =module=.GetExportedNames().
      2. Let =unambiguousNames= be a new empty
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
      3. For each =name= that is an element of =exportedNames=, do

         1. Let =resolution= be ? =module=.ResolveExport(=name=).
         2. If =resolution= is a
            [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
            Record]], append =name= to =unambiguousNames=.

      4. Set =namespace= to
         [[https://tc39.es/ecma262/#sec-modulenamespacecreate][ModuleNamespaceCreate]](=module=,
         =unambiguousNames=).

   5. Return =namespace=.

   Note

   The only way GetModuleNamespace can throw is via one of the triggered
   [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
   calls. Unresolvable names are simply excluded from the namespace at this
   point. They will lead to a real linking error later unless they are all
   ambiguous star exports that are not explicitly requested anywhere.

**** Runtime Semantics: TopLevelModuleEvaluationJob (
   =sourceText=, =hostDefined= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-toplevelmoduleevaluationjob-sourcetext-hostdefined
     :END:

   A TopLevelModuleEvaluationJob with parameters =sourceText= and
   =hostDefined= is a job that parses, validates, and evaluates
   =sourceText= as a [[https://tc39.es/ecma262/#prod-Module][Module]].

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
      ECMAScript source text (see clause
      [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
   2. Let =realm= be [[https://tc39.es/ecma262/#current-realm][the current
      Realm Record]].
   3. Let =m= be
      [[https://tc39.es/ecma262/#sec-parsemodule][ParseModule]](=sourceText=,
      =realm=, =hostDefined=).
   4. If =m= is a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      of errors, then

      1. Perform
         [[https://tc39.es/ecma262/#sec-host-report-errors][HostReportErrors]](=m=).
      2. Return
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   5. Perform ? =m=.Link().
   6. [[https://tc39.es/ecma262/#assert][Assert]]: All dependencies of =m=
      have been transitively resolved and =m= is ready for evaluation.
   7. Return ? =m=.Evaluate().

   Note

   An implementation may parse a =sourceText= as a
   [[https://tc39.es/ecma262/#prod-Module][Module]], analyse it for Early
   Error conditions, and link it prior to the execution of the
   TopLevelModuleEvaluationJob for that =sourceText=. An implementation may
   also resolve, pre-parse and pre-analyse, and pre-link module
   dependencies of =sourceText=. However, the reporting of any errors
   detected by these actions must be deferred until the
   TopLevelModuleEvaluationJob is actually executed.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-65
     :END:

   [[https://tc39.es/ecma262/#prod-Module][Module]]:[empty]

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   [[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]

   1. Let =result= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. If =result=.[[Type]] is normal and =result=.[[Value]] is empty, then

      1. Return
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   3. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]

   1. Let =sl= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=sl=).
   3. Let =s= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]].
   4. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=s=,
      =sl=)).

   Note

   The value of a
   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]] is the
   value of the last value-producing item in the
   [[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]].

   [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

** Imports
   :PROPERTIES:
   :CUSTOM_ID: imports
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-65
    :END:

 [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]:import[[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
 import[[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]];
 [[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]]:[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]]
 [[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]
 [[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]
 [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]
 [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]
 [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]]:[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
 [[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]:*as[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
 [[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]:{}
 {[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]]}
 {[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]],}
 [[https://tc39.es/ecma262/#prod-FromClause][FromClause]]:from[[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]
 [[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]]:[[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]
 [[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]],[[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]
 [[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]:[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
 [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]:[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
 [[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][~Yield,
 ~Await]

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-33
    :END:

  [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]

  - It is a Syntax Error if the BoundNames of
    [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
    contains any duplicate entries.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-12
    :END:

  [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]:import[[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]].

  [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]:import[[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]]:[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]

  1. Let =names= be the BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]].
  2. Append to =names= the elements of the BoundNames of
     [[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]]:[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]

  1. Let =names= be the BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]].
  2. Append to =names= the elements of the BoundNames of
     [[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]]:[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]],[[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]

  1. Let =names= be the BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]].
  2. Append to =names= the elements of the BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]].

*** Static Semantics: ImportEntries
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-importentries-1
    :END:

  [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]:import[[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];

  1. Let =module= be the sole element of ModuleRequests of
     [[https://tc39.es/ecma262/#prod-FromClause][FromClause]].
  2. Return ImportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]] with
     argument =module=.

  [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]:import[[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: ImportEntriesForModule
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-importentriesformodule
    :END:

  With parameter =module=.

  [[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]]:[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]

  1. Let =entries= be ImportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]]
     with argument =module=.
  2. Append to =entries= the elements of the ImportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]
     with argument =module=.
  3. Return =entries=.

  [[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]]:[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]

  1. Let =entries= be ImportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]]
     with argument =module=.
  2. Append to =entries= the elements of the ImportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]] with
     argument =module=.
  3. Return =entries=.

  [[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]]:[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]

  1. Let =localName= be the sole element of BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]].
  2. Let =defaultEntry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "default",
     [[LocalName]]: =localName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =defaultEntry=.

  [[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]:*as[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]

  1. Let =localName= be the StringValue of
     [[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]].
  2. Let =entry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "*", [[LocalName]]:
     =localName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]]:[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]],[[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]

  1. Let =specs= be the ImportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]] with
     argument =module=.
  2. Append to =specs= the elements of the ImportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]
     with argument =module=.
  3. Return =specs=.

  [[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]:[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]

  1. Let =localName= be the sole element of BoundNames of
     [[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]].
  2. Let =entry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =localName=,
     [[LocalName]]: =localName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]

  1. Let =importName= be the StringValue of
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].
  2. Let =localName= be the StringValue of
     [[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]].
  3. Let =entry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =importName=,
     [[LocalName]]: =localName= }.
  4. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

*** Static Semantics: ModuleRequests
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-modulerequests-1
    :END:

  [[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]:import[[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];

  1. Return ModuleRequests of
     [[https://tc39.es/ecma262/#prod-FromClause][FromClause]].

  [[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]:[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]].

** Exports
   :PROPERTIES:
   :CUSTOM_ID: exports
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-66
    :END:

 [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
 export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];
 export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]][~Yield,
 ~Await]
 export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]][~Yield,
 ~Await]
 exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]][~Yield,
 ~Await, +Default]
 exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]][~Yield,
 ~Await, +Default] exportdefault[lookahead ∉ { function, async [no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]
 function, class
 }][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
 ~Yield, ~Await];
 [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]:*
 *as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
 [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]
 [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]:{}
 {[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]}
 {[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],}
 [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]:[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]
 [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]
 [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
 [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-34
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];

  - For each
    [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] =n=
    in ReferencedBindings of
    [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]: It is a
    Syntax Error if StringValue of =n= is a
    [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]] or if the
    StringValue of =n= is one of: "implements", "interface", "let",
    "package", "private", "protected", "public", or "static".

  Note

  The above rule means that each ReferencedBindings of
  [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]] is treated
  as an
  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]].

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-13
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
  export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]

  1. Let =declarationNames= be the BoundNames of
     [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]].
  2. If =declarationNames= does not include the element "*default*",
     append "*default*" to =declarationNames=.
  3. Return =declarationNames=.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]

  1. Let =declarationNames= be the BoundNames of
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  2. If =declarationNames= does not include the element "*default*",
     append "*default*" to =declarationNames=.
  3. Return =declarationNames=.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. Return « "*default*" ».

*** Static Semantics: ExportedBindings
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportedbindings-1
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];

  1. Return the ExportedBindings of
     [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. Return the BoundNames of this
     [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]].

  [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]:[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]

  1. Let =names= be the ExportedBindings of
     [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]].
  2. Append to =names= the elements of the ExportedBindings of
     [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of the first
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

*** Static Semantics: ExportedNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportednames-1
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];

  1. Return the ExportedNames of
     [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]].

  [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]:*

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]:*as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

  [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]:[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]

  1. Return the ExportedNames of
     [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return the BoundNames of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. Return « "default" ».

  [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]:[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]

  1. Let =names= be the ExportedNames of
     [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]].
  2. Append to =names= the elements of the ExportedNames of
     [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of the second
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

*** Static Semantics: ExportEntries
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportentries-1
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];

  1. Let =module= be the sole element of ModuleRequests of
     [[https://tc39.es/ecma262/#prod-FromClause][FromClause]].
  2. Return ExportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]
     with argument =module=.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];

  1. Return ExportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]] with
     argument null.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]

  1. Let =entries= be a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. Let =names= be the BoundNames of
     [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]].
  3. For each =name= in =names=, do

     1. Append the
        [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] { [[ModuleRequest]]: null, [[ImportName]]: null,
        [[LocalName]]: =name=, [[ExportName]]: =name= } to =entries=.

  4. Return =entries=.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Let =entries= be a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. Let =names= be the BoundNames of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].
  3. For each =name= in =names=, do

     1. Append the
        [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] { [[ModuleRequest]]: null, [[ImportName]]: null,
        [[LocalName]]: =name=, [[ExportName]]: =name= } to =entries=.

  4. Return =entries=.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]

  1. Let =names= be BoundNames of
     [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]].
  2. Let =localName= be the sole element of =names=.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]:
     =localName=, [[ExportName]]: "default" }.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]

  1. Let =names= be BoundNames of
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  2. Let =localName= be the sole element of =names=.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]:
     =localName=, [[ExportName]]: "default" }.

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. Let =entry= be the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]:
     "*default*", [[ExportName]]: "default" }.
  2. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  Note

  "*default*" is used within this specification as a synthetic name for
  anonymous default export values.

*** Static Semantics: ExportEntriesForModule
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportentriesformodule
    :END:

  With parameter =module=.

  [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]:*

  1. Let =entry= be the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "*", [[LocalName]]:
     null, [[ExportName]]: null }.
  2. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]:*as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Let =exportName= be the StringValue of
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].
  2. Let =entry= be the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "*", [[LocalName]]:
     null, [[ExportName]]: =exportName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]:[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]

  1. Let =specs= be the ExportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]] with
     argument =module=.
  2. Append to =specs= the elements of the ExportEntriesForModule of
     [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]
     with argument =module=.
  3. Return =specs=.

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Let =sourceName= be the StringValue of
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].
  2. If =module= is null, then

     1. Let =localName= be =sourceName=.
     2. Let =importName= be null.

  3. Else,

     1. Let =localName= be null.
     2. Let =importName= be =sourceName=.

  4. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =importName=,
     [[LocalName]]: =localName=, [[ExportName]]: =sourceName= }.

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Let =sourceName= be the StringValue of the first
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].
  2. Let =exportName= be the StringValue of the second
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].
  3. If =module= is null, then

     1. Let =localName= be =sourceName=.
     2. Let =importName= be null.

  4. Else,

     1. Let =localName= be null.
     2. Let =importName= be =sourceName=.

  5. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =importName=,
     [[LocalName]]: =localName=, [[ExportName]]: =exportName= }.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-6
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
  export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];
  exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. Return false.

  Note

  It is not necessary to treat =export default=
  [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
  as a constant declaration because there is no syntax that permits
  assignment to the internal bound name used to reference a module's
  default object.

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-8
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
  export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];
  export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing DeclarationPart of
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing DeclarationPart of
     [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing this
     [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]].

*** Static Semantics: ModuleRequests
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-modulerequests-2
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];

  1. Return the ModuleRequests of
     [[https://tc39.es/ecma262/#prod-FromClause][FromClause]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];
  export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
  export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]
  exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]
  exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]
  exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: ReferencedBindings
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-referencedbindings
    :END:

  [[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]:[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]

  1. Let =names= be the ReferencedBindings of
     [[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]].
  2. Append to =names= the elements of the ReferencedBindings of
     [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

  [[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the first
     [[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]].

*** Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-66
    :END:

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
  export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]

  1. Return the result of evaluating
     [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]

  1. Return the result of evaluating
     [[https://tc39.es/ecma262/#prod-Declaration][Declaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]]

  1. Return the result of evaluating
     [[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]].

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]

  1. Let =value= be ? BindingClassDeclarationEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  2. Let =className= be the sole element of BoundNames of
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  3. If =className= is "*default*", then

     1. Let =env= be the
        [[https://tc39.es/ecma262/#running-execution-context][running
        execution context]]'s LexicalEnvironment.
     2. Perform
        ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]]("*default*",
        =value=, =env=).

  4. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:exportdefault[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]];

  1. If
     [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])
     is true, then

     1. Let =value= be NamedEvaluation of
        [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
        with argument "default".

  2. Else,

     1. Let =rhs= be the result of evaluating
        [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
     2. Let =value= be
        ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rhs=).

  3. Let =env= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  4. Perform
     ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]]("*default*",
     =value=, =env=).
  5. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* 16Error Handling and Language Extensions
  :PROPERTIES:
  :CUSTOM_ID: error-handling-and-language-extensions
  :END:

An implementation must report most errors at the time the relevant
ECMAScript language construct is evaluated. An early error is an error
that can be detected and reported prior to the evaluation of any
construct in the [[https://tc39.es/ecma262/#prod-Script][Script]]
containing the error. The presence of an
[[https://tc39.es/ecma262/#early-error][early error]] prevents the
evaluation of the construct. An implementation must report early errors
in a [[https://tc39.es/ecma262/#prod-Script][Script]] as part of parsing
that [[https://tc39.es/ecma262/#prod-Script][Script]] in
[[https://tc39.es/ecma262/#sec-parse-script][ParseScript]]. Early errors
in a [[https://tc39.es/ecma262/#prod-Module][Module]] are reported at
the point when the [[https://tc39.es/ecma262/#prod-Module][Module]]
would be evaluated and the
[[https://tc39.es/ecma262/#prod-Module][Module]] is never initialized.
Early errors in *eval* code are reported at the time =eval= is called
and prevent evaluation of the *eval* code. All errors that are not early
errors are runtime errors.

An implementation must report as an
[[https://tc39.es/ecma262/#early-error][early error]] any occurrence of
a condition that is listed in a “Static Semantics: Early Errors”
subclause of this specification.

An implementation shall not treat other kinds of errors as early errors
even if the compiler can prove that a construct cannot execute without
error under any circumstances. An implementation may issue an early
warning in such a case, but it should not report the error until the
relevant construct is actually executed.

An implementation shall report all errors as specified, except for the
following:

- Except as restricted in
  [[https://tc39.es/ecma262/#sec-forbidden-extensions][16.2]], an
  implementation may extend
  [[https://tc39.es/ecma262/#prod-Script][Script]] syntax,
  [[https://tc39.es/ecma262/#prod-Module][Module]] syntax, and regular
  expression pattern or flag syntax. To permit this, all operations
  (such as calling =eval=, using a regular expression literal, or using
  the =Function= or =RegExp=
  [[https://tc39.es/ecma262/#constructor][constructor]]) that are
  allowed to throw SyntaxError are permitted to exhibit
  implementation-defined behaviour instead of throwing SyntaxError when
  they encounter an implementation-defined extension to the script
  syntax or regular expression pattern or flag syntax.
- Except as restricted in
  [[https://tc39.es/ecma262/#sec-forbidden-extensions][16.2]], an
  implementation may provide additional types, values, objects,
  properties, and functions beyond those described in this
  specification. This may cause constructs (such as looking up a
  variable in the global scope) to have implementation-defined behaviour
  instead of throwing an error (such as ReferenceError).

* 16.1HostReportErrors ( =errorList= )
  :PROPERTIES:
  :CUSTOM_ID: hostreporterrors-errorlist
  :END:

HostReportErrors is an implementation-defined abstract operation that
allows host environments to report parsing errors, early errors, and
runtime errors.

An implementation of HostReportErrors must complete normally in all
cases. The default implementation of HostReportErrors is to
unconditionally return an empty normal completion.

Note

=errorList= will be a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of ECMAScript language values. If the errors are parsing errors or early
errors, these will always be SyntaxError objects. Runtime errors,
however, can be any ECMAScript value.

* 16.2Forbidden Extensions
  :PROPERTIES:
  :CUSTOM_ID: forbidden-extensions
  :END:

An implementation must not extend this specification in the following
ways:

- ECMAScript function objects defined using syntactic constructors in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
  must not be created with own properties named "caller" or "arguments".
  Such own properties also must not be created for function objects
  defined using an
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]],
  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]],
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]],
  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]],
  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]],
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
  or
  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]
  regardless of whether the definition is contained in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].
  Built-in functions, strict functions created using the =Function=
  [[https://tc39.es/ecma262/#constructor][constructor]], generator
  functions created using the =Generator=
  [[https://tc39.es/ecma262/#constructor][constructor]], async functions
  created using the =AsyncFunction=
  [[https://tc39.es/ecma262/#constructor][constructor]], and functions
  created using the =bind= method also must not be created with such own
  properties.
- If an implementation extends any
  [[https://tc39.es/ecma262/#function-object][function object]] with an
  own property named "caller" the value of that property, as observed
  using [[Get]] or [[GetOwnProperty]], must not be a
  [[https://tc39.es/ecma262/#strict-function][strict function]] object.
  If it is an [[https://tc39.es/ecma262/#sec-object-type][accessor
  property]], the function that is the value of the property's [[Get]]
  attribute must never return a
  [[https://tc39.es/ecma262/#strict-function][strict function]] when
  called.
- Neither mapped nor unmapped arguments objects may be created with an
  own property named "caller".
- The behaviour of the following methods must not be extended except as
  specified in ECMA-402: =Object.prototype.toLocaleString=,
  =Array.prototype.toLocaleString=, =Number.prototype.toLocaleString=,
  =Date.prototype.toLocaleDateString=, =Date.prototype.toLocaleString=,
  =Date.prototype.toLocaleTimeString=, =String.prototype.localeCompare=,
  [[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.toLocaleString=.
- The RegExp pattern grammars in
  [[https://tc39.es/ecma262/#sec-patterns][21.2.1]] and
  [[https://tc39.es/ecma262/#sec-regular-expressions-patterns][B.1.4]]
  must not be extended to recognize any of the source characters A-Z or
  a-z as
  [[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]][+U]
  when the _{[U]} grammar parameter is present.
- The Syntactic Grammar must not be extended in any manner that allows
  the token =:= to immediately follow source text that matches the
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  nonterminal symbol.
- When processing
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  the syntax of
  [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]] must
  not be extended to include
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]]
  and the syntax of
  [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
  must not be extended to include
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]
  as described in
  [[https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals][B.1.1]].
- [[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]
  must not be extended to include
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]
  as defined in
  [[https://tc39.es/ecma262/#sec-additional-syntax-string-literals][B.1.2]].
- When processing
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  the extensions defined in
  [[https://tc39.es/ecma262/#sec-labelled-function-declarations][B.3.2]],
  [[https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics][B.3.3]],
  [[https://tc39.es/ecma262/#sec-functiondeclarations-in-ifstatement-statement-clauses][B.3.4]],
  and
  [[https://tc39.es/ecma262/#sec-initializers-in-forin-statement-heads][B.3.6]]
  must not be supported.
- When parsing for the [[https://tc39.es/ecma262/#prod-Module][Module]]
  [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]],
  the lexical grammar extensions defined in
  [[https://tc39.es/ecma262/#sec-html-like-comments][B.1.3]] must not be
  supported.
- [[https://tc39.es/ecma262/#prod-ImportCall][ImportCall]] must not be
  extended.

* 17ECMAScript Standard Built-in Objects
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-standard-built-in-objects
  :END:

There are certain built-in objects available whenever an ECMAScript
[[https://tc39.es/ecma262/#prod-Script][Script]] or
[[https://tc39.es/ecma262/#prod-Module][Module]] begins execution. One,
the [[https://tc39.es/ecma262/#sec-global-object][global object]], is
part of the lexical environment of the executing program. Others are
accessible as initial properties of the
[[https://tc39.es/ecma262/#sec-global-object][global object]] or
indirectly as properties of accessible built-in objects.

Unless specified otherwise, a built-in object that is callable as a
function is a built-in
[[https://tc39.es/ecma262/#function-object][function object]] with the
characteristics described in
[[https://tc39.es/ecma262/#sec-built-in-function-objects][9.3]]. Unless
specified otherwise, the [[Extensible]] internal slot of a built-in
object initially has the value true. Every built-in
[[https://tc39.es/ecma262/#function-object][function object]] has a
[[Realm]] internal slot whose value is the
[[https://tc39.es/ecma262/#realm-record][Realm Record]] of the
[[https://tc39.es/ecma262/#realm][realm]] for which the object was
initially created.

Many built-in objects are functions: they can be invoked with arguments.
Some of them furthermore are constructors: they are functions intended
for use with the =new= operator. For each built-in function, this
specification describes the arguments required by that function and the
properties of that [[https://tc39.es/ecma262/#function-object][function
object]]. For each built-in
[[https://tc39.es/ecma262/#constructor][constructor]], this
specification furthermore describes properties of the prototype object
of that [[https://tc39.es/ecma262/#constructor][constructor]] and
properties of specific object instances returned by a =new= expression
that invokes that [[https://tc39.es/ecma262/#constructor][constructor]].

Unless otherwise specified in the description of a particular function,
if a built-in function or
[[https://tc39.es/ecma262/#constructor][constructor]] is given fewer
arguments than the function is specified to require, the function or
[[https://tc39.es/ecma262/#constructor][constructor]] shall behave
exactly as if it had been given sufficient additional arguments, each
such argument being the undefined value. Such missing arguments are
considered to be “not present” and may be identified in that manner by
specification algorithms. In the description of a particular function,
the terms “this value” and “NewTarget” have the meanings given in
[[https://tc39.es/ecma262/#sec-built-in-function-objects][9.3]].

Unless otherwise specified in the description of a particular function,
if a built-in function or
[[https://tc39.es/ecma262/#constructor][constructor]] described is given
more arguments than the function is specified to allow, the extra
arguments are evaluated by the call and then ignored by the function.
However, an implementation may define implementation specific behaviour
relating to such arguments as long as the behaviour is not the throwing
of a TypeError exception that is predicated simply on the presence of an
extra argument.

Note 1

Implementations that add additional capabilities to the set of built-in
functions are encouraged to do so by adding new functions rather than
adding new parameters to existing functions.

Unless otherwise specified every built-in function and every built-in
[[https://tc39.es/ecma262/#constructor][constructor]] has the Function
prototype object, which is the initial value of the expression
=Function.prototype=
([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][19.2.3]]),
as the value of its [[Prototype]] internal slot.

Unless otherwise specified every built-in prototype object has the
Object prototype object, which is the initial value of the expression
=Object.prototype=
([[https://tc39.es/ecma262/#sec-properties-of-the-object-prototype-object][19.1.3]]),
as the value of its [[Prototype]] internal slot, except the Object
prototype object itself.

Built-in function objects that are not identified as constructors do not
implement the [[Construct]] internal method unless otherwise specified
in the description of a particular function.

Each built-in function defined in this specification is created by
calling the
[[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]]
abstract operation
([[https://tc39.es/ecma262/#sec-createbuiltinfunction][9.3.3]]).

Every built-in [[https://tc39.es/ecma262/#function-object][function
object]], including constructors, has a "length" property whose value is
an [[https://tc39.es/ecma262/#integer][integer]]. Unless otherwise
specified, this value is equal to the largest number of named arguments
shown in the subclause headings for the function description. Optional
parameters (which are indicated with brackets: =[= =]=) or rest
parameters (which are shown using the form «...name») are not included
in the default argument count.

Note 2

For example, the [[https://tc39.es/ecma262/#function-object][function
object]] that is the initial value of the "map" property of the Array
prototype object is described under the subclause heading
«Array.prototype.map (callbackFn [ , thisArg])» which shows the two
named arguments callbackFn and thisArg, the latter being optional;
therefore the value of the "length" property of that
[[https://tc39.es/ecma262/#function-object][function object]] is 1.

Unless otherwise specified, the "length" property of a built-in
[[https://tc39.es/ecma262/#function-object][function object]] has the
attributes { [[Writable]]: false, [[Enumerable]]: false,
[[Configurable]]: true }.

Every built-in [[https://tc39.es/ecma262/#function-object][function
object]], including constructors, that is not identified as an anonymous
function has a "name" property whose value is a String. Unless otherwise
specified, this value is the name that is given to the function in this
specification. For functions that are specified as properties of
objects, the name value is the
[[https://tc39.es/ecma262/#property-name][property name]] string used to
access the function. Functions that are specified as get or set accessor
functions of built-in properties have "get " or "set " prepended to the
[[https://tc39.es/ecma262/#property-name][property name]] string. The
value of the "name" property is explicitly specified for each built-in
functions whose property key is a Symbol value.

Unless otherwise specified, the "name" property of a built-in
[[https://tc39.es/ecma262/#function-object][function object]], if it
exists, has the attributes { [[Writable]]: false, [[Enumerable]]: false,
[[Configurable]]: true }.

Every other [[https://tc39.es/ecma262/#sec-object-type][data property]]
described in clauses 18 through 26 and in Annex
[[https://tc39.es/ecma262/#sec-additional-built-in-properties][B.2]] has
the attributes { [[Writable]]: true, [[Enumerable]]: false,
[[Configurable]]: true } unless otherwise specified.

Every [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
described in clauses 18 through 26 and in Annex
[[https://tc39.es/ecma262/#sec-additional-built-in-properties][B.2]] has
the attributes { [[Enumerable]]: false, [[Configurable]]: true } unless
otherwise specified. If only a get accessor function is described, the
set accessor function is the default value, undefined. If only a set
accessor is described the get accessor is the default value, undefined.

* 18The Global Object
  :PROPERTIES:
  :CUSTOM_ID: the-global-object
  :END:

The global object:

- is created before control enters any
  [[https://tc39.es/ecma262/#sec-execution-contexts][execution
  context]].
- does not have a [[Construct]] internal method; it cannot be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]] with the =new=
  operator.
- does not have a [[Call]] internal method; it cannot be invoked as a
  function.
- has a [[Prototype]] internal slot whose value is
  implementation-dependent.
- may have host defined properties in addition to the properties defined
  in this specification. This may include a property whose value is the
  global object itself.

* 18.1Value Properties of the Global Object
  :PROPERTIES:
  :CUSTOM_ID: value-properties-of-the-global-object
  :END:

* 18.1.1globalThis
  :PROPERTIES:
  :CUSTOM_ID: globalthis
  :END:

The initial value of the "globalThis" property of the
[[https://tc39.es/ecma262/#sec-global-object][global object]] in a
[[https://tc39.es/ecma262/#realm-record][Realm Record]] =realm= is
=realm=.[[GlobalEnv]]'s
[[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]]'s
[[GlobalThisValue]].

This property has the attributes { [[Writable]]: true, [[Enumerable]]:
false, [[Configurable]]: true }.

* 18.1.2Infinity
  :PROPERTIES:
  :CUSTOM_ID: infinity-1
  :END:

The value of =Infinity= is +∞ (see
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type][6.1.6.1]]).
This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 18.1.3NaN
  :PROPERTIES:
  :CUSTOM_ID: nan-1
  :END:

The value of =NaN= is NaN (see
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type][6.1.6.1]]).
This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 18.1.4undefined
  :PROPERTIES:
  :CUSTOM_ID: undefined
  :END:

The value of =undefined= is undefined (see
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-undefined-type][6.1.1]]).
This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 18.2Function Properties of the Global Object
  :PROPERTIES:
  :CUSTOM_ID: function-properties-of-the-global-object
  :END:

* 18.2.1eval ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: eval-x
  :END:

The =eval= function is the %eval% intrinsic object. When the =eval=
function is called with one argument =x=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]] has at least two elements.
2. Let =callerContext= be the second to top element of the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]].
3. Let =callerRealm= be =callerContext='s
   [[https://tc39.es/ecma262/#realm][Realm]].
4. Return
   ? [[https://tc39.es/ecma262/#sec-performeval][PerformEval]](=x=,
   =callerRealm=, false, false).

<<sec-performeval-rules-outside-constructors>><<sec-performeval-rules-outside-methods>><<sec-performeval-rules-outside-functions>>

* 18.2.1.1Runtime Semantics: PerformEval ( =x=, =callerRealm=,
=strictCaller=, =direct= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-performeval-x-callerrealm-strictcaller-direct
  :END:

The abstract operation PerformEval with arguments =x=, =callerRealm=,
=strictCaller=, and =direct= performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: If =direct= is false,
    then =strictCaller= is also false.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    is not String, return =x=.
3.  Let =evalRealm= be [[https://tc39.es/ecma262/#current-realm][the
    current Realm Record]].
4.  Perform
    ? [[https://tc39.es/ecma262/#sec-hostensurecancompilestrings][HostEnsureCanCompileStrings]](=callerRealm=,
    =evalRealm=).
5.  Let =thisEnvRec= be
    ! [[https://tc39.es/ecma262/#sec-getthisenvironment][GetThisEnvironment]]().
6.  If =thisEnvRec= is a
    [[https://tc39.es/ecma262/#sec-function-environment-records][function
    Environment Record]], then

    1. Let =F= be =thisEnvRec=.[[FunctionObject]].
    2. Let =inFunction= be true.
    3. Let =inMethod= be =thisEnvRec=.HasSuperBinding().
    4. If =F=.[[ConstructorKind]] is derived, let =inDerivedConstructor=
       be true; otherwise, let =inDerivedConstructor= be false.

7.  Else,

    1. Let =inFunction= be false.
    2. Let =inMethod= be false.
    3. Let =inDerivedConstructor= be false.

8.  Perform the following substeps in an implementation-dependent order,
    possibly interleaving parsing and error detection:

    1. Let =script= be the ECMAScript code that is the result of parsing
       =x=, interpreted as UTF-16 encoded Unicode text as described in
       [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]],
       for the
       [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
       symbol]] [[https://tc39.es/ecma262/#prod-Script][Script]]. If the
       parse fails, throw a SyntaxError exception. If any early errors
       are detected, throw a SyntaxError exception (but see also clause
       [[https://tc39.es/ecma262/#sec-error-handling-and-language-extensions][16]]).
    2. If =script= Contains
       [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]] is
       false, return undefined.
    3. Let =body= be the
       [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]] of
       =script=.
    4. If =inFunction= is false, and =body= Contains
       [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]], throw a
       SyntaxError exception.
    5. If =inMethod= is false, and =body= Contains
       [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]],
       throw a SyntaxError exception.
    6. If =inDerivedConstructor= is false, and =body= Contains
       [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]], throw a
       SyntaxError exception.

9.  If =strictCaller= is true, let =strictEval= be true.
10. Else, let =strictEval= be IsStrict of =script=.
11. Let =runningContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
12. NOTE: If =direct= is true, =runningContext= will be the
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]] that performed the
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]]. If =direct= is false, =runningContext= will be the
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]] for the invocation of the =eval= function.
13. If =direct= is true, then

    1. Let =lexEnv= be
       [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=runningContext='s
       LexicalEnvironment).
    2. Let =varEnv= be =runningContext='s VariableEnvironment.

14. Else,

    1. Let =lexEnv= be
       [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=evalRealm=.[[GlobalEnv]]).
    2. Let =varEnv= be =evalRealm=.[[GlobalEnv]].

15. If =strictEval= is true, set =varEnv= to =lexEnv=.
16. If =runningContext= is not already suspended, suspend
    =runningContext=.
17. Let =evalContext= be a new ECMAScript code
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]].
18. Set =evalContext='s Function to null.
19. Set =evalContext='s [[https://tc39.es/ecma262/#realm][Realm]] to
    =evalRealm=.
20. Set =evalContext='s ScriptOrModule to =runningContext='s
    ScriptOrModule.
21. Set =evalContext='s VariableEnvironment to =varEnv=.
22. Set =evalContext='s LexicalEnvironment to =lexEnv=.
23. Push =evalContext= onto the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]]; =evalContext= is now the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
24. Let =result= be
    [[https://tc39.es/ecma262/#sec-evaldeclarationinstantiation][EvalDeclarationInstantiation]](=body=,
    =varEnv=, =lexEnv=, =strictEval=).
25. If =result=.[[Type]] is normal, then

    1. Set =result= to the result of evaluating =body=.

26. If =result=.[[Type]] is normal and =result=.[[Value]] is empty, then

    1. Set =result= to
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

27. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =evalContext= and
    remove it from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]].
28. Resume the context that is now on the top of the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] as the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
29. Return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

Note

The eval code cannot instantiate variable or function bindings in the
variable environment of the calling context that invoked the eval if the
calling context is evaluating formal parameter initializers or if either
the code of the calling context or the eval code is
[[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].
Instead such bindings are instantiated in a new VariableEnvironment that
is only accessible to the eval code. Bindings introduced by =let=,
=const=, or =class= declarations are always instantiated in a new
LexicalEnvironment.

* 18.2.1.2HostEnsureCanCompileStrings ( =callerRealm=, =calleeRealm= )
  :PROPERTIES:
  :CUSTOM_ID: hostensurecancompilestrings-callerrealm-calleerealm
  :END:

HostEnsureCanCompileStrings is an implementation-defined abstract
operation that allows host environments to block certain ECMAScript
functions which allow developers to compile strings into ECMAScript
code.

An implementation of HostEnsureCanCompileStrings may complete normally
or abruptly. Any abrupt completions will be propagated to its callers.
The default implementation of HostEnsureCanCompileStrings is to
unconditionally return an empty normal completion.

* 18.2.1.3Runtime Semantics: EvalDeclarationInstantiation ( =body=,
=varEnv=, =lexEnv=, =strict= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-evaldeclarationinstantiation-body-varenv-lexenv-strict
  :END:

When the abstract operation EvalDeclarationInstantiation is called with
arguments =body=, =varEnv=, =lexEnv=, and =strict=, the following steps
are taken:

1.  Let =varNames= be the VarDeclaredNames of =body=.
2.  Let =varDeclarations= be the VarScopedDeclarations of =body=.
3.  Let =lexEnvRec= be =lexEnv='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
4.  Let =varEnvRec= be =varEnv='s
    [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
5.  If =strict= is false, then

    1. If =varEnvRec= is a global
       [[https://tc39.es/ecma262/#sec-environment-records][Environment
       Record]], then

       1. For each =name= in =varNames=, do

          1. If =varEnvRec=.HasLexicalDeclaration(=name=) is true, throw
             a SyntaxError exception.
          2. NOTE: =eval= will not create a global var declaration that
             would be shadowed by a global lexical declaration.

    2. Let =thisLex= be =lexEnv=.
    3. [[https://tc39.es/ecma262/#assert][Assert]]: The following loop
       will terminate.
    4. Repeat, while =thisLex= is not the same as =varEnv=,

       1. Let =thisEnvRec= be =thisLex='s
          [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
       2. If =thisEnvRec= is not an object
          [[https://tc39.es/ecma262/#sec-environment-records][Environment
          Record]], then

          1. NOTE: The environment of with statements cannot contain any
             lexical declaration so it doesn't need to be checked for
             var/let hoisting conflicts.
          2. For each =name= in =varNames=, do

             1. If =thisEnvRec=.HasBinding(=name=) is true, then

                1. Throw a SyntaxError exception.
                2. NOTE: Annex
                   [[https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks][B.3.5]]
                   defines alternate semantics for the above step.

             2. NOTE: A
                [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
                eval]] will not hoist var declaration over a like-named
                lexical declaration.

       3. Set =thisLex= to =thisLex='s outer environment reference.

6.  Let =functionsToInitialize= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
7.  Let =declaredFunctionNames= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
8.  For each =d= in =varDeclarations=, in reverse list order, do

    1. If =d= is neither a
       [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
       nor a [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]
       nor a
       [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]],
       then

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =d= is either a
          [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]],
          a
          [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
          an
          [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
          or an
          [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
       2. NOTE: If there are multiple function declarations for the same
          name, the last declaration is used.
       3. Let =fn= be the sole element of the BoundNames of =d=.
       4. If =fn= is not an element of =declaredFunctionNames=, then

          1. If =varEnvRec= is a global
             [[https://tc39.es/ecma262/#sec-environment-records][Environment
             Record]], then

             1. Let =fnDefinable= be ?
                =varEnvRec=.CanDeclareGlobalFunction(=fn=).
             2. If =fnDefinable= is false, throw a TypeError exception.

          2. Append =fn= to =declaredFunctionNames=.
          3. Insert =d= as the first element of =functionsToInitialize=.

9.  NOTE: Annex
    [[https://tc39.es/ecma262/#sec-web-compat-evaldeclarationinstantiation][B.3.3.3]]
    adds additional steps at this point.
10. Let =declaredVarNames= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
11. For each =d= in =varDeclarations=, do

    1. If =d= is a
       [[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]],
       a [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]], or a
       [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]],
       then

       1. For each String =vn= in the BoundNames of =d=, do

          1. If =vn= is not an element of =declaredFunctionNames=, then

             1. If =varEnvRec= is a global
                [[https://tc39.es/ecma262/#sec-environment-records][Environment
                Record]], then

                1. Let =vnDefinable= be ?
                   =varEnvRec=.CanDeclareGlobalVar(=vn=).
                2. If =vnDefinable= is false, throw a TypeError
                   exception.

             2. If =vn= is not an element of =declaredVarNames=, then

                1. Append =vn= to =declaredVarNames=.

12. NOTE: No abnormal terminations occur after this algorithm step
    unless =varEnvRec= is a global
    [[https://tc39.es/ecma262/#sec-environment-records][Environment
    Record]] and the
    [[https://tc39.es/ecma262/#sec-global-object][global object]] is a
    Proxy [[https://tc39.es/ecma262/#exotic-object][exotic object]].
13. Let =lexDeclarations= be the LexicallyScopedDeclarations of =body=.
14. For each element =d= in =lexDeclarations=, do

    1. NOTE: Lexically declared names are only instantiated here but not
       initialized.
    2. For each element =dn= of the BoundNames of =d=, do

       1. If IsConstantDeclaration of =d= is true, then

          1. Perform ? =lexEnvRec=.CreateImmutableBinding(=dn=, true).

       2. Else,

          1. Perform ? =lexEnvRec=.CreateMutableBinding(=dn=, false).

15. For each [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse
    Node]] =f= in =functionsToInitialize=, do

    1. Let =fn= be the sole element of the BoundNames of =f=.
    2. Let =fo= be InstantiateFunctionObject of =f= with argument
       =lexEnv=.
    3. If =varEnvRec= is a global
       [[https://tc39.es/ecma262/#sec-environment-records][Environment
       Record]], then

       1. Perform ? =varEnvRec=.CreateGlobalFunctionBinding(=fn=, =fo=,
          true).

    4. Else,

       1. Let =bindingExists= be =varEnvRec=.HasBinding(=fn=).
       2. If =bindingExists= is false, then

          1. Let =status= be ! =varEnvRec=.CreateMutableBinding(=fn=,
             true).
          2. [[https://tc39.es/ecma262/#assert][Assert]]: =status= is
             not an
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
             completion]] because of validation preceding step 12.
          3. Perform ! =varEnvRec=.InitializeBinding(=fn=, =fo=).

       3. Else,

          1. Perform ! =varEnvRec=.SetMutableBinding(=fn=, =fo=, false).

16. For each String =vn= in =declaredVarNames=, in list order, do

    1. If =varEnvRec= is a global
       [[https://tc39.es/ecma262/#sec-environment-records][Environment
       Record]], then

       1. Perform ? =varEnvRec=.CreateGlobalVarBinding(=vn=, true).

    2. Else,

       1. Let =bindingExists= be =varEnvRec=.HasBinding(=vn=).
       2. If =bindingExists= is false, then

          1. Let =status= be ! =varEnvRec=.CreateMutableBinding(=vn=,
             true).
          2. [[https://tc39.es/ecma262/#assert][Assert]]: =status= is
             not an
             [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
             completion]] because of validation preceding step 12.
          3. Perform ! =varEnvRec=.InitializeBinding(=vn=, undefined).

17. Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

Note

An alternative version of this algorithm is described in
[[https://tc39.es/ecma262/#sec-variablestatements-in-catch-blocks][B.3.5]].

* 18.2.2isFinite ( =number= )
  :PROPERTIES:
  :CUSTOM_ID: isfinite-number
  :END:

The =isFinite= function is the %isFinite% intrinsic object. When the
=isFinite= function is called with one argument =number=, the following
steps are taken:

1. Let =num= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=number=).
2. If =num= is NaN, +∞, or -∞, return false.
3. Otherwise, return true.

* 18.2.3isNaN ( =number= )
  :PROPERTIES:
  :CUSTOM_ID: isnan-number
  :END:

The =isNaN= function is the %isNaN% intrinsic object. When the =isNaN=
function is called with one argument =number=, the following steps are
taken:

1. Let =num= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=number=).
2. If =num= is NaN, return true.
3. Otherwise, return false.

Note

A reliable way for ECMAScript code to test if a value =X= is a NaN is an
expression of the form =X !== X=. The result will be true if and only if
=X= is a NaN.

* 18.2.4parseFloat ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: parsefloat-string
  :END:

The =parseFloat= function produces a
[[https://tc39.es/ecma262/#number-value][Number value]] dictated by
interpretation of the contents of the =string= argument as a decimal
literal.

The =parseFloat= function is the %parseFloat% intrinsic object. When the
=parseFloat= function is called with one argument =string=, the
following steps are taken:

1. Let =inputString= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
2. Let =trimmedString= be
   ! [[https://tc39.es/ecma262/#sec-trimstring][TrimString]](=inputString=,
   start).
3. If neither =trimmedString= nor any prefix of =trimmedString=
   satisfies the syntax of a
   [[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]
   (see
   [[https://tc39.es/ecma262/#sec-tonumber-applied-to-the-string-type][7.1.4.1]]),
   return NaN.
4. Let =numberString= be the longest prefix of =trimmedString=, which
   might be =trimmedString= itself, that satisfies the syntax of a
   [[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]].
5. Let =mathFloat= be MV of =numberString=.
6. If =mathFloat= = 0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, then

   1. If the first code unit of =trimmedString= is the code unit 0x002D
      (HYPHEN-MINUS), return -0.
   2. Return +0.

7. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
   for =mathFloat=.

Note

=parseFloat= may interpret only a leading portion of =string= as a
[[https://tc39.es/ecma262/#number-value][Number value]]; it ignores any
code units that cannot be interpreted as part of the notation of a
decimal literal, and no indication is given that any such code units
were ignored.

* 18.2.5parseInt ( =string=, =radix= )
  :PROPERTIES:
  :CUSTOM_ID: parseint-string-radix
  :END:

The =parseInt= function produces an
[[https://tc39.es/ecma262/#integer][integer]] value dictated by
interpretation of the contents of the =string= argument according to the
specified =radix=. Leading white space in =string= is ignored. If
=radix= is undefined or 0, it is assumed to be 10 except when the number
begins with the code unit pairs =0x= or =0X=, in which case a radix of
16 is assumed. If =radix= is 16, the number may also optionally begin
with the code unit pairs =0x= or =0X=.

The =parseInt= function is the %parseInt% intrinsic object. When the
=parseInt= function is called, the following steps are taken:

1.  Let =inputString= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
2.  Let =S= be
    ! [[https://tc39.es/ecma262/#sec-trimstring][TrimString]](=inputString=,
    start).
3.  Let =sign= be 1.
4.  If =S= is not empty and the first code unit of =S= is the code unit
    0x002D (HYPHEN-MINUS), set =sign= to -1.
5.  If =S= is not empty and the first code unit of =S= is the code unit
    0x002B (PLUS SIGN) or the code unit 0x002D (HYPHEN-MINUS), remove
    the first code unit from =S=.
6.  Let =R= be
    ? [[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=radix=).
7.  Let =stripPrefix= be true.
8.  If =R= ≠ 0, then

    1. If =R= < 2 or =R= > 36, return NaN.
    2. If =R= ≠ 16, set =stripPrefix= to false.

9.  Else,

    1. Set =R= to 10.

10. If =stripPrefix= is true, then

    1. If the length of =S= is at least 2 and the first two code units
       of =S= are either "0x" or "0X", then

       1. Remove the first two code units from =S=.
       2. Set =R= to 16.

11. If =S= contains a code unit that is not a radix-=R= digit, let =Z=
    be the substring of =S= consisting of all code units before the
    first such code unit; otherwise, let =Z= be =S=.
12. If =Z= is empty, return NaN.
13. Let =mathInt= be the
    [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
    integer]] value that is represented by =Z= in radix-=R= notation,
    using the letters *A*-*Z* and *a*-*z* for digits with values 10
    through 35. (However, if =R= is 10 and =Z= contains more than 20
    significant digits, every significant digit after the 20th may be
    replaced by a 0 digit, at the option of the implementation; and if
    =R= is not 2, 4, 8, 10, 16, or 32, then =mathInt= may be an
    implementation-dependent approximation to the
    [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
    integer]] value that is represented by =Z= in radix-=R= notation.)
14. If =mathInt= = 0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, then

    1. If =sign= = -1, return -0.
    2. Return +0.

15. Let =number= be the [[https://tc39.es/ecma262/#number-value][Number
    value]] for =mathInt=.
16. Return =sign= × =number=.

Note

=parseInt= may interpret only a leading portion of =string= as an
[[https://tc39.es/ecma262/#integer][integer]] value; it ignores any code
units that cannot be interpreted as part of the notation of an
[[https://tc39.es/ecma262/#integer][integer]], and no indication is
given that any such code units were ignored.

* 18.2.6URI Handling Functions
  :PROPERTIES:
  :CUSTOM_ID: uri-handling-functions
  :END:

Uniform Resource Identifiers, or URIs, are Strings that identify
resources (e.g. web pages or files) and transport protocols by which to
access them (e.g. HTTP or FTP) on the Internet. The ECMAScript language
itself does not provide any support for using URIs except for functions
that encode and decode URIs as described in
[[https://tc39.es/ecma262/#sec-decodeuri-encodeduri][18.2.6.2]],
[[https://tc39.es/ecma262/#sec-decodeuricomponent-encodeduricomponent][18.2.6.3]],
[[https://tc39.es/ecma262/#sec-encodeuri-uri][18.2.6.4]] and
[[https://tc39.es/ecma262/#sec-encodeuricomponent-uricomponent][18.2.6.5]]

Note

Many implementations of ECMAScript provide additional functions and
methods that manipulate web pages; these functions are beyond the scope
of this standard.

* 18.2.6.1URI Syntax and Semantics
  :PROPERTIES:
  :CUSTOM_ID: uri-syntax-and-semantics
  :END:

A URI is composed of a sequence of components separated by component
separators. The general form is:

Scheme =:= First =/= Second =;= Third =?= Fourth

where the italicized names represent components and “=:=”, “=/=”, “=;=”
and “=?=” are reserved for use as separators. The =encodeURI= and
=decodeURI= functions are intended to work with complete URIs; they
assume that any reserved code units in the URI are intended to have
special meaning and so are not encoded. The =encodeURIComponent= and
=decodeURIComponent= functions are intended to work with the individual
component parts of a URI; they assume that any reserved code units
represent text and so must be encoded so that they are not interpreted
as reserved code units when the component is part of a complete URI.

The following lexical grammar specifies the form of encoded URIs.

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-67
   :END:

[[https://tc39.es/ecma262/#prod-uri][uri]]:::[[https://tc39.es/ecma262/#prod-uriCharacters][uriCharacters]]opt
[[https://tc39.es/ecma262/#prod-uriCharacters][uriCharacters]]:::[[https://tc39.es/ecma262/#prod-uriCharacter][uriCharacter]][[https://tc39.es/ecma262/#prod-uriCharacters][uriCharacters]]opt
[[https://tc39.es/ecma262/#prod-uriCharacter][uriCharacter]]:::[[https://tc39.es/ecma262/#prod-uriReserved][uriReserved]]
[[https://tc39.es/ecma262/#prod-uriUnescaped][uriUnescaped]]
[[https://tc39.es/ecma262/#prod-uriEscaped][uriEscaped]]
[[https://tc39.es/ecma262/#prod-uriReserved][uriReserved]]:::one
of;/?:@&=+$,
[[https://tc39.es/ecma262/#prod-uriUnescaped][uriUnescaped]]:::[[https://tc39.es/ecma262/#prod-uriAlpha][uriAlpha]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-uriMark][uriMark]]
[[https://tc39.es/ecma262/#prod-uriEscaped][uriEscaped]]:::%[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
[[https://tc39.es/ecma262/#prod-uriAlpha][uriAlpha]]:::one
ofabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
[[https://tc39.es/ecma262/#prod-uriMark][uriMark]]:::one of-_.!~*'()
Note

The above syntax is based upon RFC 2396 and does not reflect changes
introduced by the more recent RFC 3986.

** Runtime Semantics
   :PROPERTIES:
   :CUSTOM_ID: runtime-semantics-1
   :END:

When a code unit to be included in a URI is not listed above or is not
intended to have the special meaning sometimes given to the reserved
code units, that code unit must be encoded. The code unit is transformed
into its UTF-8 encoding, with
[[https://tc39.es/ecma262/#surrogate-pair][surrogate pairs]] first
converted from UTF-16 to the corresponding code point value. (Note that
for code units in the range [0, 127] this results in a single octet with
the same value.) The resulting sequence of octets is then transformed
into a String with each octet represented by an escape sequence of the
form "%xx".

* 18.2.6.1.1Runtime Semantics: Encode ( =string=, =unescapedSet= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-encode-string-unescapedset
  :END:

The encoding and escaping process is described by the abstract operation
Encode taking two String arguments =string= and =unescapedSet=.

1. Let =strLen= be the number of code units in =string=.
2. Let =R= be the empty String.
3. Let =k= be 0.
4. Repeat,

   1. If =k= equals =strLen=, return =R=.
   2. Let =C= be the code unit at index =k= within =string=.
   3. If =C= is in =unescapedSet=, then

      1. Set =k= to =k= + 1.
      2. Set =R= to the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of the previous value of =R= and =C=.

   4. Else,

      1. Let =cp= be
         ! [[https://tc39.es/ecma262/#sec-codepointat][CodePointAt]](=string=,
         =k=).
      2. If =cp=.[[IsUnpairedSurrogate]] is true, throw a URIError
         exception.
      3. Set =k= to =k= + =cp=.[[CodeUnitCount]].
      4. Let =Octets= be the
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         of octets resulting by applying the UTF-8 transformation to
         =cp=.[[CodePoint]].
      5. For each element =octet= of =Octets= in
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         order, do

         1. Set =R= to the
            [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
            of:

            - the previous value of =R=
            - "%"
            - the String representation of =octet=, formatted as a
              two-digit uppercase hexadecimal number, padded to the left
              with a zero if necessary

* 18.2.6.1.2Runtime Semantics: Decode ( =string=, =reservedSet= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-decode-string-reservedset
  :END:

The unescaping and decoding process is described by the abstract
operation Decode taking two String arguments =string= and =reservedSet=.

1. Let =strLen= be the number of code units in =string=.
2. Let =R= be the empty String.
3. Let =k= be 0.
4. Repeat,

   1. If =k= equals =strLen=, return =R=.
   2. Let =C= be the code unit at index =k= within =string=.
   3. If =C= is not the code unit 0x0025 (PERCENT SIGN), then

      1. Let =S= be the String value containing only the code unit =C=.

   4. Else,

      1. Let =start= be =k=.
      2. If =k= + 2 is greater than or equal to =strLen=, throw a
         URIError exception.
      3. If the code units at index (=k= + 1) and (=k= + 2) within
         =string= do not represent hexadecimal digits, throw a URIError
         exception.
      4. Let =B= be the 8-bit value represented by the two hexadecimal
         digits at index (=k= + 1) and (=k= + 2).
      5. Set =k= to =k= + 2.
      6. If the most significant bit in =B= is 0, then

         1. Let =C= be the code unit whose value is =B=.
         2. If =C= is not in =reservedSet=, then

            1. Let =S= be the String value containing only the code unit
               =C=.

         3. Else,

            1. Let =S= be the substring of =string= from index =start=
               to index =k= inclusive.

      7. Else,

         1.  [[https://tc39.es/ecma262/#assert][Assert]]: the most
             significant bit in =B= is 1.
         2.  Let =n= be the smallest nonnegative
             [[https://tc39.es/ecma262/#integer][integer]] such that
             (=B= << =n=) & 0x80 is equal to 0.
         3.  If =n= equals 1 or =n= is greater than 4, throw a URIError
             exception.
         4.  Let =Octets= be a
             [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
             of 8-bit integers of size =n=.
         5.  Set =Octets=[0] to =B=.
         6.  If =k= + (3 × (=n= - 1)) is greater than or equal to
             =strLen=, throw a URIError exception.
         7.  Let =j= be 1.
         8.  Repeat, while =j= < =n=

             1. Set =k= to =k= + 1.
             2. If the code unit at index =k= within =string= is not the
                code unit 0x0025 (PERCENT SIGN), throw a URIError
                exception.
             3. If the code units at index (=k= + 1) and (=k= + 2)
                within =string= do not represent hexadecimal digits,
                throw a URIError exception.
             4. Let =B= be the 8-bit value represented by the two
                hexadecimal digits at index (=k= + 1) and (=k= + 2).
             5. If the two most significant bits in =B= are not 10,
                throw a URIError exception.
             6. Set =k= to =k= + 2.
             7. Set =Octets=[=j=] to =B=.
             8. Set =j= to =j= + 1.

         9.  If =Octets= does not contain a valid UTF-8 encoding of a
             Unicode code point, throw a URIError exception.
         10. Let =V= be the value obtained by applying the UTF-8
             transformation to =Octets=, that is, from a
             [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
             of octets into a 21-bit value.
         11. Let =S= be the String value whose code units are, in order,
             the elements in
             [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]](=V=).

   5. Set =R= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of the previous value of =R= and =S=.
   6. Set =k= to =k= + 1.

Note

This syntax of Uniform Resource Identifiers is based upon RFC 2396 and
does not reflect the more recent RFC 3986 which replaces RFC 2396. A
formal description and implementation of UTF-8 is given in RFC 3629.

In UTF-8, characters are encoded using sequences of 1 to 6 octets. The
only octet of a sequence of one has the higher-order bit set to 0, the
remaining 7 bits being used to encode the character value. In a sequence
of n octets, n > 1, the initial octet has the n higher-order bits set to
1, followed by a bit set to 0. The remaining bits of that octet contain
bits from the value of the character to be encoded. The following octets
all have the higher-order bit set to 1 and the following bit set to 0,
leaving 6 bits in each to contain bits from the character to be encoded.
The possible UTF-8 encodings of ECMAScript characters are specified in
[[https://tc39.es/ecma262/#table-43][Table 48]].

Table 48 (Informative): UTF-8 Encodings
| Code Unit Value       | Representation          | 1^{st} Octet   | 2^{nd} Octet   | 3^{rd} Octet   | 4^{th} Octet   |
|-----------------------+-------------------------+----------------+----------------+----------------+----------------|
| =0x0000 - 0x007F=     | =00000000 0zzzzzzz=     | =0zzzzzzz=     |                |                |                |
| =0x0080 - 0x07FF=     | =00000yyy yyzzzzzz=     | =110yyyyy=     | =10zzzzzz=     |                |                |
| =0x0800 - 0xD7FF=     | =xxxxyyyy yyzzzzzz=     | =1110xxxx=     | =10yyyyyy=     | =10zzzzzz=     |                |
| =0xD800 - 0xDBFF=\\   | =110110vv vvwwwwxx=\\   | =11110uuu=     | =10uuwwww=     | =10xxyyyy=     | =10zzzzzz=     |
| followed by\\         | followed by\\           |                |                |                |                |
| =0xDC00 - 0xDFFF=     | =110111yy yyzzzzzz=     |                |                |                |                |
| =0xD800 - 0xDBFF=\\   | causes =URIError=       |                |                |                |                |
| not followed by\\     |                         |                |                |                |                |
| =0xDC00 - 0xDFFF=     |                         |                |                |                |                |
| =0xDC00 - 0xDFFF=     | causes =URIError=       |                |                |                |                |
| =0xE000 - 0xFFFF=     | =xxxxyyyy yyzzzzzz=     | =1110xxxx=     | =10yyyyyy=     | =10zzzzzz=     |                |

Where\\
=uuuuu= = =vvvv= + 1\\
to account for the addition of 0x10000 as in section 3.8 of the Unicode
Standard (Surrogates).

The above transformation combines each
[[https://tc39.es/ecma262/#surrogate-pair][surrogate pair]] (for which
code unit values in the inclusive range 0xD800 to 0xDFFF are reserved)
into a UTF-32 representation and encodes the resulting 21-bit value into
UTF-8. Decoding reconstructs the
[[https://tc39.es/ecma262/#surrogate-pair][surrogate pair]].

RFC 3629 prohibits the decoding of invalid UTF-8 octet sequences. For
example, the invalid sequence C0 80 must not decode into the code unit
0x0000. Implementations of the Decode algorithm are required to throw a
URIError when encountering such invalid sequences.

* 18.2.6.2decodeURI ( =encodedURI= )
  :PROPERTIES:
  :CUSTOM_ID: decodeuri-encodeduri
  :END:

The =decodeURI= function computes a new version of a URI in which each
escape sequence and UTF-8 encoding of the sort that might be introduced
by the =encodeURI= function is replaced with the UTF-16 encoding of the
code points that it represents. Escape sequences that could not have
been introduced by =encodeURI= are not replaced.

The =decodeURI= function is the %decodeURI% intrinsic object. When the
=decodeURI= function is called with one argument =encodedURI=, the
following steps are taken:

1. Let =uriString= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=encodedURI=).
2. Let =reservedURISet= be a String containing one instance of each code
   unit valid in
   [[https://tc39.es/ecma262/#prod-uriReserved][uriReserved]] plus "#".
3. Return ? [[https://tc39.es/ecma262/#sec-decode][Decode]](=uriString=,
   =reservedURISet=).

Note

The code point =#= is not decoded from escape sequences even though it
is not a reserved URI code point.

* 18.2.6.3decodeURIComponent ( =encodedURIComponent= )
  :PROPERTIES:
  :CUSTOM_ID: decodeuricomponent-encodeduricomponent
  :END:

The =decodeURIComponent= function computes a new version of a URI in
which each escape sequence and UTF-8 encoding of the sort that might be
introduced by the =encodeURIComponent= function is replaced with the
UTF-16 encoding of the code points that it represents.

The =decodeURIComponent= function is the %decodeURIComponent% intrinsic
object. When the =decodeURIComponent= function is called with one
argument =encodedURIComponent=, the following steps are taken:

1. Let =componentString= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=encodedURIComponent=).
2. Let =reservedURIComponentSet= be the empty String.
3. Return
   ? [[https://tc39.es/ecma262/#sec-decode][Decode]](=componentString=,
   =reservedURIComponentSet=).

* 18.2.6.4encodeURI ( =uri= )
  :PROPERTIES:
  :CUSTOM_ID: encodeuri-uri
  :END:

The =encodeURI= function computes a new version of a UTF-16 encoded
([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]])
URI in which each instance of certain code points is replaced by one,
two, three, or four escape sequences representing the UTF-8 encoding of
the code points.

The =encodeURI= function is the %encodeURI% intrinsic object. When the
=encodeURI= function is called with one argument =uri=, the following
steps are taken:

1. Let =uriString= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=uri=).
2. Let =unescapedURISet= be a String containing one instance of each
   code unit valid in
   [[https://tc39.es/ecma262/#prod-uriReserved][uriReserved]] and
   [[https://tc39.es/ecma262/#prod-uriUnescaped][uriUnescaped]] plus
   "#".
3. Return ? [[https://tc39.es/ecma262/#sec-encode][Encode]](=uriString=,
   =unescapedURISet=).

Note

The code point =#= is not encoded to an escape sequence even though it
is not a reserved or unescaped URI code point.

* 18.2.6.5encodeURIComponent ( =uriComponent= )
  :PROPERTIES:
  :CUSTOM_ID: encodeuricomponent-uricomponent
  :END:

The =encodeURIComponent= function computes a new version of a UTF-16
encoded
([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]])
URI in which each instance of certain code points is replaced by one,
two, three, or four escape sequences representing the UTF-8 encoding of
the code point.

The =encodeURIComponent= function is the %encodeURIComponent% intrinsic
object. When the =encodeURIComponent= function is called with one
argument =uriComponent=, the following steps are taken:

1. Let =componentString= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=uriComponent=).
2. Let =unescapedURIComponentSet= be a String containing one instance of
   each code unit valid in
   [[https://tc39.es/ecma262/#prod-uriUnescaped][uriUnescaped]].
3. Return
   ? [[https://tc39.es/ecma262/#sec-encode][Encode]](=componentString=,
   =unescapedURIComponentSet=).

* 18.3Constructor Properties of the Global Object
  :PROPERTIES:
  :CUSTOM_ID: constructor-properties-of-the-global-object
  :END:

* 18.3.1Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-array-constructor][22.1.1]].

* 18.3.2ArrayBuffer ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][24.1.2]].

* 18.3.3BigInt ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: bigint-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-bigint-constructor][20.2.1]].

* 18.3.4BigInt64Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: bigint64array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.5BigUint64Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: biguint64array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.6Boolean ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: boolean-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-boolean-constructor][19.3.1]].

* 18.3.7DataView ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: dataview-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-dataview-constructor][24.3.2]].

* 18.3.8Date ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: date-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-date-constructor][20.4.2]].

* 18.3.9Error ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: error-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-error-constructor][19.5.1]].

* 18.3.10EvalError ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: evalerror-.-.-.
  :END:

See
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-evalerror][19.5.5.1]].

* 18.3.11Float32Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: float32array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.12Float64Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: float64array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.13Function ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: function-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-function-constructor][19.2.1]].

* 18.3.14Int8Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: int8array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.15Int16Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: int16array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.16Int32Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: int32array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.17Map ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: map-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-map-constructor][23.1.1]].

* 18.3.18Number ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: number-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-number-constructor][20.1.1]].

* 18.3.19Object ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: object-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-object-constructor][19.1.1]].

* 18.3.20Promise ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: promise-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-promise-constructor][25.6.3]].

* 18.3.21Proxy ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: proxy-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-proxy-constructor][26.2.1]].

* 18.3.22RangeError ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: rangeerror-.-.-.
  :END:

See
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-rangeerror][19.5.5.2]].

* 18.3.23ReferenceError ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: referenceerror-.-.-.
  :END:

See
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-referenceerror][19.5.5.3]].

* 18.3.24RegExp ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: regexp-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-regexp-constructor][21.2.3]].

* 18.3.25Set ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: set-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-set-constructor][23.2.1]].

* 18.3.26SharedArrayBuffer ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: sharedarraybuffer-.-.-.
  :END:

See
[[https://tc39.es/ecma262/#sec-sharedarraybuffer-constructor][24.2.2]].

* 18.3.27String ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: string-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-string-constructor][21.1.1]].

* 18.3.28Symbol ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: symbol-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-symbol-constructor][19.4.1]].

* 18.3.29SyntaxError ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: syntaxerror-.-.-.
  :END:

See
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-syntaxerror][19.5.5.4]].

* 18.3.30TypeError ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: typeerror-.-.-.
  :END:

See
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-typeerror][19.5.5.5]].

* 18.3.31Uint8Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: uint8array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.32Uint8ClampedArray ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: uint8clampedarray-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.33Uint16Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: uint16array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.34Uint32Array ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: uint32array-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-typedarray-constructors][22.2.4]].

* 18.3.35URIError ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: urierror-.-.-.
  :END:

See
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard-urierror][19.5.5.6]].

* 18.3.36WeakMap ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: weakmap-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-weakmap-constructor][23.3.1]].

* 18.3.37WeakSet ( . . . )
  :PROPERTIES:
  :CUSTOM_ID: weakset-.-.-.
  :END:

See [[https://tc39.es/ecma262/#sec-weakset-objects][23.4]].

* 18.4Other Properties of the Global Object
  :PROPERTIES:
  :CUSTOM_ID: other-properties-of-the-global-object
  :END:

* 18.4.1Atomics
  :PROPERTIES:
  :CUSTOM_ID: atomics
  :END:

See [[https://tc39.es/ecma262/#sec-atomics-object][24.4]].

* 18.4.2JSON
  :PROPERTIES:
  :CUSTOM_ID: json
  :END:

See [[https://tc39.es/ecma262/#sec-json-object][24.5]].

* 18.4.3Math
  :PROPERTIES:
  :CUSTOM_ID: math
  :END:

See [[https://tc39.es/ecma262/#sec-math-object][20.3]].

* 18.4.4Reflect
  :PROPERTIES:
  :CUSTOM_ID: reflect
  :END:

See [[https://tc39.es/ecma262/#sec-reflect-object][26.1]].

* 19Fundamental Objects
  :PROPERTIES:
  :CUSTOM_ID: fundamental-objects
  :END:

* 19.1Object Objects
  :PROPERTIES:
  :CUSTOM_ID: object-objects
  :END:

* 19.1.1The Object Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-object-constructor
  :END:

The Object [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Object%.
- is the initial value of the "Object" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates a new ordinary object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- performs a type conversion when called as a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition.

* 19.1.1.1Object ( [ =value= ] )
  :PROPERTIES:
  :CUSTOM_ID: object-value
  :END:

When the =Object= function is called with optional argument =value=, the
following steps are taken:

1. If NewTarget is neither undefined nor the active function, then

   1. Return
      ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
      "%Object.prototype%").

2. If =value= is undefined or null, return
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
3. Return
   ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=value=).

The "length" property of the =Object=
[[https://tc39.es/ecma262/#constructor][constructor]] function is 1.

* 19.1.2Properties of the Object Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-object-constructor
  :END:

The Object [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has a "length" property.
- has the following additional properties:

* 19.1.2.1Object.assign ( =target=, ...=sources= )
  :PROPERTIES:
  :CUSTOM_ID: object.assign-target-...sources
  :END:

The =assign= function is used to copy the values of all of the
enumerable own properties from one or more source objects to a =target=
object. When the =assign= function is called, the following steps are
taken:

1. Let =to= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=target=).
2. If only one argument was passed, return =to=.
3. Let =sources= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of argument values starting with the second argument.
4. For each element =nextSource= of =sources=, in ascending index order,
   do

   1. If =nextSource= is neither undefined nor null, then

      1. Let =from= be
         ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=nextSource=).
      2. Let =keys= be ? =from=.[[OwnPropertyKeys]]().
      3. For each element =nextKey= of =keys= in
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         order, do

         1. Let =desc= be ? =from=.[[GetOwnProperty]](=nextKey=).
         2. If =desc= is not undefined and =desc=.[[Enumerable]] is
            true, then

            1. Let =propValue= be
               ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=from=,
               =nextKey=).
            2. Perform
               ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=to=,
               =nextKey=, =propValue=, true).

5. Return =to=.

The "length" property of the =assign= function is 2.

* 19.1.2.2Object.create ( =O=, =Properties= )
  :PROPERTIES:
  :CUSTOM_ID: object.create-o-properties
  :END:

The =create= function creates a new object with a specified prototype.
When the =create= function is called, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is neither Object nor Null, throw a TypeError exception.
2. Let =obj= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](=O=).
3. If =Properties= is not undefined, then

   1. Return
      ? [[https://tc39.es/ecma262/#sec-objectdefineproperties][ObjectDefineProperties]](=obj=,
      =Properties=).

4. Return =obj=.

* 19.1.2.3Object.defineProperties ( =O=, =Properties= )
  :PROPERTIES:
  :CUSTOM_ID: object.defineproperties-o-properties
  :END:

The =defineProperties= function is used to add own properties and/or
update the attributes of existing own properties of an object. When the
=defineProperties= function is called, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-objectdefineproperties][ObjectDefineProperties]](=O=,
   =Properties=).

* 19.1.2.3.1Runtime Semantics: ObjectDefineProperties ( =O=,
=Properties= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-objectdefineproperties-o-properties
  :END:

The abstract operation ObjectDefineProperties with arguments =O= and
=Properties= performs the following steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, throw a TypeError exception.
2. Let =props= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=Properties=).
3. Let =keys= be ? =props=.[[OwnPropertyKeys]]().
4. Let =descriptors= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
5. For each element =nextKey= of =keys= in
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   order, do

   1. Let =propDesc= be ? =props=.[[GetOwnProperty]](=nextKey=).
   2. If =propDesc= is not undefined and =propDesc=.[[Enumerable]] is
      true, then

      1. Let =descObj= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=props=,
         =nextKey=).
      2. Let =desc= be
         ? [[https://tc39.es/ecma262/#sec-topropertydescriptor][ToPropertyDescriptor]](=descObj=).
      3. Append the pair (a two element
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]])
         consisting of =nextKey= and =desc= to the end of =descriptors=.

6. For each =pair= from =descriptors= in list order, do

   1. Let =P= be the first element of =pair=.
   2. Let =desc= be the second element of =pair=.
   3. Perform
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
      =P=, =desc=).

7. Return =O=.

* 19.1.2.4Object.defineProperty ( =O=, =P=, =Attributes= )
  :PROPERTIES:
  :CUSTOM_ID: object.defineproperty-o-p-attributes
  :END:

The =defineProperty= function is used to add an own property and/or
update the attributes of an existing own property of an object. When the
=defineProperty= function is called, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, throw a TypeError exception.
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=P=).
3. Let =desc= be
   ? [[https://tc39.es/ecma262/#sec-topropertydescriptor][ToPropertyDescriptor]](=Attributes=).
4. Perform
   ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
   =key=, =desc=).
5. Return =O=.

* 19.1.2.5Object.entries ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.entries-o
  :END:

When the =entries= function is called with argument =O=, the following
steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=O=).
2. Let =nameList= be
   ? [[https://tc39.es/ecma262/#sec-enumerableownpropertynames][EnumerableOwnPropertyNames]](=obj=,
   key+value).
3. Return
   [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=nameList=).

* 19.1.2.6Object.freeze ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.freeze-o
  :END:

When the =freeze= function is called, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return =O=.
2. Let =status= be
   ? [[https://tc39.es/ecma262/#sec-setintegritylevel][SetIntegrityLevel]](=O=,
   frozen).
3. If =status= is false, throw a TypeError exception.
4. Return =O=.

* 19.1.2.7Object.fromEntries ( =iterable= )
  :PROPERTIES:
  :CUSTOM_ID: object.fromentries-iterable
  :END:

When the =fromEntries= method is called with argument =iterable=, the
following steps are taken:

1. Perform
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=iterable=).
2. Let =obj= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =obj= is an extensible
   ordinary object with no own properties.
4. Let =stepsDefine= be the algorithm steps defined in
   [[https://tc39.es/ecma262/#sec-create-data-property-on-object-functions][CreateDataPropertyOnObject
   Functions]].
5. Let =adder= be
   ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsDefine=,
   « »).
6. Return
   ? [[https://tc39.es/ecma262/#sec-add-entries-from-iterable][AddEntriesFromIterable]](=obj=,
   =iterable=, =adder=).

Note

The function created for =adder= is never directly accessible to
ECMAScript code.

* 19.1.2.7.1CreateDataPropertyOnObject Functions
  :PROPERTIES:
  :CUSTOM_ID: createdatapropertyonobject-functions
  :END:

A CreateDataPropertyOnObject function is an anonymous built-in function.
When a CreateDataPropertyOnObject function is called with arguments
=key= and =value=, the following steps are taken:

1. Let =O= be the this value.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object.
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an extensible
   ordinary object.
4. Let =propertyKey= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=key=).
5. Perform
   ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=O=,
   =propertyKey=, =value=).
6. Return undefined.

* 19.1.2.8Object.getOwnPropertyDescriptor ( =O=, =P= )
  :PROPERTIES:
  :CUSTOM_ID: object.getownpropertydescriptor-o-p
  :END:

When the =getOwnPropertyDescriptor= function is called, the following
steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=O=).
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=P=).
3. Let =desc= be ? =obj=.[[GetOwnProperty]](=key=).
4. Return
   [[https://tc39.es/ecma262/#sec-frompropertydescriptor][FromPropertyDescriptor]](=desc=).

* 19.1.2.9Object.getOwnPropertyDescriptors ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.getownpropertydescriptors-o
  :END:

When the =getOwnPropertyDescriptors= function is called, the following
steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=O=).
2. Let =ownKeys= be ? =obj=.[[OwnPropertyKeys]]().
3. Let =descriptors= be
   ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
4. For each element =key= of =ownKeys= in
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   order, do

   1. Let =desc= be ? =obj=.[[GetOwnProperty]](=key=).
   2. Let =descriptor= be
      ! [[https://tc39.es/ecma262/#sec-frompropertydescriptor][FromPropertyDescriptor]](=desc=).
   3. If =descriptor= is not undefined, perform
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=descriptors=,
      =key=, =descriptor=).

5. Return =descriptors=.

* 19.1.2.10Object.getOwnPropertyNames ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.getownpropertynames-o
  :END:

When the =getOwnPropertyNames= function is called, the following steps
are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-getownpropertykeys][GetOwnPropertyKeys]](=O=,
   String).

* 19.1.2.11Object.getOwnPropertySymbols ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.getownpropertysymbols-o
  :END:

When the =getOwnPropertySymbols= function is called with argument =O=,
the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-getownpropertykeys][GetOwnPropertyKeys]](=O=,
   Symbol).

* 19.1.2.11.1Runtime Semantics: GetOwnPropertyKeys ( =O=, =type= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-getownpropertykeys-o-type
  :END:

The abstract operation GetOwnPropertyKeys is called with arguments =O=
and =type= where =O= is an Object and =type= is one of the ECMAScript
specification types String or Symbol. The following steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=O=).
2. Let =keys= be ? =obj=.[[OwnPropertyKeys]]().
3. Let =nameList= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. For each element =nextKey= of =keys= in
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   order, do

   1. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=nextKey=)
      is =type=, then

      1. Append =nextKey= as the last element of =nameList=.

5. Return
   [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=nameList=).

* 19.1.2.12Object.getPrototypeOf ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.getprototypeof-o
  :END:

When the =getPrototypeOf= function is called with argument =O=, the
following steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=O=).
2. Return ? =obj=.[[GetPrototypeOf]]().

* 19.1.2.13Object.is ( =value1=, =value2= )
  :PROPERTIES:
  :CUSTOM_ID: object.is-value1-value2
  :END:

When the =is= function is called with arguments =value1= and =value2=,
the following steps are taken:

1. Return
   [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=value1=,
   =value2=).

* 19.1.2.14Object.isExtensible ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.isextensible-o
  :END:

When the =isExtensible= function is called with argument =O=, the
following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return false.
2. Return
   ? [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=O=).

* 19.1.2.15Object.isFrozen ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.isfrozen-o
  :END:

When the =isFrozen= function is called with argument =O=, the following
steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return true.
2. Return
   ? [[https://tc39.es/ecma262/#sec-testintegritylevel][TestIntegrityLevel]](=O=,
   frozen).

* 19.1.2.16Object.isSealed ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.issealed-o
  :END:

When the =isSealed= function is called with argument =O=, the following
steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return true.
2. Return
   ? [[https://tc39.es/ecma262/#sec-testintegritylevel][TestIntegrityLevel]](=O=,
   sealed).

* 19.1.2.17Object.keys ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.keys-o
  :END:

When the =keys= function is called with argument =O=, the following
steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=O=).
2. Let =nameList= be
   ? [[https://tc39.es/ecma262/#sec-enumerableownpropertynames][EnumerableOwnPropertyNames]](=obj=,
   key).
3. Return
   [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=nameList=).

* 19.1.2.18Object.preventExtensions ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.preventextensions-o
  :END:

When the =preventExtensions= function is called, the following steps are
taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return =O=.
2. Let =status= be ? =O=.[[PreventExtensions]]().
3. If =status= is false, throw a TypeError exception.
4. Return =O=.

* 19.1.2.19Object.prototype
  :PROPERTIES:
  :CUSTOM_ID: object.prototype
  :END:

The initial value of =Object.prototype= is %Object.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.1.2.20Object.seal ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.seal-o
  :END:

When the =seal= function is called, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return =O=.
2. Let =status= be
   ? [[https://tc39.es/ecma262/#sec-setintegritylevel][SetIntegrityLevel]](=O=,
   sealed).
3. If =status= is false, throw a TypeError exception.
4. Return =O=.

* 19.1.2.21Object.setPrototypeOf ( =O=, =proto= )
  :PROPERTIES:
  :CUSTOM_ID: object.setprototypeof-o-proto
  :END:

When the =setPrototypeOf= function is called with arguments =O= and
=proto=, the following steps are taken:

1. Set =O= to
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=O=).
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=proto=)
   is neither Object nor Null, throw a TypeError exception.
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return =O=.
4. Let =status= be ? =O=.[[SetPrototypeOf]](=proto=).
5. If =status= is false, throw a TypeError exception.
6. Return =O=.

* 19.1.2.22Object.values ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: object.values-o
  :END:

When the =values= function is called with argument =O=, the following
steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=O=).
2. Let =nameList= be
   ? [[https://tc39.es/ecma262/#sec-enumerableownpropertynames][EnumerableOwnPropertyNames]](=obj=,
   value).
3. Return
   [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=nameList=).

* 19.1.3Properties of the Object Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-object-prototype-object
  :END:

The Object prototype object:

- is the intrinsic object %ObjectPrototype%.
- is an
  [[https://tc39.es/ecma262/#sec-immutable-prototype-exotic-objects][immutable
  prototype exotic object]].
- has a [[Prototype]] internal slot whose value is null.

* 19.1.3.1Object.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: object.prototype.constructor
  :END:

The initial value of =Object.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-object-constructor][%Object%]].

* 19.1.3.2Object.prototype.hasOwnProperty ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: object.prototype.hasownproperty-v
  :END:

When the =hasOwnProperty= method is called with argument =V=, the
following steps are taken:

1. Let =P= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=V=).
2. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
3. Return
   ? [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=O=,
   =P=).

Note

The ordering of steps 1 and 2 is chosen to ensure that any exception
that would have been thrown by step 1 in previous editions of this
specification will continue to be thrown even if the this value is
undefined or null.

* 19.1.3.3Object.prototype.isPrototypeOf ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: object.prototype.isprototypeof-v
  :END:

When the =isPrototypeOf= method is called with argument =V=, the
following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=V=)
   is not Object, return false.
2. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
3. Repeat,

   1. Set =V= to ? =V=.[[GetPrototypeOf]]().
   2. If =V= is null, return false.
   3. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=O=, =V=)
      is true, return true.

Note

The ordering of steps 1 and 2 preserves the behaviour specified by
previous editions of this specification for the case where =V= is not an
object and the this value is undefined or null.

* 19.1.3.4Object.prototype.propertyIsEnumerable ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: object.prototype.propertyisenumerable-v
  :END:

When the =propertyIsEnumerable= method is called with argument =V=, the
following steps are taken:

1. Let =P= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=V=).
2. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
3. Let =desc= be ? =O=.[[GetOwnProperty]](=P=).
4. If =desc= is undefined, return false.
5. Return =desc=.[[Enumerable]].

Note 1

This method does not consider objects in the prototype chain.

Note 2

The ordering of steps 1 and 2 is chosen to ensure that any exception
that would have been thrown by step 1 in previous editions of this
specification will continue to be thrown even if the this value is
undefined or null.

* 19.1.3.5Object.prototype.toLocaleString ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: object.prototype.tolocalestring-reserved1-reserved2
  :END:

When the =toLocaleString= method is called, the following steps are
taken:

1. Let =O= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=O=,
   "toString").

The optional parameters to this function are not used but are intended
to correspond to the parameter pattern used by ECMA-402 =toLocaleString=
functions. Implementations that do not include ECMA-402 support must not
use those parameter positions for other purposes.

Note 1

This function provides a generic =toLocaleString= implementation for
objects that have no locale-specific =toString= behaviour. =Array=,
=Number=, =Date=, and
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]
provide their own locale-sensitive =toLocaleString= methods.

Note 2

ECMA-402 intentionally does not provide an alternative to this default
implementation.

* 19.1.3.6Object.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: object.prototype.tostring
  :END:

When the =toString= method is called, the following steps are taken:

1.  If the this value is undefined, return "[object Undefined]".
2.  If the this value is null, return "[object Null]".
3.  Let =O= be
    ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
4.  Let =isArray= be
    ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=O=).
5.  If =isArray= is true, let =builtinTag= be "Array".
6.  Else if =O= has a [[ParameterMap]] internal slot, let =builtinTag=
    be "Arguments".
7.  Else if =O= has a [[Call]] internal method, let =builtinTag= be
    "Function".
8.  Else if =O= has an [[ErrorData]] internal slot, let =builtinTag= be
    "Error".
9.  Else if =O= has a [[BooleanData]] internal slot, let =builtinTag= be
    "Boolean".
10. Else if =O= has a [[NumberData]] internal slot, let =builtinTag= be
    "Number".
11. Else if =O= has a [[StringData]] internal slot, let =builtinTag= be
    "String".
12. Else if =O= has a [[DateValue]] internal slot, let =builtinTag= be
    "Date".
13. Else if =O= has a [[RegExpMatcher]] internal slot, let =builtinTag=
    be "RegExp".
14. Else, let =builtinTag= be "Object".
15. Let =tag= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
    @@toStringTag).
16. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=tag=)
    is not String, set =tag= to =builtinTag=.
17. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of "[object ", =tag=, and "]".

This function is the %ObjProto_toString% intrinsic object.

Note

Historically, this function was occasionally used to access the String
value of the [[Class]] internal slot that was used in previous editions
of this specification as a nominal type tag for various built-in
objects. The above definition of =toString= preserves compatibility for
legacy code that uses =toString= as a test for those specific kinds of
built-in objects. It does not provide a reliable type testing mechanism
for other kinds of built-in or program defined objects. In addition,
programs can use @@toStringTag in ways that will invalidate the
reliability of such legacy type tests.

* 19.1.3.7Object.prototype.valueOf ( )
  :PROPERTIES:
  :CUSTOM_ID: object.prototype.valueof
  :END:

When the =valueOf= method is called, the following steps are taken:

1. Return ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).

This function is the %ObjProto_valueOf% intrinsic object.

* 19.1.4Properties of Object Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-object-instances
  :END:

Object instances have no special properties beyond those inherited from
the Object prototype object.

* 19.2Function Objects
  :PROPERTIES:
  :CUSTOM_ID: function-objects
  :END:

* 19.2.1The Function Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-function-constructor
  :END:

The Function [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Function%.
- is the initial value of the "Function" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new
  [[https://tc39.es/ecma262/#function-object][function object]] when
  called as a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. Thus the
  function call =Function(…)= is equivalent to the object creation
  expression =new Function(…)= with the same arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Function= behaviour must include a
  =super= call to the =Function=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize a subclass instance with the internal slots necessary for
  built-in function behaviour. All ECMAScript syntactic forms for
  defining function objects create instances of =Function=. There is no
  syntactic means to create instances of =Function= subclasses except
  for the built-in =GeneratorFunction=, =AsyncFunction=, and
  =AsyncGeneratorFunction= subclasses.

* 19.2.1.1Function ( =p1=, =p2=, ... , =pn=, =body= )
  :PROPERTIES:
  :CUSTOM_ID: function-p1-p2-pn-body
  :END:

The last argument specifies the body (executable code) of a function;
any preceding arguments specify formal parameters.

When the =Function= function is called with some arguments =p1=, =p2=,
... , =pn=, =body= (where =n= might be 0, that is, there are no “ =p= ”
arguments, and where =body= might also not be provided), the following
steps are taken:

1. Let =C= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =args= be the =argumentsList= that was passed to this function by
   [[Call]] or [[Construct]].
3. Return
   ? [[https://tc39.es/ecma262/#sec-createdynamicfunction][CreateDynamicFunction]](=C=,
   NewTarget, normal, =args=).

Note

It is permissible but not necessary to have one argument for each formal
parameter to be specified. For example, all three of the following
expressions produce the same result:

#+BEGIN_EXAMPLE
  new Function("a", "b", "c", "return a+b+c")
  new Function("a, b, c", "return a+b+c")
  new Function("a,b", "c", "return a+b+c")
#+END_EXAMPLE

* 19.2.1.1.1Runtime Semantics: CreateDynamicFunction ( =constructor=,
=newTarget=, =kind=, =args= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-createdynamicfunction-constructor-newtarget-kind-args
  :END:

The abstract operation CreateDynamicFunction is called with arguments
=constructor=, =newTarget=, =kind=, and =args=. =constructor= is the
[[https://tc39.es/ecma262/#constructor][constructor]] function that is
performing this action, =newTarget= is the
[[https://tc39.es/ecma262/#constructor][constructor]] that =new= was
initially applied to, =kind= is either normal, generator, async, or
asyncGenerator, and =args= is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
containing the actual argument values that were passed to =constructor=.
The following steps are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: The
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] has at least two elements.
2.  Let =callerContext= be the second to top element of the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]].
3.  Let =callerRealm= be =callerContext='s
    [[https://tc39.es/ecma262/#realm][Realm]].
4.  Let =calleeRealm= be [[https://tc39.es/ecma262/#current-realm][the
    current Realm Record]].
5.  Perform
    ? [[https://tc39.es/ecma262/#sec-hostensurecancompilestrings][HostEnsureCanCompileStrings]](=callerRealm=,
    =calleeRealm=).
6.  If =newTarget= is undefined, set =newTarget= to =constructor=.
7.  If =kind= is normal, then

    1. Let =goal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
       ~Await].
    2. Let =parameterGoal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
       ~Await].
    3. Let =fallbackProto= be "%Function.prototype%".

8.  Else if =kind= is generator, then

    1. Let =goal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]].
    2. Let =parameterGoal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
       ~Await].
    3. Let =fallbackProto= be "%Generator%".

9.  Else if =kind= is async, then

    1. Let =goal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]].
    2. Let =parameterGoal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
       +Await].
    3. Let =fallbackProto= be "%AsyncFunction.prototype%".

10. Else,

    1. [[https://tc39.es/ecma262/#assert][Assert]]: =kind= is
       asyncGenerator.
    2. Let =goal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]].
    3. Let =parameterGoal= be the grammar symbol
       [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
       +Await].
    4. Let =fallbackProto= be "%AsyncGenerator%".

11. Let =argCount= be the number of elements in =args=.
12. Let =P= be the empty String.
13. If =argCount= = 0, let =bodyText= be the empty String.
14. Else if =argCount= = 1, let =bodyText= be =args=[0].
15. Else,

    1. [[https://tc39.es/ecma262/#assert][Assert]]: =argCount= > 1.
    2. Let =firstArg= be =args=[0].
    3. Set =P= to
       ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=firstArg=).
    4. Let =k= be 1.
    5. Repeat, while =k= < =argCount= - 1

       1. Let =nextArg= be =args=[=k=].
       2. Let =nextArgString= be
          ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=nextArg=).
       3. Set =P= to the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of the previous value of =P=, "," (a comma), and
          =nextArgString=.
       4. Set =k= to =k= + 1.

    6. Let =bodyText= be =args=[=k=].

16. Set =bodyText= to the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of 0x000A (LINE FEED),
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=bodyText=),
    and 0x000A (LINE FEED).
17. Perform the following substeps in an implementation-dependent order,
    possibly interleaving parsing and error detection:

    1.  Let =parameters= be the result of parsing =P=, interpreted as
        UTF-16 encoded Unicode text as described in
        [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]],
        using =parameterGoal= as the
        [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
        symbol]]. Throw a SyntaxError exception if the parse fails.
    2.  Let =body= be the result of parsing =bodyText=, interpreted as
        UTF-16 encoded Unicode text as described in
        [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]],
        using =goal= as the
        [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
        symbol]]. Throw a SyntaxError exception if the parse fails.
    3.  Let =strict= be ContainsUseStrict of =body=.
    4.  If any
        [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
        semantics]] errors are detected for =parameters= or =body=,
        throw a SyntaxError exception. If =strict= is true, the Early
        Error rules for
        [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
        are applied.
    5.  If =strict= is true and IsSimpleParameterList of =parameters= is
        false, throw a SyntaxError exception.
    6.  If any element of the BoundNames of =parameters= also occurs in
        the LexicallyDeclaredNames of =body=, throw a SyntaxError
        exception.
    7.  If =body= Contains
        [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is true,
        throw a SyntaxError exception.
    8.  If =parameters= Contains
        [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is true,
        throw a SyntaxError exception.
    9.  If =body= Contains
        [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]
        is true, throw a SyntaxError exception.
    10. If =parameters= Contains
        [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]
        is true, throw a SyntaxError exception.
    11. If =kind= is generator or asyncGenerator, then

        1. If =parameters= Contains
           [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
           is true, throw a SyntaxError exception.

    12. If =kind= is async or asyncGenerator, then

        1. If =parameters= Contains
           [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]
           is true, throw a SyntaxError exception.

    13. If =strict= is true, then

        1. If BoundNames of =parameters= contains any duplicate
           elements, throw a SyntaxError exception.

18. Let =proto= be
    ? [[https://tc39.es/ecma262/#sec-getprototypefromconstructor][GetPrototypeFromConstructor]](=newTarget=,
    =fallbackProto=).
19. Let =realmF= be [[https://tc39.es/ecma262/#current-realm][the
    current Realm Record]].
20. Let =scope= be =realmF=.[[GlobalEnv]].
21. Let =F= be
    ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](=proto=,
    =parameters=, =body=, non-lexical-this, =scope=).
22. If =kind= is generator, then

    1. Let =prototype= be
       [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
    2. Perform
       [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
       "prototype", PropertyDescriptor { [[Value]]: =prototype=,
       [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]:
       false }).

23. Else if =kind= is asyncGenerator, then

    1. Let =prototype= be
       [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
    2. Perform
       [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
       "prototype", PropertyDescriptor { [[Value]]: =prototype=,
       [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]:
       false }).

24. Else if =kind= is normal, perform
    [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=F=).
25. NOTE: Async functions are not constructable and do not have a
    [[Construct]] internal method or a "prototype" property.
26. Perform
    [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
    "anonymous").
27. Let =prefix= be the prefix associated with =kind= in
    [[https://tc39.es/ecma262/#table-dynamic-function-sourcetext-prefixes][Table
    49]].
28. Let =sourceText= be the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =prefix=, " anonymous(", =P=, 0x000A (LINE FEED), ") {",
    =bodyText=, and "}".
29. Set =F=.[[SourceText]] to =sourceText=.
30. Return =F=.

Note

A "prototype" property is created for every non-async function created
using CreateDynamicFunction to provide for the possibility that the
function will be used as a
[[https://tc39.es/ecma262/#constructor][constructor]].

Table 49: Dynamic Function SourceText Prefixes

| Kind             | Prefix              |
|------------------+---------------------|
| normal           | "function"          |
| generator        | "function*"         |
| async            | "async function"    |
| asyncGenerator   | "async function*"   |

* 19.2.2Properties of the Function Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-function-constructor
  :END:

The Function [[https://tc39.es/ecma262/#constructor][constructor]]:

- is itself a built-in
  [[https://tc39.es/ecma262/#function-object][function object]].
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 19.2.2.1Function.length
  :PROPERTIES:
  :CUSTOM_ID: function.length
  :END:

This is a [[https://tc39.es/ecma262/#sec-object-type][data property]]
with a value of 1. This property has the attributes { [[Writable]]:
false, [[Enumerable]]: false, [[Configurable]]: true }.

* 19.2.2.2Function.prototype
  :PROPERTIES:
  :CUSTOM_ID: function.prototype
  :END:

The value of =Function.prototype= is
[[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
the intrinsic Function prototype object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.2.3Properties of the Function Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-function-prototype-object
  :END:

The Function prototype object:

- is %Function.prototype%.
- is itself a built-in
  [[https://tc39.es/ecma262/#function-object][function object]].
- accepts any arguments and returns undefined when invoked.
- does not have a [[Construct]] internal method; it cannot be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]] with the =new=
  operator.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- does not have a "prototype" property.
- has a "length" property whose value is 0.
- has a "name" property whose value is the empty String.

Note

The Function prototype object is specified to be a
[[https://tc39.es/ecma262/#function-object][function object]] to ensure
compatibility with ECMAScript code that was created prior to the
ECMAScript 2015 specification.

* 19.2.3.1Function.prototype.apply ( =thisArg=, =argArray= )
  :PROPERTIES:
  :CUSTOM_ID: function.prototype.apply-thisarg-argarray
  :END:

When the =apply= method is called with arguments =thisArg= and
=argArray=, the following steps are taken:

1. Let =func= be the this value.
2. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=func=) is
   false, throw a TypeError exception.
3. If =argArray= is undefined or null, then

   1. Perform
      [[https://tc39.es/ecma262/#sec-preparefortailcall][PrepareForTailCall]]().
   2. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=func=,
      =thisArg=).

4. Let =argList= be
   ? [[https://tc39.es/ecma262/#sec-createlistfromarraylike][CreateListFromArrayLike]](=argArray=).
5. Perform
   [[https://tc39.es/ecma262/#sec-preparefortailcall][PrepareForTailCall]]().
6. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=func=,
   =thisArg=, =argList=).

Note 1

The =thisArg= value is passed without modification as the this value.
This is a change from Edition 3, where an undefined or null =thisArg= is
replaced with the [[https://tc39.es/ecma262/#sec-global-object][global
object]] and [[https://tc39.es/ecma262/#sec-toobject][ToObject]] is
applied to all other values and that result is passed as the this value.
Even though the =thisArg= is passed without modification, non-strict
functions still perform these transformations upon entry to the
function.

Note 2

If =func= is an arrow function or a
[[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
function]] then the =thisArg= will be ignored by the function [[Call]]
in step 5.

* 19.2.3.2Function.prototype.bind ( =thisArg=, ...=args= )
  :PROPERTIES:
  :CUSTOM_ID: function.prototype.bind-thisarg-...args
  :END:

When the =bind= method is called with argument =thisArg= and zero or
more =args=, it performs the following steps:

1.  Let =Target= be the this value.
2.  If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=Target=)
    is false, throw a TypeError exception.
3.  Let =args= be a new (possibly empty)
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    consisting of all of the argument values provided after =thisArg= in
    order.
4.  Let =F= be
    ? [[https://tc39.es/ecma262/#sec-boundfunctioncreate][BoundFunctionCreate]](=Target=,
    =thisArg=, =args=).
5.  Let =targetHasLength= be
    ? [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]](=Target=,
    "length").
6.  If =targetHasLength= is true, then

    1. Let =targetLen= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Target=,
       "length").
    2. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=targetLen=)
       is not Number, let =L= be 0.
    3. Else,

       1. Set =targetLen= to
          ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=targetLen=).
       2. Let =L= be the larger of 0 and the result of =targetLen= minus
          the number of elements of =args=.

7.  Else, let =L= be 0.
8.  Perform
    ! [[https://tc39.es/ecma262/#sec-setfunctionlength][SetFunctionLength]](=F=,
    =L=).
9.  Let =targetName= be
    ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=Target=, "name").
10. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=targetName=)
    is not String, set =targetName= to the empty string.
11. Perform
    [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
    =targetName=, "bound").
12. Return =F=.

Note 1

Function objects created using =Function.prototype.bind= are exotic
objects. They also do not have a "prototype" property.

Note 2

If =Target= is an arrow function or a
[[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
function]] then the =thisArg= passed to this method will not be used by
subsequent calls to =F=.

* 19.2.3.3Function.prototype.call ( =thisArg=, ...=args= )
  :PROPERTIES:
  :CUSTOM_ID: function.prototype.call-thisarg-...args
  :END:

When the =call= method is called with argument =thisArg= and zero or
more =args=, the following steps are taken:

1. Let =func= be the this value.
2. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=func=) is
   false, throw a TypeError exception.
3. Let =argList= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. If this method was called with more than one argument, then in left
   to right order, starting with the second argument, append each
   argument as the last element of =argList=.
5. Perform
   [[https://tc39.es/ecma262/#sec-preparefortailcall][PrepareForTailCall]]().
6. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=func=,
   =thisArg=, =argList=).

Note 1

The =thisArg= value is passed without modification as the this value.
This is a change from Edition 3, where an undefined or null =thisArg= is
replaced with the [[https://tc39.es/ecma262/#sec-global-object][global
object]] and [[https://tc39.es/ecma262/#sec-toobject][ToObject]] is
applied to all other values and that result is passed as the this value.
Even though the =thisArg= is passed without modification, non-strict
functions still perform these transformations upon entry to the
function.

Note 2

If =func= is an arrow function or a
[[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
function]] then the =thisArg= will be ignored by the function [[Call]]
in step 5.

* 19.2.3.4Function.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: function.prototype.constructor
  :END:

The initial value of =Function.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-function-constructor][%Function%]].

* 19.2.3.5Function.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: function.prototype.tostring
  :END:

When the =toString= method is called, the following steps are taken:

1. Let =func= be the this value.
2. If =func= is a
   [[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][Bound
   Function exotic object]] or a
   [[https://tc39.es/ecma262/#sec-built-in-function-objects][built-in
   function object]], then return an implementation-dependent String
   source code representation of =func=. The representation must have
   the syntax of a
   [[https://tc39.es/ecma262/#prod-NativeFunction][NativeFunction]].
   Additionally, if =func= is a
   [[https://tc39.es/ecma262/#sec-well-known-intrinsic-objects][Well-known
   Intrinsic Object]] and is not identified as an anonymous function,
   the portion of the returned String that would be matched by
   [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] must be
   the initial value of the "name" property of =func=.
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=func=)
   is Object and =func= has a [[SourceText]] internal slot and
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=func=.[[SourceText]])
   is String and ! HostHasSourceTextAvailable(=func=) is true, then
   return =func=.[[SourceText]].
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=func=)
   is Object and
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=func=) is
   true, then return an implementation-dependent String source code
   representation of =func=. The representation must have the syntax of
   a [[https://tc39.es/ecma262/#prod-NativeFunction][NativeFunction]].
5. Throw a TypeError exception.

[[https://tc39.es/ecma262/#prod-NativeFunction][NativeFunction]]:function[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][~Yield,
~Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
~Await]){[nativecode]}

* 19.2.3.6Function.prototype [ @@hasInstance ] ( =V= )
  :PROPERTIES:
  :CUSTOM_ID: function.prototype-hasinstance-v
  :END:

When the =@@hasInstance= method of an object =F= is called with value
=V=, the following steps are taken:

1. Let =F= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-ordinaryhasinstance][OrdinaryHasInstance]](=F=,
   =V=).

The value of the "name" property of this function is
"[Symbol.hasInstance]".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

Note

This is the default implementation of =@@hasInstance= that most
functions inherit. =@@hasInstance= is called by the =instanceof=
operator to determine whether a value is an instance of a specific
[[https://tc39.es/ecma262/#constructor][constructor]]. An expression
such as

#+BEGIN_EXAMPLE
  v instanceof F
#+END_EXAMPLE

evaluates as

#+BEGIN_EXAMPLE
  F[@@hasInstance](v)
#+END_EXAMPLE

A [[https://tc39.es/ecma262/#constructor][constructor]] function can
control which objects are recognized as its instances by =instanceof= by
exposing a different =@@hasInstance= method on the function.

This property is non-writable and non-configurable to prevent tampering
that could be used to globally expose the target function of a
[[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
function]].

* 19.2.4Function Instances
  :PROPERTIES:
  :CUSTOM_ID: function-instances
  :END:

Every Function instance is an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] and has
the internal slots listed in [[https://tc39.es/ecma262/#table-27][Table
29]]. Function objects created using the =Function.prototype.bind=
method
([[https://tc39.es/ecma262/#sec-function.prototype.bind][19.2.3.2]])
have the internal slots listed in
[[https://tc39.es/ecma262/#table-28][Table 30]].

Function instances have the following properties:

* 19.2.4.1length
  :PROPERTIES:
  :CUSTOM_ID: length
  :END:

The value of the "length" property is an
[[https://tc39.es/ecma262/#integer][integer]] that indicates the typical
number of arguments expected by the function. However, the language
permits the function to be invoked with some other number of arguments.
The behaviour of a function when invoked on a number of arguments other
than the number specified by its "length" property depends on the
function. This property has the attributes { [[Writable]]: false,
[[Enumerable]]: false, [[Configurable]]: true }.

* 19.2.4.2name
  :PROPERTIES:
  :CUSTOM_ID: name
  :END:

The value of the "name" property is a String that is descriptive of the
function. The name has no semantic significance but is typically a
variable or [[https://tc39.es/ecma262/#property-name][property name]]
that is used to refer to the function at its point of definition in
ECMAScript code. This property has the attributes { [[Writable]]: false,
[[Enumerable]]: false, [[Configurable]]: true }.

Anonymous functions objects that do not have a contextual name
associated with them by this specification do not have a "name" own
property but inherit the "name" property of
[[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

* 19.2.4.3prototype
  :PROPERTIES:
  :CUSTOM_ID: prototype-1
  :END:

Function instances that can be used as a
[[https://tc39.es/ecma262/#constructor][constructor]] have a "prototype"
property. Whenever such a Function instance is created another ordinary
object is also created and is the initial value of the function's
"prototype" property. Unless otherwise specified, the value of the
"prototype" property is used to initialize the [[Prototype]] internal
slot of the object created when that function is invoked as a
[[https://tc39.es/ecma262/#constructor][constructor]].

This property has the attributes { [[Writable]]: true, [[Enumerable]]:
false, [[Configurable]]: false }.

Note

Function objects created using =Function.prototype.bind=, or by
evaluating a
[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
(that is not a
[[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]] or
[[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]])
or an [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] do
not have a "prototype" property.

* 19.2.5HostHasSourceTextAvailable ( =func= )
  :PROPERTIES:
  :CUSTOM_ID: hosthassourcetextavailable-func
  :END:

HostHasSourceTextAvailable is an implementation-defined abstract
operation that allows host environments to prevent the source text from
being provided for a given function.

An implementation of HostHasSourceTextAvailable must complete normally
in all cases. This operation must be deterministic with respect to its
parameters. Each time it is called with a specific =func= as its
argument, it must return the same completion record. The default
implementation of HostHasSourceTextAvailable is to unconditionally
return a normal completion with a value of true.

* 19.3Boolean Objects
  :PROPERTIES:
  :CUSTOM_ID: boolean-objects
  :END:

* 19.3.1The Boolean Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-boolean-constructor
  :END:

The Boolean [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Boolean%.
- is the initial value of the "Boolean" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Boolean object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- performs a type conversion when called as a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Boolean= behaviour must include a
  =super= call to the =Boolean=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with a [[BooleanData]] internal slot.

* 19.3.1.1Boolean ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: boolean-value-1
  :END:

When =Boolean= is called with argument =value=, the following steps are
taken:

1. Let =b= be
   ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=value=).
2. If NewTarget is undefined, return =b=.
3. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
   "%Boolean.prototype%", « [[BooleanData]] »).
4. Set =O=.[[BooleanData]] to =b=.
5. Return =O=.

* 19.3.2Properties of the Boolean Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-boolean-constructor
  :END:

The Boolean [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 19.3.2.1Boolean.prototype
  :PROPERTIES:
  :CUSTOM_ID: boolean.prototype
  :END:

The initial value of =Boolean.prototype= is %Boolean.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.3.3Properties of the Boolean Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-boolean-prototype-object
  :END:

The Boolean prototype object:

- is the intrinsic object %BooleanPrototype%.
- is an ordinary object.
- is itself a Boolean object; it has a [[BooleanData]] internal slot
  with the value false.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

The abstract operation thisBooleanValue(=value=) performs the following
steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Boolean, return =value=.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Object and =value= has a [[BooleanData]] internal slot, then

   1. Let =b= be =value=.[[BooleanData]].
   2. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=b=)
      is Boolean.
   3. Return =b=.

3. Throw a TypeError exception.

* 19.3.3.1Boolean.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: boolean.prototype.constructor
  :END:

The initial value of =Boolean.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-boolean-constructor][%Boolean%]].

* 19.3.3.2Boolean.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: boolean.prototype.tostring
  :END:

The following steps are taken:

1. Let =b= be
   ? [[https://tc39.github.io/ecma262/#sec-thisbooleanvalue][thisBooleanValue]](this
   value).
2. If =b= is true, return "true"; else return "false".

* 19.3.3.3Boolean.prototype.valueOf ( )
  :PROPERTIES:
  :CUSTOM_ID: boolean.prototype.valueof
  :END:

The following steps are taken:

1. Return
   ? [[https://tc39.github.io/ecma262/#sec-thisbooleanvalue][thisBooleanValue]](this
   value).

* 19.3.4Properties of Boolean Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-boolean-instances
  :END:

Boolean instances are ordinary objects that inherit properties from the
Boolean prototype object. Boolean instances have a [[BooleanData]]
internal slot. The [[BooleanData]] internal slot is the Boolean value
represented by this Boolean object.

* 19.4Symbol Objects
  :PROPERTIES:
  :CUSTOM_ID: symbol-objects
  :END:

* 19.4.1The Symbol Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-symbol-constructor
  :END:

The Symbol [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Symbol%.
- is the initial value of the "Symbol" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- returns a new Symbol value when called as a function.
- is not intended to be used with the =new= operator.
- is not intended to be subclassed.
- may be used as the value of an =extends= clause of a class definition
  but a =super= call to it will cause an exception.

* 19.4.1.1Symbol ( [ =description= ] )
  :PROPERTIES:
  :CUSTOM_ID: symbol-description
  :END:

When =Symbol= is called with optional argument =description=, the
following steps are taken:

1. If NewTarget is not undefined, throw a TypeError exception.
2. If =description= is undefined, let =descString= be undefined.
3. Else, let =descString= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=description=).
4. Return a new unique Symbol value whose [[Description]] value is
   =descString=.

* 19.4.2Properties of the Symbol Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-symbol-constructor
  :END:

The Symbol [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 19.4.2.1Symbol.asyncIterator
  :PROPERTIES:
  :CUSTOM_ID: symbol.asynciterator
  :END:

The initial value of =Symbol.asyncIterator= is the well known symbol
@@asyncIterator ([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.2Symbol.for ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: symbol.for-key
  :END:

When =Symbol.for= is called with argument =key= it performs the
following steps:

1. Let =stringKey= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=key=).
2. For each element =e= of the GlobalSymbolRegistry
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]],
   do

   1. If
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=e=.[[Key]],
      =stringKey=) is true, return =e=.[[Symbol]].

3. [[https://tc39.es/ecma262/#assert][Assert]]: GlobalSymbolRegistry
   does not currently contain an entry for =stringKey=.
4. Let =newSymbol= be a new unique Symbol value whose [[Description]]
   value is =stringKey=.
5. Append the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]]: =stringKey=, [[Symbol]]: =newSymbol= } to the
   GlobalSymbolRegistry
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
6. Return =newSymbol=.

The GlobalSymbolRegistry is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
that is globally available. It is shared by all realms. Prior to the
evaluation of any ECMAScript code it is initialized as a new empty
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
Elements of the GlobalSymbolRegistry are Records with the structure
defined in [[https://tc39.es/ecma262/#table-44][Table 50]].

Table 50: GlobalSymbolRegistry
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
Fields

| Field Name   | Value      | Usage                                                                                |
|--------------+------------+--------------------------------------------------------------------------------------|
| [[Key]]      | A String   | A string key used to globally identify a Symbol.                                     |
| [[Symbol]]   | A Symbol   | A symbol that can be retrieved from any [[https://tc39.es/ecma262/#realm][realm]].   |

* 19.4.2.3Symbol.hasInstance
  :PROPERTIES:
  :CUSTOM_ID: symbol.hasinstance
  :END:

The initial value of =Symbol.hasInstance= is the well-known symbol
@@hasInstance ([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.4Symbol.isConcatSpreadable
  :PROPERTIES:
  :CUSTOM_ID: symbol.isconcatspreadable
  :END:

The initial value of =Symbol.isConcatSpreadable= is the well-known
symbol @@isConcatSpreadable ([[https://tc39.es/ecma262/#table-1][Table
1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.5Symbol.iterator
  :PROPERTIES:
  :CUSTOM_ID: symbol.iterator
  :END:

The initial value of =Symbol.iterator= is the well-known symbol
@@iterator ([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.6Symbol.keyFor ( =sym= )
  :PROPERTIES:
  :CUSTOM_ID: symbol.keyfor-sym
  :END:

When =Symbol.keyFor= is called with argument =sym= it performs the
following steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=sym=)
   is not Symbol, throw a TypeError exception.
2. For each element =e= of the GlobalSymbolRegistry
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   (see [[https://tc39.es/ecma262/#sec-symbol.for][19.4.2.2]]), do

   1. If
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=e=.[[Symbol]],
      =sym=) is true, return =e=.[[Key]].

3. [[https://tc39.es/ecma262/#assert][Assert]]: GlobalSymbolRegistry
   does not currently contain an entry for =sym=.
4. Return undefined.

* 19.4.2.7Symbol.match
  :PROPERTIES:
  :CUSTOM_ID: symbol.match
  :END:

The initial value of =Symbol.match= is the well-known symbol @@match
([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.8Symbol.matchAll
  :PROPERTIES:
  :CUSTOM_ID: symbol.matchall
  :END:

The initial value of =Symbol.matchAll= is the well-known symbol
@@matchAll ([[https://tc39.es/ecma262/#table-2][Table 3]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.9Symbol.prototype
  :PROPERTIES:
  :CUSTOM_ID: symbol.prototype
  :END:

The initial value of =Symbol.prototype= is %Symbol.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.10Symbol.replace
  :PROPERTIES:
  :CUSTOM_ID: symbol.replace
  :END:

The initial value of =Symbol.replace= is the well-known symbol @@replace
([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.11Symbol.search
  :PROPERTIES:
  :CUSTOM_ID: symbol.search
  :END:

The initial value of =Symbol.search= is the well-known symbol @@search
([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.12Symbol.species
  :PROPERTIES:
  :CUSTOM_ID: symbol.species
  :END:

The initial value of =Symbol.species= is the well-known symbol @@species
([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.13Symbol.split
  :PROPERTIES:
  :CUSTOM_ID: symbol.split
  :END:

The initial value of =Symbol.split= is the well-known symbol @@split
([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.14Symbol.toPrimitive
  :PROPERTIES:
  :CUSTOM_ID: symbol.toprimitive
  :END:

The initial value of =Symbol.toPrimitive= is the well-known symbol
@@toPrimitive ([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.15Symbol.toStringTag
  :PROPERTIES:
  :CUSTOM_ID: symbol.tostringtag
  :END:

The initial value of =Symbol.toStringTag= is the well-known symbol
@@toStringTag ([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.2.16Symbol.unscopables
  :PROPERTIES:
  :CUSTOM_ID: symbol.unscopables
  :END:

The initial value of =Symbol.unscopables= is the well-known symbol
@@unscopables ([[https://tc39.es/ecma262/#table-1][Table 1]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.4.3Properties of the Symbol Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-symbol-prototype-object
  :END:

The Symbol prototype object:

- is the intrinsic object %SymbolPrototype%.
- is an ordinary object.
- is not a Symbol instance and does not have a [[SymbolData]] internal
  slot.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

The abstract operation thisSymbolValue(=value=) performs the following
steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Symbol, return =value=.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Object and =value= has a [[SymbolData]] internal slot, then

   1. Let =s= be =value=.[[SymbolData]].
   2. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=s=)
      is Symbol.
   3. Return =s=.

3. Throw a TypeError exception.

* 19.4.3.1Symbol.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: symbol.prototype.constructor
  :END:

The initial value of =Symbol.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-symbol-constructor][%Symbol%]].

* 19.4.3.2get Symbol.prototype.description
  :PROPERTIES:
  :CUSTOM_ID: get-symbol.prototype.description
  :END:

=Symbol.prototype.description= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =s= be the this value.
2. Let =sym= be
   ? [[https://tc39.es/ecma262/#sec-thissymbolvalue][thisSymbolValue]](=s=).
3. Return =sym=.[[Description]].

* 19.4.3.3Symbol.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: symbol.prototype.tostring
  :END:

The following steps are taken:

1. Let =sym= be
   ? [[https://tc39.es/ecma262/#sec-thissymbolvalue][thisSymbolValue]](this
   value).
2. Return
   [[https://tc39.es/ecma262/#sec-symboldescriptivestring][SymbolDescriptiveString]](=sym=).

* 19.4.3.3.1Runtime Semantics: SymbolDescriptiveString ( =sym= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-symboldescriptivestring-sym
  :END:

When the abstract operation SymbolDescriptiveString is called with
argument =sym=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=sym=)
   is Symbol.
2. Let =desc= be =sym='s [[Description]] value.
3. If =desc= is undefined, set =desc= to the empty string.
4. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=desc=)
   is String.
5. Return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of "Symbol(", =desc=, and ")".

* 19.4.3.4Symbol.prototype.valueOf ( )
  :PROPERTIES:
  :CUSTOM_ID: symbol.prototype.valueof
  :END:

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-thissymbolvalue][thisSymbolValue]](this
   value).

* 19.4.3.5Symbol.prototype [ @@toPrimitive ] ( =hint= )
  :PROPERTIES:
  :CUSTOM_ID: symbol.prototype-toprimitive-hint
  :END:

This function is called by ECMAScript language operators to convert a
Symbol object to a primitive value. The allowed values for =hint= are
"default", "number", and "string".

When the =@@toPrimitive= method is called with argument =hint=, the
following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-thissymbolvalue][thisSymbolValue]](this
   value).

The value of the "name" property of this function is
"[Symbol.toPrimitive]".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 19.4.3.6Symbol.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: symbol.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Symbol".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 19.4.4Properties of Symbol Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-symbol-instances
  :END:

Symbol instances are ordinary objects that inherit properties from the
Symbol prototype object. Symbol instances have a [[SymbolData]] internal
slot. The [[SymbolData]] internal slot is the Symbol value represented
by this Symbol object.

* 19.5Error Objects
  :PROPERTIES:
  :CUSTOM_ID: error-objects
  :END:

Instances of Error objects are thrown as exceptions when runtime errors
occur. The Error objects may also serve as base objects for user-defined
exception classes.

* 19.5.1The Error Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-error-constructor
  :END:

The Error [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Error%.
- is the initial value of the "Error" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Error object when called as a function
  rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. Thus the
  function call =Error(…)= is equivalent to the object creation
  expression =new Error(…)= with the same arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Error= behaviour must include a
  =super= call to the =Error=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with an [[ErrorData]] internal slot.

* 19.5.1.1Error ( =message= )
  :PROPERTIES:
  :CUSTOM_ID: error-message
  :END:

When the =Error= function is called with argument =message=, the
following steps are taken:

1. If NewTarget is undefined, let =newTarget= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]]; else let =newTarget= be NewTarget.
2. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=newTarget=,
   "%Error.prototype%", « [[ErrorData]] »).
3. If =message= is not undefined, then

   1. Let =msg= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=message=).
   2. Let =msgDesc= be the PropertyDescriptor { [[Value]]: =msg=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true
      }.
   3. Perform
      ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
      "message", =msgDesc=).

4. Return =O=.

* 19.5.2Properties of the Error Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-error-constructor
  :END:

The Error [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 19.5.2.1Error.prototype
  :PROPERTIES:
  :CUSTOM_ID: error.prototype
  :END:

The initial value of =Error.prototype= is %Error.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.5.3Properties of the Error Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-error-prototype-object
  :END:

The Error prototype object:

- is the intrinsic object %ErrorPrototype%.
- is an ordinary object.
- is not an Error instance and does not have an [[ErrorData]] internal
  slot.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

* 19.5.3.1Error.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: error.prototype.constructor
  :END:

The initial value of =Error.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-error-constructor][%Error%]].

* 19.5.3.2Error.prototype.message
  :PROPERTIES:
  :CUSTOM_ID: error.prototype.message
  :END:

The initial value of =Error.prototype.message= is the empty String.

* 19.5.3.3Error.prototype.name
  :PROPERTIES:
  :CUSTOM_ID: error.prototype.name
  :END:

The initial value of =Error.prototype.name= is "Error".

* 19.5.3.4Error.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: error.prototype.tostring
  :END:

The following steps are taken:

1. Let =O= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, throw a TypeError exception.
3. Let =name= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
   "name").
4. If =name= is undefined, set =name= to "Error"; otherwise set =name=
   to ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=name=).
5. Let =msg= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
   "message").
6. If =msg= is undefined, set =msg= to the empty String; otherwise set
   =msg= to
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=msg=).
7. If =name= is the empty String, return =msg=.
8. If =msg= is the empty String, return =name=.
9. Return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =name=, the code unit 0x003A (COLON), the code unit 0x0020
   (SPACE), and =msg=.

* 19.5.4Properties of Error Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-error-instances
  :END:

Error instances are ordinary objects that inherit properties from the
Error prototype object and have an [[ErrorData]] internal slot whose
value is undefined. The only specified uses of [[ErrorData]] is to
identify Error and =NativeError= instances as Error objects within
=Object.prototype.toString=.

* 19.5.5Native Error Types Used in This Standard
  :PROPERTIES:
  :CUSTOM_ID: native-error-types-used-in-this-standard
  :END:

A new instance of one of the =NativeError= objects below is thrown when
a runtime error is detected. All of these objects share the same
structure, as described in
[[https://tc39.es/ecma262/#sec-nativeerror-object-structure][19.5.6]].

* 19.5.5.1EvalError
  :PROPERTIES:
  :CUSTOM_ID: evalerror
  :END:

This exception is not currently used within this specification. This
object remains for compatibility with previous editions of this
specification.

* 19.5.5.2RangeError
  :PROPERTIES:
  :CUSTOM_ID: rangeerror
  :END:

Indicates a value that is not in the set or range of allowable values.

* 19.5.5.3ReferenceError
  :PROPERTIES:
  :CUSTOM_ID: referenceerror
  :END:

Indicate that an invalid reference value has been detected.

* 19.5.5.4SyntaxError
  :PROPERTIES:
  :CUSTOM_ID: syntaxerror
  :END:

Indicates that a parsing error has occurred.

* 19.5.5.5TypeError
  :PROPERTIES:
  :CUSTOM_ID: typeerror
  :END:

TypeError is used to indicate an unsuccessful operation when none of the
other =NativeError= objects are an appropriate indication of the failure
cause.

* 19.5.5.6URIError
  :PROPERTIES:
  :CUSTOM_ID: urierror
  :END:

Indicates that one of the global URI handling functions was used in a
way that is incompatible with its definition.

* 19.5.6=NativeError= Object Structure
  :PROPERTIES:
  :CUSTOM_ID: nativeerror-object-structure
  :END:

When an ECMAScript implementation detects a runtime error, it throws a
new instance of one of the =NativeError= objects defined in
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard][19.5.5]].
Each of these objects has the structure described below, differing only
in the name used as the
[[https://tc39.es/ecma262/#constructor][constructor]] name instead of
=NativeError=, in the "name" property of the prototype object, and in
the implementation-defined "message" property of the prototype object.

For each error object, references to =NativeError= in the definition
should be replaced with the appropriate error object name from
[[https://tc39.es/ecma262/#sec-native-error-types-used-in-this-standard][19.5.5]].

* 19.5.6.1The =NativeError= Constructors
  :PROPERTIES:
  :CUSTOM_ID: the-nativeerror-constructors
  :END:

Each =NativeError=
[[https://tc39.es/ecma262/#constructor][constructor]]:

- creates and initializes a new =NativeError= object when called as a
  function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. A call of the
  object as a function is equivalent to calling it as a
  [[https://tc39.es/ecma262/#constructor][constructor]] with the same
  arguments. Thus the function call =NativeError(…)= is equivalent to
  the object creation expression =new NativeError(…)= with the same
  arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =NativeError= behaviour must include a
  =super= call to the =NativeError=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with an [[ErrorData]] internal slot.

* 19.5.6.1.1NativeError ( =message= )
  :PROPERTIES:
  :CUSTOM_ID: nativeerror-message
  :END:

When a =NativeError= function is called with argument =message=, the
following steps are taken:

1. If NewTarget is undefined, let =newTarget= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]]; else let =newTarget= be NewTarget.
2. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=newTarget=,
   ="%NativeError.prototype%"=, « [[ErrorData]] »).
3. If =message= is not undefined, then

   1. Let =msg= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=message=).
   2. Let =msgDesc= be the PropertyDescriptor { [[Value]]: =msg=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: true
      }.
   3. Perform
      ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
      "message", =msgDesc=).

4. Return =O=.

The actual value of the string passed in step 2 is either
"%EvalError.prototype%", "%RangeError.prototype%",
"%ReferenceError.prototype%", "%SyntaxError.prototype%",
"%TypeError.prototype%", or "%URIError.prototype%" corresponding to
which =NativeError=
[[https://tc39.es/ecma262/#constructor][constructor]] is being defined.

* 19.5.6.2Properties of the =NativeError= Constructors
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-nativeerror-constructors
  :END:

Each =NativeError=
[[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-error-constructor][%Error%]].
- has a "name" property whose value is the String value "NativeError".
- has the following properties:

* 19.5.6.2.1NativeError.prototype
  :PROPERTIES:
  :CUSTOM_ID: nativeerror.prototype
  :END:

The initial value of =NativeError.prototype= is a =NativeError=
prototype object
([[https://tc39.es/ecma262/#sec-properties-of-the-nativeerror-prototype-objects][19.5.6.3]]).
Each =NativeError= [[https://tc39.es/ecma262/#constructor][constructor]]
has a distinct prototype object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 19.5.6.3Properties of the =NativeError= Prototype Objects
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-nativeerror-prototype-objects
  :END:

Each =NativeError= prototype object:

- is an ordinary object.
- is not an Error instance and does not have an [[ErrorData]] internal
  slot.
- has a [[Prototype]] internal slot whose value is %Error.prototype%.

* 19.5.6.3.1=NativeError=.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: nativeerror.prototype.constructor
  :END:

The initial value of the "constructor" property of the prototype for a
given =NativeError=
[[https://tc39.es/ecma262/#constructor][constructor]] is the
corresponding intrinsic object %=NativeError=%
([[https://tc39.es/ecma262/#sec-nativeerror-constructors][19.5.6.1]]).

* 19.5.6.3.2=NativeError=.prototype.message
  :PROPERTIES:
  :CUSTOM_ID: nativeerror.prototype.message
  :END:

The initial value of the "message" property of the prototype for a given
=NativeError= [[https://tc39.es/ecma262/#constructor][constructor]] is
the empty String.

* 19.5.6.3.3=NativeError=.prototype.name
  :PROPERTIES:
  :CUSTOM_ID: nativeerror.prototype.name
  :END:

The initial value of the "name" property of the prototype for a given
=NativeError= [[https://tc39.es/ecma262/#constructor][constructor]] is
the String value consisting of the name of the
[[https://tc39.es/ecma262/#constructor][constructor]] (the name used
instead of =NativeError=).

* 19.5.6.4Properties of =NativeError= Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-nativeerror-instances
  :END:

=NativeError= instances are ordinary objects that inherit properties
from their =NativeError= prototype object and have an [[ErrorData]]
internal slot whose value is undefined. The only specified use of
[[ErrorData]] is by =Object.prototype.toString=
([[https://tc39.es/ecma262/#sec-object.prototype.tostring][19.1.3.6]])
to identify Error or =NativeError= instances.

* 20Numbers and Dates
  :PROPERTIES:
  :CUSTOM_ID: numbers-and-dates
  :END:

* 20.1Number Objects
  :PROPERTIES:
  :CUSTOM_ID: number-objects
  :END:

* 20.1.1The Number Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-number-constructor
  :END:

The Number [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Number%.
- is the initial value of the "Number" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Number object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- performs a type conversion when called as a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Number= behaviour must include a
  =super= call to the =Number=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with a [[NumberData]] internal slot.

* 20.1.1.1Number ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: number-value-1
  :END:

When =Number= is called with argument =value=, the following steps are
taken:

1. If =value= is present, then

   1. Let =prim= be
      ? [[https://tc39.es/ecma262/#sec-tonumeric][ToNumeric]](=value=).
   2. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=prim=)
      is BigInt, let =n= be the
      [[https://tc39.es/ecma262/#number-value][Number value]] for
      =prim=.
   3. Otherwise, let =n= be =prim=.

2. Else,

   1. Let =n= be +0.

3. If NewTarget is undefined, return =n=.
4. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
   "%Number.prototype%", « [[NumberData]] »).
5. Set =O=.[[NumberData]] to =n=.
6. Return =O=.

* 20.1.2Properties of the Number Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-number-constructor
  :END:

The Number [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 20.1.2.1Number.EPSILON
  :PROPERTIES:
  :CUSTOM_ID: number.epsilon
  :END:

The value of =Number.EPSILON= is the difference between 1 and the
smallest value greater than 1 that is representable as a
[[https://tc39.es/ecma262/#number-value][Number value]], which is
approximately 2.2204460492503130808472633361816 x 10 ^{- 16}.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.2Number.isFinite ( =number= )
  :PROPERTIES:
  :CUSTOM_ID: number.isfinite-number
  :END:

When =Number.isFinite= is called with one argument =number=, the
following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=number=)
   is not Number, return false.
2. If =number= is NaN, +∞, or -∞, return false.
3. Otherwise, return true.

* 20.1.2.3Number.isInteger ( =number= )
  :PROPERTIES:
  :CUSTOM_ID: number.isinteger-number
  :END:

When =Number.isInteger= is called with one argument =number=, the
following steps are taken:

1. Return
   ! [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=number=).

* 20.1.2.4Number.isNaN ( =number= )
  :PROPERTIES:
  :CUSTOM_ID: number.isnan-number
  :END:

When =Number.isNaN= is called with one argument =number=, the following
steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=number=)
   is not Number, return false.
2. If =number= is NaN, return true.
3. Otherwise, return false.

Note

This function differs from the global isNaN function
([[https://tc39.es/ecma262/#sec-isnan-number][18.2.3]]) in that it does
not convert its argument to a Number before determining whether it is
NaN.

* 20.1.2.5Number.isSafeInteger ( =number= )
  :PROPERTIES:
  :CUSTOM_ID: number.issafeinteger-number
  :END:

When =Number.isSafeInteger= is called with one argument =number=, the
following steps are taken:

1. If ! [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=number=)
   is true, then

   1. If [[https://tc39.es/ecma262/#eqn-abs][abs]](=number=) ≤ 2^{53} -
      1, return true.

2. Return false.

* 20.1.2.6Number.MAX_SAFE_INTEGER
  :PROPERTIES:
  :CUSTOM_ID: number.max_safe_integer
  :END:

Note

The value of =Number.MAX_SAFE_INTEGER= is the largest
[[https://tc39.es/ecma262/#integer][integer]] n such that n and n + 1
are both exactly representable as a
[[https://tc39.es/ecma262/#number-value][Number value]].

The value of =Number.MAX_SAFE_INTEGER= is 9007199254740991 (2^{53} - 1).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.7Number.MAX_VALUE
  :PROPERTIES:
  :CUSTOM_ID: number.max_value
  :END:

The value of =Number.MAX_VALUE= is the largest positive finite value of
the Number type, which is approximately 1.7976931348623157 × 10^{308}.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.8Number.MIN_SAFE_INTEGER
  :PROPERTIES:
  :CUSTOM_ID: number.min_safe_integer
  :END:

Note

The value of =Number.MIN_SAFE_INTEGER= is the smallest
[[https://tc39.es/ecma262/#integer][integer]] n such that n and n - 1
are both exactly representable as a
[[https://tc39.es/ecma262/#number-value][Number value]].

The value of =Number.MIN_SAFE_INTEGER= is -9007199254740991 (-(2^{53} -
1)).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.9Number.MIN_VALUE
  :PROPERTIES:
  :CUSTOM_ID: number.min_value
  :END:

The value of =Number.MIN_VALUE= is the smallest positive value of the
Number type, which is approximately 5 × 10^{-324}.

In the IEEE 754-2008 double precision binary representation, the
smallest possible value is a denormalized number. If an implementation
does not support denormalized values, the value of =Number.MIN_VALUE=
must be the smallest non-zero positive value that can actually be
represented by the implementation.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.10Number.NaN
  :PROPERTIES:
  :CUSTOM_ID: number.nan
  :END:

The value of =Number.NaN= is NaN.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.11Number.NEGATIVE_INFINITY
  :PROPERTIES:
  :CUSTOM_ID: number.negative_infinity
  :END:

The value of =Number.NEGATIVE_INFINITY= is -∞.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.12Number.parseFloat ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: number.parsefloat-string
  :END:

The value of the =Number.parseFloat=
[[https://tc39.es/ecma262/#sec-object-type][data property]] is the same
built-in [[https://tc39.es/ecma262/#function-object][function object]]
that is the value of the "parseFloat" property of the
[[https://tc39.es/ecma262/#sec-global-object][global object]] defined in
[[https://tc39.es/ecma262/#sec-parsefloat-string][18.2.4]].

* 20.1.2.13Number.parseInt ( =string=, =radix= )
  :PROPERTIES:
  :CUSTOM_ID: number.parseint-string-radix
  :END:

The value of the =Number.parseInt=
[[https://tc39.es/ecma262/#sec-object-type][data property]] is the same
built-in [[https://tc39.es/ecma262/#function-object][function object]]
that is the value of the "parseInt" property of the
[[https://tc39.es/ecma262/#sec-global-object][global object]] defined in
[[https://tc39.es/ecma262/#sec-parseint-string-radix][18.2.5]].

* 20.1.2.14Number.POSITIVE_INFINITY
  :PROPERTIES:
  :CUSTOM_ID: number.positive_infinity
  :END:

The value of =Number.POSITIVE_INFINITY= is +∞.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.2.15Number.prototype
  :PROPERTIES:
  :CUSTOM_ID: number.prototype
  :END:

The initial value of =Number.prototype= is %Number.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.1.3Properties of the Number Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-number-prototype-object
  :END:

The Number prototype object:

- is the intrinsic object %NumberPrototype%.
- is an ordinary object.
- is itself a Number object; it has a [[NumberData]] internal slot with
  the value +0.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

Unless explicitly stated otherwise, the methods of the Number prototype
object defined below are not generic and the this value passed to them
must be either a [[https://tc39.es/ecma262/#number-value][Number value]]
or an object that has a [[NumberData]] internal slot that has been
initialized to a [[https://tc39.es/ecma262/#number-value][Number
value]].

The abstract operation thisNumberValue(=value=) performs the following
steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Number, return =value=.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Object and =value= has a [[NumberData]] internal slot, then

   1. Let =n= be =value=.[[NumberData]].
   2. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=n=)
      is Number.
   3. Return =n=.

3. Throw a TypeError exception.

The phrase “this [[https://tc39.es/ecma262/#number-value][Number
value]]” within the specification of a method refers to the result
returned by calling the abstract operation
[[https://tc39.es/ecma262/#sec-thisnumbervalue][thisNumberValue]] with
the this value of the method invocation passed as the argument.

* 20.1.3.1Number.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: number.prototype.constructor
  :END:

The initial value of =Number.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-number-constructor][%Number%]].

* 20.1.3.2Number.prototype.toExponential ( =fractionDigits= )
  :PROPERTIES:
  :CUSTOM_ID: number.prototype.toexponential-fractiondigits
  :END:

Return a String containing this
[[https://tc39.es/ecma262/#number-value][Number value]] represented in
decimal exponential notation with one digit before the significand's
decimal point and =fractionDigits= digits after the significand's
decimal point. If =fractionDigits= is undefined, include as many
significand digits as necessary to uniquely specify the Number (just
like in [[https://tc39.es/ecma262/#sec-tostring][ToString]] except that
in this case the Number is always output in exponential notation).
Specifically, perform the following steps:

1.  Let =x= be
    ? [[https://tc39.es/ecma262/#sec-thisnumbervalue][thisNumberValue]](this
    value).
2.  Let =f= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=fractionDigits=).
3.  [[https://tc39.es/ecma262/#assert][Assert]]: If =fractionDigits= is
    undefined, then =f= is 0.
4.  If =x= is NaN, return the String "NaN".
5.  Let =s= be the empty String.
6.  If =x= < 0, then

    1. Set =s= to "-".
    2. Set =x= to -=x=.

7.  If =x= = +∞, then

    1. Return the
       [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
       of =s= and "Infinity".

8.  If =f= < 0 or =f= > 100, throw a RangeError exception.
9.  If =x= = 0, then

    1. Let =m= be the String value consisting of =f= + 1 occurrences of
       the code unit 0x0030 (DIGIT ZERO).
    2. Let =e= be 0.

10. Else,

    1. If =fractionDigits= is not undefined, then

       1. Let =e= and =n= be integers such that 10^{=f=} ≤ =n= < 10^{=f=
          + 1} and for which
          [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ×
          10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=e=) -
          [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=)} -
          [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=x=) is as close to
          zero as possible. If there are two such sets of =e= and =n=,
          pick the =e= and =n= for which
          [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ×
          10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=e=) -
          [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=f=)} is larger.

    2. Else,

       1. Let =e=, =n=, and =f= be integers such that =f= ≥ 0, 10^{=f=}
          ≤ =n= < 10^{=f= + 1}, the
          [[https://tc39.es/ecma262/#number-value][Number value]] for
          [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ×
          10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=e=) -
          [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=f=)} is =x=, and
          =f= is as small as possible. Note that the decimal
          representation of =n= has =f= +
          1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]} digits, =n= is
          not divisible by 10, and the least significant digit of =n= is
          not necessarily uniquely determined by these criteria.

    3. Let =m= be the String value consisting of the digits of the
       decimal representation of =n= (in order, with no leading zeroes).

11. If =f= ≠ 0, then

    1. Let =a= be the first code unit of =m=, and let =b= be the
       remaining =f= code units of =m=.
    2. Set =m= to the
       [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
       of =a=, ".", and =b=.

12. If =e= = 0, then

    1. Let =c= be "+".
    2. Let =d= be "0".

13. Else,

    1. If =e= > 0, let =c= be "+".
    2. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =e= < 0.
       2. Let =c= be "-".
       3. Set =e= to -=e=.

    3. Let =d= be the String value consisting of the digits of the
       decimal representation of =e= (in order, with no leading zeroes).

14. Set =m= to the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =m=, "e", =c=, and =d=.
15. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =s= and =m=.

Note

For implementations that provide more accurate conversions than required
by the rules above, it is recommended that the following alternative
version of step 10.b.i be used as a guideline:

1. Let =e=, =n=, and =f= be integers such that =f= ≥ 0, 10^{=f=} ≤ =n= <
   10^{=f= + 1}, the [[https://tc39.es/ecma262/#number-value][Number
   value]] for [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ×
   10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=e=) -
   [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=f=)} is =x=, and =f= is as
   small as possible. If there are multiple possibilities for =n=,
   choose the value of =n= for which
   [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ×
   10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=e=) -
   [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=f=)} is closest in value
   to =x=. If there are two such possible values of =n=, choose the one
   that is even.

* 20.1.3.3Number.prototype.toFixed ( =fractionDigits= )
  :PROPERTIES:
  :CUSTOM_ID: number.prototype.tofixed-fractiondigits
  :END:

Note 1

=toFixed= returns a String containing this
[[https://tc39.es/ecma262/#number-value][Number value]] represented in
decimal fixed-point notation with =fractionDigits= digits after the
decimal point. If =fractionDigits= is undefined, 0 is assumed.

The following steps are performed:

1.  Let =x= be
    ? [[https://tc39.es/ecma262/#sec-thisnumbervalue][thisNumberValue]](this
    value).
2.  Let =f= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=fractionDigits=).
3.  [[https://tc39.es/ecma262/#assert][Assert]]: If =fractionDigits= is
    undefined, then =f= is 0.
4.  If =f= < 0 or =f= > 100, throw a RangeError exception.
5.  If =x= is NaN, return the String "NaN".
6.  Let =s= be the empty String.
7.  If =x= < 0, then

    1. Set =s= to "-".
    2. Set =x= to -=x=.

8.  If =x= ≥ 10^{21}, then

    1. Let =m= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=x=).

9.  Else,

    1. Let =n= be an [[https://tc39.es/ecma262/#integer][integer]] for
       which [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ÷
       10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=f=)} -
       [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=x=) is as close to
       zero as possible. If there are two such =n=, pick the larger =n=.
    2. If =n= = 0, let =m= be the String "0". Otherwise, let =m= be the
       String value consisting of the digits of the decimal
       representation of =n= (in order, with no leading zeroes).
    3. If =f= ≠ 0, then

       1. Let =k= be the length of =m=.
       2. If =k= ≤ =f=, then

          1. Let =z= be the String value consisting of =f= + 1 - =k=
             occurrences of the code unit 0x0030 (DIGIT ZERO).
          2. Set =m= to the
             [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
             of =z= and =m=.
          3. Set =k= to =f= + 1.

       3. Let =a= be the first =k= - =f= code units of =m=, and let =b=
          be the remaining =f= code units of =m=.
       4. Set =m= to the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of =a=, ".", and =b=.

10. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =s= and =m=.

Note 2

The output of =toFixed= may be more precise than =toString= for some
values because toString only prints enough significant digits to
distinguish the number from adjacent number values. For example,

=(1000000000000000128).toString()= returns "1000000000000000100",
while\\
=(1000000000000000128).toFixed(0)= returns "1000000000000000128".

* 20.1.3.4Number.prototype.toLocaleString ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: number.prototype.tolocalestring-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
=Number.prototype.toLocaleString= method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the =toLocaleString= method
is used.

Produces a String value that represents this
[[https://tc39.es/ecma262/#number-value][Number value]] formatted
according to the conventions of the host environment's current locale.
This function is implementation-dependent, and it is permissible, but
not encouraged, for it to return the same thing as =toString=.

The meanings of the optional parameters to this method are defined in
the ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

* 20.1.3.5Number.prototype.toPrecision ( =precision= )
  :PROPERTIES:
  :CUSTOM_ID: number.prototype.toprecision-precision
  :END:

Return a String containing this
[[https://tc39.es/ecma262/#number-value][Number value]] represented
either in decimal exponential notation with one digit before the
significand's decimal point and =precision= - 1 digits after the
significand's decimal point or in decimal fixed notation with
=precision= significant digits. If =precision= is undefined, call
[[https://tc39.es/ecma262/#sec-tostring][ToString]] instead.
Specifically, perform the following steps:

1.  Let =x= be
    ? [[https://tc39.es/ecma262/#sec-thisnumbervalue][thisNumberValue]](this
    value).
2.  If =precision= is undefined, return
    ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=x=).
3.  Let =p= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=precision=).
4.  If =x= is NaN, return the String "NaN".
5.  Let =s= be the empty String.
6.  If =x= < 0, then

    1. Set =s= to the code unit 0x002D (HYPHEN-MINUS).
    2. Set =x= to -=x=.

7.  If =x= = +∞, then

    1. Return the
       [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
       of =s= and "Infinity".

8.  If =p= < 1 or =p= > 100, throw a RangeError exception.
9.  If =x= = 0, then

    1. Let =m= be the String value consisting of =p= occurrences of the
       code unit 0x0030 (DIGIT ZERO).
    2. Let =e= be 0.

10. Else,

    1. Let =e= and =n= be integers such that 10^{=p= - 1} ≤ =n= <
       10^{=p=} and for which
       [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ×
       10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=e=) -
       [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=p=) +
       1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} -
       [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=x=) is as close to
       zero as possible. If there are two such sets of =e= and =n=, pick
       the =e= and =n= for which
       [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=n=) ×
       10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=e=) -
       [[https://tc39.es/ecma262/#%E2%84%9D][ℝ]](=p=) +
       1_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}} is larger.
    2. Let =m= be the String value consisting of the digits of the
       decimal representation of =n= (in order, with no leading zeroes).
    3. If =e= < -6 or =e= ≥ =p=, then

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =e= ≠ 0.
       2. If =p= ≠ 1, then

          1. Let =a= be the first code unit of =m=, and let =b= be the
             remaining =p= - 1 code units of =m=.
          2. Set =m= to the
             [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
             of =a=, ".", and =b=.

       3. If =e= > 0, then

          1. Let =c= be the code unit 0x002B (PLUS SIGN).

       4. Else,

          1. [[https://tc39.es/ecma262/#assert][Assert]]: =e= < 0.
          2. Let =c= be the code unit 0x002D (HYPHEN-MINUS).
          3. Set =e= to -=e=.

       5. Let =d= be the String value consisting of the digits of the
          decimal representation of =e= (in order, with no leading
          zeroes).
       6. Return the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of =s=, =m=, the code unit 0x0065 (LATIN SMALL LETTER E), =c=,
          and =d=.

11. If =e= = =p= - 1, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =s= and =m=.
12. If =e= ≥ 0, then

    1. Set =m= to the
       [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
       of the first =e= + 1 code units of =m=, the code unit 0x002E
       (FULL STOP), and the remaining =p= - (=e= + 1) code units of =m=.

13. Else,

    1. Set =m= to the
       [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
       of the code unit 0x0030 (DIGIT ZERO), the code unit 0x002E (FULL
       STOP), -(=e= + 1) occurrences of the code unit 0x0030 (DIGIT
       ZERO), and the String =m=.

14. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =s= and =m=.

* 20.1.3.6Number.prototype.toString ( [ =radix= ] )
  :PROPERTIES:
  :CUSTOM_ID: number.prototype.tostring-radix
  :END:

Note

The optional =radix= should be an
[[https://tc39.es/ecma262/#integer][integer]] value in the inclusive
range 2 to 36. If =radix= is undefined the Number 10 is used as the
value of =radix=.

The following steps are performed:

1. Let =x= be
   ? [[https://tc39.es/ecma262/#sec-thisnumbervalue][thisNumberValue]](this
   value).
2. If =radix= is undefined, let =radixNumber= be 10.
3. Else, let =radixNumber= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=radix=).
4. If =radixNumber= < 2 or =radixNumber= > 36, throw a RangeError
   exception.
5. If =radixNumber= = 10, return
   ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=x=).
6. Return the String representation of this
   [[https://tc39.es/ecma262/#number-value][Number value]] using the
   radix specified by =radixNumber=. Letters =a=-=z= are used for digits
   with values 10 through 35. The precise algorithm is
   implementation-dependent, however the algorithm should be a
   generalization of that specified in
   [[https://tc39.es/ecma262/#sec-numeric-types-number-tostring][6.1.6.1.20]].

The =toString= function is not generic; it throws a TypeError exception
if its this value is not a Number or a Number object. Therefore, it
cannot be transferred to other kinds of objects for use as a method.

The "length" property of the =toString= method is 1.

* 20.1.3.7Number.prototype.valueOf ( )
  :PROPERTIES:
  :CUSTOM_ID: number.prototype.valueof
  :END:

1. Return
   ? [[https://tc39.es/ecma262/#sec-thisnumbervalue][thisNumberValue]](this
   value).

* 20.1.4Properties of Number Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-number-instances
  :END:

Number instances are ordinary objects that inherit properties from the
Number prototype object. Number instances also have a [[NumberData]]
internal slot. The [[NumberData]] internal slot is the
[[https://tc39.es/ecma262/#number-value][Number value]] represented by
this Number object.

* 20.2BigInt Objects
  :PROPERTIES:
  :CUSTOM_ID: bigint-objects
  :END:

* 20.2.1The BigInt Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-bigint-constructor
  :END:

The BigInt [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %BigInt%.
- is the initial value of the "BigInt" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- performs a type conversion when called as a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be used with the =new= operator or to be
  subclassed. It may be used as the value of an =extends= clause of a
  class definition but a =super= call to the =BigInt=
  [[https://tc39.es/ecma262/#constructor][constructor]] will cause an
  exception.

* 20.2.1.1BigInt ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: bigint-value-1
  :END:

When =BigInt= is called with argument =value=, the following steps are
taken:

1. If NewTarget is not undefined, throw a TypeError exception.
2. Let =prim= be
   ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=value=,
   hint Number).
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=prim=)
   is Number, return
   ? [[https://tc39.es/ecma262/#sec-numbertobigint][NumberToBigInt]](=prim=).
4. Otherwise, return
   ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=value=).

* 20.2.1.1.1Runtime Semantics: NumberToBigInt ( =number= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-numbertobigint-number
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=number=)
   is Number.
2. If [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=number=) is
   false, throw a RangeError exception.
3. Return the BigInt value that represents the
   [[https://tc39.es/ecma262/#mathematical-value][mathematical value]]
   of =number=.

* 20.2.2Properties of the BigInt Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-bigint-constructor
  :END:

The value of the [[Prototype]] internal slot of the BigInt
[[https://tc39.es/ecma262/#constructor][constructor]] is the intrinsic
object
[[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

The BigInt [[https://tc39.es/ecma262/#constructor][constructor]] has the
following properties:

* 20.2.2.1BigInt.asIntN ( =bits=, =bigint= )
  :PROPERTIES:
  :CUSTOM_ID: bigint.asintn-bits-bigint
  :END:

When the =BigInt.asIntN= is called with two arguments =bits= and
=bigint=, the following steps are taken:

1. Set =bits= to
   ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=bits=).
2. Set =bigint= to
   ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=bigint=).
3. Let =mod= be the BigInt value that represents =bigint=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{=bits=}.
4. If =mod= ≥ 2^{=bits= - 1}, return =mod= - 2^{=bits=}; otherwise,
   return =mod=.

* 20.2.2.2BigInt.asUintN ( =bits=, =bigint= )
  :PROPERTIES:
  :CUSTOM_ID: bigint.asuintn-bits-bigint
  :END:

When the =BigInt.asUintN= function is called with two arguments =bits=
and =bigint=, the following steps are taken:

1. Set =bits= to
   ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=bits=).
2. Set =bigint= to
   ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=bigint=).
3. Return the BigInt value that represents =bigint=
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{=bits=}.

* 20.2.2.3BigInt.prototype
  :PROPERTIES:
  :CUSTOM_ID: bigint.prototype
  :END:

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.2.3Properties of the BigInt Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-bigint-prototype-object
  :END:

The BigInt prototype object:

- is an ordinary object.
- is not a BigInt object; it does not have a [[BigIntData]] internal
  slot.
- has a [[Prototype]] internal slot whose value is the intrinsic object
  %Object.prototype%.

The abstract operation thisBigIntValue(=value=) performs the following
steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is BigInt, return =value=.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Object and =value= has a [[BigIntData]] internal slot, then

   1. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=.[[BigIntData]])
      is BigInt.
   2. Return =value=.[[BigIntData]].

3. Throw a TypeError exception.

The phrase “this BigInt value” within the specification of a method
refers to the result returned by calling the abstract operation
[[https://tc39.es/ecma262/#sec-thisbigintvalue][thisBigIntValue]] with
the this value of the method invocation passed as the argument.

* 20.2.3.1BigInt.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: bigint.prototype.constructor
  :END:

The initial value of =BigInt.prototype.constructor= is the intrinsic
object [[https://tc39.es/ecma262/#sec-bigint-constructor][%BigInt%]].

* 20.2.3.2BigInt.prototype.toLocaleString ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: bigint.prototype.tolocalestring-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
=BigInt.prototype.toLocaleString= method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the =toLocaleString= method
is used.

Produces a String value that represents this BigInt value formatted
according to the conventions of the host environment's current locale.
This function is implementation-dependent, and it is permissible, but
not encouraged, for it to return the same thing as =toString=.

The meanings of the optional parameters to this method are defined in
the ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

* 20.2.3.3BigInt.prototype.toString ( [ =radix= ] )
  :PROPERTIES:
  :CUSTOM_ID: bigint.prototype.tostring-radix
  :END:

Note

The optional =radix= should be an
[[https://tc39.es/ecma262/#integer][integer]] value in the inclusive
range 2 to 36. If =radix= not present or is undefined the Number 10 is
used as the value of =radix=.

The following steps are performed:

1. Let =x= be
   ? [[https://tc39.es/ecma262/#sec-thisbigintvalue][thisBigIntValue]](this
   value).
2. If =radix= is not present, let =radixNumber= be 10.
3. Else if =radix= is undefined, let =radixNumber= be 10.
4. Else, let =radixNumber= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=radix=).
5. If =radixNumber= < 2 or =radixNumber= > 36, throw a RangeError
   exception.
6. If =radixNumber= = 10, return
   ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=x=).
7. Return the String representation of this
   [[https://tc39.es/ecma262/#number-value][Number value]] using the
   radix specified by =radixNumber=. Letters =a=-=z= are used for digits
   with values 10 through 35. The precise algorithm is
   implementation-dependent, however the algorithm should be a
   generalization of that specified in
   [[https://tc39.es/ecma262/#sec-numeric-types-bigint-tostring][6.1.6.2.23]].

The =toString= function is not generic; it throws a TypeError exception
if its this value is not a BigInt or a BigInt object. Therefore, it
cannot be transferred to other kinds of objects for use as a method.

* 20.2.3.4BigInt.prototype.valueOf ( )
  :PROPERTIES:
  :CUSTOM_ID: bigint.prototype.valueof
  :END:

1. Return
   ? [[https://tc39.es/ecma262/#sec-thisbigintvalue][thisBigIntValue]](this
   value).

* 20.2.3.5BigInt.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: bigint.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"BigInt".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 20.3The Math Object
  :PROPERTIES:
  :CUSTOM_ID: the-math-object
  :END:

The Math object:

- is the intrinsic object %Math%.
- is the initial value of the "Math" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is not a [[https://tc39.es/ecma262/#function-object][function
  object]].
- does not have a [[Construct]] internal method; it cannot be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]] with the =new=
  operator.
- does not have a [[Call]] internal method; it cannot be invoked as a
  function.

Note

In this specification, the phrase “the
[[https://tc39.es/ecma262/#number-value][Number value]] for =x=” has a
technical meaning defined in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type][6.1.6.1]].

* 20.3.1Value Properties of the Math Object
  :PROPERTIES:
  :CUSTOM_ID: value-properties-of-the-math-object
  :END:

* 20.3.1.1Math.E
  :PROPERTIES:
  :CUSTOM_ID: math.e
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for
=e=_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, the base of the natural
logarithms, which is approximately 2.7182818284590452354.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.3.1.2Math.LN10
  :PROPERTIES:
  :CUSTOM_ID: math.ln10
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for the
natural logarithm of 10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]},
which is approximately 2.302585092994046.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.3.1.3Math.LN2
  :PROPERTIES:
  :CUSTOM_ID: math.ln2
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for the
natural logarithm of 2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]},
which is approximately 0.6931471805599453.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.3.1.4Math.LOG10E
  :PROPERTIES:
  :CUSTOM_ID: math.log10e
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for the
base-10 logarithm of =e=_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]},
the base of the natural logarithms; this value is approximately
0.4342944819032518.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

Note

The value of =Math.LOG10E= is approximately the reciprocal of the value
of =Math.LN10=.

* 20.3.1.5Math.LOG2E
  :PROPERTIES:
  :CUSTOM_ID: math.log2e
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for the
base-2 logarithm of =e=_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, the
base of the natural logarithms; this value is approximately
1.4426950408889634.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

Note

The value of =Math.LOG2E= is approximately the reciprocal of the value
of =Math.LN2=.

* 20.3.1.6Math.PI
  :PROPERTIES:
  :CUSTOM_ID: math.pi
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for
π_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, the ratio of the
circumference of a circle to its diameter, which is approximately
3.1415926535897932.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.3.1.7Math.SQRT1_2
  :PROPERTIES:
  :CUSTOM_ID: math.sqrt1_2
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for the
square root of ½_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, which is
approximately 0.7071067811865476.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

Note

The value of =Math.SQRT1_2= is approximately the reciprocal of the value
of =Math.SQRT2=.

* 20.3.1.8Math.SQRT2
  :PROPERTIES:
  :CUSTOM_ID: math.sqrt2
  :END:

The [[https://tc39.es/ecma262/#number-value][Number value]] for the
square root of 2_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}, which is
approximately 1.4142135623730951.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.3.1.9Math [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: math-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Math".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 20.3.2Function Properties of the Math Object
  :PROPERTIES:
  :CUSTOM_ID: function-properties-of-the-math-object
  :END:

Each of the following =Math= object functions applies the
[[https://tc39.es/ecma262/#sec-tonumber][ToNumber]] abstract operation
to each of its arguments (in left-to-right order if there is more than
one). If [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]] returns an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]], that
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] is immediately returned. Otherwise, the function performs a
computation on the resulting
[[https://tc39.es/ecma262/#number-value][Number value]](s). The value
returned by each function is a Number.

In the function descriptions below, the symbols NaN, -0, +0, -∞ and +∞
refer to the Number values described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-number-type][6.1.6.1]].

Note

The behaviour of the functions =acos=, =acosh=, =asin=, =asinh=, =atan=,
=atanh=, =atan2=, =cbrt=, =cos=, =cosh=, =exp=, =expm1=, =hypot=,
=log=,=log1p=, =log2=, =log10=, =pow=, =random=, =sin=, =sinh=, =sqrt=,
=tan=, and =tanh= is not precisely specified here except to require
specific results for certain argument values that represent boundary
cases of interest. For other argument values, these functions are
intended to compute approximations to the results of familiar
mathematical functions, but some latitude is allowed in the choice of
approximation algorithms. The general intent is that an implementer
should be able to use the same mathematical library for ECMAScript on a
given hardware platform that is available to C programmers on that
platform.

Although the choice of algorithms is left to the implementation, it is
recommended (but not specified by this standard) that implementations
use the approximation algorithms for IEEE 754-2008 arithmetic contained
in =fdlibm=, the freely distributable mathematical library from Sun
Microsystems ([[http://www.netlib.org/fdlibm]]).

* 20.3.2.1Math.abs ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.abs-x
  :END:

Returns the absolute value of =x=; the result has the same magnitude as
=x= but has positive sign.

- If =x= is NaN, the result is NaN.
- If =x= is -0, the result is +0.
- If =x= is -∞, the result is +∞.

* 20.3.2.2Math.acos ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.acos-x
  :END:

Returns an implementation-dependent approximation to the arc cosine of
=x=. The result is expressed in radians and ranges from +0 to +π.

- If =x= is NaN, the result is NaN.
- If =x= is greater than 1, the result is NaN.
- If =x= is less than -1, the result is NaN.
- If =x= is exactly 1, the result is +0.

* 20.3.2.3Math.acosh ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.acosh-x
  :END:

Returns an implementation-dependent approximation to the inverse
hyperbolic cosine of =x=.

- If =x= is NaN, the result is NaN.
- If x is less than 1, the result is NaN.
- If x is 1, the result is +0.
- If =x= is +∞, the result is +∞.

* 20.3.2.4Math.asin ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.asin-x
  :END:

Returns an implementation-dependent approximation to the arc sine of
=x=. The result is expressed in radians and ranges from -π / 2 to +π /
2.

- If =x= is NaN, the result is NaN.
- If =x= is greater than 1, the result is NaN.
- If =x= is less than -1, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.

* 20.3.2.5Math.asinh ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.asinh-x
  :END:

Returns an implementation-dependent approximation to the inverse
hyperbolic sine of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.
- If x is -∞, the result is -∞.

* 20.3.2.6Math.atan ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.atan-x
  :END:

Returns an implementation-dependent approximation to the arc tangent of
=x=. The result is expressed in radians and ranges from -π / 2 to +π /
2.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is an implementation-dependent approximation
  to +π / 2.
- If =x= is -∞, the result is an implementation-dependent approximation
  to -π / 2.

* 20.3.2.7Math.atanh ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.atanh-x
  :END:

Returns an implementation-dependent approximation to the inverse
hyperbolic tangent of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is less than -1, the result is NaN.
- If =x= is greater than 1, the result is NaN.
- If =x= is -1, the result is -∞.
- If =x= is +1, the result is +∞.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.

* 20.3.2.8Math.atan2 ( =y=, =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.atan2-y-x
  :END:

Returns an implementation-dependent approximation to the arc tangent of
the quotient =y= / =x= of the arguments =y= and =x=, where the signs of
=y= and =x= are used to determine the quadrant of the result. Note that
it is intentional and traditional for the two-argument arc tangent
function that the argument named =y= be first and the argument named =x=
be second. The result is expressed in radians and ranges from -π to +π.

- If either =x= or =y= is NaN, the result is NaN.
- If =y= > 0 and =x= is +0, the result is an implementation-dependent
  approximation to +π / 2.
- If =y= > 0 and =x= is -0, the result is an implementation-dependent
  approximation to +π / 2.
- If =y= is +0 and =x= > 0, the result is +0.
- If =y= is +0 and =x= is +0, the result is +0.
- If =y= is +0 and =x= is -0, the result is an implementation-dependent
  approximation to +π.
- If =y= is +0 and =x= < 0, the result is an implementation-dependent
  approximation to +π.
- If =y= is -0 and =x= > 0, the result is -0.
- If =y= is -0 and =x= is +0, the result is -0.
- If =y= is -0 and =x= is -0, the result is an implementation-dependent
  approximation to -π.
- If =y= is -0 and =x= < 0, the result is an implementation-dependent
  approximation to -π.
- If =y= < 0 and =x= is +0, the result is an implementation-dependent
  approximation to -π / 2.
- If =y= < 0 and =x= is -0, the result is an implementation-dependent
  approximation to -π / 2.
- If =y= > 0 and =y= is finite and =x= is +∞, the result is +0.
- If =y= > 0 and =y= is finite and =x= is -∞, the result is an
  implementation-dependent approximation to +π.
- If =y= < 0 and =y= is finite and =x= is +∞, the result is -0.
- If =y= < 0 and =y= is finite and =x= is -∞, the result is an
  implementation-dependent approximation to -π.
- If =y= is +∞ and =x= is finite, the result is an
  implementation-dependent approximation to +π / 2.
- If =y= is -∞ and =x= is finite, the result is an
  implementation-dependent approximation to -π / 2.
- If =y= is +∞ and =x= is +∞, the result is an implementation-dependent
  approximation to +π / 4.
- If =y= is +∞ and =x= is -∞, the result is an implementation-dependent
  approximation to +3π / 4.
- If =y= is -∞ and =x= is +∞, the result is an implementation-dependent
  approximation to -π / 4.
- If =y= is -∞ and =x= is -∞, the result is an implementation-dependent
  approximation to -3π / 4.

* 20.3.2.9Math.cbrt ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.cbrt-x
  :END:

Returns an implementation-dependent approximation to the cube root of
=x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is -∞.

* 20.3.2.10Math.ceil ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.ceil-x
  :END:

Returns the smallest (closest to -∞)
[[https://tc39.es/ecma262/#number-value][Number value]] that is not less
than =x= and is an [[https://tc39.es/ecma262/#integer][integer]]. If =x=
is already an [[https://tc39.es/ecma262/#integer][integer]], the result
is =x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is -∞.
- If =x= is less than 0 but greater than -1, the result is -0.

The value of =Math.ceil(x)= is the same as the value of
=-Math.floor(-x)=.

* 20.3.2.11Math.clz32 ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.clz32-x
  :END:

When =Math.clz32= is called with one argument =x=, the following steps
are taken:

1. Let =n= be
   ? [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=x=).
2. Let =p= be the number of leading zero bits in the 32-bit binary
   representation of =n=.
3. Return =p=.

Note

If =n= is 0, =p= will be 32. If the most significant bit of the 32-bit
binary encoding of =n= is 1, =p= will be 0.

* 20.3.2.12Math.cos ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.cos-x
  :END:

Returns an implementation-dependent approximation to the cosine of =x=.
The argument is expressed in radians.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is 1.
- If =x= is -0, the result is 1.
- If =x= is +∞, the result is NaN.
- If =x= is -∞, the result is NaN.

* 20.3.2.13Math.cosh ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.cosh-x
  :END:

Returns an implementation-dependent approximation to the hyperbolic
cosine of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is 1.
- If =x= is -0, the result is 1.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is +∞.

Note

The value of =Math.cosh(x)= is the same as the value of
=(Math.exp(x) + Math.exp(-x)) / 2=.

* 20.3.2.14Math.exp ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.exp-x
  :END:

Returns an implementation-dependent approximation to the exponential
function of =x= (=e= raised to the power of =x=, where =e= is the base
of the natural logarithms).

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is 1.
- If =x= is -0, the result is 1.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is +0.

* 20.3.2.15Math.expm1 ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.expm1-x
  :END:

Returns an implementation-dependent approximation to subtracting 1 from
the exponential function of =x= (=e= raised to the power of =x=, where
=e= is the base of the natural logarithms). The result is computed in a
way that is accurate even when the value of x is close 0.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is -1.

* 20.3.2.16Math.floor ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.floor-x
  :END:

Returns the greatest (closest to +∞)
[[https://tc39.es/ecma262/#number-value][Number value]] that is not
greater than =x= and is an
[[https://tc39.es/ecma262/#integer][integer]]. If =x= is already an
[[https://tc39.es/ecma262/#integer][integer]], the result is =x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is -∞.
- If =x= is greater than 0 but less than 1, the result is +0.

Note

The value of =Math.floor(x)= is the same as the value of
=-Math.ceil(-x)=.

* 20.3.2.17Math.fround ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.fround-x
  :END:

When =Math.fround= is called with argument =x=, the following steps are
taken:

1. If =x= is NaN, return NaN.
2. If =x= is one of +0, -0, +∞, -∞, return =x=.
3. Let =x32= be the result of converting =x= to a value in IEEE 754-2008
   binary32 format using roundTiesToEven mode.
4. Let =x64= be the result of converting =x32= to a value in IEEE
   754-2008 binary64 format.
5. Return the ECMAScript [[https://tc39.es/ecma262/#number-value][Number
   value]] corresponding to =x64=.

* 20.3.2.18Math.hypot ( =value1=, =value2=, ...=values= )
  :PROPERTIES:
  :CUSTOM_ID: math.hypot-value1-value2-...values
  :END:

=Math.hypot= returns an implementation-dependent approximation of the
square root of the sum of squares of its arguments.

- If no arguments are passed, the result is +0.
- If any argument is +∞, the result is +∞.
- If any argument is -∞, the result is +∞.
- If no argument is +∞ or -∞, and any argument is NaN, the result is
  NaN.
- If all arguments are either +0 or -0, the result is +0.

Note

Implementations should take care to avoid the loss of precision from
overflows and underflows that are prone to occur in naive
implementations when this function is called with two or more arguments.

* 20.3.2.19Math.imul ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: math.imul-x-y
  :END:

When =Math.imul= is called with arguments =x= and =y=, the following
steps are taken:

1. Let =a= be
   ? [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=x=).
2. Let =b= be
   ? [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=y=).
3. Let =product= be (=a= × =b=)
   [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 2^{32}.
4. If =product= ≥ 2^{31}, return =product= - 2^{32}; otherwise return
   =product=.

* 20.3.2.20Math.log ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.log-x
  :END:

Returns an implementation-dependent approximation to the natural
logarithm of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is less than 0, the result is NaN.
- If =x= is +0 or -0, the result is -∞.
- If =x= is 1, the result is +0.
- If =x= is +∞, the result is +∞.

* 20.3.2.21Math.log1p ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.log1p-x
  :END:

Returns an implementation-dependent approximation to the natural
logarithm of 1 + =x=. The result is computed in a way that is accurate
even when the value of x is close to zero.

- If =x= is NaN, the result is NaN.
- If =x= is less than -1, the result is NaN.
- If x is -1, the result is -∞.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.

* 20.3.2.22Math.log10 ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.log10-x
  :END:

Returns an implementation-dependent approximation to the base 10
logarithm of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is less than 0, the result is NaN.
- If =x= is +0, the result is -∞.
- If =x= is -0, the result is -∞.
- If =x= is 1, the result is +0.
- If =x= is +∞, the result is +∞.

* 20.3.2.23Math.log2 ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.log2-x
  :END:

Returns an implementation-dependent approximation to the base 2
logarithm of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is less than 0, the result is NaN.
- If =x= is +0, the result is -∞.
- If =x= is -0, the result is -∞.
- If =x= is 1, the result is +0.
- If =x= is +∞, the result is +∞.

* 20.3.2.24Math.max ( =value1=, =value2=, ...=values= )
  :PROPERTIES:
  :CUSTOM_ID: math.max-value1-value2-...values
  :END:

Given zero or more arguments, calls
[[https://tc39.es/ecma262/#sec-tonumber][ToNumber]] on each of the
arguments and returns the largest of the resulting values.

- If no arguments are given, the result is -∞.
- If any value is NaN, the result is NaN.
- The comparison of values to determine the largest value is done using
  the
  [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
  Relational Comparison]] algorithm except that +0 is considered to be
  larger than -0.

* 20.3.2.25Math.min ( =value1=, =value2=, ...=values= )
  :PROPERTIES:
  :CUSTOM_ID: math.min-value1-value2-...values
  :END:

Given zero or more arguments, calls
[[https://tc39.es/ecma262/#sec-tonumber][ToNumber]] on each of the
arguments and returns the smallest of the resulting values.

- If no arguments are given, the result is +∞.
- If any value is NaN, the result is NaN.
- The comparison of values to determine the smallest value is done using
  the
  [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
  Relational Comparison]] algorithm except that +0 is considered to be
  larger than -0.

* 20.3.2.26Math.pow ( =base=, =exponent= )
  :PROPERTIES:
  :CUSTOM_ID: math.pow-base-exponent
  :END:

1. Set =base= to
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=base=).
2. Set =exponent= to
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=exponent=).
3. Return ! Number::exponentiate(=base=, =exponent=).

* 20.3.2.27Math.random ( )
  :PROPERTIES:
  :CUSTOM_ID: math.random
  :END:

Returns a [[https://tc39.es/ecma262/#number-value][Number value]] with
positive sign, greater than or equal to 0 but less than 1, chosen
randomly or pseudo randomly with approximately uniform distribution over
that range, using an implementation-dependent algorithm or strategy.
This function takes no arguments.

Each =Math.random= function created for distinct realms must produce a
distinct sequence of values from successive calls.

* 20.3.2.28Math.round ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.round-x
  :END:

Returns the [[https://tc39.es/ecma262/#number-value][Number value]] that
is closest to =x= and is an
[[https://tc39.es/ecma262/#integer][integer]]. If two integers are
equally close to =x=, then the result is the
[[https://tc39.es/ecma262/#number-value][Number value]] that is closer
to +∞. If =x= is already an
[[https://tc39.es/ecma262/#integer][integer]], the result is =x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is -∞.
- If =x= is greater than 0 but less than 0.5, the result is +0.
- If =x= is less than 0 but greater than or equal to -0.5, the result is
  -0.

Note 1

=Math.round(3.5)= returns 4, but =Math.round(-3.5)= returns -3.

Note 2

The value of =Math.round(x)= is not always the same as the value of
=Math.floor(x + 0.5)=. When =x= is -0 or is less than 0 but greater than
or equal to -0.5, =Math.round(x)= returns -0, but =Math.floor(x + 0.5)=
returns +0. =Math.round(x)= may also differ from the value of
=Math.floor(x + 0.5)=because of internal rounding when computing
=x + 0.5=.

* 20.3.2.29Math.sign ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.sign-x
  :END:

Returns the sign of =x=, indicating whether =x= is positive, negative,
or zero.

- If =x= is NaN, the result is NaN.
- If =x= is -0, the result is -0.
- If =x= is +0, the result is +0.
- If =x= is negative and not -0, the result is -1.
- If =x= is positive and not +0, the result is +1.

* 20.3.2.30Math.sin ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.sin-x
  :END:

Returns an implementation-dependent approximation to the sine of =x=.
The argument is expressed in radians.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞ or -∞, the result is NaN.

* 20.3.2.31Math.sinh ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.sinh-x
  :END:

Returns an implementation-dependent approximation to the hyperbolic sine
of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is -∞.

Note

The value of =Math.sinh(x)= is the same as the value of
=(Math.exp(x) - Math.exp(-x)) / 2=.

* 20.3.2.32Math.sqrt ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.sqrt-x
  :END:

Returns an implementation-dependent approximation to the square root of
=x=.

- If =x= is NaN, the result is NaN.
- If =x= is less than 0, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +∞.

* 20.3.2.33Math.tan ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.tan-x
  :END:

Returns an implementation-dependent approximation to the tangent of =x=.
The argument is expressed in radians.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞ or -∞, the result is NaN.

* 20.3.2.34Math.tanh ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.tanh-x
  :END:

Returns an implementation-dependent approximation to the hyperbolic
tangent of =x=.

- If =x= is NaN, the result is NaN.
- If =x= is +0, the result is +0.
- If =x= is -0, the result is -0.
- If =x= is +∞, the result is +1.
- If =x= is -∞, the result is -1.

Note

The value of =Math.tanh(x)= is the same as the value of
=(Math.exp(x) - Math.exp(-x)) / (Math.exp(x) + Math.exp(-x))=.

* 20.3.2.35Math.trunc ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: math.trunc-x
  :END:

Returns the integral part of the number =x=, removing any fractional
digits. If =x= is already an
[[https://tc39.es/ecma262/#integer][integer]], the result is =x=.

- If =x= is NaN, the result is NaN.
- If =x= is -0, the result is -0.
- If =x= is +0, the result is +0.
- If =x= is +∞, the result is +∞.
- If =x= is -∞, the result is -∞.
- If =x= is greater than 0 but less than 1, the result is +0.
- If =x= is less than 0 but greater than -1, the result is -0.

* 20.4Date Objects
  :PROPERTIES:
  :CUSTOM_ID: date-objects
  :END:

* 20.4.1Overview of Date Objects and Definitions of Abstract Operations
  :PROPERTIES:
  :CUSTOM_ID: overview-of-date-objects-and-definitions-of-abstract-operations
  :END:

The following functions are
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] that operate on time values (defined in
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][20.4.1.1]]).
Note that, in every case, if any argument to one of these functions is
NaN, the result will be NaN.

* 20.4.1.1Time Values and Time Range
  :PROPERTIES:
  :CUSTOM_ID: time-values-and-time-range
  :END:

Time measurement in ECMAScript is analogous to time measurement in
POSIX, in particular sharing definition in terms of the proleptic
Gregorian calendar, an epoch of midnight at the beginning of 01 January,
1970 UTC, and an accounting of every day as comprising exactly 86,400
seconds (each of which is 1000 milliseconds long).

An ECMAScript time value is a Number, either a finite
[[https://tc39.es/ecma262/#integer][integer]] representing an instant in
time to millisecond precision or NaN representing no specific instant. A
time value that is a multiple of 24 × 60 × 60 × 1000 = 86,400,000 (i.e.,
is equal to 86,400,000 × =d= for some
[[https://tc39.es/ecma262/#integer][integer]] =d=) represents the
instant at the start of the UTC day that follows the epoch by =d= whole
UTC days (preceding the epoch for negative =d=). Every other finite time
value =t= is defined relative to the greatest preceding time value =s=
that is such a multiple, and represents the instant that occurs within
the same UTC day as =s= but follows it by =t= − =s= milliseconds.

Time values do not account for UTC leap seconds---there are no time
values representing instants within positive leap seconds, and there are
time values representing instants removed from the UTC timeline by
negative leap seconds. However, the definition of time values
nonetheless yields piecewise alignment with UTC, with discontinuities
only at leap second boundaries and zero difference outside of leap
seconds.

A Number can exactly represent all integers from -9,007,199,254,740,992
to 9,007,199,254,740,992
([[https://tc39.es/ecma262/#sec-number.min_safe_integer][20.1.2.8]] and
[[https://tc39.es/ecma262/#sec-number.max_safe_integer][20.1.2.6]]). A
time value supports a slightly smaller range of -8,640,000,000,000,000
to 8,640,000,000,000,000 milliseconds. This yields a supported time
value range of exactly -100,000,000 days to 100,000,000 days relative to
midnight at the beginning of 01 January, 1970 UTC.

The exact moment of midnight at the beginning of 01 January, 1970 UTC is
represented by the time value +0.

Note

The 400 year cycle of the proleptic Gregorian calendar contains 97 leap
years. This yields an average of 365.2425 days per year, which is
31,556,952,000 milliseconds. Therefore, the maximum range a Number could
represent exactly with millisecond precision is approximately -285,426
to 285,426 years relative to 1970. The smaller range supported by a time
value as specified in this section is approximately -273,790 to 273,790
years relative to 1970.

* 20.4.1.2Day Number and Time within Day
  :PROPERTIES:
  :CUSTOM_ID: day-number-and-time-within-day
  :END:

A given [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
value]] =t= belongs to day number

Day(=t=) = [[https://tc39.es/ecma262/#eqn-floor][floor]](=t= /
[[https://tc39.es/ecma262/#eqn-msPerDay][msPerDay]])

where the number of milliseconds per day is

msPerDay = 86400000

The remainder is called the time within the day:

TimeWithinDay(=t=) = =t= [[https://tc39.es/ecma262/#eqn-modulo][modulo]]
[[https://tc39.es/ecma262/#eqn-msPerDay][msPerDay]]

* 20.4.1.3Year Number
  :PROPERTIES:
  :CUSTOM_ID: year-number
  :END:

ECMAScript uses a proleptic Gregorian calendar to map a day number to a
year number and to determine the month and date within that year. In
this calendar, leap years are precisely those which are (divisible by 4)
and ((not divisible by 100) or (divisible by 400)). The number of days
in year number =y= is therefore defined by

DaysInYear(=y=)

= 365 if (=y= [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 4) ≠ 0

= 366 if (=y= [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 4) = 0 and
(=y= [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 100) ≠ 0

= 365 if (=y= [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 100) = 0
and (=y= [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 400) ≠ 0

= 366 if (=y= [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 400) = 0

All non-leap years have 365 days with the usual number of days per month
and leap years have an extra day in February. The day number of the
first day of year =y= is given by:

DayFromYear(=y=) = 365 × (=y= - 1970) +
[[https://tc39.es/ecma262/#eqn-floor][floor]]((=y= - 1969) / 4) -
[[https://tc39.es/ecma262/#eqn-floor][floor]]((=y= - 1901) / 100) +
[[https://tc39.es/ecma262/#eqn-floor][floor]]((=y= - 1601) / 400)

The [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
value]] of the start of a year is:

TimeFromYear(=y=) = [[https://tc39.es/ecma262/#eqn-msPerDay][msPerDay]]
× [[https://tc39.es/ecma262/#eqn-DaysFromYear][DayFromYear]](=y=)

A [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
value]] determines a year by:

YearFromTime(=t=) = the largest
[[https://tc39.es/ecma262/#integer][integer]] =y= (closest to positive
infinity) such that
[[https://tc39.es/ecma262/#eqn-TimeFromYear][TimeFromYear]](=y=) ≤ =t=

The leap-year function is 1 for a time within a leap year and otherwise
is zero:

InLeapYear(=t=)

= 0 if
[[https://tc39.es/ecma262/#eqn-DaysInYear][DaysInYear]]([[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=))
= 365

= 1 if
[[https://tc39.es/ecma262/#eqn-DaysInYear][DaysInYear]]([[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=))
= 366

* 20.4.1.4Month Number
  :PROPERTIES:
  :CUSTOM_ID: month-number
  :END:

Months are identified by an
[[https://tc39.es/ecma262/#integer][integer]] in the range 0 to 11,
inclusive. The mapping
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) from
a [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
value]] =t= to a month number is defined by:

MonthFromTime(=t=)

= 0 if 0 ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 31

= 1 if 31 ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 59
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 2 if 59 + [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)
≤ [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) <
90 + [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 3 if 90 + [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)
≤ [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) <
120 + [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 4 if 120 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 151
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 5 if 151 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 181
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 6 if 181 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 212
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 7 if 212 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 243
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 8 if 243 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 273
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 9 if 273 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 304
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 10 if 304 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 334
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

= 11 if 334 +
[[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) ≤
[[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) < 365
+ [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=)

where

DayWithinYear(=t=) = [[https://tc39.es/ecma262/#eqn-Day][Day]](=t=) -
[[https://tc39.es/ecma262/#eqn-DaysFromYear][DayFromYear]]([[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=))

A month value of 0 specifies January; 1 specifies February; 2 specifies
March; 3 specifies April; 4 specifies May; 5 specifies June; 6 specifies
July; 7 specifies August; 8 specifies September; 9 specifies October; 10
specifies November; and 11 specifies December. Note that
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](0) = 0,
corresponding to Thursday, 01 January, 1970.

* 20.4.1.5Date Number
  :PROPERTIES:
  :CUSTOM_ID: date-number
  :END:

A date number is identified by an
[[https://tc39.es/ecma262/#integer][integer]] in the range 1 through 31,
inclusive. The mapping DateFromTime(=t=) from a
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
=t= to a date number is defined by:

DateFromTime(=t=)

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) + 1
if [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) =
0

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
30 if [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=)
= 1

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
58 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 2

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
89 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 3

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
119 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 4

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
150 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 5

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
180 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 6

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
211 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 7

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
242 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 8

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
272 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 9

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
303 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 10

= [[https://tc39.es/ecma262/#eqn-DayWithinYear][DayWithinYear]](=t=) -
333 - [[https://tc39.es/ecma262/#eqn-InLeapYear][InLeapYear]](=t=) if
[[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) = 11

* 20.4.1.6Week Day
  :PROPERTIES:
  :CUSTOM_ID: week-day
  :END:

The weekday for a particular
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
=t= is defined as

WeekDay(=t=) = ([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=) + 4)
[[https://tc39.es/ecma262/#eqn-modulo][modulo]] 7

A weekday value of 0 specifies Sunday; 1 specifies Monday; 2 specifies
Tuesday; 3 specifies Wednesday; 4 specifies Thursday; 5 specifies
Friday; and 6 specifies Saturday. Note that WeekDay(0) = 4,
corresponding to Thursday, 01 January, 1970.

* 20.4.1.7LocalTZA ( =t=, =isUTC= )
  :PROPERTIES:
  :CUSTOM_ID: localtza-t-isutc
  :END:

LocalTZA( =t=, =isUTC= ) is an implementation-defined algorithm that
returns the local time zone adjustment, or offset, in milliseconds. The
local political rules for standard time and daylight saving time in
effect at =t= should be used to determine the result in the way
specified in this section.

When =isUTC= is true, LocalTZA( =t=_{UTC}, true ) should return the
offset of the local time zone from UTC measured in milliseconds at time
represented by
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
=t=_{UTC}. When the result is added to =t=_{UTC}, it should yield the
corresponding Number =t=_{local}.

When =isUTC= is false, LocalTZA( =t=_{local}, false ) should return the
offset of the local time zone from UTC measured in milliseconds at local
time represented by Number =t=_{local}. When the result is subtracted
from =t=_{local}, it should yield the corresponding
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
=t=_{UTC}.

Input =t= is nominally a
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
but may be any [[https://tc39.es/ecma262/#number-value][Number value]].
This can occur when =isUTC= is false and =t=_{local} represents a
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
that is already offset outside of the
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
range at the range boundaries. The algorithm must not limit =t=_{local}
to the [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
value]] range, so that such inputs are supported.

When =t=_{local} represents local time repeating multiple times at a
negative time zone transition (e.g. when the daylight saving time ends
or the time zone offset is decreased due to a time zone rule change) or
skipped local time at a positive time zone transitions (e.g. when the
daylight saving time starts or the time zone offset is increased due to
a time zone rule change), =t=_{local} must be interpreted using the time
zone offset before the transition.

If an implementation does not support a conversion described above or if
political rules for time =t= are not available within the
implementation, the result must be 0.

Note

It is recommended that implementations use the time zone information of
the IANA Time Zone Database [[https://www.iana.org/time-zones/]].

1:30 AM on November 5, 2017 in America/New_York is repeated twice (fall
backward), but it must be interpreted as 1:30 AM UTC-04 instead of 1:30
AM UTC-05.
LocalTZA([[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]](2017,
10, 5), [[https://tc39.es/ecma262/#sec-maketime][MakeTime]](1, 30, 0,
0))), false) is -4 ×
[[https://tc39.es/ecma262/#eqn-msPerHour][msPerHour]].

2:30 AM on March 12, 2017 in America/New_York does not exist, but it
must be interpreted as 2:30 AM UTC-05 (equivalent to 3:30 AM UTC-04).
LocalTZA([[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]](2017,
2, 12), [[https://tc39.es/ecma262/#sec-maketime][MakeTime]](2, 30, 0,
0))), false) is -5 ×
[[https://tc39.es/ecma262/#eqn-msPerHour][msPerHour]].

Local time zone offset values may be positive /or/ negative.

* 20.4.1.8LocalTime ( =t= )
  :PROPERTIES:
  :CUSTOM_ID: localtime-t
  :END:

The abstract operation LocalTime with argument =t= converts =t= from UTC
to local time by performing the following steps:

1. Return =t= +
   [[https://tc39.es/ecma262/#sec-local-time-zone-adjustment][LocalTZA]](=t=,
   true).

Note

Two different input time values =t=_{UTC} are converted to the same
local time t_{local} at a negative time zone transition when there are
repeated times (e.g. the daylight saving time ends or the time zone
adjustment is decreased.).

LocalTime([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=t=_{local})) is
not necessarily always equal to =t=_{local}. Correspondingly,
[[https://tc39.es/ecma262/#sec-utc-t][UTC]](LocalTime(=t=_{UTC})) is not
necessarily always equal to =t=_{UTC}.

* 20.4.1.9UTC ( =t= )
  :PROPERTIES:
  :CUSTOM_ID: utc-t
  :END:

The abstract operation UTC with argument =t= converts =t= from local
time to UTC by performing the following steps:

1. Return =t= -
   [[https://tc39.es/ecma262/#sec-local-time-zone-adjustment][LocalTZA]](=t=,
   false).

Note

UTC([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=_{UTC})) is
not necessarily always equal to =t=_{UTC}. Correspondingly,
[[https://tc39.es/ecma262/#sec-localtime][LocalTime]](UTC(=t=_{local}))
is not necessarily always equal to =t=_{local}.

* 20.4.1.10Hours, Minutes, Second, and Milliseconds
  :PROPERTIES:
  :CUSTOM_ID: hours-minutes-second-and-milliseconds
  :END:

The following
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] are useful in decomposing time values:

HourFromTime(=t=) = [[https://tc39.es/ecma262/#eqn-floor][floor]](=t= /
[[https://tc39.es/ecma262/#eqn-msPerHour][msPerHour]])
[[https://tc39.es/ecma262/#eqn-modulo][modulo]]
[[https://tc39.es/ecma262/#eqn-HoursPerDay][HoursPerDay]]

MinFromTime(=t=) = [[https://tc39.es/ecma262/#eqn-floor][floor]](=t= /
[[https://tc39.es/ecma262/#eqn-msPerMinute][msPerMinute]])
[[https://tc39.es/ecma262/#eqn-modulo][modulo]]
[[https://tc39.es/ecma262/#eqn-MinutesPerHour][MinutesPerHour]]

SecFromTime(=t=) = [[https://tc39.es/ecma262/#eqn-floor][floor]](=t= /
[[https://tc39.es/ecma262/#eqn-msPerSecond][msPerSecond]])
[[https://tc39.es/ecma262/#eqn-modulo][modulo]]
[[https://tc39.es/ecma262/#eqn-SecondsPerMinute][SecondsPerMinute]]

msFromTime(=t=) = =t= [[https://tc39.es/ecma262/#eqn-modulo][modulo]]
[[https://tc39.es/ecma262/#eqn-msPerSecond][msPerSecond]]

where

HoursPerDay = 24

MinutesPerHour = 60

SecondsPerMinute = 60

msPerSecond = 1000

msPerMinute = 60000 =
[[https://tc39.es/ecma262/#eqn-msPerSecond][msPerSecond]] ×
[[https://tc39.es/ecma262/#eqn-SecondsPerMinute][SecondsPerMinute]]

msPerHour = 3600000 =
[[https://tc39.es/ecma262/#eqn-msPerMinute][msPerMinute]] ×
[[https://tc39.es/ecma262/#eqn-MinutesPerHour][MinutesPerHour]]

* 20.4.1.11MakeTime ( =hour=, =min=, =sec=, =ms= )
  :PROPERTIES:
  :CUSTOM_ID: maketime-hour-min-sec-ms
  :END:

The abstract operation MakeTime calculates a number of milliseconds from
its four arguments, which must be ECMAScript Number values. This
operator functions as follows:

1. If =hour= is not finite or =min= is not finite or =sec= is not finite
   or =ms= is not finite, return NaN.
2. Let =h= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=hour=).
3. Let =m= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=min=).
4. Let =s= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=sec=).
5. Let =milli= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=ms=).
6. Let =t= be =h= =*=
   [[https://tc39.es/ecma262/#eqn-msPerHour][msPerHour]] =+= =m= =*=
   [[https://tc39.es/ecma262/#eqn-msPerMinute][msPerMinute]] =+= =s= =*=
   [[https://tc39.es/ecma262/#eqn-msPerSecond][msPerSecond]] =+=
   =milli=, performing the arithmetic according to IEEE 754-2008 rules
   (that is, as if using the ECMAScript operators =*= and =+=).
7. Return =t=.

* 20.4.1.12MakeDay ( =year=, =month=, =date= )
  :PROPERTIES:
  :CUSTOM_ID: makeday-year-month-date
  :END:

The abstract operation MakeDay calculates a number of days from its
three arguments, which must be ECMAScript Number values. This operator
functions as follows:

1. If =year= is not finite or =month= is not finite or =date= is not
   finite, return NaN.
2. Let =y= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=year=).
3. Let =m= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=month=).
4. Let =dt= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=date=).
5. Let =ym= be =y= + [[https://tc39.es/ecma262/#eqn-floor][floor]](=m= /
   12).
6. Let =mn= be =m= [[https://tc39.es/ecma262/#eqn-modulo][modulo]] 12.
7. Find a value =t= such that
   [[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=) is
   =ym= and
   [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=) is
   =mn= and
   [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=t=) is 1;
   but if this is not possible (because some argument is out of range),
   return NaN.
8. Return [[https://tc39.es/ecma262/#eqn-Day][Day]](=t=) + =dt= - 1.

* 20.4.1.13MakeDate ( =day=, =time= )
  :PROPERTIES:
  :CUSTOM_ID: makedate-day-time
  :END:

The abstract operation MakeDate calculates a number of milliseconds from
its two arguments, which must be ECMAScript Number values. This operator
functions as follows:

1. If =day= is not finite or =time= is not finite, return NaN.
2. Return =day= × [[https://tc39.es/ecma262/#eqn-msPerDay][msPerDay]] +
   =time=.

* 20.4.1.14TimeClip ( =time= )
  :PROPERTIES:
  :CUSTOM_ID: timeclip-time
  :END:

The abstract operation TimeClip calculates a number of milliseconds from
its argument, which must be an ECMAScript
[[https://tc39.es/ecma262/#number-value][Number value]]. This operator
functions as follows:

1. If =time= is not finite, return NaN.
2. If [[https://tc39.es/ecma262/#eqn-abs][abs]](=time=) > 8.64 ×
   10^{15}, return NaN.
3. Let =clippedTime= be
   ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=time=).
4. If =clippedTime= is -0, set =clippedTime= to +0.
5. Return =clippedTime=.

Note

The point of step 4 is that an implementation is permitted a choice of
internal representations of time values, for example as a 64-bit signed
[[https://tc39.es/ecma262/#integer][integer]] or as a 64-bit
floating-point value. Depending on the implementation, this internal
representation may or may not distinguish -0 and +0.

* 20.4.1.15Date Time String Format
  :PROPERTIES:
  :CUSTOM_ID: date-time-string-format
  :END:

ECMAScript defines a string interchange format for date-times based upon
a simplification of the ISO 8601 calendar date extended format. The
format is as follows: =YYYY-MM-DDTHH:mm:ss.sssZ=

Where the elements are as follows:

| =YYYY=   | is the year in the proleptic Gregorian calendar as four decimal digits from 0000 to 9999, or as an [[https://tc39.es/ecma262/#sec-expanded-years][expanded year]] of "+" or "-" followed by six decimal digits.   |
| =-=      | "-" (hyphen) appears literally twice in the string.                                                                                                                                                               |
| =MM=     | is the month of the year as two decimal digits from 01 (January) to 12 (December).                                                                                                                                |
| =DD=     | is the day of the month as two decimal digits from 01 to 31.                                                                                                                                                      |
| =T=      | "T" appears literally in the string, to indicate the beginning of the time element.                                                                                                                               |
| =HH=     | is the number of complete hours that have passed since midnight as two decimal digits from 00 to 24.                                                                                                              |
| =:=      | ":" (colon) appears literally twice in the string.                                                                                                                                                                |
| =mm=     | is the number of complete minutes since the start of the hour as two decimal digits from 00 to 59.                                                                                                                |
| =ss=     | is the number of complete seconds since the start of the minute as two decimal digits from 00 to 59.                                                                                                              |
| =.=      | "." (dot) appears literally in the string.                                                                                                                                                                        |
| =sss=    | is the number of complete milliseconds since the start of the second as three decimal digits.                                                                                                                     |
| =Z=      | is the UTC offset representation specified as "Z" (for UTC with no offset) or an offset of either "+" or "-" followed by a time expression =HH:mm= (indicating local time ahead of or behind UTC, respectively)   |

This format includes date-only forms:

#+BEGIN_EXAMPLE
  YYYY
  YYYY-MM
  YYYY-MM-DD
          
#+END_EXAMPLE

It also includes “date-time” forms that consist of one of the above
date-only forms immediately followed by one of the following time forms
with an optional UTC offset representation appended:

#+BEGIN_EXAMPLE
  THH:mm
  THH:mm:ss
  THH:mm:ss.sss
          
#+END_EXAMPLE

A string containing out-of-bounds or nonconforming elements is not a
valid instance of this format.

Note 1

As every day both starts and ends with midnight, the two notations
=00:00= and =24:00= are available to distinguish the two midnights that
can be associated with one date. This means that the following two
notations refer to exactly the same point in time: =1995-02-04T24:00=
and =1995-02-05T00:00=. This interpretation of the latter form as "end
of a calendar day" is consistent with ISO 8601, even though that
specification reserves it for describing time intervals and does not
permit it within representations of single points in time.

Note 2

There exists no international standard that specifies abbreviations for
civil time zones like CET, EST, etc. and sometimes the same abbreviation
is even used for two very different time zones. For this reason, both
ISO 8601 and this format specify numeric representations of time zone
offsets.

<<sec-extended-years>>

* 20.4.1.15.1Expanded Years
  :PROPERTIES:
  :CUSTOM_ID: expanded-years
  :END:

[[https://tc39.es/ecma262/#sec-syntactic-grammar][Covering]] the full
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
range of approximately 273,790 years forward or backward from 01
January, 1970
([[https://tc39.es/ecma262/#sec-time-values-and-time-range][20.4.1.1]])
requires representing years before 0 or after 9999. ISO 8601 permits
expansion of the year representation, but only by mutual agreement of
the partners in information interchange. In the simplified ECMAScript
format, such an expanded year representation shall have 6 digits and is
always prefixed with a + or - sign. The year 0 is considered positive
and hence prefixed with a + sign. Strings matching the
[[https://tc39.es/ecma262/#sec-date-time-string-format][Date Time String
Format]] with expanded years representing instants in time outside the
range of a
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
are treated as unrecognizable by
[[https://tc39.es/ecma262/#sec-date.parse][=Date.parse=]] and cause that
function to return NaN without falling back to implementation-specific
behavior or heuristics.

Note

Examples of date-time values with expanded years:

| -271821-04-20T00:00:00Z   | 271822 B.C.   |
| -000001-01-01T00:00:00Z   | 2 B.C.        |
| +000000-01-01T00:00:00Z   | 1 B.C.        |
| +000001-01-01T00:00:00Z   | 1 A.D.        |
| +001970-01-01T00:00:00Z   | 1970 A.D.     |
| +002009-12-15T00:00:00Z   | 2009 A.D.     |
| +275760-09-13T00:00:00Z   | 275760 A.D.   |

* 20.4.2The Date Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-date-constructor
  :END:

The Date [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Date%.
- is the initial value of the "Date" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Date object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- returns a String representing the current time (UTC) when called as a
  function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is a single function whose behaviour is overloaded based upon the
  number and types of its arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Date= behaviour must include a
  =super= call to the =Date=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with a [[DateValue]] internal slot.
- has a "length" property whose value is 7.

* 20.4.2.1Date ( =year=, =month= [ , =date= [ , =hours= [ , =minutes= [
, =seconds= [ , =ms= ] ] ] ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date-year-month-date-hours-minutes-seconds-ms
  :END:

This description applies only if the Date
[[https://tc39.es/ecma262/#constructor][constructor]] is called with at
least two arguments.

When the =Date= function is called, the following steps are taken:

1. Let =numberOfArgs= be the number of arguments passed to this function
   call.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =numberOfArgs= ≥ 2.
3. If NewTarget is undefined, then

   1. Let =now= be the Number that is the
      [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
      value]] (UTC) identifying the current time.
   2. Return
      [[https://tc39.es/ecma262/#sec-todatestring][ToDateString]](=now=).

4. Else,

   1.  Let =y= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=year=).
   2.  Let =m= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=month=).
   3.  If =date= is present, let =dt= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=);
       else let =dt= be 1.
   4.  If =hours= is present, let =h= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=hours=);
       else let =h= be 0.
   5.  If =minutes= is present, let =min= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=minutes=);
       else let =min= be 0.
   6.  If =seconds= is present, let =s= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=seconds=);
       else let =s= be 0.
   7.  If =ms= is present, let =milli= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=); else
       let =milli= be 0.
   8.  If =y= is NaN, let =yr= be NaN.
   9.  Else,

       1. Let =yi= be
          ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=y=).
       2. If 0 ≤ =yi= ≤ 99, let =yr= be 1900 + =yi=; otherwise, let =yr=
          be =y=.

   10. Let =finalDate= be
       [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]](=yr=,
       =m=, =dt=),
       [[https://tc39.es/ecma262/#sec-maketime][MakeTime]](=h=, =min=,
       =s=, =milli=)).
   11. Let =O= be
       ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
       "%Date.prototype%", « [[DateValue]] »).
   12. Set =O=.[[DateValue]] to
       [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=finalDate=)).
   13. Return =O=.

* 20.4.2.2Date ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: date-value
  :END:

This description applies only if the Date
[[https://tc39.es/ecma262/#constructor][constructor]] is called with
exactly one argument.

When the =Date= function is called, the following steps are taken:

1. Let =numberOfArgs= be the number of arguments passed to this function
   call.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =numberOfArgs= = 1.
3. If NewTarget is undefined, then

   1. Let =now= be the Number that is the
      [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
      value]] (UTC) identifying the current time.
   2. Return
      [[https://tc39.es/ecma262/#sec-todatestring][ToDateString]](=now=).

4. Else,

   1. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
      is Object and =value= has a [[DateValue]] internal slot, then

      1. Let =tv= be
         [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](=value=).

   2. Else,

      1. Let =v= be
         ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=value=).
      2. If
         [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=v=)
         is String, then

         1. [[https://tc39.es/ecma262/#assert][Assert]]: The next step
            never returns an
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
            completion]] because
            [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=v=)
            is String.
         2. Let =tv= be the result of parsing =v= as a date, in exactly
            the same manner as for the =parse= method
            ([[https://tc39.es/ecma262/#sec-date.parse][20.4.3.2]]).

      3. Else,

         1. Let =tv= be
            ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=v=).

   3. Let =O= be
      ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
      "%Date.prototype%", « [[DateValue]] »).
   4. Set =O=.[[DateValue]] to
      [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=tv=).
   5. Return =O=.

* 20.4.2.3Date ( )
  :PROPERTIES:
  :CUSTOM_ID: date
  :END:

This description applies only if the Date
[[https://tc39.es/ecma262/#constructor][constructor]] is called with no
arguments.

When the =Date= function is called, the following steps are taken:

1. Let =numberOfArgs= be the number of arguments passed to this function
   call.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =numberOfArgs= = 0.
3. If NewTarget is undefined, then

   1. Let =now= be the Number that is the
      [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
      value]] (UTC) identifying the current time.
   2. Return
      [[https://tc39.es/ecma262/#sec-todatestring][ToDateString]](=now=).

4. Else,

   1. Let =O= be
      ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
      "%Date.prototype%", « [[DateValue]] »).
   2. Set =O=.[[DateValue]] to the
      [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
      value]] (UTC) identifying the current time.
   3. Return =O=.

* 20.4.3Properties of the Date Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-date-constructor
  :END:

The Date [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 20.4.3.1Date.now ( )
  :PROPERTIES:
  :CUSTOM_ID: date.now
  :END:

The =now= function returns a
[[https://tc39.es/ecma262/#number-value][Number value]] that is the
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
designating the UTC date and time of the occurrence of the call to
=now=.

* 20.4.3.2Date.parse ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: date.parse-string
  :END:

The =parse= function applies the
[[https://tc39.es/ecma262/#sec-tostring][ToString]] operator to its
argument. If [[https://tc39.es/ecma262/#sec-tostring][ToString]] results
in an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] the
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
Record]] is immediately returned. Otherwise, =parse= interprets the
resulting String as a date and time; it returns a Number, the UTC
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
corresponding to the date and time. The String may be interpreted as a
local time, a UTC time, or a time in some other time zone, depending on
the contents of the String. The function first attempts to parse the
String according to the format described in Date Time String Format
([[https://tc39.es/ecma262/#sec-date-time-string-format][20.4.1.15]]),
including expanded years. If the String does not conform to that format
the function may fall back to any implementation-specific heuristics or
implementation-specific date formats. Strings that are unrecognizable or
contain out-of-bounds format element values shall cause =Date.parse= to
return NaN.

If the String conforms to the
[[https://tc39.es/ecma262/#sec-date-time-string-format][Date Time String
Format]], substitute values take the place of absent format elements.
When the =MM= or =DD= elements are absent, "01" is used. When the =HH=,
=mm=, or =ss= elements are absent, "00" is used. When the =sss= element
is absent, "000" is used. When the UTC offset representation is absent,
date-only forms are interpreted as a UTC time and date-time forms are
interpreted as a local time.

If =x= is any Date object whose milliseconds amount is zero within a
particular implementation of ECMAScript, then all of the following
expressions should produce the same numeric value in that
implementation, if all the properties referenced have their initial
values:

#+BEGIN_EXAMPLE
  x.valueOf()
  Date.parse(x.toString())
  Date.parse(x.toUTCString())
  Date.parse(x.toISOString())
#+END_EXAMPLE

However, the expression

#+BEGIN_EXAMPLE
  Date.parse(x.toLocaleString())
#+END_EXAMPLE

is not required to produce the same
[[https://tc39.es/ecma262/#number-value][Number value]] as the preceding
three expressions and, in general, the value produced by =Date.parse= is
implementation-dependent when given any String value that does not
conform to the Date Time String Format
([[https://tc39.es/ecma262/#sec-date-time-string-format][20.4.1.15]])
and that could not be produced in that implementation by the =toString=
or =toUTCString= method.

* 20.4.3.3Date.prototype
  :PROPERTIES:
  :CUSTOM_ID: date.prototype
  :END:

The initial value of =Date.prototype= is %Date.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 20.4.3.4Date.UTC ( =year= [ , =month= [ , =date= [ , =hours= [ ,
=minutes= [ , =seconds= [ , =ms= ] ] ] ] ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.utc-year-month-date-hours-minutes-seconds-ms
  :END:

When the =UTC= function is called, the following steps are taken:

1.  Let =y= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=year=).
2.  If =month= is present, let =m= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=month=); else
    let =m= be 0.
3.  If =date= is present, let =dt= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=); else
    let =dt= be 1.
4.  If =hours= is present, let =h= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=hours=); else
    let =h= be 0.
5.  If =minutes= is present, let =min= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=minutes=);
    else let =min= be 0.
6.  If =seconds= is present, let =s= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=seconds=);
    else let =s= be 0.
7.  If =ms= is present, let =milli= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=); else
    let =milli= be 0.
8.  If =y= is NaN, let =yr= be NaN.
9.  Else,

    1. Let =yi= be
       ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=y=).
    2. If 0 ≤ =yi= ≤ 99, let =yr= be 1900 + =yi=; otherwise, let =yr= be
       =y=.

10. Return
    [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]](=yr=,
    =m=, =dt=), [[https://tc39.es/ecma262/#sec-maketime][MakeTime]](=h=,
    =min=, =s=, =milli=))).

The "length" property of the =UTC= function is 7.

Note

The =UTC= function differs from the =Date=
[[https://tc39.es/ecma262/#constructor][constructor]] in two ways: it
returns a
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
as a Number, rather than creating a Date object, and it interprets the
arguments in UTC rather than as local time.

* 20.4.4Properties of the Date Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-date-prototype-object
  :END:

The Date prototype object:

- is the intrinsic object %DatePrototype%.
- is itself an ordinary object.
- is not a Date instance and does not have a [[DateValue]] internal
  slot.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

Unless explicitly defined otherwise, the methods of the Date prototype
object defined below are not generic and the this value passed to them
must be an object that has a [[DateValue]] internal slot that has been
initialized to a
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]].

The abstract operation thisTimeValue(=value=) performs the following
steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Object and =value= has a [[DateValue]] internal slot, then

   1. Return =value=.[[DateValue]].

2. Throw a TypeError exception.

In following descriptions of functions that are properties of the Date
prototype object, the phrase “this Date object” refers to the object
that is the this value for the invocation of the function. If the Type
of the this value is not Object, a TypeError exception is thrown. The
phrase “this time value” within the specification of a method refers to
the result returned by calling the abstract operation thisTimeValue with
the this value of the method invocation passed as the argument.

* 20.4.4.1Date.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.constructor
  :END:

The initial value of =Date.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-date-constructor][%Date%]].

* 20.4.4.2Date.prototype.getDate ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getdate
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.3Date.prototype.getDay ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getday
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#sec-week-day][WeekDay]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.4Date.prototype.getFullYear ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getfullyear
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.5Date.prototype.getHours ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.gethours
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.6Date.prototype.getMilliseconds ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getmilliseconds
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.7Date.prototype.getMinutes ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getminutes
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.8Date.prototype.getMonth ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getmonth
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.9Date.prototype.getSeconds ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getseconds
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)).

* 20.4.4.10Date.prototype.getTime ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.gettime
  :END:

The following steps are performed:

1. Return
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).

* 20.4.4.11Date.prototype.getTimezoneOffset ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.gettimezoneoffset
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return (=t= -
   [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)) /
   [[https://tc39.es/ecma262/#eqn-msPerMinute][msPerMinute]].

* 20.4.4.12Date.prototype.getUTCDate ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutcdate
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=t=).

* 20.4.4.13Date.prototype.getUTCDay ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutcday
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return [[https://tc39.es/ecma262/#sec-week-day][WeekDay]](=t=).

* 20.4.4.14Date.prototype.getUTCFullYear ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutcfullyear
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=).

* 20.4.4.15Date.prototype.getUTCHours ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutchours
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=t=).

* 20.4.4.16Date.prototype.getUTCMilliseconds ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutcmilliseconds
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]](=t=).

* 20.4.4.17Date.prototype.getUTCMinutes ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutcminutes
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=t=).

* 20.4.4.18Date.prototype.getUTCMonth ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutcmonth
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=).

* 20.4.4.19Date.prototype.getUTCSeconds ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.getutcseconds
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=t=).

* 20.4.4.20Date.prototype.setDate ( =date= )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setdate-date
  :END:

The following steps are performed:

1. Let =t= be [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](?
   [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value)).
2. Let =dt= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=).
3. Let =newDate= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]]([[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=),
   =dt=),
   [[https://tc39.es/ecma262/#eqn-TimeWithinDay][TimeWithinDay]](=t=)).
4. Let =u= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=newDate=)).
5. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =u=.
6. Return =u=.

* 20.4.4.21Date.prototype.setFullYear ( =year= [ , =month= [ , =date= ]
] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setfullyear-year-month-date
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, set =t= to +0; otherwise, set =t= to
   [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=).
3. Let =y= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=year=).
4. If =month= is not present, let =m= be
   [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=);
   otherwise, let =m= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=month=).
5. If =date= is not present, let =dt= be
   [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=t=);
   otherwise, let =dt= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=).
6. Let =newDate= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]](=y=,
   =m=, =dt=),
   [[https://tc39.es/ecma262/#eqn-TimeWithinDay][TimeWithinDay]](=t=)).
7. Let =u= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=newDate=)).
8. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =u=.
9. Return =u=.

The "length" property of the =setFullYear= method is 3.

Note

If =month= is not present, this method behaves as if =month= was present
with the value =getMonth()=. If =date= is not present, it behaves as if
=date= was present with the value =getDate()=.

* 20.4.4.22Date.prototype.setHours ( =hour= [ , =min= [ , =sec= [ , =ms=
] ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.sethours-hour-min-sec-ms
  :END:

The following steps are performed:

1. Let =t= be [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](?
   [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value)).
2. Let =h= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=hour=).
3. If =min= is not present, let =m= be
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=t=);
   otherwise, let =m= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=min=).
4. If =sec= is not present, let =s= be
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=t=);
   otherwise, let =s= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=sec=).
5. If =ms= is not present, let =milli= be
   [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]](=t=);
   otherwise, let =milli= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).
6. Let =date= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
   [[https://tc39.es/ecma262/#sec-maketime][MakeTime]](=h=, =m=, =s=,
   =milli=)).
7. Let =u= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=date=)).
8. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =u=.
9. Return =u=.

The "length" property of the =setHours= method is 4.

Note

If =min= is not present, this method behaves as if =min= was present
with the value =getMinutes()=. If =sec= is not present, it behaves as if
=sec= was present with the value =getSeconds()=. If =ms= is not present,
it behaves as if =ms= was present with the value =getMilliseconds()=.

* 20.4.4.23Date.prototype.setMilliseconds ( =ms= )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setmilliseconds-ms
  :END:

The following steps are performed:

1. Let =t= be [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](?
   [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value)).
2. Set =ms= to
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).
3. Let =time= be
   [[https://tc39.es/ecma262/#sec-maketime][MakeTime]]([[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=t=),
   =ms=).
4. Let =u= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]]([[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
   =time=))).
5. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =u=.
6. Return =u=.

* 20.4.4.24Date.prototype.setMinutes ( =min= [ , =sec= [ , =ms= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setminutes-min-sec-ms
  :END:

The following steps are performed:

1. Let =t= be [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](?
   [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value)).
2. Let =m= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=min=).
3. If =sec= is not present, let =s= be
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=t=);
   otherwise, let =s= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=sec=).
4. If =ms= is not present, let =milli= be
   [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]](=t=);
   otherwise, let =milli= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).
5. Let =date= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
   [[https://tc39.es/ecma262/#sec-maketime][MakeTime]]([[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=t=),
   =m=, =s=, =milli=)).
6. Let =u= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=date=)).
7. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =u=.
8. Return =u=.

The "length" property of the =setMinutes= method is 3.

Note

If =sec= is not present, this method behaves as if =sec= was present
with the value =getSeconds()=. If =ms= is not present, this behaves as
if =ms= was present with the value =getMilliseconds()=.

* 20.4.4.25Date.prototype.setMonth ( =month= [ , =date= ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setmonth-month-date
  :END:

The following steps are performed:

1. Let =t= be [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](?
   [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value)).
2. Let =m= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=month=).
3. If =date= is not present, let =dt= be
   [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=t=);
   otherwise, let =dt= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=).
4. Let =newDate= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]]([[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=),
   =m=, =dt=),
   [[https://tc39.es/ecma262/#eqn-TimeWithinDay][TimeWithinDay]](=t=)).
5. Let =u= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=newDate=)).
6. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =u=.
7. Return =u=.

The "length" property of the =setMonth= method is 2.

Note

If =date= is not present, this method behaves as if =date= was present
with the value =getDate()=.

* 20.4.4.26Date.prototype.setSeconds ( =sec= [ , =ms= ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setseconds-sec-ms
  :END:

The following steps are performed:

1. Let =t= be [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](?
   [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value)).
2. Let =s= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=sec=).
3. If =ms= is not present, let =milli= be
   [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]](=t=);
   otherwise, let =milli= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).
4. Let =date= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
   [[https://tc39.es/ecma262/#sec-maketime][MakeTime]]([[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=t=), =s=,
   =milli=)).
5. Let =u= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-utc-t][UTC]](=date=)).
6. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =u=.
7. Return =u=.

The "length" property of the =setSeconds= method is 2.

Note

If =ms= is not present, this method behaves as if =ms= was present with
the value =getMilliseconds()=.

* 20.4.4.27Date.prototype.setTime ( =time= )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.settime-time
  :END:

The following steps are performed:

1. Perform
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. Let =t= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=time=).
3. Let =v= be [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=t=).
4. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =v=.
5. Return =v=.

* 20.4.4.28Date.prototype.setUTCDate ( =date= )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setutcdate-date
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. Let =dt= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=).
3. Let =newDate= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]]([[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=),
   =dt=),
   [[https://tc39.es/ecma262/#eqn-TimeWithinDay][TimeWithinDay]](=t=)).
4. Let =v= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=newDate=).
5. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =v=.
6. Return =v=.

* 20.4.4.29Date.prototype.setUTCFullYear ( =year= [ , =month= [ , =date=
] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setutcfullyear-year-month-date
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, set =t= to +0.
3. Let =y= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=year=).
4. If =month= is not present, let =m= be
   [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=);
   otherwise, let =m= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=month=).
5. If =date= is not present, let =dt= be
   [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=t=);
   otherwise, let =dt= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=).
6. Let =newDate= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]](=y=,
   =m=, =dt=),
   [[https://tc39.es/ecma262/#eqn-TimeWithinDay][TimeWithinDay]](=t=)).
7. Let =v= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=newDate=).
8. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =v=.
9. Return =v=.

The "length" property of the =setUTCFullYear= method is 3.

Note

If =month= is not present, this method behaves as if =month= was present
with the value =getUTCMonth()=. If =date= is not present, it behaves as
if =date= was present with the value =getUTCDate()=.

* 20.4.4.30Date.prototype.setUTCHours ( =hour= [ , =min= [ , =sec= [ ,
=ms= ] ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setutchours-hour-min-sec-ms
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. Let =h= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=hour=).
3. If =min= is not present, let =m= be
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=t=);
   otherwise, let =m= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=min=).
4. If =sec= is not present, let =s= be
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=t=);
   otherwise, let =s= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=sec=).
5. If =ms= is not present, let =milli= be
   [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]](=t=);
   otherwise, let =milli= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).
6. Let =newDate= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
   [[https://tc39.es/ecma262/#sec-maketime][MakeTime]](=h=, =m=, =s=,
   =milli=)).
7. Let =v= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=newDate=).
8. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =v=.
9. Return =v=.

The "length" property of the =setUTCHours= method is 4.

Note

If =min= is not present, this method behaves as if =min= was present
with the value =getUTCMinutes()=. If =sec= is not present, it behaves as
if =sec= was present with the value =getUTCSeconds()=. If =ms= is not
present, it behaves as if =ms= was present with the value
=getUTCMilliseconds()=.

* 20.4.4.31Date.prototype.setUTCMilliseconds ( =ms= )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setutcmilliseconds-ms
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. Let =milli= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).
3. Let =time= be
   [[https://tc39.es/ecma262/#sec-maketime][MakeTime]]([[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=t=),
   =milli=).
4. Let =v= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]([[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
   =time=)).
5. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =v=.
6. Return =v=.

* 20.4.4.32Date.prototype.setUTCMinutes ( =min= [ , =sec= [ , =ms= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setutcminutes-min-sec-ms
  :END:

The following steps are performed:

1.  Let =t= be
    ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
    value).
2.  Let =m= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=min=).
3.  If =sec= is not present, let =s= be
    [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=t=).
4.  Else,

    1. Let =s= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=sec=).

5.  If =ms= is not present, let =milli= be
    [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]](=t=).
6.  Else,

    1. Let =milli= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).

7.  Let =date= be
    [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
    [[https://tc39.es/ecma262/#sec-maketime][MakeTime]]([[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=t=),
    =m=, =s=, =milli=)).
8.  Let =v= be
    [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=date=).
9.  Set the [[DateValue]] internal slot of
    [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
    =v=.
10. Return =v=.

The "length" property of the =setUTCMinutes= method is 3.

Note

If =sec= is not present, this method behaves as if =sec= was present
with the value =getUTCSeconds()=. If =ms= is not present, it function
behaves as if =ms= was present with the value return by
=getUTCMilliseconds()=.

* 20.4.4.33Date.prototype.setUTCMonth ( =month= [ , =date= ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setutcmonth-month-date
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. Let =m= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=month=).
3. If =date= is not present, let =dt= be
   [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=t=).
4. Else,

   1. Let =dt= be
      ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=date=).

5. Let =newDate= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#sec-makeday][MakeDay]]([[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=t=),
   =m=, =dt=),
   [[https://tc39.es/ecma262/#eqn-TimeWithinDay][TimeWithinDay]](=t=)).
6. Let =v= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=newDate=).
7. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =v=.
8. Return =v=.

The "length" property of the =setUTCMonth= method is 2.

Note

If =date= is not present, this method behaves as if =date= was present
with the value =getUTCDate()=.

* 20.4.4.34Date.prototype.setUTCSeconds ( =sec= [ , =ms= ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.setutcseconds-sec-ms
  :END:

The following steps are performed:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. Let =s= be
   ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=sec=).
3. If =ms= is not present, let =milli= be
   [[https://tc39.es/ecma262/#eqn-msFromTime][msFromTime]](=t=).
4. Else,

   1. Let =milli= be
      ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=ms=).

5. Let =date= be
   [[https://tc39.es/ecma262/#sec-makedate][MakeDate]]([[https://tc39.es/ecma262/#eqn-Day][Day]](=t=),
   [[https://tc39.es/ecma262/#sec-maketime][MakeTime]]([[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=t=),
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=t=), =s=,
   =milli=)).
6. Let =v= be
   [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=date=).
7. Set the [[DateValue]] internal slot of
   [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
   =v=.
8. Return =v=.

The "length" property of the =setUTCSeconds= method is 2.

Note

If =ms= is not present, this method behaves as if =ms= was present with
the value =getUTCMilliseconds()=.

* 20.4.4.35Date.prototype.toDateString ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.todatestring
  :END:

The following steps are performed:

1. Let =O= be [[https://tc39.es/ecma262/#this-Date-object][this Date
   object]].
2. Let =tv= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](=O=).
3. If =tv= is NaN, return "Invalid Date".
4. Let =t= be
   [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=tv=).
5. Return [[https://tc39.es/ecma262/#sec-datestring][DateString]](=t=).

* 20.4.4.36Date.prototype.toISOString ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.toisostring
  :END:

If [[https://tc39.es/ecma262/#this-time-value][this time value]] is not
a finite Number or if it corresponds with a year that cannot be
represented in the
[[https://tc39.es/ecma262/#sec-date-time-string-format][Date Time String
Format]], this function throws a RangeError exception. Otherwise, it
returns a String representation of
[[https://tc39.es/ecma262/#this-time-value][this time value]] in that
format on the UTC time scale, including all format elements and the UTC
offset representation "Z".

* 20.4.4.37Date.prototype.toJSON ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.tojson-key
  :END:

This function provides a String representation of a Date object for use
by =JSON.stringify=
([[https://tc39.es/ecma262/#sec-json.stringify][24.5.2]]).

When the =toJSON= method is called with argument =key=, the following
steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =tv= be
   ? [[https://tc39.es/ecma262/#sec-toprimitive][ToPrimitive]](=O=, hint
   Number).
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=tv=)
   is Number and =tv= is not finite, return null.
4. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=O=,
   "toISOString").

Note 1

The argument is ignored.

Note 2

The =toJSON= function is intentionally generic; it does not require that
its this value be a Date object. Therefore, it can be transferred to
other kinds of objects for use as a method. However, it does require
that any such object have a =toISOString= method.

* 20.4.4.38Date.prototype.toLocaleDateString ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.tolocaledatestring-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
=Date.prototype.toLocaleDateString= method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the =toLocaleDateString=
method is used.

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the “date”
portion of the Date in the current time zone in a convenient,
human-readable form that corresponds to the conventions of the host
environment's current locale.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

* 20.4.4.39Date.prototype.toLocaleString ( [ =reserved1= [ , =reserved2=
] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.tolocalestring-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
=Date.prototype.toLocaleString= method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the =toLocaleString= method
is used.

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the Date in the
current time zone in a convenient, human-readable form that corresponds
to the conventions of the host environment's current locale.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

* 20.4.4.40Date.prototype.toLocaleTimeString ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.tolocaletimestring-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
=Date.prototype.toLocaleTimeString= method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the =toLocaleTimeString=
method is used.

This function returns a String value. The contents of the String are
implementation-dependent, but are intended to represent the “time”
portion of the Date in the current time zone in a convenient,
human-readable form that corresponds to the conventions of the host
environment's current locale.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

* 20.4.4.41Date.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.tostring
  :END:

The following steps are performed:

1. Let =tv= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. Return
   [[https://tc39.es/ecma262/#sec-todatestring][ToDateString]](=tv=).

Note 1

For any Date object =d= whose milliseconds amount is zero, the result of
=Date.parse(d.toString())= is equal to =d.valueOf()=. See
[[https://tc39.es/ecma262/#sec-date.parse][20.4.3.2]].

Note 2

The =toString= function is not generic; it throws a TypeError exception
if its this value is not a Date object. Therefore, it cannot be
transferred to other kinds of objects for use as a method.

* 20.4.4.41.1Runtime Semantics: TimeString ( =tv= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-timestring-tv
  :END:

The following steps are performed:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=tv=)
   is Number.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =tv= is not NaN.
3. Let =hour= be the String representation of
   [[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]](=tv=),
   formatted as a two-digit decimal number, padded to the left with a
   zero if necessary.
4. Let =minute= be the String representation of
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]](=tv=),
   formatted as a two-digit decimal number, padded to the left with a
   zero if necessary.
5. Let =second= be the String representation of
   [[https://tc39.es/ecma262/#eqn-SecFromTime][SecFromTime]](=tv=),
   formatted as a two-digit decimal number, padded to the left with a
   zero if necessary.
6. Return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =hour=, ":", =minute=, ":", =second=, the code unit 0x0020
   (SPACE), and "GMT".

* 20.4.4.41.2Runtime Semantics: DateString ( =tv= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-datestring-tv
  :END:

The following steps are performed:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=tv=)
    is Number.
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =tv= is not NaN.
3.  Let =weekday= be the Name of the entry in
    [[https://tc39.es/ecma262/#sec-todatestring-day-names][Table 51]]
    with the Number
    [[https://tc39.es/ecma262/#sec-week-day][WeekDay]](=tv=).
4.  Let =month= be the Name of the entry in
    [[https://tc39.es/ecma262/#sec-todatestring-month-names][Table 52]]
    with the Number
    [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=tv=).
5.  Let =day= be the String representation of
    [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=tv=),
    formatted as a two-digit decimal number, padded to the left with a
    zero if necessary.
6.  Let =yv= be
    [[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=tv=).
7.  If =yv= ≥ 0, let =yearSign= be the empty string; otherwise, let
    =yearSign= be "-".
8.  Let =year= be the String representation of
    [[https://tc39.es/ecma262/#eqn-abs][abs]](=yv=), formatted as a
    decimal number.
9.  Let =paddedYear= be
    ! [[https://tc39.es/ecma262/#sec-stringpad][StringPad]](=year=, 4,
    "0", start).
10. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =weekday=, the code unit 0x0020 (SPACE), =month=, the code unit
    0x0020 (SPACE), =day=, the code unit 0x0020 (SPACE), =yearSign=, and
    =paddedYear=.

Table 51: Names of days of the week

| Number   | Name    |
|----------+---------|
| 0        | "Sun"   |
| 1        | "Mon"   |
| 2        | "Tue"   |
| 3        | "Wed"   |
| 4        | "Thu"   |
| 5        | "Fri"   |
| 6        | "Sat"   |

Table 52: Names of months of the year

| Number   | Name    |
|----------+---------|
| 0        | "Jan"   |
| 1        | "Feb"   |
| 2        | "Mar"   |
| 3        | "Apr"   |
| 4        | "May"   |
| 5        | "Jun"   |
| 6        | "Jul"   |
| 7        | "Aug"   |
| 8        | "Sep"   |
| 9        | "Oct"   |
| 10       | "Nov"   |
| 11       | "Dec"   |

* 20.4.4.41.3Runtime Semantics: TimeZoneString ( =tv= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-timezonestring-tv
  :END:

The following steps are performed:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=tv=)
   is Number.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =tv= is not NaN.
3. Let =offset= be
   [[https://tc39.es/ecma262/#sec-local-time-zone-adjustment][LocalTZA]](=tv=,
   true).
4. If =offset= ≥ 0, let =offsetSign= be "+"; otherwise, let =offsetSign=
   be "-".
5. Let =offsetMin= be the String representation of
   [[https://tc39.es/ecma262/#eqn-MinFromTime][MinFromTime]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=offset=)),
   formatted as a two-digit decimal number, padded to the left with a
   zero if necessary.
6. Let =offsetHour= be the String representation of
   [[https://tc39.es/ecma262/#eqn-HourFromTime][HourFromTime]]([[https://tc39.es/ecma262/#eqn-abs][abs]](=offset=)),
   formatted as a two-digit decimal number, padded to the left with a
   zero if necessary.
7. Let =tzName= be an implementation-defined string that is either the
   empty string or the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of the code unit 0x0020 (SPACE), the code unit 0x0028 (LEFT
   PARENTHESIS), an implementation-dependent timezone name, and the code
   unit 0x0029 (RIGHT PARENTHESIS).
8. Return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =offsetSign=, =offsetHour=, =offsetMin=, and =tzName=.

* 20.4.4.41.4Runtime Semantics: ToDateString ( =tv= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-todatestring-tv
  :END:

The following steps are performed:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=tv=)
   is Number.
2. If =tv= is NaN, return "Invalid Date".
3. Let =t= be
   [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=tv=).
4. Return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of [[https://tc39.es/ecma262/#sec-datestring][DateString]](=t=), the
   code unit 0x0020 (SPACE),
   [[https://tc39.es/ecma262/#sec-timestring][TimeString]](=t=), and
   [[https://tc39.es/ecma262/#sec-timezoneestring][TimeZoneString]](=tv=).

* 20.4.4.42Date.prototype.toTimeString ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.totimestring
  :END:

The following steps are performed:

1. Let =O= be [[https://tc39.es/ecma262/#this-Date-object][this Date
   object]].
2. Let =tv= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](=O=).
3. If =tv= is NaN, return "Invalid Date".
4. Let =t= be
   [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=tv=).
5. Return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of [[https://tc39.es/ecma262/#sec-timestring][TimeString]](=t=) and
   [[https://tc39.es/ecma262/#sec-timezoneestring][TimeZoneString]](=tv=).

* 20.4.4.43Date.prototype.toUTCString ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.toutcstring
  :END:

The =toUTCString= method returns a String value representing the
instance in time corresponding to
[[https://tc39.es/ecma262/#this-time-value][this time value]]. The
format of the String is based upon "HTTP-date" from RFC 7231,
generalized to support the full range of times supported by ECMAScript
Date objects. It performs the following steps:

1.  Let =O= be [[https://tc39.es/ecma262/#this-Date-object][this Date
    object]].
2.  Let =tv= be
    ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](=O=).
3.  If =tv= is NaN, return "Invalid Date".
4.  Let =weekday= be the Name of the entry in
    [[https://tc39.es/ecma262/#sec-todatestring-day-names][Table 51]]
    with the Number
    [[https://tc39.es/ecma262/#sec-week-day][WeekDay]](=tv=).
5.  Let =month= be the Name of the entry in
    [[https://tc39.es/ecma262/#sec-todatestring-month-names][Table 52]]
    with the Number
    [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=tv=).
6.  Let =day= be the String representation of
    [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=tv=),
    formatted as a two-digit decimal number, padded to the left with a
    zero if necessary.
7.  Let =yv= be
    [[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]](=tv=).
8.  If =yv= ≥ 0, let =yearSign= be the empty string; otherwise, let
    =yearSign= be "-".
9.  Let =year= be the String representation of
    [[https://tc39.es/ecma262/#eqn-abs][abs]](=yv=), formatted as a
    decimal number.
10. Let =paddedYear= be
    ! [[https://tc39.es/ecma262/#sec-stringpad][StringPad]](=year=, 4,
    "0", start).
11. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =weekday=, ",", the code unit 0x0020 (SPACE), =day=, the code
    unit 0x0020 (SPACE), =month=, the code unit 0x0020 (SPACE),
    =yearSign=, =paddedYear=, the code unit 0x0020 (SPACE), and
    [[https://tc39.es/ecma262/#sec-timestring][TimeString]](=tv=).

* 20.4.4.44Date.prototype.valueOf ( )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype.valueof
  :END:

The following steps are performed:

1. Return
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).

* 20.4.4.45Date.prototype [ @@toPrimitive ] ( =hint= )
  :PROPERTIES:
  :CUSTOM_ID: date.prototype-toprimitive-hint
  :END:

This function is called by ECMAScript language operators to convert a
Date object to a primitive value. The allowed values for =hint= are
"default", "number", and "string". Date objects, are unique among
built-in ECMAScript object in that they treat "default" as being
equivalent to "string", All other built-in ECMAScript objects treat
"default" as being equivalent to "number".

When the =@@toPrimitive= method is called with argument =hint=, the
following steps are taken:

1. Let =O= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, throw a TypeError exception.
3. If =hint= is the String value "string" or the String value "default",
   then

   1. Let =tryFirst= be "string".

4. Else if =hint= is the String value "number", then

   1. Let =tryFirst= be "number".

5. Else, throw a TypeError exception.
6. Return
   ? [[https://tc39.es/ecma262/#sec-ordinarytoprimitive][OrdinaryToPrimitive]](=O=,
   =tryFirst=).

The value of the "name" property of this function is
"[Symbol.toPrimitive]".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 20.4.5Properties of Date Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-date-instances
  :END:

Date instances are ordinary objects that inherit properties from the
Date prototype object. Date instances also have a [[DateValue]] internal
slot. The [[DateValue]] internal slot is the
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
represented by [[https://tc39.es/ecma262/#this-Date-object][this Date
object]].

* 21Text Processing
  :PROPERTIES:
  :CUSTOM_ID: text-processing
  :END:

* 21.1String Objects
  :PROPERTIES:
  :CUSTOM_ID: string-objects
  :END:

* 21.1.1The String Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-string-constructor
  :END:

The String [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %String%.
- is the initial value of the "String" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new String object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- performs a type conversion when called as a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =String= behaviour must include a
  =super= call to the =String=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with a [[StringData]] internal slot.

* 21.1.1.1String ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: string-value-1
  :END:

When =String= is called with argument =value=, the following steps are
taken:

1. If =value= is not present, let =s= be the empty String.
2. Else,

   1. If NewTarget is undefined and
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
      is Symbol, return
      [[https://tc39.es/ecma262/#sec-symboldescriptivestring][SymbolDescriptiveString]](=value=).
   2. Let =s= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=value=).

3. If NewTarget is undefined, return =s=.
4. Return
   ! [[https://tc39.es/ecma262/#sec-stringcreate][StringCreate]](=s=,
   ? [[https://tc39.es/ecma262/#sec-getprototypefromconstructor][GetPrototypeFromConstructor]](NewTarget,
   "%String.prototype%")).

* 21.1.2Properties of the String Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-string-constructor
  :END:

The String [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 21.1.2.1String.fromCharCode ( ...=codeUnits= )
  :PROPERTIES:
  :CUSTOM_ID: string.fromcharcode-...codeunits
  :END:

The =String.fromCharCode= function may be called with any number of
arguments which form the rest parameter =codeUnits=. The following steps
are taken:

1. Let =codeUnits= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   containing the arguments passed to this function.
2. Let =length= be the number of elements in =codeUnits=.
3. Let =elements= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. Let =nextIndex= be 0.
5. Repeat, while =nextIndex= < =length=

   1. Let =next= be =codeUnits=[=nextIndex=].
   2. Let =nextCU= be
      ? [[https://tc39.es/ecma262/#sec-touint16][ToUint16]](=next=).
   3. Append =nextCU= to the end of =elements=.
   4. Set =nextIndex= to =nextIndex= + 1.

6. Return the String value whose code units are, in order, the elements
   in the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   =elements=. If =length= is 0, the empty string is returned.

The "length" property of the =fromCharCode= function is 1.

* 21.1.2.2String.fromCodePoint ( ...=codePoints= )
  :PROPERTIES:
  :CUSTOM_ID: string.fromcodepoint-...codepoints
  :END:

The =String.fromCodePoint= function may be called with any number of
arguments which form the rest parameter =codePoints=. The following
steps are taken:

1. Let =codePoints= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   containing the arguments passed to this function.
2. Let =length= be the number of elements in =codePoints=.
3. Let =elements= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. Let =nextIndex= be 0.
5. Repeat, while =nextIndex= < =length=

   1. Let =next= be =codePoints=[=nextIndex=].
   2. Let =nextCP= be
      ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=next=).
   3. If
      ! [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=nextCP=)
      is false, throw a RangeError exception.
   4. If =nextCP= < 0 or =nextCP= > 0x10FFFF, throw a RangeError
      exception.
   5. Append the elements of the
      [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
      =nextCP= to the end of =elements=.
   6. Set =nextIndex= to =nextIndex= + 1.

6. Return the String value whose code units are, in order, the elements
   in the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   =elements=. If =length= is 0, the empty string is returned.

The "length" property of the =fromCodePoint= function is 1.

* 21.1.2.3String.prototype
  :PROPERTIES:
  :CUSTOM_ID: string.prototype
  :END:

The initial value of =String.prototype= is %String.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 21.1.2.4String.raw ( =template=, ...=substitutions= )
  :PROPERTIES:
  :CUSTOM_ID: string.raw-template-...substitutions
  :END:

The =String.raw= function may be called with a variable number of
arguments. The first argument is =template= and the remainder of the
arguments form the
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
=substitutions=. The following steps are taken:

1. Let =substitutions= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   consisting of all of the arguments passed to this function, starting
   with the second argument. If fewer than two arguments were passed,
   the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   is empty.
2. Let =numberOfSubstitutions= be the number of elements in
   =substitutions=.
3. Let =cooked= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=template=).
4. Let =raw= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](?
   [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=cooked=, "raw")).
5. Let =literalSegments= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=raw=).
6. If =literalSegments= ≤ 0, return the empty string.
7. Let =stringElements= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
8. Let =nextIndex= be 0.
9. Repeat,

   1. Let =nextKey= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=nextIndex=).
   2. Let =nextSeg= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
      [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=raw=, =nextKey=)).
   3. Append in order the code unit elements of =nextSeg= to the end of
      =stringElements=.
   4. If =nextIndex= + 1 = =literalSegments=, then

      1. Return the String value whose code units are, in order, the
         elements in the
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         =stringElements=. If =stringElements= has no elements, the
         empty string is returned.

   5. If =nextIndex= < =numberOfSubstitutions=, let =next= be
      =substitutions=[=nextIndex=].
   6. Else, let =next= be the empty String.
   7. Let =nextSub= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=next=).
   8. Append in order the code unit elements of =nextSub= to the end of
      =stringElements=.
   9. Set =nextIndex= to =nextIndex= + 1.

Note

String.raw is intended for use as a tag function of a Tagged Template
([[https://tc39.es/ecma262/#sec-tagged-templates][12.3.8]]). When called
as such, the first argument will be a well formed template object and
the rest parameter will contain the substitution values.

* 21.1.3Properties of the String Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-string-prototype-object
  :END:

The String prototype object:

- is the intrinsic object %StringPrototype%.
- is a String [[https://tc39.es/ecma262/#exotic-object][exotic object]]
  and has the internal methods specified for such objects.
- has a [[StringData]] internal slot whose value is the empty String.
- has a "length" property whose initial value is 0 and whose attributes
  are { [[Writable]]: false, [[Enumerable]]: false, [[Configurable]]:
  false }.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

Unless explicitly stated otherwise, the methods of the String prototype
object defined below are not generic and the this value passed to them
must be either a String value or an object that has a [[StringData]]
internal slot that has been initialized to a String value.

The abstract operation thisStringValue(=value=) performs the following
steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is String, return =value=.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is Object and =value= has a [[StringData]] internal slot, then

   1. Let =s= be =value=.[[StringData]].
   2. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=s=)
      is String.
   3. Return =s=.

3. Throw a TypeError exception.

* 21.1.3.1String.prototype.charAt ( =pos= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.charat-pos
  :END:

Note 1

Returns a single element String containing the code unit at index =pos=
within the String value resulting from converting this object to a
String. If there is no element at that index, the result is the empty
String. The result is a String value, not a String object.

If =pos= is a value of Number type that is an
[[https://tc39.es/ecma262/#integer][integer]], then the result of
=x.charAt(pos)= is equal to the result of =x.substring(pos, pos + 1)=.

When the =charAt= method is called with one argument =pos=, the
following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =position= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=pos=).
4. Let =size= be the length of =S=.
5. If =position= < 0 or =position= ≥ =size=, return the empty String.
6. Return the String value of length 1, containing one code unit from
   =S=, namely the code unit at index =position=.

Note 2

The =charAt= function is intentionally generic; it does not require that
its this value be a String object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.2String.prototype.charCodeAt ( =pos= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.charcodeat-pos
  :END:

Note 1

Returns a Number (a nonnegative
[[https://tc39.es/ecma262/#integer][integer]] less than 2^{16}) that is
the numeric value of the code unit at index =pos= within the String
resulting from converting this object to a String. If there is no
element at that index, the result is NaN.

When the =charCodeAt= method is called with one argument =pos=, the
following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =position= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=pos=).
4. Let =size= be the length of =S=.
5. If =position= < 0 or =position= ≥ =size=, return NaN.
6. Return a value of Number type, whose value is the numeric value of
   the code unit at index =position= within the String =S=.

Note 2

The =charCodeAt= function is intentionally generic; it does not require
that its this value be a String object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.3String.prototype.codePointAt ( =pos= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.codepointat-pos
  :END:

Note 1

Returns a nonnegative [[https://tc39.es/ecma262/#integer][integer]]
Number less than or equal to 0x10FFFF that is the code point value of
the UTF-16 encoded code point
([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]])
starting at the string element at index =pos= within the String
resulting from converting this object to a String. If there is no
element at that index, the result is undefined. If a valid UTF-16
[[https://tc39.es/ecma262/#surrogate-pair][surrogate pair]] does not
begin at =pos=, the result is the code unit at =pos=.

When the =codePointAt= method is called with one argument =pos=, the
following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =position= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=pos=).
4. Let =size= be the length of =S=.
5. If =position= < 0 or =position= ≥ =size=, return undefined.
6. Let =cp= be
   ! [[https://tc39.es/ecma262/#sec-codepointat][CodePointAt]](=S=,
   =position=).
7. Return =cp=.[[CodePoint]].

Note 2

The =codePointAt= function is intentionally generic; it does not require
that its this value be a String object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.4String.prototype.concat ( ...=args= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.concat-...args
  :END:

Note 1

When the =concat= method is called it returns the String value
consisting of the code units of the this object (converted to a String)
followed by the code units of each of the arguments converted to a
String. The result is a String value, not a String object.

When the =concat= method is called with zero or more arguments, the
following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =args= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   whose elements are the arguments passed to this function.
4. Let =R= be =S=.
5. Repeat, while =args= is not empty

   1. Remove the first element from =args= and let =next= be the value
      of that element.
   2. Let =nextString= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=next=).
   3. Set =R= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of the previous value of =R= and =nextString=.

6. Return =R=.

The "length" property of the =concat= method is 1.

Note 2

The =concat= function is intentionally generic; it does not require that
its this value be a String object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.5String.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.constructor
  :END:

The initial value of =String.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-string-constructor][%String%]].

* 21.1.3.6String.prototype.endsWith ( =searchString= [ , =endPosition= ]
)
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.endswith-searchstring-endposition
  :END:

The following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
    value).
2.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3.  Let =isRegExp= be
    ? [[https://tc39.es/ecma262/#sec-isregexp][IsRegExp]](=searchString=).
4.  If =isRegExp= is true, throw a TypeError exception.
5.  Let =searchStr= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=searchString=).
6.  Let =len= be the length of =S=.
7.  If =endPosition= is undefined, let =pos= be =len=; else let =pos= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=endPosition=).
8.  Let =end= be
    [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=pos=,
    0), =len=).
9.  Let =searchLength= be the length of =searchStr=.
10. Let =start= be =end= - =searchLength=.
11. If =start= is less than 0, return false.
12. If the sequence of code units of =S= starting at =start= of length
    =searchLength= is the same as the full code unit sequence of
    =searchStr=, return true.
13. Otherwise, return false.

Note 1

Returns true if the sequence of code units of =searchString= converted
to a String is the same as the corresponding code units of this object
(converted to a String) starting at =endPosition= - length(this).
Otherwise returns false.

Note 2

Throwing an exception if the first argument is a RegExp is specified in
order to allow future editions to define extensions that allow such
argument values.

Note 3

The =endsWith= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.7String.prototype.includes ( =searchString= [ , =position= ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.includes-searchstring-position
  :END:

The =includes= method takes two arguments, =searchString= and
=position=, and performs the following steps:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
    value).
2.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3.  Let =isRegExp= be
    ? [[https://tc39.es/ecma262/#sec-isregexp][IsRegExp]](=searchString=).
4.  If =isRegExp= is true, throw a TypeError exception.
5.  Let =searchStr= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=searchString=).
6.  Let =pos= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=position=).
7.  [[https://tc39.es/ecma262/#assert][Assert]]: If =position= is
    undefined, then =pos= is 0.
8.  Let =len= be the length of =S=.
9.  Let =start= be
    [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=pos=,
    0), =len=).
10. Let =searchLen= be the length of =searchStr=.
11. If there exists any [[https://tc39.es/ecma262/#integer][integer]]
    =k= not smaller than =start= such that =k= + =searchLen= is not
    greater than =len=, and for all nonnegative integers =j= less than
    =searchLen=, the code unit at index =k= + =j= within =S= is the same
    as the code unit at index =j= within =searchStr=, return true; but
    if there is no such [[https://tc39.es/ecma262/#integer][integer]]
    =k=, return false.

Note 1

If =searchString= appears as a substring of the result of converting
this object to a String, at one or more indices that are greater than or
equal to =position=, return true; otherwise, returns false. If
=position= is undefined, 0 is assumed, so as to search all of the
String.

Note 2

Throwing an exception if the first argument is a RegExp is specified in
order to allow future editions to define extensions that allow such
argument values.

Note 3

The =includes= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.8String.prototype.indexOf ( =searchString= [ , =position= ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.indexof-searchstring-position
  :END:

Note 1

If =searchString= appears as a substring of the result of converting
this object to a String, at one or more indices that are greater than or
equal to =position=, then the smallest such index is returned;
otherwise, -1 is returned. If =position= is undefined, 0 is assumed, so
as to search all of the String.

The =indexOf= method takes two arguments, =searchString= and =position=,
and performs the following steps:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =searchStr= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=searchString=).
4. Let =pos= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=position=).
5. [[https://tc39.es/ecma262/#assert][Assert]]: If =position= is
   undefined, then =pos= is 0.
6. Let =len= be the length of =S=.
7. Let =start= be
   [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=pos=,
   0), =len=).
8. Let =searchLen= be the length of =searchStr=.
9. Return the smallest possible
   [[https://tc39.es/ecma262/#integer][integer]] =k= not smaller than
   =start= such that =k= + =searchLen= is not greater than =len=, and
   for all nonnegative integers =j= less than =searchLen=, the code unit
   at index =k= + =j= within =S= is the same as the code unit at index
   =j= within =searchStr=; but if there is no such
   [[https://tc39.es/ecma262/#integer][integer]] =k=, return the value
   -1.

Note 2

The =indexOf= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.9String.prototype.lastIndexOf ( =searchString= [ , =position= ]
)
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.lastindexof-searchstring-position
  :END:

Note 1

If =searchString= appears as a substring of the result of converting
this object to a String at one or more indices that are smaller than or
equal to =position=, then the greatest such index is returned;
otherwise, -1 is returned. If =position= is undefined, the length of the
String value is assumed, so as to search all of the String.

The =lastIndexOf= method takes two arguments, =searchString= and
=position=, and performs the following steps:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
    value).
2.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3.  Let =searchStr= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=searchString=).
4.  Let =numPos= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=position=).
5.  [[https://tc39.es/ecma262/#assert][Assert]]: If =position= is
    undefined, then =numPos= is NaN.
6.  If =numPos= is NaN, let =pos= be +∞; otherwise, let =pos= be
    ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=numPos=).
7.  Let =len= be the length of =S=.
8.  Let =start= be
    [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=pos=,
    0), =len=).
9.  Let =searchLen= be the length of =searchStr=.
10. Return the largest possible nonnegative
    [[https://tc39.es/ecma262/#integer][integer]] =k= not larger than
    =start= such that =k= + =searchLen= is not greater than =len=, and
    for all nonnegative integers =j= less than =searchLen=, the code
    unit at index =k= + =j= within =S= is the same as the code unit at
    index =j= within =searchStr=; but if there is no such
    [[https://tc39.es/ecma262/#integer][integer]] =k=, return the value
    -1.

Note 2

The =lastIndexOf= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.10String.prototype.localeCompare ( =that= [ , =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.localecompare-that-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the =localeCompare= method as
specified in the ECMA-402 specification. If an ECMAScript implementation
does not include the ECMA-402 API the following specification of the
=localeCompare= method is used.

When the =localeCompare= method is called with argument =that=, it
returns a Number other than NaN that represents the result of a
locale-sensitive String comparison of the this value (converted to a
String) with =that= (converted to a String). The two Strings are =S= and
=That=. The two Strings are compared in an implementation-defined
fashion. The result is intended to order String values in the sort order
specified by a host default locale, and will be negative, zero, or
positive, depending on whether =S= comes before =That= in the sort
order, the Strings are equal, or =S= comes after =That= in the sort
order, respectively.

Before performing the comparisons, the following steps are performed to
prepare the Strings:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =That= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=that=).

The meaning of the optional second and third parameters to this method
are defined in the ECMA-402 specification; implementations that do not
include ECMA-402 support must not assign any other interpretation to
those parameter positions.

The =localeCompare= method, if considered as a function of two arguments
this and =that=, is a consistent comparison function (as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.sort][22.1.3.27]]) on the
set of all Strings.

The actual return values are implementation-defined to permit
implementers to encode additional information in the value, but the
function is required to define a total ordering on all Strings. This
function must treat Strings that are canonically equivalent according to
the Unicode standard as identical and must return =0= when comparing
Strings that are considered canonically equivalent.

Note 1

The =localeCompare= method itself is not directly suitable as an
argument to =Array.prototype.sort= because the latter requires a
function of two arguments.

Note 2

This function is intended to rely on whatever language-sensitive
comparison functionality is available to the ECMAScript environment from
the host environment, and to compare according to the rules of the host
environment's current locale. However, regardless of the host provided
comparison capabilities, this function must treat Strings that are
canonically equivalent according to the Unicode standard as identical.
It is recommended that this function should not honour Unicode
compatibility equivalences or decompositions. For a definition and
discussion of canonical equivalence see the Unicode Standard, chapters 2
and 3, as well as Unicode Standard Annex #15, Unicode Normalization
Forms ([[https://unicode.org/reports/tr15/]]) and Unicode Technical Note
#5, Canonical Equivalence in Applications
([[https://unicode.org/notes/tn5/][https://www.unicode.org/notes/tn5/]]).
Also see Unicode Technical Standard #10, Unicode Collation Algorithm
([[https://unicode.org/reports/tr10/]]).

Note 3

The =localeCompare= function is intentionally generic; it does not
require that its this value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

* 21.1.3.11String.prototype.match ( =regexp= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.match-regexp
  :END:

When the =match= method is called with argument =regexp=, the following
steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. If =regexp= is neither undefined nor null, then

   1. Let =matcher= be
      ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=regexp=,
      @@match).
   2. If =matcher= is not undefined, then

      1. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=matcher=,
         =regexp=, « =O= »).

3. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
4. Let =rx= be
   ? [[https://tc39.es/ecma262/#sec-regexpcreate][RegExpCreate]](=regexp=,
   undefined).
5. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=rx=,
   @@match, « =S= »).

Note

The =match= function is intentionally generic; it does not require that
its this value be a String object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.12String.prototype.matchAll ( =regexp= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.matchall-regexp
  :END:

Performs a regular expression match of the String representing the this
value against =regexp= and returns an iterator. Each iteration result's
value is an Array object containing the results of the match, or null if
the String did not match.

When the =matchAll= method is called, the following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. If =regexp= is neither undefined nor null, then

   1. Let =isRegExp= be
      ? [[https://tc39.es/ecma262/#sec-isregexp][IsRegExp]](=regexp=).
   2. If =isRegExp= is true, then

      1. Let =flags= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=regexp=,
         "flags").
      2. Perform
         ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=flags=).
      3. If
         ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=flags=)
         does not contain "g", throw a TypeError exception.

   3. Let =matcher= be
      ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=regexp=,
      @@matchAll).
   4. If =matcher= is not undefined, then

      1. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=matcher=,
         =regexp=, « =O= »).

3. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
4. Let =rx= be
   ? [[https://tc39.es/ecma262/#sec-regexpcreate][RegExpCreate]](=regexp=,
   "g").
5. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=rx=,
   @@matchAll, « =S= »).

Note 1

The =matchAll= function is intentionally generic, it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

Note 2

Similarly to =String.prototype.split=, =String.prototype.matchAll= is
designed to typically act without mutating its inputs.

* 21.1.3.13String.prototype.normalize ( [ =form= ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.normalize-form
  :END:

When the =normalize= method is called with one argument =form=, the
following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. If =form= is undefined, let =f= be "NFC".
4. Else, let =f= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=form=).
5. If =f= is not one of "NFC", "NFD", "NFKC", or "NFKD", throw a
   RangeError exception.
6. Let =ns= be the String value that is the result of normalizing =S=
   into the normalization form named by =f= as specified in
   [[https://unicode.org/reports/tr15/]].
7. Return =ns=.

Note

The =normalize= function is intentionally generic; it does not require
that its this value be a String object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.14String.prototype.padEnd ( =maxLength= [ , =fillString= ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.padend-maxlength-fillstring
  :END:

When the =padEnd= method is called, the following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Return ? [[https://tc39.es/ecma262/#sec-stringpad][StringPad]](=O=,
   =maxLength=, =fillString=, end).

* 21.1.3.15String.prototype.padStart ( =maxLength= [ , =fillString= ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.padstart-maxlength-fillstring
  :END:

When the =padStart= method is called, the following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Return ? [[https://tc39.es/ecma262/#sec-stringpad][StringPad]](=O=,
   =maxLength=, =fillString=, start).

* 21.1.3.15.1Runtime Semantics: StringPad ( =O=, =maxLength=,
=fillString=, =placement= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-stringpad-o-maxlength-fillstring-placement
  :END:

When the abstract operation StringPad is called with arguments =O=,
=maxLength=, =fillString=, and =placement=, the following steps are
taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =placement= is start or
    end.
2.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3.  Let =intMaxLength= be
    ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](=maxLength=).
4.  Let =stringLength= be the length of =S=.
5.  If =intMaxLength= is not greater than =stringLength=, return =S=.
6.  If =fillString= is undefined, let =filler= be the String value
    consisting solely of the code unit 0x0020 (SPACE).
7.  Else, let =filler= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=fillString=).
8.  If =filler= is the empty String, return =S=.
9.  Let =fillLen= be =intMaxLength= - =stringLength=.
10. Let =truncatedStringFiller= be the String value consisting of
    repeated concatenations of =filler= truncated to length =fillLen=.
11. If =placement= is start, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =truncatedStringFiller= and =S=.
12. Else, return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =S= and =truncatedStringFiller=.

Note 1

The argument =maxLength= will be clamped such that it can be no smaller
than the length of =S=.

Note 2

The argument =fillString= defaults to " " (the String value consisting
of the code unit 0x0020 SPACE).

* 21.1.3.16String.prototype.repeat ( =count= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.repeat-count
  :END:

The following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =n= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=count=).
4. If =n= < 0, throw a RangeError exception.
5. If =n= is +∞, throw a RangeError exception.
6. If =n= is 0, return the empty String.
7. Return the String value that is made from =n= copies of =S= appended
   together.

Note 1

This method creates the String value consisting of the code units of the
this object (converted to String) repeated =count= times.

Note 2

The =repeat= function is intentionally generic; it does not require that
its this value be a String object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.17String.prototype.replace ( =searchValue=, =replaceValue= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.replace-searchvalue-replacevalue
  :END:

When the =replace= method is called with arguments =searchValue= and
=replaceValue=, the following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
    value).
2.  If =searchValue= is neither undefined nor null, then

    1. Let =replacer= be
       ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=searchValue=,
       @@replace).
    2. If =replacer= is not undefined, then

       1. Return
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=replacer=,
          =searchValue=, « =O=, =replaceValue= »).

3.  Let =string= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
4.  Let =searchString= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=searchValue=).
5.  Let =functionalReplace= be
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=replaceValue=).
6.  If =functionalReplace= is false, then

    1. Set =replaceValue= to
       ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=replaceValue=).

7.  Search =string= for the first occurrence of =searchString= and let
    =pos= be the index within =string= of the first code unit of the
    matched substring and let =matched= be =searchString=. If no
    occurrences of =searchString= were found, return =string=.
8.  If =functionalReplace= is true, then

    1. Let =replValue= be
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=replaceValue=,
       undefined, « =matched=, =pos=, =string= »).
    2. Let =replStr= be
       ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=replValue=).

9.  Else,

    1. Let =captures= be a new empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    2. Let =replStr= be
       ! [[https://tc39.es/ecma262/#sec-getsubstitution][GetSubstitution]](=matched=,
       =string=, =pos=, =captures=, undefined, =replaceValue=).

10. Let =tailPos= be =pos= + the number of code units in =matched=.
11. Let =newString= be the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of the first =pos= code units of =string=, =replStr=, and the
    trailing substring of =string= starting at index =tailPos=. If =pos=
    is 0, the first element of the concatenation will be the empty
    String.
12. Return =newString=.

Note

The =replace= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.17.1Runtime Semantics: GetSubstitution ( =matched=, =str=,
=position=, =captures=, =namedCaptures=, =replacement= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-getsubstitution-matched-str-position-captures-namedcaptures-replacement
  :END:

The abstract operation GetSubstitution performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=matched=)
    is String.
2.  Let =matchLength= be the number of code units in =matched=.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=str=)
    is String.
4.  Let =stringLength= be the number of code units in =str=.
5.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=position=)
    is true.
6.  [[https://tc39.es/ecma262/#assert][Assert]]: =position= ≤
    =stringLength=.
7.  [[https://tc39.es/ecma262/#assert][Assert]]: =captures= is a
    possibly empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    of Strings.
8.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=replacement=)
    is String.
9.  Let =tailPos= be =position= + =matchLength=.
10. Let =m= be the number of elements in =captures=.
11. Let =result= be the String value derived from =replacement= by
    copying code unit elements from =replacement= to =result= while
    performing replacements as specified in
    [[https://tc39.es/ecma262/#table-45][Table 53]]. These =$=
    replacements are done left-to-right, and, once such a replacement is
    performed, the new replacement text is not subject to further
    replacements.
12. Return =result=.

Table 53: Replacement Text Symbol Substitutions

| Code units            | Unicode Characters                                                              | Replacement text                                                                                                                                                                                                                                              |
|-----------------------+---------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| 0x0024, 0x0024        | =$$=                                                                            | =$=                                                                                                                                                                                                                                                           |
| 0x0024, 0x0026        | =$&=                                                                            | =matched=                                                                                                                                                                                                                                                     |
| 0x0024, 0x0060        | =$`=                                                                            | If =position= is 0, the replacement is the empty String. Otherwise the replacement is the substring of =str= that starts at index 0 and whose last code unit is at index =position= - 1.                                                                      |
| 0x0024, 0x0027        | =$'=                                                                            | If =tailPos= ≥ =stringLength=, the replacement is the empty String. Otherwise the replacement is the substring of =str= that starts at index =tailPos= and continues to the end of =str=.                                                                     |
| 0x0024, N\\           | =$n= where\\                                                                    | The =n=^{th} element of =captures=, where =n= is a single digit in the range 1 to 9. If =n= ≤ =m= and the =n=^{th} element of =captures= is undefined, use the empty String instead. If =n= > =m=, no replacement is done.                                    |
| Where\\               | =n= is one of =1 2 3 4 5 6 7 8 9= and =$n= is not followed by a decimal digit   |                                                                                                                                                                                                                                                               |
| 0x0031 ≤ N ≤ 0x0039   |                                                                                 |                                                                                                                                                                                                                                                               |
| 0x0024, N, N\\        | =$nn= where\\                                                                   | The =nn=^{th} element of =captures=, where =nn= is a two-digit decimal number in the range 01 to 99. If =nn= ≤ =m= and the =nn=^{th} element of =captures= is undefined, use the empty String instead. If =nn= is 00 or =nn= > =m=, no replacement is done.   |
| Where\\               | =n= is one of =0 1 2 3 4 5 6 7 8 9=                                             |                                                                                                                                                                                                                                                               |
| 0x0030 ≤ N ≤ 0x0039   |                                                                                 |                                                                                                                                                                                                                                                               |
| 0x0024, 0x003C        | =$<=                                                                            | 1. If =namedCaptures= is undefined, the replacement text is the String "$<".                                                                                                                                                                                  |
|                       |                                                                                 | 2. Else,                                                                                                                                                                                                                                                      |
|                       |                                                                                 |                                                                                                                                                                                                                                                               |
|                       |                                                                                 |    1. [[https://tc39.es/ecma262/#assert][Assert]]: [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=namedCaptures=) is Object.                                                                                                        |
|                       |                                                                                 |    2. Scan until the next =>= U+003E (GREATER-THAN SIGN).                                                                                                                                                                                                     |
|                       |                                                                                 |    3. If none is found, the replacement text is the String "$<".                                                                                                                                                                                              |
|                       |                                                                                 |    4. Else,                                                                                                                                                                                                                                                   |
|                       |                                                                                 |                                                                                                                                                                                                                                                               |
|                       |                                                                                 |       1. Let =groupName= be the enclosed substring.                                                                                                                                                                                                           |
|                       |                                                                                 |       2. Let =capture= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=namedCaptures=, =groupName=).                                                                                                                                                      |
|                       |                                                                                 |       3. If =capture= is undefined, replace the text through =>= with the empty string.                                                                                                                                                                       |
|                       |                                                                                 |       4. Otherwise, replace the text through =>= with ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=capture=).                                                                                                                                       |
| 0x0024                | =$= in any context that does not match any of the above.                        | =$=                                                                                                                                                                                                                                                           |

* 21.1.3.18String.prototype.search ( =regexp= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.search-regexp
  :END:

When the =search= method is called with argument =regexp=, the following
steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. If =regexp= is neither undefined nor null, then

   1. Let =searcher= be
      ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=regexp=,
      @@search).
   2. If =searcher= is not undefined, then

      1. Return
         ? [[https://tc39.es/ecma262/#sec-call][Call]](=searcher=,
         =regexp=, « =O= »).

3. Let =string= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
4. Let =rx= be
   ? [[https://tc39.es/ecma262/#sec-regexpcreate][RegExpCreate]](=regexp=,
   undefined).
5. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=rx=,
   @@search, « =string= »).

Note

The =search= function is intentionally generic; it does not require that
its this value be a String object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.19String.prototype.slice ( =start=, =end= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.slice-start-end
  :END:

The =slice= method takes two arguments, =start= and =end=, and returns a
substring of the result of converting this object to a String, starting
from index =start= and running to, but not including, index =end= (or
through the end of the String if =end= is undefined). If =start= is
negative, it is treated as =sourceLength= + =start= where =sourceLength=
is the length of the String. If =end= is negative, it is treated as
=sourceLength= + =end= where =sourceLength= is the length of the String.
The result is a String value, not a String object. The following steps
are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =len= be the length of =S=.
4. Let =intStart= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
5. If =end= is undefined, let =intEnd= be =len=; else let =intEnd= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
6. If =intStart= < 0, let =from= be
   [[https://tc39.es/ecma262/#eqn-max][max]](=len= + =intStart=, 0);
   otherwise let =from= be
   [[https://tc39.es/ecma262/#eqn-min][min]](=intStart=, =len=).
7. If =intEnd= < 0, let =to= be
   [[https://tc39.es/ecma262/#eqn-max][max]](=len= + =intEnd=, 0);
   otherwise let =to= be
   [[https://tc39.es/ecma262/#eqn-min][min]](=intEnd=, =len=).
8. Let =span= be [[https://tc39.es/ecma262/#eqn-max][max]](=to= -
   =from=, 0).
9. Return the String value containing =span= consecutive code units from
   =S= beginning with the code unit at index =from=.

Note

The =slice= function is intentionally generic; it does not require that
its this value be a String object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.20String.prototype.split ( =separator=, =limit= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.split-separator-limit
  :END:

Returns an Array object into which substrings of the result of
converting this object to a String have been stored. The substrings are
determined by searching from left to right for occurrences of
=separator=; these occurrences are not part of any substring in the
returned array, but serve to divide up the String value. The value of
=separator= may be a String of any length or it may be an object, such
as a RegExp, that has a @@split method.

When the =split= method is called, the following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
    value).
2.  If =separator= is neither undefined nor null, then

    1. Let =splitter= be
       ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=separator=,
       @@split).
    2. If =splitter= is not undefined, then

       1. Return
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=splitter=,
          =separator=, « =O=, =limit= »).

3.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
4.  Let =A= be
    ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
5.  Let =lengthA= be 0.
6.  If =limit= is undefined, let =lim= be 2^{32} - 1; else let =lim= be
    ? [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=limit=).
7.  Let =s= be the length of =S=.
8.  Let =p= be 0.
9.  Let =R= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=separator=).
10. If =lim= = 0, return =A=.
11. If =separator= is undefined, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
       "0", =S=).
    2. Return =A=.

12. If =s= = 0, then

    1. Let =z= be
       [[https://tc39.es/ecma262/#sec-splitmatch][SplitMatch]](=S=, 0,
       =R=).
    2. If =z= is not false, return =A=.
    3. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
       "0", =S=).
    4. Return =A=.

13. Let =q= be =p=.
14. Repeat, while =q= ≠ =s=

    1. Let =e= be
       [[https://tc39.es/ecma262/#sec-splitmatch][SplitMatch]](=S=, =q=,
       =R=).
    2. If =e= is false, set =q= to =q= + 1.
    3. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =e= is an
          [[https://tc39.es/ecma262/#integer-index][integer index]] ≤
          =s=.
       2. If =e= = =p=, set =q= to =q= + 1.
       3. Else,

          1. Let =T= be the String value equal to the substring of =S=
             consisting of the code units at indices =p= (inclusive)
             through =q= (exclusive).
          2. Perform
             ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
             ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=lengthA=),
             =T=).
          3. Set =lengthA= to =lengthA= + 1.
          4. If =lengthA= = =lim=, return =A=.
          5. Set =p= to =e=.
          6. Set =q= to =p=.

15. Let =T= be the String value equal to the substring of =S= consisting
    of the code units at indices =p= (inclusive) through =s=
    (exclusive).
16. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
    ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=lengthA=),
    =T=).
17. Return =A=.

Note 1

The value of =separator= may be an empty String. In this case,
=separator= does not match the empty substring at the beginning or end
of the input String, nor does it match the empty substring at the end of
the previous separator match. If =separator= is the empty String, the
String is split up into individual code unit elements; the length of the
result array equals the length of the String, and each substring
contains one code unit.

If the this object is (or converts to) the empty String, the result
depends on whether =separator= can match the empty String. If it can,
the result array contains no elements. Otherwise, the result array
contains one element, which is the empty String.

If =separator= is undefined, then the result array contains just one
String, which is the this value (converted to a String). If =limit= is
not undefined, then the output array is truncated so that it contains no
more than =limit= elements.

Note 2

The =split= function is intentionally generic; it does not require that
its this value be a String object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.20.1Runtime Semantics: SplitMatch ( =S=, =q=, =R= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-splitmatch-s-q-r
  :END:

The abstract operation SplitMatch takes three parameters, a String =S=,
an [[https://tc39.es/ecma262/#integer][integer]] =q=, and a String =R=,
and performs the following steps in order to return either false or the
end index of a match:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is String.
2. Let =r= be the number of code units in =R=.
3. Let =s= be the number of code units in =S=.
4. If =q= + =r= > =s=, return false.
5. If there exists an [[https://tc39.es/ecma262/#integer][integer]] =i=
   between 0 (inclusive) and =r= (exclusive) such that the code unit at
   index =q= + =i= within =S= is different from the code unit at index
   =i= within =R=, return false.
6. Return =q= + =r=.

* 21.1.3.21String.prototype.startsWith ( =searchString= [ , =position= ]
)
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.startswith-searchstring-position
  :END:

The following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
    value).
2.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3.  Let =isRegExp= be
    ? [[https://tc39.es/ecma262/#sec-isregexp][IsRegExp]](=searchString=).
4.  If =isRegExp= is true, throw a TypeError exception.
5.  Let =searchStr= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=searchString=).
6.  Let =pos= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=position=).
7.  [[https://tc39.es/ecma262/#assert][Assert]]: If =position= is
    undefined, then =pos= is 0.
8.  Let =len= be the length of =S=.
9.  Let =start= be
    [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=pos=,
    0), =len=).
10. Let =searchLength= be the length of =searchStr=.
11. If =searchLength= + =start= is greater than =len=, return false.
12. If the sequence of code units of =S= starting at =start= of length
    =searchLength= is the same as the full code unit sequence of
    =searchStr=, return true.
13. Otherwise, return false.

Note 1

This method returns true if the sequence of code units of =searchString=
converted to a String is the same as the corresponding code units of
this object (converted to a String) starting at index =position=.
Otherwise returns false.

Note 2

Throwing an exception if the first argument is a RegExp is specified in
order to allow future editions to define extensions that allow such
argument values.

Note 3

The =startsWith= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.22String.prototype.substring ( =start=, =end= )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.substring-start-end
  :END:

The =substring= method takes two arguments, =start= and =end=, and
returns a substring of the result of converting this object to a String,
starting from index =start= and running to, but not including, index
=end= of the String (or through the end of the String if =end= is
undefined). The result is a String value, not a String object.

If either argument is NaN or negative, it is replaced with zero; if
either argument is larger than the length of the String, it is replaced
with the length of the String.

If =start= is larger than =end=, they are swapped.

The following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
    value).
2.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3.  Let =len= be the length of =S=.
4.  Let =intStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
5.  If =end= is undefined, let =intEnd= be =len=; else let =intEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
6.  Let =finalStart= be
    [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=intStart=,
    0), =len=).
7.  Let =finalEnd= be
    [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=intEnd=,
    0), =len=).
8.  Let =from= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=finalStart=, =finalEnd=).
9.  Let =to= be [[https://tc39.es/ecma262/#eqn-max][max]](=finalStart=,
    =finalEnd=).
10. Return the String value whose length is =to= - =from=, containing
    code units from =S=, namely the code units with indices =from=
    through =to= - 1, in ascending order.

Note

The =substring= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.23String.prototype.toLocaleLowerCase ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.tolocalelowercase-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the =toLocaleLowerCase= method
as specified in the ECMA-402 specification. If an ECMAScript
implementation does not include the ECMA-402 API the following
specification of the =toLocaleLowerCase= method is used.

This function interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

This function works exactly the same as =toLowerCase= except that its
result is intended to yield the correct result for the host
environment's current locale, rather than a locale-independent result.
There will only be a difference in the few cases (such as Turkish) where
the rules for that language conflict with the regular Unicode case
mappings.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

Note

The =toLocaleLowerCase= function is intentionally generic; it does not
require that its this value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

* 21.1.3.24String.prototype.toLocaleUpperCase ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.tolocaleuppercase-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the =toLocaleUpperCase= method
as specified in the ECMA-402 specification. If an ECMAScript
implementation does not include the ECMA-402 API the following
specification of the =toLocaleUpperCase= method is used.

This function interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

This function works exactly the same as =toUpperCase= except that its
result is intended to yield the correct result for the host
environment's current locale, rather than a locale-independent result.
There will only be a difference in the few cases (such as Turkish) where
the rules for that language conflict with the regular Unicode case
mappings.

The meaning of the optional parameters to this method are defined in the
ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

Note

The =toLocaleUpperCase= function is intentionally generic; it does not
require that its this value be a String object. Therefore, it can be
transferred to other kinds of objects for use as a method.

* 21.1.3.25String.prototype.toLowerCase ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.tolowercase
  :END:

This function interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].
The following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =cpList= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   containing in order the code points as defined in
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]]
   of =S=, starting at the first element of =S=.
4. Let =cuList= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   where the elements are the result of toLowercase(=cpList=), according
   to the Unicode Default Case Conversion algorithm.
5. Let =L= be the String value whose code units are the
   [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of the
   code points of =cuList=.
6. Return =L=.

The result must be derived according to the locale-insensitive case
mappings in the Unicode Character Database (this explicitly includes not
only the UnicodeData.txt file, but also all locale-insensitive mappings
in the SpecialCasings.txt file that accompanies it).

Note 1

The case mapping of some code points may produce multiple code points.
In this case the result String may not be the same length as the source
String. Because both =toUpperCase= and =toLowerCase= have
context-sensitive behaviour, the functions are not symmetrical. In other
words, =s.toUpperCase().toLowerCase()= is not necessarily equal to
=s.toLowerCase()=.

Note 2

The =toLowerCase= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.26String.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.tostring
  :END:

When the =toString= method is called, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-thisstringvalue][thisStringValue]](this
   value).

Note

For a String object, the =toString= method happens to return the same
thing as the =valueOf= method.

* 21.1.3.27String.prototype.toUpperCase ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.touppercase
  :END:

This function interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

This function behaves in exactly the same way as
=String.prototype.toLowerCase=, except that the String is mapped using
the toUppercase algorithm of the Unicode Default Case Conversion.

Note

The =toUpperCase= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.28String.prototype.trim ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.trim
  :END:

This function interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

The following steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-trimstring][TrimString]](=S=,
   start+end).

Note

The =trim= function is intentionally generic; it does not require that
its this value be a String object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 21.1.3.28.1Runtime Semantics: TrimString ( =string=, =where= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-trimstring-string-where
  :END:

The abstract operation TrimString is called with arguments =string= and
=where=, and interprets the String value =string= as a sequence of
UTF-16 encoded code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].
It performs the following steps:

1. Let =str= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=string=).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=str=).
3. If =where= is start, let =T= be the String value that is a copy of
   =S= with leading white space removed.
4. Else if =where= is end, let =T= be the String value that is a copy of
   =S= with trailing white space removed.
5. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =where= is start+end.
   2. Let =T= be the String value that is a copy of =S= with both
      leading and trailing white space removed.

6. Return =T=.

The definition of white space is the union of
[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]] and
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]. When
determining whether a Unicode code point is in Unicode general category
“Space_Separator” (“Zs”), code unit sequences are interpreted as UTF-16
encoded code point sequences as specified in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

* 21.1.3.29String.prototype.trimEnd ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.trimend
  :END:

This function interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

The following steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-trimstring][TrimString]](=S=,
   end).

Note

The =trimEnd= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.30String.prototype.trimStart ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.trimstart
  :END:

This function interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

The following steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-trimstring][TrimString]](=S=,
   start).

Note

The =trimStart= function is intentionally generic; it does not require
that its this value be a String object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 21.1.3.31String.prototype.valueOf ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype.valueof
  :END:

When the =valueOf= method is called, the following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-thisstringvalue][thisStringValue]](this
   value).

* 21.1.3.32String.prototype [ @@iterator ] ( )
  :PROPERTIES:
  :CUSTOM_ID: string.prototype-iterator
  :END:

When the =@@iterator= method is called it returns an Iterator object
([[https://tc39.es/ecma262/#sec-iterator-interface][25.1.1.2]]) that
iterates over the code points of a String value, returning each code
point as a String value. The following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Return
   [[https://tc39.es/ecma262/#sec-createstringiterator][CreateStringIterator]](=S=).

The value of the "name" property of this function is
"[Symbol.iterator]".

* 21.1.4Properties of String Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-string-instances
  :END:

String instances are String exotic objects and have the internal methods
specified for such objects. String instances inherit properties from the
String prototype object. String instances also have a [[StringData]]
internal slot.

String instances have a "length" property, and a set of enumerable
properties with [[https://tc39.es/ecma262/#integer][integer]]-indexed
names.

* 21.1.4.1length
  :PROPERTIES:
  :CUSTOM_ID: length-1
  :END:

The number of elements in the String value represented by this String
object.

Once a String object is initialized, this property is unchanging. It has
the attributes { [[Writable]]: false, [[Enumerable]]: false,
[[Configurable]]: false }.

* 21.1.5String Iterator Objects
  :PROPERTIES:
  :CUSTOM_ID: string-iterator-objects
  :END:

A String Iterator is an object, that represents a specific iteration
over some specific String instance object. There is not a named
[[https://tc39.es/ecma262/#constructor][constructor]] for String
Iterator objects. Instead, String iterator objects are created by
calling certain methods of String instance objects.

* 21.1.5.1CreateStringIterator ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: createstringiterator-string
  :END:

Several methods of String objects return Iterator objects. The abstract
operation CreateStringIterator with argument =string= is used to create
such iterator objects. It performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=string=)
   is String.
2. Let =iterator= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]]([[https://tc39.es/ecma262/#sec-%stringiteratorprototype%-object][%StringIteratorPrototype%]],
   « [[IteratedString]], [[StringNextIndex]] »).
3. Set =iterator=.[[IteratedString]] to =string=.
4. Set =iterator=.[[StringNextIndex]] to 0.
5. Return =iterator=.

* 21.1.5.2The %StringIteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-stringiteratorprototype-object
  :END:

The %StringIteratorPrototype% object:

- has properties that are inherited by all String Iterator Objects.
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]].
- has the following properties:

* 21.1.5.2.1%StringIteratorPrototype%.next ( )
  :PROPERTIES:
  :CUSTOM_ID: stringiteratorprototype.next
  :END:

1.  Let =O= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
    is not Object, throw a TypeError exception.
3.  If =O= does not have all of the internal slots of a String Iterator
    Instance
    ([[https://tc39.es/ecma262/#sec-properties-of-string-iterator-instances][21.1.5.3]]),
    throw a TypeError exception.
4.  Let =s= be =O=.[[IteratedString]].
5.  If =s= is undefined, return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
    true).
6.  Let =position= be =O=.[[StringNextIndex]].
7.  Let =len= be the length of =s=.
8.  If =position= ≥ =len=, then

    1. Set =O=.[[IteratedString]] to undefined.
    2. Return
       [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
       true).

9.  Let =cp= be
    ! [[https://tc39.es/ecma262/#sec-codepointat][CodePointAt]](=s=,
    =position=).
10. Let =resultString= be the String value containing
    =cp=.[[CodeUnitCount]] consecutive code units from =s= beginning
    with the code unit at index =position=.
11. Set =O=.[[StringNextIndex]] to =position= + =cp=.[[CodeUnitCount]].
12. Return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=resultString=,
    false).

* 21.1.5.2.2%StringIteratorPrototype% [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: stringiteratorprototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"String Iterator".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 21.1.5.3Properties of String Iterator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-string-iterator-instances
  :END:

String Iterator instances are ordinary objects that inherit properties
from the
[[https://tc39.es/ecma262/#sec-%stringiteratorprototype%-object][%StringIteratorPrototype%]]
intrinsic object. String Iterator instances are initially created with
the internal slots listed in [[https://tc39.es/ecma262/#table-46][Table
54]].

Table 54: Internal Slots of String Iterator Instances

| Internal Slot         | Description                                                                                                                             |
|-----------------------+-----------------------------------------------------------------------------------------------------------------------------------------|
| [[IteratedString]]    | The String value whose code units are being iterated.                                                                                   |
| [[StringNextIndex]]   | The [[https://tc39.es/ecma262/#integer-index][integer index]] of the next string element (code unit) to be examined by this iterator.   |

* 21.2RegExp (Regular Expression) Objects
  :PROPERTIES:
  :CUSTOM_ID: regexp-regular-expression-objects
  :END:

A RegExp object contains a regular expression and the associated flags.

Note

The form and functionality of regular expressions is modelled after the
regular expression facility in the Perl 5 programming language.

* 21.2.1Patterns
  :PROPERTIES:
  :CUSTOM_ID: patterns
  :END:

The =RegExp= [[https://tc39.es/ecma262/#constructor][constructor]]
applies the following grammar to the input pattern String. An error
occurs if the grammar cannot interpret the String as an expansion of
[[https://tc39.es/ecma262/#prod-Pattern][Pattern]].

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-68
   :END:

[[https://tc39.es/ecma262/#prod-Pattern][Pattern]][U,
N]::[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][U,
N]::[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][?U,
?N]|[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][U,
N]::[empty]
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][?U,
?N][[https://tc39.es/ecma262/#prod-Term][Term]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Term][Term]][U,
N]::[[https://tc39.es/ecma262/#prod-Assertion][Assertion]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Atom][Atom]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Atom][Atom]][?U,
?N][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]][U, N]::^ $ \b \B
(?=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
(?![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
(?<=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
(?<![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
[[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]::[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]?
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::*
+ ? {[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],}
{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
[[https://tc39.es/ecma262/#prod-Atom][Atom]][U,
N]::[[https://tc39.es/ecma262/#prod-PatternCharacter][PatternCharacter]]
. \[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]][?U, ?N]
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]][?U]
([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][?U][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U,
?N]) (?:[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U,
?N])
[[https://tc39.es/ecma262/#prod-SyntaxCharacter][SyntaxCharacter]]::one
of^$\.*+?()[]{}|
[[https://tc39.es/ecma262/#prod-PatternCharacter][PatternCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not [[https://tc39.es/ecma262/#prod-SyntaxCharacter][SyntaxCharacter]]
[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]][U,
N]::[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]][?U]
[+N]k[[https://tc39.es/ecma262/#prod-GroupName][GroupName]][?U]
[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]][U]::[[https://tc39.es/ecma262/#prod-ControlEscape][ControlEscape]]
c[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]
0[lookahead ∉
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]
[[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]][?U]
[[https://tc39.es/ecma262/#prod-ControlEscape][ControlEscape]]::one
offnrtv
[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]::one
ofabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
[[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][U]::[empty]
?[[https://tc39.es/ecma262/#prod-GroupName][GroupName]][?U]
[[https://tc39.es/ecma262/#prod-GroupName][GroupName]][U]::<[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][?U]>
[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][U]::[[https://tc39.es/ecma262/#prod-RegExpIdentifierStart][RegExpIdentifierStart]][?U]
[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][?U][[https://tc39.es/ecma262/#prod-RegExpIdentifierPart][RegExpIdentifierPart]][?U]
[[https://tc39.es/ecma262/#prod-RegExpIdentifierStart][RegExpIdentifierStart]][U]::[[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]
$ _
\[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]
[[https://tc39.es/ecma262/#prod-RegExpIdentifierPart][RegExpIdentifierPart]][U]::[[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
$
\[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]
<ZWNJ> <ZWJ>
[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][U]::[+U]u[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]\u[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]
[+U]u[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]
[+U]u[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]
[+U]u[[https://tc39.es/ecma262/#prod-NonSurrogate][NonSurrogate]]
[~U]u[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
[+U]u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]}

Each =\u=
[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]] for
which the choice of associated =u=
[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]] is
ambiguous shall be associated with the nearest possible =u=
[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]] that
would otherwise have no corresponding =\u=
[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]].

[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]but
only if the SV of
[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]] is in the
inclusive range 0xD800 to 0xDBFF
[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]but
only if the SV of
[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]] is in the
inclusive range 0xDC00 to 0xDFFF
[[https://tc39.es/ecma262/#prod-NonSurrogate][NonSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]but
only if the SV of
[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]] is not in the
inclusive range 0xD800 to 0xDFFF
[[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]][U]::[+U][[https://tc39.es/ecma262/#prod-SyntaxCharacter][SyntaxCharacter]]
[+U]/
[~U][[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not
[[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[lookahead
∉ [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][U]::d
D s S w W
[+U]p{[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]}
[+U]P{[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]}
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]=[[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]]
[[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacter][UnicodePropertyNameCharacter]][[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]opt
[[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]
[[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacter][UnicodePropertyValueCharacter]][[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]opt
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacter][UnicodePropertyValueCharacter]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacter][UnicodePropertyNameCharacter]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacter][UnicodePropertyNameCharacter]]::[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]
_
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]][U]::[[lookahead
≠ ^][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]]
[^[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]]
[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][U]::[empty]
[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]][?U]
[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]][U]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U][[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]
[[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]][U]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][?U][[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][?U]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][U]::-
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][U]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of \ or ] or -
\[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]][U]::b [+U]-
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]][?U]

* 21.2.1.1Static Semantics: Early Errors
  :PROPERTIES:
  :CUSTOM_ID: static-semantics-early-errors-35
  :END:

[[https://tc39.es/ecma262/#prod-Pattern][Pattern]]::[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]

- It is a Syntax Error if =NcapturingParens= ≥ 2^{32} - 1.
- It is a Syntax Error if
  [[https://tc39.es/ecma262/#prod-Pattern][Pattern]] contains multiple
  [[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]]s
  whose enclosed
  [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]]s
  have the same StringValue.

[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}

- It is a Syntax Error if the MV of the first
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] is
  larger than the MV of the second
  [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].

[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]]::k[[https://tc39.es/ecma262/#prod-GroupName][GroupName]]

- It is a Syntax Error if the enclosing
  [[https://tc39.es/ecma262/#prod-Pattern][Pattern]] does not contain a
  [[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]] with
  an enclosed
  [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]]
  whose StringValue equals the StringValue of the
  [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]]
  of this production's
  [[https://tc39.es/ecma262/#prod-GroupName][GroupName]].

[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]]::[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]

- It is a Syntax Error if the CapturingGroupNumber of
  [[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]] is
  larger than =NcapturingParens=
  ([[https://tc39.es/ecma262/#sec-notation][21.2.2.1]]).

[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]

- It is a Syntax Error if IsCharacterClass of the first
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is true or
  IsCharacterClass of the second
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is true.
- It is a Syntax Error if IsCharacterClass of the first
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is false and
  IsCharacterClass of the second
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is false and
  the CharacterValue of the first
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is larger than
  the CharacterValue of the second
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]].

[[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]::[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]

- It is a Syntax Error if IsCharacterClass of
  [[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]] is
  true or IsCharacterClass of
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is true.
- It is a Syntax Error if IsCharacterClass of
  [[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]] is
  false and IsCharacterClass of
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is false and
  the CharacterValue of
  [[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]] is
  larger than the CharacterValue of
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]].

[[https://tc39.es/ecma262/#prod-RegExpIdentifierStart][RegExpIdentifierStart]][U]::\[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]

- It is a Syntax Error if
  SV([[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]])
  is none of "$", or "_", or the
  [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of a
  code point matched by the
  [[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]
  lexical grammar production.

[[https://tc39.es/ecma262/#prod-RegExpIdentifierPart][RegExpIdentifierPart]][U]::\[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]

- It is a Syntax Error if
  SV([[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]])
  is none of "$", or "_", or the
  [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of
  either <ZWNJ> or <ZWJ>, or the
  [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] of a
  Unicode code point that would be matched by the
  [[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
  lexical grammar production.

[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]=[[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]]

- It is a Syntax Error if the
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of Unicode code points that is SourceText of
  [[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]
  is not identical to a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of Unicode code points that is a Unicode
  [[https://tc39.es/ecma262/#property-name][property name]] or property
  alias listed in the
  “[[https://tc39.es/ecma262/#property-name][Property name]] and
  aliases” column of
  [[https://tc39.es/ecma262/#table-nonbinary-unicode-properties][Table
  56]].
- It is a Syntax Error if the
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of Unicode code points that is SourceText of
  [[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]]
  is not identical to a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of Unicode code points that is a value or value alias for the Unicode
  property or property alias given by SourceText of
  [[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]
  listed in the “Property value and aliases” column of the corresponding
  tables
  [[https://tc39.es/ecma262/#table-unicode-general-category-values][Table
  58]] or [[https://tc39.es/ecma262/#table-unicode-script-values][Table
  59]].

[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]::[[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]]

- It is a Syntax Error if the
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of Unicode code points that is SourceText of
  [[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]]
  is not identical to a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of Unicode code points that is a Unicode general category or general
  category alias listed in the “Property value and aliases” column of
  [[https://tc39.es/ecma262/#table-unicode-general-category-values][Table
  58]], nor a binary property or binary property alias listed in the
  “[[https://tc39.es/ecma262/#property-name][Property name]] and
  aliases” column of
  [[https://tc39.es/ecma262/#table-binary-unicode-properties][Table
  57]].

* 21.2.1.2Static Semantics: CapturingGroupNumber
  :PROPERTIES:
  :CUSTOM_ID: static-semantics-capturinggroupnumber
  :END:

[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]

1. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
   for the MV of
   [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]].

[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]

1. Let =n= be the
   [[https://tc39.es/ecma262/#mathematical%20integer][mathematical
   integer]] number of code points in
   [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
2. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
   for (the MV of
   [[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]
   ×_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}
   10_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]}^{=n=} plus the MV of
   [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]).

The definitions of “the MV of
[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]” and “the
MV of [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]”
are in
[[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]].

* 21.2.1.3Static Semantics: IsCharacterClass
  :PROPERTIES:
  :CUSTOM_ID: static-semantics-ischaracterclass
  :END:

[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]::-
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of \ or ] or -
[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::b
[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::-
[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]

1. Return false.

[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]

1. Return true.

* 21.2.1.4Static Semantics: CharacterValue
  :PROPERTIES:
  :CUSTOM_ID: static-semantics-charactervalue
  :END:

[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]::-

1. Return the code point value of U+002D (HYPHEN-MINUS).

[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of \ or ] or -

1. Let =ch= be the code point matched by
   [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]].
2. Return the code point value of =ch=.

[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::b

1. Return the code point value of U+0008 (BACKSPACE).

[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::-

1. Return the code point value of U+002D (HYPHEN-MINUS).

[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]::[[https://tc39.es/ecma262/#prod-ControlEscape][ControlEscape]]

1. Return the code point value according to
   [[https://tc39.es/ecma262/#table-47][Table 55]].

Table 55: ControlEscape Code Point Values

| ControlEscape   | Code Point Value   | Code Point   | Unicode Name           | Symbol   |
|-----------------+--------------------+--------------+------------------------+----------|
| =t=             | 9                  | =U+0009=     | CHARACTER TABULATION   | <HT>     |
| =n=             | 10                 | =U+000A=     | LINE FEED (LF)         | <LF>     |
| =v=             | 11                 | =U+000B=     | LINE TABULATION        | <VT>     |
| =f=             | 12                 | =U+000C=     | FORM FEED (FF)         | <FF>     |
| =r=             | 13                 | =U+000D=     | CARRIAGE RETURN (CR)   | <CR>     |

[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]::c[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]

1. Let =ch= be the code point matched by
   [[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]].
2. Let =i= be =ch='s code point value.
3. Return the remainder of dividing =i= by 32.

[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]::0[lookahead
∉ [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]

1. Return the code point value of U+0000 (NULL).

Note

=\0= represents the <NUL> character and cannot be followed by a decimal
digit.

[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]::[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]

1. Return the numeric value of the code unit that is the SV of
   [[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]].

[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]\u[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]

1. Let =lead= be the CharacterValue of
   [[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]].
2. Let =trail= be the CharacterValue of
   [[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]].
3. Let =cp= be
   [[https://tc39.es/ecma262/#sec-utf16decode][UTF16Decode]](=lead=,
   =trail=).
4. Return the code point value of =cp=.

[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]

1. Return the CharacterValue of
   [[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]].

[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]

1. Return the CharacterValue of
   [[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]].

[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-NonSurrogate][NonSurrogate]]

1. Return the CharacterValue of
   [[https://tc39.es/ecma262/#prod-NonSurrogate][NonSurrogate]].

[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]

1. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
   for the MV of
   [[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]].

[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]::u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]}

1. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
   for the MV of [[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]].

[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
[[https://tc39.es/ecma262/#prod-NonSurrogate][NonSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]

1. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
   for the MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]].

[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]::[[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]]

1. Let =ch= be the code point matched by
   [[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]].
2. Return the code point value of =ch=.

* 21.2.1.5Static Semantics: SourceText
  :PROPERTIES:
  :CUSTOM_ID: static-semantics-sourcetext
  :END:

[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacter][UnicodePropertyNameCharacter]][[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]opt
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacter][UnicodePropertyValueCharacter]][[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]opt

1. Return the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]],
   in source text order, of Unicode code points in the source text
   matched by this production.

* 21.2.1.6Static Semantics: StringValue
  :PROPERTIES:
  :CUSTOM_ID: static-semantics-stringvalue-3
  :END:

[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][U]::[[https://tc39.es/ecma262/#prod-RegExpIdentifierStart][RegExpIdentifierStart]][?U]
[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][?U][[https://tc39.es/ecma262/#prod-RegExpIdentifierPart][RegExpIdentifierPart]][?U]

1. Return the String value consisting of the sequence of code units
   corresponding to
   [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]].
   In determining the sequence any occurrences of =\=
   [[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]
   are first replaced with the code point represented by the
   [[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]
   and then the code points of the entire
   [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]]
   are converted to code units by
   [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]] each
   code point.

* 21.2.2Pattern Semantics
  :PROPERTIES:
  :CUSTOM_ID: pattern-semantics
  :END:

A regular expression pattern is converted into an internal procedure
using the process described below. An implementation is encouraged to
use more efficient algorithms than the ones listed below, as long as the
results are the same. The internal procedure is used as the value of a
RegExp object's [[RegExpMatcher]] internal slot.

A [[https://tc39.es/ecma262/#prod-Pattern][Pattern]] is either a BMP
pattern or a Unicode pattern depending upon whether or not its
associated flags contain a =u=. A BMP pattern matches against a String
interpreted as consisting of a sequence of 16-bit values that are
Unicode code points in the range of the Basic Multilingual Plane. A
Unicode pattern matches against a String interpreted as consisting of
Unicode code points encoded using UTF-16. In the context of describing
the behaviour of a BMP pattern “character” means a single 16-bit Unicode
BMP code point. In the context of describing the behaviour of a Unicode
pattern “character” means a UTF-16 encoded code point
([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]]).
In either context, “character value” means the numeric value of the
corresponding non-encoded code point.

The syntax and semantics of
[[https://tc39.es/ecma262/#prod-Pattern][Pattern]] is defined as if the
source code for the [[https://tc39.es/ecma262/#prod-Pattern][Pattern]]
was a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
values where each
[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
corresponds to a Unicode code point. If a BMP pattern contains a non-BMP
[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]] the
entire pattern is encoded using UTF-16 and the individual code units of
that encoding are used as the elements of the
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

Note

For example, consider a pattern expressed in source text as the single
non-BMP character U+1D11E (MUSICAL SYMBOL G CLEF). Interpreted as a
Unicode pattern, it would be a single element (character)
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
consisting of the single code point 0x1D11E. However, interpreted as a
BMP pattern, it is first UTF-16 encoded to produce a two element
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
consisting of the code units 0xD834 and 0xDD1E.

Patterns are passed to the RegExp
[[https://tc39.es/ecma262/#constructor][constructor]] as ECMAScript
String values in which non-BMP characters are UTF-16 encoded. For
example, the single character MUSICAL SYMBOL G CLEF pattern, expressed
as a String value, is a String of length 2 whose elements were the code
units 0xD834 and 0xDD1E. So no further translation of the string would
be necessary to process it as a BMP pattern consisting of two pattern
characters. However, to process it as a Unicode pattern
[[https://tc39.es/ecma262/#sec-utf16decode][UTF16Decode]] must be used
in producing a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
consisting of a single pattern character, the code point U+1D11E.

An implementation may not actually perform such translations to or from
UTF-16, but the semantics of this specification requires that the result
of pattern matching be as if such translations were performed.

* 21.2.2.1Notation
  :PROPERTIES:
  :CUSTOM_ID: notation
  :END:

The descriptions below use the following variables:

- =Input= is a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  consisting of all of the characters, in order, of the String being
  matched by the regular expression pattern. Each character is either a
  code unit or a code point, depending upon the kind of pattern
  involved. The notation =Input=[=n=] means the =n=^{th} character of
  =Input=, where =n= can range between 0 (inclusive) and =InputLength=
  (exclusive).
- =InputLength= is the number of characters in =Input=.
- =NcapturingParens= is the total number of left-capturing parentheses
  (i.e. the total number of
  [[https://tc39.es/ecma262/#prod-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
  Parse Nodes) in the pattern. A left-capturing parenthesis is any =(=
  pattern character that is matched by the =(= terminal of the
  [[https://tc39.es/ecma262/#prod-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
  production.
- =DotAll= is true if the RegExp object's [[OriginalFlags]] internal
  slot contains "s" and otherwise is false.
- =IgnoreCase= is true if the RegExp object's [[OriginalFlags]] internal
  slot contains "i" and otherwise is false.
- =Multiline= is true if the RegExp object's [[OriginalFlags]] internal
  slot contains "m" and otherwise is false.
- =Unicode= is true if the RegExp object's [[OriginalFlags]] internal
  slot contains "u" and otherwise is false.

Furthermore, the descriptions below use the following internal data
structures:

- A /CharSet/ is a mathematical set of characters, either code units or
  code points depending up the state of the =Unicode= flag. “All
  characters” means either all code unit values or all code point values
  also depending upon the state of =Unicode=.
- A /State/ is an ordered pair (=endIndex=, =captures=) where =endIndex=
  is an [[https://tc39.es/ecma262/#integer][integer]] and =captures= is
  a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of =NcapturingParens= values. States are used to represent partial
  match states in the regular expression matching algorithms. The
  =endIndex= is one plus the index of the last input character matched
  so far by the pattern, while =captures= holds the results of capturing
  parentheses. The =n=^{th} element of =captures= is either a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  that represents the value obtained by the =n=^{th} set of capturing
  parentheses or undefined if the =n=^{th} set of capturing parentheses
  hasn't been reached yet. Due to backtracking, many States may be in
  use at any time during the matching process.
- A /MatchResult/ is either a State or the special token failure that
  indicates that the match failed.
- A /Continuation/ procedure is an internal closure (i.e. an internal
  procedure with some arguments already bound to values) that takes one
  State argument and returns a MatchResult result. If an internal
  closure references variables which are bound in the function that
  creates the closure, the closure uses the values that these variables
  had at the time the closure was created. The Continuation attempts to
  match the remaining portion (specified by the closure's already-bound
  arguments) of the pattern against =Input=, starting at the
  intermediate state given by its State argument. If the match succeeds,
  the Continuation returns the final State that it reached; if the match
  fails, the Continuation returns failure.
- A /Matcher/ procedure is an internal closure that takes two
  arguments---a State and a Continuation---and returns a MatchResult
  result. A Matcher attempts to match a middle subpattern (specified by
  the closure's already-bound arguments) of the pattern against =Input=,
  starting at the intermediate state given by its State argument. The
  Continuation argument should be a closure that matches the rest of the
  pattern. After matching the subpattern of a pattern to obtain a new
  State, the Matcher then calls Continuation on that new State to test
  if the rest of the pattern can match as well. If it can, the Matcher
  returns the State returned by Continuation; if not, the Matcher may
  try different choices at its choice points, repeatedly calling
  Continuation until it either succeeds or all possibilities have been
  exhausted.
- An /AssertionTester/ procedure is an internal closure that takes a
  State argument and returns a Boolean result. The assertion tester
  tests a specific condition (specified by the closure's already-bound
  arguments) against the current place in =Input= and returns true if
  the condition matched or false if not.

* 21.2.2.2Pattern
  :PROPERTIES:
  :CUSTOM_ID: pattern
  :END:

The production
[[https://tc39.es/ecma262/#prod-Pattern][Pattern]]::[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
   with +1 as its =direction= argument to obtain a Matcher =m=.
2. Return an internal closure that takes two arguments, a String =str=
   and an [[https://tc39.es/ecma262/#integer][integer]] =index=, and
   performs the following steps:

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =index= ≤ the length
      of =str=.
   2. If =Unicode= is true, let =Input= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      consisting of the sequence of code points of =str= interpreted as
      a UTF-16 encoded
      ([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]])
      Unicode string. Otherwise, let =Input= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      consisting of the sequence of code units that are the elements of
      =str=. =Input= will be used throughout the algorithms in
      [[https://tc39.es/ecma262/#sec-pattern-semantics][21.2.2]]. Each
      element of =Input= is considered to be a character.
   3. Let =InputLength= be the number of characters contained in
      =Input=. This variable will be used throughout the algorithms in
      [[https://tc39.es/ecma262/#sec-pattern-semantics][21.2.2]].
   4. Let =listIndex= be the index into =Input= of the character that
      was obtained from element =index= of =str=.
   5. Let =c= be a Continuation that always returns its State argument
      as a successful MatchResult.
   6. Let =cap= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      of =NcapturingParens= undefined values, indexed 1 through
      =NcapturingParens=.
   7. Let =x= be the State (=listIndex=, =cap=).
   8. Call =m=(=x=, =c=) and return its result.

Note

A Pattern evaluates (“compiles”) to an internal procedure value.
[[https://tc39.es/ecma262/#sec-regexpbuiltinexec][RegExpBuiltinExec]]
can then apply this procedure to a String and an offset within the
String to determine whether the pattern would match starting at exactly
that offset within the String, and, if it does match, what the values of
the capturing parentheses would be. The algorithms in
[[https://tc39.es/ecma262/#sec-pattern-semantics][21.2.2]] are designed
so that compiling a pattern may throw a SyntaxError exception; on the
other hand, once the pattern is successfully compiled, applying the
resulting internal procedure to find a match in a String cannot throw an
exception (except for any host-defined exceptions that can occur
anywhere such as out-of-memory).

* 21.2.2.3Disjunction
  :PROPERTIES:
  :CUSTOM_ID: disjunction
  :END:

With parameter =direction=.

The production
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]::[[https://tc39.es/ecma262/#prod-Alternative][Alternative]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Alternative][Alternative]]
   with argument =direction= to obtain a Matcher =m=.
2. Return =m=.

The production
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]::[[https://tc39.es/ecma262/#prod-Alternative][Alternative]]|[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Alternative][Alternative]]
   with argument =direction= to obtain a Matcher =m1=.
2. Evaluate [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
   with argument =direction= to obtain a Matcher =m2=.
3. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Call =m1=(=x=, =c=) and let =r= be its result.
   2. If =r= is not failure, return =r=.
   3. Call =m2=(=x=, =c=) and return its result.

Note

The =|= regular expression operator separates two alternatives. The
pattern first tries to match the left
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]] (followed by
the sequel of the regular expression); if it fails, it tries to match
the right [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
(followed by the sequel of the regular expression). If the left
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]], the right
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]], and the
sequel all have choice points, all choices in the sequel are tried
before moving on to the next choice in the left
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]]. If choices
in the left [[https://tc39.es/ecma262/#prod-Alternative][Alternative]]
are exhausted, the right
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] is tried
instead of the left
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]]. Any
capturing parentheses inside a portion of the pattern skipped by =|=
produce undefined values instead of Strings. Thus, for example,

#+BEGIN_EXAMPLE
  /a|ab/.exec("abc")
#+END_EXAMPLE

returns the result "a" and not "ab". Moreover,

#+BEGIN_EXAMPLE
  /((a)|(ab))((c)|(bc))/.exec("abc")
#+END_EXAMPLE

returns the array

#+BEGIN_EXAMPLE
  ["abc", "a", "a", undefined, "bc", undefined, "bc"]
#+END_EXAMPLE

and not

#+BEGIN_EXAMPLE
  ["abc", "ab", undefined, "ab", "c", "c", undefined]
#+END_EXAMPLE

The order in which the two alternatives are tried is independent of the
value of =direction=.

* 21.2.2.4Alternative
  :PROPERTIES:
  :CUSTOM_ID: alternative
  :END:

With parameter =direction=.

The production
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]]::[empty]
evaluates as follows:

1. Return a Matcher that takes two arguments, a State =x= and a
   Continuation =c=, and returns the result of calling =c=(=x=).

The production
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]]::[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][[https://tc39.es/ecma262/#prod-Term][Term]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Alternative][Alternative]]
   with argument =direction= to obtain a Matcher =m1=.
2. Evaluate [[https://tc39.es/ecma262/#prod-Term][Term]] with argument
   =direction= to obtain a Matcher =m2=.
3. If =direction= is equal to +1, then

   1. Return an internal Matcher closure that takes two arguments, a
      State =x= and a Continuation =c=, and performs the following
      steps:

      1. Let =d= be a Continuation that takes a State argument =y= and
         returns the result of calling =m2=(=y=, =c=).
      2. Call =m1=(=x=, =d=) and return its result.

4. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =direction= is equal
      to -1.
   2. Return an internal Matcher closure that takes two arguments, a
      State =x= and a Continuation =c=, and performs the following
      steps:

      1. Let =d= be a Continuation that takes a State argument =y= and
         returns the result of calling =m1=(=y=, =c=).
      2. Call =m2=(=x=, =d=) and return its result.

Note

Consecutive [[https://tc39.es/ecma262/#prod-Term][Term]]s try to
simultaneously match consecutive portions of =Input=. When =direction=
is equal to +1, if the left
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]], the right
[[https://tc39.es/ecma262/#prod-Term][Term]], and the sequel of the
regular expression all have choice points, all choices in the sequel are
tried before moving on to the next choice in the right
[[https://tc39.es/ecma262/#prod-Term][Term]], and all choices in the
right [[https://tc39.es/ecma262/#prod-Term][Term]] are tried before
moving on to the next choice in the left
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]]. When
=direction= is equal to -1, the evaluation order of
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]] and
[[https://tc39.es/ecma262/#prod-Term][Term]] are reversed.

* 21.2.2.5Term
  :PROPERTIES:
  :CUSTOM_ID: term
  :END:

With parameter =direction=.

The production
[[https://tc39.es/ecma262/#prod-Term][Term]]::[[https://tc39.es/ecma262/#prod-Assertion][Assertion]]
evaluates as follows:

1. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Evaluate [[https://tc39.es/ecma262/#prod-Assertion][Assertion]] to
      obtain an AssertionTester =t=.
   2. Call =t=(=x=) and let =r= be the resulting Boolean value.
   3. If =r= is false, return failure.
   4. Call =c=(=x=) and return its result.

Note

The AssertionTester is independent of =direction=.

The production
[[https://tc39.es/ecma262/#prod-Term][Term]]::[[https://tc39.es/ecma262/#prod-Atom][Atom]]
evaluates as follows:

1. Return the Matcher that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-Atom][Atom]] with argument
   =direction=.

The production
[[https://tc39.es/ecma262/#prod-Term][Term]]::[[https://tc39.es/ecma262/#prod-Atom][Atom]][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Atom][Atom]] with argument
   =direction= to obtain a Matcher =m=.
2. Evaluate [[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]] to
   obtain the three results: an
   [[https://tc39.es/ecma262/#integer][integer]] =min=, an
   [[https://tc39.es/ecma262/#integer][integer]] (or ∞) =max=, and
   Boolean =greedy=.
3. [[https://tc39.es/ecma262/#assert][Assert]]: If =max= is finite, then
   =max= is not less than =min=.
4. Let =parenIndex= be the number of left-capturing parentheses in the
   entire regular expression that occur to the left of this
   [[https://tc39.es/ecma262/#prod-Term][Term]]. This is the total
   number of
   [[https://tc39.es/ecma262/#prod-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
   Parse Nodes prior to or enclosing this
   [[https://tc39.es/ecma262/#prod-Term][Term]].
5. Let =parenCount= be the number of left-capturing parentheses in
   [[https://tc39.es/ecma262/#prod-Atom][Atom]]. This is the total
   number of
   [[https://tc39.es/ecma262/#prod-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
   Parse Nodes enclosed by [[https://tc39.es/ecma262/#prod-Atom][Atom]].
6. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Call
      [[https://tc39.es/ecma262/#sec-runtime-semantics-repeatmatcher-abstract-operation][RepeatMatcher]](=m=,
      =min=, =max=, =greedy=, =x=, =c=, =parenIndex=, =parenCount=) and
      return its result.

* 21.2.2.5.1Runtime Semantics: RepeatMatcher ( =m=, =min=, =max=,
=greedy=, =x=, =c=, =parenIndex=, =parenCount= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-repeatmatcher-m-min-max-greedy-x-c-parenindex-parencount
  :END:

The abstract operation RepeatMatcher takes eight parameters, a Matcher
=m=, an [[https://tc39.es/ecma262/#integer][integer]] =min=, an
[[https://tc39.es/ecma262/#integer][integer]] (or ∞) =max=, a Boolean
=greedy=, a State =x=, a Continuation =c=, an
[[https://tc39.es/ecma262/#integer][integer]] =parenIndex=, and an
[[https://tc39.es/ecma262/#integer][integer]] =parenCount=, and performs
the following steps:

1.  If =max= is zero, return =c=(=x=).
2.  Let =d= be an internal Continuation closure that takes one State
    argument =y= and performs the following steps:

    1. If =min= is zero and =y='s =endIndex= is equal to =x='s
       =endIndex=, return failure.
    2. If =min= is zero, let =min2= be zero; otherwise let =min2= be
       =min= - 1.
    3. If =max= is ∞, let =max2= be ∞; otherwise let =max2= be =max= -
       1.
    4. Call
       [[https://tc39.es/ecma262/#sec-runtime-semantics-repeatmatcher-abstract-operation][RepeatMatcher]](=m=,
       =min2=, =max2=, =greedy=, =y=, =c=, =parenIndex=, =parenCount=)
       and return its result.

3.  Let =cap= be a copy of =x='s =captures=
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4.  For each [[https://tc39.es/ecma262/#integer][integer]] =k= that
    satisfies =parenIndex= < =k= and =k= ≤ =parenIndex= + =parenCount=,
    set =cap=[=k=] to undefined.
5.  Let =e= be =x='s =endIndex=.
6.  Let =xr= be the State (=e=, =cap=).
7.  If =min= is not zero, return =m=(=xr=, =d=).
8.  If =greedy= is false, then

    1. Call =c=(=x=) and let =z= be its result.
    2. If =z= is not failure, return =z=.
    3. Call =m=(=xr=, =d=) and return its result.

9.  Call =m=(=xr=, =d=) and let =z= be its result.
10. If =z= is not failure, return =z=.
11. Call =c=(=x=) and return its result.

Note 1

An [[https://tc39.es/ecma262/#prod-Atom][Atom]] followed by a
[[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]] is repeated the
number of times specified by the
[[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]. A
[[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]] can be
non-greedy, in which case the
[[https://tc39.es/ecma262/#prod-Atom][Atom]] pattern is repeated as few
times as possible while still matching the sequel, or it can be greedy,
in which case the [[https://tc39.es/ecma262/#prod-Atom][Atom]] pattern
is repeated as many times as possible while still matching the sequel.
The [[https://tc39.es/ecma262/#prod-Atom][Atom]] pattern is repeated
rather than the input character sequence that it matches, so different
repetitions of the [[https://tc39.es/ecma262/#prod-Atom][Atom]] can
match different input substrings.

Note 2

If the [[https://tc39.es/ecma262/#prod-Atom][Atom]] and the sequel of
the regular expression all have choice points, the
[[https://tc39.es/ecma262/#prod-Atom][Atom]] is first matched as many
(or as few, if non-greedy) times as possible. All choices in the sequel
are tried before moving on to the next choice in the last repetition of
[[https://tc39.es/ecma262/#prod-Atom][Atom]]. All choices in the last
(n^{th}) repetition of [[https://tc39.es/ecma262/#prod-Atom][Atom]] are
tried before moving on to the next choice in the next-to-last (n -
1)^{st} repetition of [[https://tc39.es/ecma262/#prod-Atom][Atom]]; at
which point it may turn out that more or fewer repetitions of
[[https://tc39.es/ecma262/#prod-Atom][Atom]] are now possible; these are
exhausted (again, starting with either as few or as many as possible)
before moving on to the next choice in the (n - 1)^{st} repetition of
[[https://tc39.es/ecma262/#prod-Atom][Atom]] and so on.

Compare

#+BEGIN_EXAMPLE
  /a[a-z]{2,4}/.exec("abcdefghi")
#+END_EXAMPLE

which returns "abcde" with

#+BEGIN_EXAMPLE
  /a[a-z]{2,4}?/.exec("abcdefghi")
#+END_EXAMPLE

which returns "abc".

Consider also

#+BEGIN_EXAMPLE
  /(aa|aabaac|ba|b|c)*/.exec("aabaac")
#+END_EXAMPLE

which, by the choice point ordering above, returns the array

#+BEGIN_EXAMPLE
  ["aaba", "ba"]
#+END_EXAMPLE

and not any of:

#+BEGIN_EXAMPLE
  ["aabaac", "aabaac"]
  ["aabaac", "c"]
#+END_EXAMPLE

The above ordering of choice points can be used to write a regular
expression that calculates the greatest common divisor of two numbers
(represented in unary notation). The following example calculates the
gcd of 10 and 15:

#+BEGIN_EXAMPLE
  "aaaaaaaaaa,aaaaaaaaaaaaaaa".replace(/^(a+)\1*,\1+$/, "$1")
#+END_EXAMPLE

which returns the gcd in unary notation "aaaaa".

Note 3

Step 4 of the RepeatMatcher clears
[[https://tc39.es/ecma262/#prod-Atom][Atom]]'s captures each time
[[https://tc39.es/ecma262/#prod-Atom][Atom]] is repeated. We can see its
behaviour in the regular expression

#+BEGIN_EXAMPLE
  /(z)((a+)?(b+)?(c))*/.exec("zaacbbbcac")
#+END_EXAMPLE

which returns the array

#+BEGIN_EXAMPLE
  ["zaacbbbcac", "z", "ac", "a", undefined, "c"]
#+END_EXAMPLE

and not

#+BEGIN_EXAMPLE
  ["zaacbbbcac", "z", "ac", "a", "bbb", "c"]
#+END_EXAMPLE

because each iteration of the outermost =*= clears all captured Strings
contained in the quantified
[[https://tc39.es/ecma262/#prod-Atom][Atom]], which in this case
includes capture Strings numbered 2, 3, 4, and 5.

Note 4

Step 1 of the RepeatMatcher's =d= closure states that, once the minimum
number of repetitions has been satisfied, any more expansions of
[[https://tc39.es/ecma262/#prod-Atom][Atom]] that match the empty
character sequence are not considered for further repetitions. This
prevents the regular expression engine from falling into an infinite
loop on patterns such as:

#+BEGIN_EXAMPLE
  /(a*)*/.exec("b")
#+END_EXAMPLE

or the slightly more complicated:

#+BEGIN_EXAMPLE
  /(a*)b\1+/.exec("baaaac")
#+END_EXAMPLE

which returns the array

#+BEGIN_EXAMPLE
  ["b", ""]
#+END_EXAMPLE

* 21.2.2.6Assertion
  :PROPERTIES:
  :CUSTOM_ID: assertion
  :END:

The production [[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::^
evaluates as follows:

1. Return an internal AssertionTester closure that takes a State
   argument =x= and performs the following steps:

   1. Let =e= be =x='s =endIndex=.
   2. If =e= is zero, return true.
   3. If =Multiline= is false, return false.
   4. If the character =Input=[=e= - 1] is one of
      [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]],
      return true.
   5. Return false.

Note

Even when the =y= flag is used with a pattern, =^= always matches only
at the beginning of =Input=, or (if =Multiline= is true) at the
beginning of a line.

The production [[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::$
evaluates as follows:

1. Return an internal AssertionTester closure that takes a State
   argument =x= and performs the following steps:

   1. Let =e= be =x='s =endIndex=.
   2. If =e= is equal to =InputLength=, return true.
   3. If =Multiline= is false, return false.
   4. If the character =Input=[=e=] is one of
      [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]],
      return true.
   5. Return false.

The production
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::\b evaluates as
follows:

1. Return an internal AssertionTester closure that takes a State
   argument =x= and performs the following steps:

   1. Let =e= be =x='s =endIndex=.
   2. Call
      [[https://tc39.es/ecma262/#sec-runtime-semantics-iswordchar-abstract-operation][IsWordChar]](=e= -
      1) and let =a= be the Boolean result.
   3. Call
      [[https://tc39.es/ecma262/#sec-runtime-semantics-iswordchar-abstract-operation][IsWordChar]](=e=)
      and let =b= be the Boolean result.
   4. If =a= is true and =b= is false, return true.
   5. If =a= is false and =b= is true, return true.
   6. Return false.

The production
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::\B evaluates as
follows:

1. Return an internal AssertionTester closure that takes a State
   argument =x= and performs the following steps:

   1. Let =e= be =x='s =endIndex=.
   2. Call
      [[https://tc39.es/ecma262/#sec-runtime-semantics-iswordchar-abstract-operation][IsWordChar]](=e= -
      1) and let =a= be the Boolean result.
   3. Call
      [[https://tc39.es/ecma262/#sec-runtime-semantics-iswordchar-abstract-operation][IsWordChar]](=e=)
      and let =b= be the Boolean result.
   4. If =a= is true and =b= is false, return false.
   5. If =a= is false and =b= is true, return false.
   6. Return true.

The production
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::(?=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
   with +1 as its =direction= argument to obtain a Matcher =m=.
2. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Let =d= be a Continuation that always returns its State argument
      as a successful MatchResult.
   2. Call =m=(=x=, =d=) and let =r= be its result.
   3. If =r= is failure, return failure.
   4. Let =y= be =r='s State.
   5. Let =cap= be =y='s =captures=
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   6. Let =xe= be =x='s =endIndex=.
   7. Let =z= be the State (=xe=, =cap=).
   8. Call =c=(=z=) and return its result.

The production
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::(?![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
   with +1 as its =direction= argument to obtain a Matcher =m=.
2. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Let =d= be a Continuation that always returns its State argument
      as a successful MatchResult.
   2. Call =m=(=x=, =d=) and let =r= be its result.
   3. If =r= is not failure, return failure.
   4. Call =c=(=x=) and return its result.

The production
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::(?<=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
   with -1 as its =direction= argument to obtain a Matcher =m=.
2. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Let =d= be a Continuation that always returns its State argument
      as a successful MatchResult.
   2. Call =m=(=x=, =d=) and let =r= be its result.
   3. If =r= is failure, return failure.
   4. Let =y= be =r='s State.
   5. Let =cap= be =y='s =captures=
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   6. Let =xe= be =x='s =endIndex=.
   7. Let =z= be the State (=xe=, =cap=).
   8. Call =c=(=z=) and return its result.

The production
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]]::(?<![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
   with -1 as its =direction= argument to obtain a Matcher =m=.
2. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Let =d= be a Continuation that always returns its State argument
      as a successful MatchResult.
   2. Call =m=(=x=, =d=) and let =r= be its result.
   3. If =r= is not failure, return failure.
   4. Call =c=(=x=) and return its result.

* 21.2.2.6.1Runtime Semantics: WordCharacters ( )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-wordcharacters
  :END:

The abstract operation WordCharacters performs the following steps:

1. Let =A= be a set of characters containing the sixty-three characters:
   | =a=   | =b=   | =c=   | =d=   | =e=   | =f=   | =g=   | =h=   | =i=   | =j=   | =k=   | =l=   | =m=   | =n=   | =o=   | =p=   | =q=   | =r=   | =s=   | =t=   | =u=   | =v=   | =w=   | =x=   | =y=   | =z=   |
   | =A=   | =B=   | =C=   | =D=   | =E=   | =F=   | =G=   | =H=   | =I=   | =J=   | =K=   | =L=   | =M=   | =N=   | =O=   | =P=   | =Q=   | =R=   | =S=   | =T=   | =U=   | =V=   | =W=   | =X=   | =Y=   | =Z=   |
   | =0=   | =1=   | =2=   | =3=   | =4=   | =5=   | =6=   | =7=   | =8=   | =9=   | =_=   |       |       |       |       |       |       |       |       |       |       |       |       |       |       |       |

2. Let =U= be an empty set.
3. For each character =c= not in set =A= where
   [[https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch][Canonicalize]](=c=)
   is in =A=, add =c= to =U=.
4. [[https://tc39.es/ecma262/#assert][Assert]]: Unless =Unicode= and
   =IgnoreCase= are both true, =U= is empty.
5. Add the characters in set =U= to set =A=.
6. Return =A=.

* 21.2.2.6.2Runtime Semantics: IsWordChar ( =e= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-iswordchar-e
  :END:

The abstract operation IsWordChar takes an
[[https://tc39.es/ecma262/#integer][integer]] parameter =e= and performs
the following steps:

1. If =e= is -1 or =e= is =InputLength=, return false.
2. Let =c= be the character =Input=[=e=].
3. Let =wordChars= be the result of
   ! [[https://tc39.es/ecma262/#sec-runtime-semantics-wordcharacters-abstract-operation][WordCharacters]]().
4. If =c= is in =wordChars=, return true.
5. Return false.

* 21.2.2.7Quantifier
  :PROPERTIES:
  :CUSTOM_ID: quantifier
  :END:

The production
[[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]::[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]
   to obtain the two results: an
   [[https://tc39.es/ecma262/#integer][integer]] =min= and an
   [[https://tc39.es/ecma262/#integer][integer]] (or ∞) =max=.
2. Return the three results =min=, =max=, and true.

The production
[[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]::[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]?
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]
   to obtain the two results: an
   [[https://tc39.es/ecma262/#integer][integer]] =min= and an
   [[https://tc39.es/ecma262/#integer][integer]] (or ∞) =max=.
2. Return the three results =min=, =max=, and false.

The production
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::*
evaluates as follows:

1. Return the two results 0 and ∞.

The production
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::+
evaluates as follows:

1. Return the two results 1 and ∞.

The production
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::?
evaluates as follows:

1. Return the two results 0 and 1.

The production
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
evaluates as follows:

1. Let =i= be the MV of
   [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] (see
   [[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]]).
2. Return the two results =i= and =i=.

The production
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],}
evaluates as follows:

1. Let =i= be the MV of
   [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
2. Return the two results =i= and ∞.

The production
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
evaluates as follows:

1. Let =i= be the MV of the first
   [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
2. Let =j= be the MV of the second
   [[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].
3. Return the two results =i= and =j=.

* 21.2.2.8Atom
  :PROPERTIES:
  :CUSTOM_ID: atom
  :END:

With parameter =direction=.

The production
[[https://tc39.es/ecma262/#prod-Atom][Atom]]::[[https://tc39.es/ecma262/#prod-PatternCharacter][PatternCharacter]]
evaluates as follows:

1. Let =ch= be the character matched by
   [[https://tc39.es/ecma262/#prod-PatternCharacter][PatternCharacter]].
2. Let =A= be a one-element CharSet containing the character =ch=.
3. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-charactersetmatcher-abstract-operation][CharacterSetMatcher]](=A=,
   false, =direction=) and return its Matcher result.

The production [[https://tc39.es/ecma262/#prod-Atom][Atom]]::. evaluates
as follows:

1. If =DotAll= is true, then

   1. Let =A= be the set of all characters.

2. Otherwise, let =A= be the set of all characters except
   [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]].
3. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-charactersetmatcher-abstract-operation][CharacterSetMatcher]](=A=,
   false, =direction=) and return its Matcher result.

The production
[[https://tc39.es/ecma262/#prod-Atom][Atom]]::\[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]]
evaluates as follows:

1. Return the Matcher that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]] with
   argument =direction=.

The production
[[https://tc39.es/ecma262/#prod-Atom][Atom]]::[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]] to
   obtain a CharSet =A= and a Boolean =invert=.
2. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-charactersetmatcher-abstract-operation][CharacterSetMatcher]](=A=,
   =invert=, =direction=) and return its Matcher result.

The production
[[https://tc39.es/ecma262/#prod-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
   with argument =direction= to obtain a Matcher =m=.
2. Let =parenIndex= be the number of left-capturing parentheses in the
   entire regular expression that occur to the left of this
   [[https://tc39.es/ecma262/#prod-Atom][Atom]]. This is the total
   number of
   [[https://tc39.es/ecma262/#prod-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
   Parse Nodes prior to or enclosing this
   [[https://tc39.es/ecma262/#prod-Atom][Atom]].
3. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1. Let =d= be an internal Continuation closure that takes one State
      argument =y= and performs the following steps:

      1. Let =cap= be a copy of =y='s =captures=
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
      2. Let =xe= be =x='s =endIndex=.
      3. Let =ye= be =y='s =endIndex=.
      4. If =direction= is equal to +1, then

         1. [[https://tc39.es/ecma262/#assert][Assert]]: =xe= ≤ =ye=.
         2. Let =s= be a new
            [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
            whose elements are the characters of =Input= at indices =xe=
            (inclusive) through =ye= (exclusive).

      5. Else,

         1. [[https://tc39.es/ecma262/#assert][Assert]]: =direction= is
            equal to -1.
         2. [[https://tc39.es/ecma262/#assert][Assert]]: =ye= ≤ =xe=.
         3. Let =s= be a new
            [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
            whose elements are the characters of =Input= at indices =ye=
            (inclusive) through =xe= (exclusive).

      6. Set =cap=[=parenIndex= + 1] to =s=.
      7. Let =z= be the State (=ye=, =cap=).
      8. Call =c=(=z=) and return its result.

   2. Call =m=(=x=, =d=) and return its result.

The production
[[https://tc39.es/ecma262/#prod-Atom][Atom]]::(?:[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
evaluates as follows:

1. Return the Matcher that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] with
   argument =direction=.

* 21.2.2.8.1Runtime Semantics: CharacterSetMatcher ( =A=, =invert=,
=direction= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-charactersetmatcher-a-invert-direction
  :END:

The abstract operation CharacterSetMatcher takes three arguments, a
CharSet =A=, a Boolean flag =invert=, and an
[[https://tc39.es/ecma262/#integer][integer]] =direction=, and performs
the following steps:

1. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1.  Let =e= be =x='s =endIndex=.
   2.  Let =f= be =e= + =direction=.
   3.  If =f= < 0 or =f= > =InputLength=, return failure.
   4.  Let =index= be [[https://tc39.es/ecma262/#eqn-min][min]](=e=,
       =f=).
   5.  Let =ch= be the character =Input=[=index=].
   6.  Let =cc= be
       [[https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch][Canonicalize]](=ch=).
   7.  If =invert= is false, then

       1. If there does not exist a member =a= of set =A= such that
          [[https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch][Canonicalize]](=a=)
          is =cc=, return failure.

   8.  Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =invert= is true.
       2. If there exists a member =a= of set =A= such that
          [[https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch][Canonicalize]](=a=)
          is =cc=, return failure.

   9.  Let =cap= be =x='s =captures=
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   10. Let =y= be the State (=f=, =cap=).
   11. Call =c=(=y=) and return its result.

* 21.2.2.8.2Runtime Semantics: Canonicalize ( =ch= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-canonicalize-ch
  :END:

The abstract operation Canonicalize takes a character parameter =ch= and
performs the following steps:

1. If =IgnoreCase= is false, return =ch=.
2. If =Unicode= is true, then

   1. If the file CaseFolding.txt of the Unicode Character Database
      provides a simple or common case folding mapping for =ch=, return
      the result of applying that mapping to =ch=.
   2. Return =ch=.

3. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =ch= is a UTF-16 code
      unit.
   2. Let =s= be the String value consisting of the single code unit
      =ch=.
   3. Let =u= be the same result produced as if by performing the
      algorithm for =String.prototype.toUpperCase= using =s= as the this
      value.
   4. [[https://tc39.es/ecma262/#assert][Assert]]:
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=u=)
      is String.
   5. If =u= does not consist of a single code unit, return =ch=.
   6. Let =cu= be =u='s single code unit element.
   7. If the numeric value of =ch= ≥ 128 and the numeric value of =cu= <
      128, return =ch=.
   8. Return =cu=.

Note 1

Parentheses of the form =(=
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] =)= serve
both to group the components of the
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] pattern
together and to save the result of the match. The result can be used
either in a backreference (=\= followed by a nonzero decimal number),
referenced in a replace String, or returned as part of an array from the
regular expression matching internal procedure. To inhibit the capturing
behaviour of parentheses, use the form =(?:=
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] =)= instead.

Note 2

The form =(?==
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] =)= specifies
a zero-width positive lookahead. In order for it to succeed, the pattern
inside [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] must
match at the current position, but the current position is not advanced
before matching the sequel. If
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] can match at
the current position in several ways, only the first one is tried.
Unlike other regular expression operators, there is no backtracking into
a =(?== form (this unusual behaviour is inherited from Perl). This only
matters when the
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] contains
capturing parentheses and the sequel of the pattern contains
backreferences to those captures.

For example,

#+BEGIN_EXAMPLE
  /(?=(a+))/.exec("baaabac")
#+END_EXAMPLE

matches the empty String immediately after the first =b= and therefore
returns the array:

#+BEGIN_EXAMPLE
  ["", "aaa"]
#+END_EXAMPLE

To illustrate the lack of backtracking into the lookahead, consider:

#+BEGIN_EXAMPLE
  /(?=(a+))a*b\1/.exec("baaabac")
#+END_EXAMPLE

This expression returns

#+BEGIN_EXAMPLE
  ["aba", "a"]
#+END_EXAMPLE

and not:

#+BEGIN_EXAMPLE
  ["aaaba", "a"]
#+END_EXAMPLE

Note 3

The form =(?!=
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] =)= specifies
a zero-width negative lookahead. In order for it to succeed, the pattern
inside [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] must
fail to match at the current position. The current position is not
advanced before matching the sequel.
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]] can contain
capturing parentheses, but backreferences to them only make sense from
within [[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]]
itself. Backreferences to these capturing parentheses from elsewhere in
the pattern always return undefined because the negative lookahead must
fail for the pattern to succeed. For example,

#+BEGIN_EXAMPLE
  /(.*?)a(?!(a+)b\2c)\2(.*)/.exec("baaabaac")
#+END_EXAMPLE

looks for an =a= not immediately followed by some positive number n of
=a='s, a =b=, another n =a='s (specified by the first =\2=) and a =c=.
The second =\2= is outside the negative lookahead, so it matches against
undefined and therefore always succeeds. The whole expression returns
the array:

#+BEGIN_EXAMPLE
  ["baaabaac", "ba", undefined, "abaac"]
#+END_EXAMPLE

Note 4

In case-insignificant matches when =Unicode= is true, all characters are
implicitly case-folded using the simple mapping provided by the Unicode
standard immediately before they are compared. The simple mapping always
maps to a single code point, so it does not map, for example, =ß=
(U+00DF) to =SS=. It may however map a code point outside the Basic
Latin range to a character within, for example, =ſ= (U+017F) to =s=.
Such characters are not mapped if =Unicode= is false. This prevents
Unicode code points such as U+017F and U+212A from matching regular
expressions such as =/[a-z]/i=, but they will match =/[a-z]/ui=.

* 21.2.2.8.3Runtime Semantics: UnicodeMatchProperty ( =p= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-unicodematchproperty-p
  :END:

The abstract operation UnicodeMatchProperty takes a parameter =p= that
is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of Unicode code points and performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =p= is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points that is identical to a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points that is a Unicode
   [[https://tc39.es/ecma262/#property-name][property name]] or property
   alias listed in the
   “[[https://tc39.es/ecma262/#property-name][Property name]] and
   aliases” column of
   [[https://tc39.es/ecma262/#table-nonbinary-unicode-properties][Table
   56]] or
   [[https://tc39.es/ecma262/#table-binary-unicode-properties][Table
   57]].
2. Let =c= be the canonical
   [[https://tc39.es/ecma262/#property-name][property name]] of =p= as
   given in the “Canonical
   [[https://tc39.es/ecma262/#property-name][property name]]” column of
   the corresponding row.
3. Return the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points of =c=.

Implementations must support the Unicode property names and aliases
listed in
[[https://tc39.es/ecma262/#table-nonbinary-unicode-properties][Table
56]] and
[[https://tc39.es/ecma262/#table-binary-unicode-properties][Table 57]].
To ensure interoperability, implementations must not support any other
property names or aliases.

Note 1

For example, =Script_Extensions=
([[https://tc39.es/ecma262/#property-name][property name]]) and =scx=
(property alias) are valid, but =script_extensions= or =Scx= aren't.

Note 2

The listed properties form a superset of what
[[https://unicode.org/reports/tr18/#RL1.2][UTS18 RL1.2]] requires.

Table 56: Non-binary Unicode property aliases and their canonical
property names

| [[https://tc39.es/ecma262/#property-name][Property name]] and aliases   | Canonical [[https://tc39.es/ecma262/#property-name][property name]]                   |
|-------------------------------------------------------------------------+---------------------------------------------------------------------------------------|
| - =General_Category=                                                    | [[https://unicode.org/reports/tr18/#General_Category_Property][=General_Category=]]   |
| - =gc=                                                                  |                                                                                       |
| - =Script=                                                              | [[https://unicode.org/reports/tr24/#Script][=Script=]]                                |
| - =sc=                                                                  |                                                                                       |
| - =Script_Extensions=                                                   | [[https://unicode.org/reports/tr24/#Script_Extensions][=Script_Extensions=]]          |
| - =scx=                                                                 |                                                                                       |

Table 57: Binary Unicode property aliases and their canonical property
names

| [[https://tc39.es/ecma262/#property-name][Property name]] and aliases   | Canonical [[https://tc39.es/ecma262/#property-name][property name]]                                  |
|-------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------|
| =ASCII=                                                                 | [[https://unicode.org/reports/tr18/#General_Category_Property][=ASCII=]]                             |
| - =ASCII_Hex_Digit=                                                     | [[https://unicode.org/reports/tr44/#ASCII_Hex_Digit][=ASCII_Hex_Digit=]]                             |
| - =AHex=                                                                |                                                                                                      |
| - =Alphabetic=                                                          | [[https://unicode.org/reports/tr44/#Alphabetic][=Alphabetic=]]                                       |
| - =Alpha=                                                               |                                                                                                      |
| =Any=                                                                   | [[https://unicode.org/reports/tr18/#General_Category_Property][=Any=]]                               |
| =Assigned=                                                              | [[https://unicode.org/reports/tr18/#General_Category_Property][=Assigned=]]                          |
| - =Bidi_Control=                                                        | [[https://unicode.org/reports/tr44/#Bidi_Control][=Bidi_Control=]]                                   |
| - =Bidi_C=                                                              |                                                                                                      |
| - =Bidi_Mirrored=                                                       | [[https://unicode.org/reports/tr44/#Bidi_Mirrored][=Bidi_Mirrored=]]                                 |
| - =Bidi_M=                                                              |                                                                                                      |
| - =Case_Ignorable=                                                      | [[https://unicode.org/reports/tr44/#Case_Ignorable][=Case_Ignorable=]]                               |
| - =CI=                                                                  |                                                                                                      |
| =Cased=                                                                 | [[https://unicode.org/reports/tr44/#Cased][=Cased=]]                                                 |
| - =Changes_When_Casefolded=                                             | [[https://unicode.org/reports/tr44/#CWCF][=Changes_When_Casefolded=]]                                |
| - =CWCF=                                                                |                                                                                                      |
| - =Changes_When_Casemapped=                                             | [[https://unicode.org/reports/tr44/#CWCM][=Changes_When_Casemapped=]]                                |
| - =CWCM=                                                                |                                                                                                      |
| - =Changes_When_Lowercased=                                             | [[https://unicode.org/reports/tr44/#CWL][=Changes_When_Lowercased=]]                                 |
| - =CWL=                                                                 |                                                                                                      |
| - =Changes_When_NFKC_Casefolded=                                        | [[https://unicode.org/reports/tr44/#CWKCF][=Changes_When_NFKC_Casefolded=]]                          |
| - =CWKCF=                                                               |                                                                                                      |
| - =Changes_When_Titlecased=                                             | [[https://unicode.org/reports/tr44/#CWT][=Changes_When_Titlecased=]]                                 |
| - =CWT=                                                                 |                                                                                                      |
| - =Changes_When_Uppercased=                                             | [[https://unicode.org/reports/tr44/#CWU][=Changes_When_Uppercased=]]                                 |
| - =CWU=                                                                 |                                                                                                      |
| =Dash=                                                                  | [[https://unicode.org/reports/tr44/#Dash][=Dash=]]                                                   |
| - =Default_Ignorable_Code_Point=                                        | [[https://unicode.org/reports/tr44/#Default_Ignorable_Code_Point][=Default_Ignorable_Code_Point=]]   |
| - =DI=                                                                  |                                                                                                      |
| - =Deprecated=                                                          | [[https://unicode.org/reports/tr44/#Deprecated][=Deprecated=]]                                       |
| - =Dep=                                                                 |                                                                                                      |
| - =Diacritic=                                                           | [[https://unicode.org/reports/tr44/#Diacritic][=Diacritic=]]                                         |
| - =Dia=                                                                 |                                                                                                      |
| =Emoji=                                                                 | [[https://unicode.org/reports/tr51/#Emoji_Properties][=Emoji=]]                                      |
| =Emoji_Component=                                                       | [[https://unicode.org/reports/tr51/#Emoji_Properties][=Emoji_Component=]]                            |
| =Emoji_Modifier=                                                        | [[https://unicode.org/reports/tr51/#Emoji_Properties][=Emoji_Modifier=]]                             |
| =Emoji_Modifier_Base=                                                   | [[https://unicode.org/reports/tr51/#Emoji_Properties][=Emoji_Modifier_Base=]]                        |
| =Emoji_Presentation=                                                    | [[https://unicode.org/reports/tr51/#Emoji_Properties][=Emoji_Presentation=]]                         |
| =Extended_Pictographic=                                                 | [[https://unicode.org/reports/tr51/#Emoji_Properties][=Extended_Pictographic=]]                      |
| - =Extender=                                                            | [[https://unicode.org/reports/tr44/#Extender][=Extender=]]                                           |
| - =Ext=                                                                 |                                                                                                      |
| - =Grapheme_Base=                                                       | [[https://unicode.org/reports/tr44/#Grapheme_Base][=Grapheme_Base=]]                                 |
| - =Gr_Base=                                                             |                                                                                                      |
| - =Grapheme_Extend=                                                     | [[https://unicode.org/reports/tr44/#Grapheme_Extend][=Grapheme_Extend=]]                             |
| - =Gr_Ext=                                                              |                                                                                                      |
| - =Hex_Digit=                                                           | [[https://unicode.org/reports/tr44/#Hex_Digit][=Hex_Digit=]]                                         |
| - =Hex=                                                                 |                                                                                                      |
| - =IDS_Binary_Operator=                                                 | [[https://unicode.org/reports/tr44/#IDS_Binary_Operator][=IDS_Binary_Operator=]]                     |
| - =IDSB=                                                                |                                                                                                      |
| - =IDS_Trinary_Operator=                                                | [[https://unicode.org/reports/tr44/#IDS_Trinary_Operator][=IDS_Trinary_Operator=]]                   |
| - =IDST=                                                                |                                                                                                      |
| - =ID_Continue=                                                         | [[https://unicode.org/reports/tr44/#ID_Continue][=ID_Continue=]]                                     |
| - =IDC=                                                                 |                                                                                                      |
| - =ID_Start=                                                            | [[https://unicode.org/reports/tr44/#ID_Start][=ID_Start=]]                                           |
| - =IDS=                                                                 |                                                                                                      |
| - =Ideographic=                                                         | [[https://unicode.org/reports/tr44/#Ideographic][=Ideographic=]]                                     |
| - =Ideo=                                                                |                                                                                                      |
| - =Join_Control=                                                        | [[https://unicode.org/reports/tr44/#Join_Control][=Join_Control=]]                                   |
| - =Join_C=                                                              |                                                                                                      |
| - =Logical_Order_Exception=                                             | [[https://unicode.org/reports/tr44/#Logical_Order_Exception][=Logical_Order_Exception=]]             |
| - =LOE=                                                                 |                                                                                                      |
| - =Lowercase=                                                           | [[https://unicode.org/reports/tr44/#Lowercase][=Lowercase=]]                                         |
| - =Lower=                                                               |                                                                                                      |
| =Math=                                                                  | [[https://unicode.org/reports/tr44/#Math][=Math=]]                                                   |
| - =Noncharacter_Code_Point=                                             | [[https://unicode.org/reports/tr44/#Noncharacter_Code_Point][=Noncharacter_Code_Point=]]             |
| - =NChar=                                                               |                                                                                                      |
| - =Pattern_Syntax=                                                      | [[https://unicode.org/reports/tr44/#Pattern_Syntax][=Pattern_Syntax=]]                               |
| - =Pat_Syn=                                                             |                                                                                                      |
| - =Pattern_White_Space=                                                 | [[https://unicode.org/reports/tr44/#Pattern_White_Space][=Pattern_White_Space=]]                     |
| - =Pat_WS=                                                              |                                                                                                      |
| - =Quotation_Mark=                                                      | [[https://unicode.org/reports/tr44/#Quotation_Mark][=Quotation_Mark=]]                               |
| - =QMark=                                                               |                                                                                                      |
| =Radical=                                                               | [[https://unicode.org/reports/tr44/#Radical][=Radical=]]                                             |
| - =Regional_Indicator=                                                  | [[https://unicode.org/reports/tr44/#Regional_Indicator][=Regional_Indicator=]]                       |
| - =RI=                                                                  |                                                                                                      |
| - =Sentence_Terminal=                                                   | [[https://unicode.org/reports/tr44/#STerm][=Sentence_Terminal=]]                                     |
| - =STerm=                                                               |                                                                                                      |
| - =Soft_Dotted=                                                         | [[https://unicode.org/reports/tr44/#Soft_Dotted][=Soft_Dotted=]]                                     |
| - =SD=                                                                  |                                                                                                      |
| - =Terminal_Punctuation=                                                | [[https://unicode.org/reports/tr44/#Terminal_Punctuation][=Terminal_Punctuation=]]                   |
| - =Term=                                                                |                                                                                                      |
| - =Unified_Ideograph=                                                   | [[https://unicode.org/reports/tr44/#Unified_Ideograph][=Unified_Ideograph=]]                         |
| - =UIdeo=                                                               |                                                                                                      |
| - =Uppercase=                                                           | [[https://unicode.org/reports/tr44/#Uppercase][=Uppercase=]]                                         |
| - =Upper=                                                               |                                                                                                      |
| - =Variation_Selector=                                                  | [[https://unicode.org/reports/tr44/#Variation_Selector][=Variation_Selector=]]                       |
| - =VS=                                                                  |                                                                                                      |
| - =White_Space=                                                         | [[https://unicode.org/reports/tr44/#White_Space][=White_Space=]]                                     |
| - =space=                                                               |                                                                                                      |
| - =XID_Continue=                                                        | [[https://unicode.org/reports/tr44/#XID_Continue][=XID_Continue=]]                                   |
| - =XIDC=                                                                |                                                                                                      |
| - =XID_Start=                                                           | [[https://unicode.org/reports/tr44/#XID_Start][=XID_Start=]]                                         |
| - =XIDS=                                                                |                                                                                                      |

* 21.2.2.8.4Runtime Semantics: UnicodeMatchPropertyValue ( =p=, =v= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-unicodematchpropertyvalue-p-v
  :END:

The abstract operation UnicodeMatchPropertyValue takes two parameters
=p= and =v=, each of which is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of Unicode code points, and performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =p= is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points that is identical to a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points that is a canonical, unaliased Unicode
   [[https://tc39.es/ecma262/#property-name][property name]] listed in
   the “Canonical [[https://tc39.es/ecma262/#property-name][property
   name]]” column of
   [[https://tc39.es/ecma262/#table-nonbinary-unicode-properties][Table
   56]].
2. [[https://tc39.es/ecma262/#assert][Assert]]: =v= is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points that is identical to a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points that is a property value or property value
   alias for Unicode property =p= listed in the “Property value and
   aliases” column of
   [[https://tc39.es/ecma262/#table-unicode-general-category-values][Table
   58]] or [[https://tc39.es/ecma262/#table-unicode-script-values][Table
   59]].
3. Let =value= be the canonical property value of =v= as given in the
   “Canonical property value” column of the corresponding row.
4. Return the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points of =value=.

Implementations must support the Unicode property value names and
aliases listed in
[[https://tc39.es/ecma262/#table-unicode-general-category-values][Table
58]] and [[https://tc39.es/ecma262/#table-unicode-script-values][Table
59]]. To ensure interoperability, implementations must not support any
other property value names or aliases.

Note 1

For example, =Xpeo= and =Old_Persian= are valid =Script_Extensions=
values, but =xpeo= and =Old Persian= aren't.

Note 2

This algorithm differs from
[[https://unicode.org/reports/tr44/#Matching_Symbolic][the matching
rules for symbolic values listed in UAX44]]: case,
[[https://tc39.es/ecma262/#sec-white-space][white space]], U+002D
(HYPHEN-MINUS), and U+005F (LOW LINE) are not ignored, and the =Is=
prefix is not supported.

Table 58: Value aliases and canonical values for the Unicode property
[[https://unicode.org/reports/tr18/#General_Category_Property][=General_Category=]]

| Property value and aliases   | Canonical property value   |
|------------------------------+----------------------------|
| - =Cased_Letter=             | =Cased_Letter=             |
| - =LC=                       |                            |
| - =Close_Punctuation=        | =Close_Punctuation=        |
| - =Pe=                       |                            |
| - =Connector_Punctuation=    | =Connector_Punctuation=    |
| - =Pc=                       |                            |
| - =Control=                  | =Control=                  |
| - =Cc=                       |                            |
| - =cntrl=                    |                            |
| - =Currency_Symbol=          | =Currency_Symbol=          |
| - =Sc=                       |                            |
| - =Dash_Punctuation=         | =Dash_Punctuation=         |
| - =Pd=                       |                            |
| - =Decimal_Number=           | =Decimal_Number=           |
| - =Nd=                       |                            |
| - =digit=                    |                            |
| - =Enclosing_Mark=           | =Enclosing_Mark=           |
| - =Me=                       |                            |
| - =Final_Punctuation=        | =Final_Punctuation=        |
| - =Pf=                       |                            |
| - =Format=                   | =Format=                   |
| - =Cf=                       |                            |
| - =Initial_Punctuation=      | =Initial_Punctuation=      |
| - =Pi=                       |                            |
| - =Letter=                   | =Letter=                   |
| - =L=                        |                            |
| - =Letter_Number=            | =Letter_Number=            |
| - =Nl=                       |                            |
| - =Line_Separator=           | =Line_Separator=           |
| - =Zl=                       |                            |
| - =Lowercase_Letter=         | =Lowercase_Letter=         |
| - =Ll=                       |                            |
| - =Mark=                     | =Mark=                     |
| - =M=                        |                            |
| - =Combining_Mark=           |                            |
| - =Math_Symbol=              | =Math_Symbol=              |
| - =Sm=                       |                            |
| - =Modifier_Letter=          | =Modifier_Letter=          |
| - =Lm=                       |                            |
| - =Modifier_Symbol=          | =Modifier_Symbol=          |
| - =Sk=                       |                            |
| - =Nonspacing_Mark=          | =Nonspacing_Mark=          |
| - =Mn=                       |                            |
| - =Number=                   | =Number=                   |
| - =N=                        |                            |
| - =Open_Punctuation=         | =Open_Punctuation=         |
| - =Ps=                       |                            |
| - =Other=                    | =Other=                    |
| - =C=                        |                            |
| - =Other_Letter=             | =Other_Letter=             |
| - =Lo=                       |                            |
| - =Other_Number=             | =Other_Number=             |
| - =No=                       |                            |
| - =Other_Punctuation=        | =Other_Punctuation=        |
| - =Po=                       |                            |
| - =Other_Symbol=             | =Other_Symbol=             |
| - =So=                       |                            |
| - =Paragraph_Separator=      | =Paragraph_Separator=      |
| - =Zp=                       |                            |
| - =Private_Use=              | =Private_Use=              |
| - =Co=                       |                            |
| - =Punctuation=              | =Punctuation=              |
| - =P=                        |                            |
| - =punct=                    |                            |
| - =Separator=                | =Separator=                |
| - =Z=                        |                            |
| - =Space_Separator=          | =Space_Separator=          |
| - =Zs=                       |                            |
| - =Spacing_Mark=             | =Spacing_Mark=             |
| - =Mc=                       |                            |
| - =Surrogate=                | =Surrogate=                |
| - =Cs=                       |                            |
| - =Symbol=                   | =Symbol=                   |
| - =S=                        |                            |
| - =Titlecase_Letter=         | =Titlecase_Letter=         |
| - =Lt=                       |                            |
| - =Unassigned=               | =Unassigned=               |
| - =Cn=                       |                            |
| - =Uppercase_Letter=         | =Uppercase_Letter=         |
| - =Lu=                       |                            |

Table 59: Value aliases and canonical values for the Unicode properties
[[https://unicode.org/reports/tr24/#Script][=Script=]] and
[[https://unicode.org/reports/tr24/#Script_Extensions][=Script_Extensions=]]

| Property value and aliases   | Canonical property value   |
|------------------------------+----------------------------|
| - =Adlam=                    | =Adlam=                    |
| - =Adlm=                     |                            |
| - =Ahom=                     | =Ahom=                     |
| - =Ahom=                     |                            |
| - =Anatolian_Hieroglyphs=    | =Anatolian_Hieroglyphs=    |
| - =Hluw=                     |                            |
| - =Arabic=                   | =Arabic=                   |
| - =Arab=                     |                            |
| - =Armenian=                 | =Armenian=                 |
| - =Armn=                     |                            |
| - =Avestan=                  | =Avestan=                  |
| - =Avst=                     |                            |
| - =Balinese=                 | =Balinese=                 |
| - =Bali=                     |                            |
| - =Bamum=                    | =Bamum=                    |
| - =Bamu=                     |                            |
| - =Bassa_Vah=                | =Bassa_Vah=                |
| - =Bass=                     |                            |
| - =Batak=                    | =Batak=                    |
| - =Batk=                     |                            |
| - =Bengali=                  | =Bengali=                  |
| - =Beng=                     |                            |
| - =Bhaiksuki=                | =Bhaiksuki=                |
| - =Bhks=                     |                            |
| - =Bopomofo=                 | =Bopomofo=                 |
| - =Bopo=                     |                            |
| - =Brahmi=                   | =Brahmi=                   |
| - =Brah=                     |                            |
| - =Braille=                  | =Braille=                  |
| - =Brai=                     |                            |
| - =Buginese=                 | =Buginese=                 |
| - =Bugi=                     |                            |
| - =Buhid=                    | =Buhid=                    |
| - =Buhd=                     |                            |
| - =Canadian_Aboriginal=      | =Canadian_Aboriginal=      |
| - =Cans=                     |                            |
| - =Carian=                   | =Carian=                   |
| - =Cari=                     |                            |
| - =Caucasian_Albanian=       | =Caucasian_Albanian=       |
| - =Aghb=                     |                            |
| - =Chakma=                   | =Chakma=                   |
| - =Cakm=                     |                            |
| - =Cham=                     | =Cham=                     |
| - =Cham=                     |                            |
| - =Cherokee=                 | =Cherokee=                 |
| - =Cher=                     |                            |
| - =Common=                   | =Common=                   |
| - =Zyyy=                     |                            |
| - =Coptic=                   | =Coptic=                   |
| - =Copt=                     |                            |
| - =Qaac=                     |                            |
| - =Cuneiform=                | =Cuneiform=                |
| - =Xsux=                     |                            |
| - =Cypriot=                  | =Cypriot=                  |
| - =Cprt=                     |                            |
| - =Cyrillic=                 | =Cyrillic=                 |
| - =Cyrl=                     |                            |
| - =Deseret=                  | =Deseret=                  |
| - =Dsrt=                     |                            |
| - =Devanagari=               | =Devanagari=               |
| - =Deva=                     |                            |
| - =Dogra=                    | =Dogra=                    |
| - =Dogr=                     |                            |
| - =Duployan=                 | =Duployan=                 |
| - =Dupl=                     |                            |
| - =Egyptian_Hieroglyphs=     | =Egyptian_Hieroglyphs=     |
| - =Egyp=                     |                            |
| - =Elbasan=                  | =Elbasan=                  |
| - =Elba=                     |                            |
| - =Elymaic=                  | =Elymaic=                  |
| - =Elym=                     |                            |
| - =Ethiopic=                 | =Ethiopic=                 |
| - =Ethi=                     |                            |
| - =Georgian=                 | =Georgian=                 |
| - =Geor=                     |                            |
| - =Glagolitic=               | =Glagolitic=               |
| - =Glag=                     |                            |
| - =Gothic=                   | =Gothic=                   |
| - =Goth=                     |                            |
| - =Grantha=                  | =Grantha=                  |
| - =Gran=                     |                            |
| - =Greek=                    | =Greek=                    |
| - =Grek=                     |                            |
| - =Gujarati=                 | =Gujarati=                 |
| - =Gujr=                     |                            |
| - =Gunjala_Gondi=            | =Gunjala_Gondi=            |
| - =Gong=                     |                            |
| - =Gurmukhi=                 | =Gurmukhi=                 |
| - =Guru=                     |                            |
| - =Han=                      | =Han=                      |
| - =Hani=                     |                            |
| - =Hangul=                   | =Hangul=                   |
| - =Hang=                     |                            |
| - =Hanifi_Rohingya=          | =Hanifi_Rohingya=          |
| - =Rohg=                     |                            |
| - =Hanunoo=                  | =Hanunoo=                  |
| - =Hano=                     |                            |
| - =Hatran=                   | =Hatran=                   |
| - =Hatr=                     |                            |
| - =Hebrew=                   | =Hebrew=                   |
| - =Hebr=                     |                            |
| - =Hiragana=                 | =Hiragana=                 |
| - =Hira=                     |                            |
| - =Imperial_Aramaic=         | =Imperial_Aramaic=         |
| - =Armi=                     |                            |
| - =Inherited=                | =Inherited=                |
| - =Zinh=                     |                            |
| - =Qaai=                     |                            |
| - =Inscriptional_Pahlavi=    | =Inscriptional_Pahlavi=    |
| - =Phli=                     |                            |
| - =Inscriptional_Parthian=   | =Inscriptional_Parthian=   |
| - =Prti=                     |                            |
| - =Javanese=                 | =Javanese=                 |
| - =Java=                     |                            |
| - =Kaithi=                   | =Kaithi=                   |
| - =Kthi=                     |                            |
| - =Kannada=                  | =Kannada=                  |
| - =Knda=                     |                            |
| - =Katakana=                 | =Katakana=                 |
| - =Kana=                     |                            |
| - =Kayah_Li=                 | =Kayah_Li=                 |
| - =Kali=                     |                            |
| - =Kharoshthi=               | =Kharoshthi=               |
| - =Khar=                     |                            |
| - =Khmer=                    | =Khmer=                    |
| - =Khmr=                     |                            |
| - =Khojki=                   | =Khojki=                   |
| - =Khoj=                     |                            |
| - =Khudawadi=                | =Khudawadi=                |
| - =Sind=                     |                            |
| - =Lao=                      | =Lao=                      |
| - =Laoo=                     |                            |
| - =Latin=                    | =Latin=                    |
| - =Latn=                     |                            |
| - =Lepcha=                   | =Lepcha=                   |
| - =Lepc=                     |                            |
| - =Limbu=                    | =Limbu=                    |
| - =Limb=                     |                            |
| - =Linear_A=                 | =Linear_A=                 |
| - =Lina=                     |                            |
| - =Linear_B=                 | =Linear_B=                 |
| - =Linb=                     |                            |
| - =Lisu=                     | =Lisu=                     |
| - =Lisu=                     |                            |
| - =Lycian=                   | =Lycian=                   |
| - =Lyci=                     |                            |
| - =Lydian=                   | =Lydian=                   |
| - =Lydi=                     |                            |
| - =Mahajani=                 | =Mahajani=                 |
| - =Mahj=                     |                            |
| - =Makasar=                  | =Makasar=                  |
| - =Maka=                     |                            |
| - =Malayalam=                | =Malayalam=                |
| - =Mlym=                     |                            |
| - =Mandaic=                  | =Mandaic=                  |
| - =Mand=                     |                            |
| - =Manichaean=               | =Manichaean=               |
| - =Mani=                     |                            |
| - =Marchen=                  | =Marchen=                  |
| - =Marc=                     |                            |
| - =Medefaidrin=              | =Medefaidrin=              |
| - =Medf=                     |                            |
| - =Masaram_Gondi=            | =Masaram_Gondi=            |
| - =Gonm=                     |                            |
| - =Meetei_Mayek=             | =Meetei_Mayek=             |
| - =Mtei=                     |                            |
| - =Mende_Kikakui=            | =Mende_Kikakui=            |
| - =Mend=                     |                            |
| - =Meroitic_Cursive=         | =Meroitic_Cursive=         |
| - =Merc=                     |                            |
| - =Meroitic_Hieroglyphs=     | =Meroitic_Hieroglyphs=     |
| - =Mero=                     |                            |
| - =Miao=                     | =Miao=                     |
| - =Plrd=                     |                            |
| - =Modi=                     | =Modi=                     |
| - =Modi=                     |                            |
| - =Mongolian=                | =Mongolian=                |
| - =Mong=                     |                            |
| - =Mro=                      | =Mro=                      |
| - =Mroo=                     |                            |
| - =Multani=                  | =Multani=                  |
| - =Mult=                     |                            |
| - =Myanmar=                  | =Myanmar=                  |
| - =Mymr=                     |                            |
| - =Nabataean=                | =Nabataean=                |
| - =Nbat=                     |                            |
| - =Nandinagari=              | =Nandinagari=              |
| - =Nand=                     |                            |
| - =New_Tai_Lue=              | =New_Tai_Lue=              |
| - =Talu=                     |                            |
| - =Newa=                     | =Newa=                     |
| - =Newa=                     |                            |
| - =Nko=                      | =Nko=                      |
| - =Nkoo=                     |                            |
| - =Nushu=                    | =Nushu=                    |
| - =Nshu=                     |                            |
| - =Nyiakeng_Puachue_Hmong=   | =Nyiakeng_Puachue_Hmong=   |
| - =Hmnp=                     |                            |
| - =Ogham=                    | =Ogham=                    |
| - =Ogam=                     |                            |
| - =Ol_Chiki=                 | =Ol_Chiki=                 |
| - =Olck=                     |                            |
| - =Old_Hungarian=            | =Old_Hungarian=            |
| - =Hung=                     |                            |
| - =Old_Italic=               | =Old_Italic=               |
| - =Ital=                     |                            |
| - =Old_North_Arabian=        | =Old_North_Arabian=        |
| - =Narb=                     |                            |
| - =Old_Permic=               | =Old_Permic=               |
| - =Perm=                     |                            |
| - =Old_Persian=              | =Old_Persian=              |
| - =Xpeo=                     |                            |
| - =Old_Sogdian=              | =Old_Sogdian=              |
| - =Sogo=                     |                            |
| - =Old_South_Arabian=        | =Old_South_Arabian=        |
| - =Sarb=                     |                            |
| - =Old_Turkic=               | =Old_Turkic=               |
| - =Orkh=                     |                            |
| - =Oriya=                    | =Oriya=                    |
| - =Orya=                     |                            |
| - =Osage=                    | =Osage=                    |
| - =Osge=                     |                            |
| - =Osmanya=                  | =Osmanya=                  |
| - =Osma=                     |                            |
| - =Pahawh_Hmong=             | =Pahawh_Hmong=             |
| - =Hmng=                     |                            |
| - =Palmyrene=                | =Palmyrene=                |
| - =Palm=                     |                            |
| - =Pau_Cin_Hau=              | =Pau_Cin_Hau=              |
| - =Pauc=                     |                            |
| - =Phags_Pa=                 | =Phags_Pa=                 |
| - =Phag=                     |                            |
| - =Phoenician=               | =Phoenician=               |
| - =Phnx=                     |                            |
| - =Psalter_Pahlavi=          | =Psalter_Pahlavi=          |
| - =Phlp=                     |                            |
| - =Rejang=                   | =Rejang=                   |
| - =Rjng=                     |                            |
| - =Runic=                    | =Runic=                    |
| - =Runr=                     |                            |
| - =Samaritan=                | =Samaritan=                |
| - =Samr=                     |                            |
| - =Saurashtra=               | =Saurashtra=               |
| - =Saur=                     |                            |
| - =Sharada=                  | =Sharada=                  |
| - =Shrd=                     |                            |
| - =Shavian=                  | =Shavian=                  |
| - =Shaw=                     |                            |
| - =Siddham=                  | =Siddham=                  |
| - =Sidd=                     |                            |
| - =SignWriting=              | =SignWriting=              |
| - =Sgnw=                     |                            |
| - =Sinhala=                  | =Sinhala=                  |
| - =Sinh=                     |                            |
| - =Sogdian=                  | =Sogdian=                  |
| - =Sogd=                     |                            |
| - =Sora_Sompeng=             | =Sora_Sompeng=             |
| - =Sora=                     |                            |
| - =Soyombo=                  | =Soyombo=                  |
| - =Soyo=                     |                            |
| - =Sundanese=                | =Sundanese=                |
| - =Sund=                     |                            |
| - =Syloti_Nagri=             | =Syloti_Nagri=             |
| - =Sylo=                     |                            |
| - =Syriac=                   | =Syriac=                   |
| - =Syrc=                     |                            |
| - =Tagalog=                  | =Tagalog=                  |
| - =Tglg=                     |                            |
| - =Tagbanwa=                 | =Tagbanwa=                 |
| - =Tagb=                     |                            |
| - =Tai_Le=                   | =Tai_Le=                   |
| - =Tale=                     |                            |
| - =Tai_Tham=                 | =Tai_Tham=                 |
| - =Lana=                     |                            |
| - =Tai_Viet=                 | =Tai_Viet=                 |
| - =Tavt=                     |                            |
| - =Takri=                    | =Takri=                    |
| - =Takr=                     |                            |
| - =Tamil=                    | =Tamil=                    |
| - =Taml=                     |                            |
| - =Tangut=                   | =Tangut=                   |
| - =Tang=                     |                            |
| - =Telugu=                   | =Telugu=                   |
| - =Telu=                     |                            |
| - =Thaana=                   | =Thaana=                   |
| - =Thaa=                     |                            |
| - =Thai=                     | =Thai=                     |
| - =Thai=                     |                            |
| - =Tibetan=                  | =Tibetan=                  |
| - =Tibt=                     |                            |
| - =Tifinagh=                 | =Tifinagh=                 |
| - =Tfng=                     |                            |
| - =Tirhuta=                  | =Tirhuta=                  |
| - =Tirh=                     |                            |
| - =Ugaritic=                 | =Ugaritic=                 |
| - =Ugar=                     |                            |
| - =Vai=                      | =Vai=                      |
| - =Vaii=                     |                            |
| - =Wancho=                   | =Wancho=                   |
| - =Wcho=                     |                            |
| - =Warang_Citi=              | =Warang_Citi=              |
| - =Wara=                     |                            |
| - =Yi=                       | =Yi=                       |
| - =Yiii=                     |                            |
| - =Zanabazar_Square=         | =Zanabazar_Square=         |
| - =Zanb=                     |                            |

* 21.2.2.9AtomEscape
  :PROPERTIES:
  :CUSTOM_ID: atomescape
  :END:

With parameter =direction=.

The production
[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]]::[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]] to
   obtain an [[https://tc39.es/ecma262/#integer][integer]] =n=.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =n= ≤
   =NcapturingParens=.
3. Call
   [[https://tc39.es/ecma262/#sec-backreference-matcher][BackreferenceMatcher]](=n=,
   =direction=) and return its Matcher result.

The production
[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]]::[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]] to
   obtain a character =ch=.
2. Let =A= be a one-element CharSet containing the character =ch=.
3. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-charactersetmatcher-abstract-operation][CharacterSetMatcher]](=A=,
   false, =direction=) and return its Matcher result.

The production
[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]]::[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]
   to obtain a CharSet =A=.
2. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-charactersetmatcher-abstract-operation][CharacterSetMatcher]](=A=,
   false, =direction=) and return its Matcher result.

Note

An escape sequence of the form =\= followed by a nonzero decimal number
=n= matches the result of the =n=^{th} set of capturing parentheses
([[https://tc39.es/ecma262/#sec-notation][21.2.2.1]]). It is an error if
the regular expression has fewer than =n= capturing parentheses. If the
regular expression has =n= or more capturing parentheses but the
=n=^{th} one is undefined because it has not captured anything, then the
backreference always succeeds.

The production
[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]]::k[[https://tc39.es/ecma262/#prod-GroupName][GroupName]]
evaluates as follows:

1. Search the enclosing
   [[https://tc39.es/ecma262/#prod-Pattern][Pattern]] for an instance of
   a [[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]]
   for a
   [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]]
   which has a StringValue equal to the StringValue of the
   [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]]
   contained in [[https://tc39.es/ecma262/#prod-GroupName][GroupName]].
2. [[https://tc39.es/ecma262/#assert][Assert]]: A unique such
   [[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]] is
   found.
3. Let =parenIndex= be the number of left-capturing parentheses in the
   entire regular expression that occur to the left of the located
   [[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]].
   This is the total number of
   [[https://tc39.es/ecma262/#prod-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
   Parse Nodes prior to or enclosing the located
   [[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]].
4. Call
   [[https://tc39.es/ecma262/#sec-backreference-matcher][BackreferenceMatcher]](=parenIndex=,
   =direction=) and return its Matcher result.

* 21.2.2.9.1Runtime Semantics: BackreferenceMatcher ( =n=, =direction= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-backreferencematcher-n-direction
  :END:

The abstract operation BackreferenceMatcher takes two arguments, an
[[https://tc39.es/ecma262/#integer][integer]] =n= and an
[[https://tc39.es/ecma262/#integer][integer]] =direction=, and performs
the following steps:

1. Return an internal Matcher closure that takes two arguments, a State
   =x= and a Continuation =c=, and performs the following steps:

   1.  Let =cap= be =x='s =captures=
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2.  Let =s= be =cap=[=n=].
   3.  If =s= is undefined, return =c=(=x=).
   4.  Let =e= be =x='s =endIndex=.
   5.  Let =len= be the number of elements in =s=.
   6.  Let =f= be =e= + =direction= × =len=.
   7.  If =f= < 0 or =f= > =InputLength=, return failure.
   8.  Let =g= be [[https://tc39.es/ecma262/#eqn-min][min]](=e=, =f=).
   9.  If there exists an [[https://tc39.es/ecma262/#integer][integer]]
       =i= between 0 (inclusive) and =len= (exclusive) such that
       [[https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch][Canonicalize]](=s=[=i=])
       is not the same character value as
       [[https://tc39.es/ecma262/#sec-runtime-semantics-canonicalize-ch][Canonicalize]](=Input=[=g=
       + =i=]), return failure.
   10. Let =y= be the State (=f=, =cap=).
   11. Call =c=(=y=) and return its result.

* 21.2.2.10CharacterEscape
  :PROPERTIES:
  :CUSTOM_ID: characterescape
  :END:

The [[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]
productions evaluate as follows:

[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]::[[https://tc39.es/ecma262/#prod-ControlEscape][ControlEscape]]
c[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]
0[lookahead ∉
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]]
[[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]]

1. Let =cv= be the CharacterValue of this
   [[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]].
2. Return the character whose character value is =cv=.

* 21.2.2.11DecimalEscape
  :PROPERTIES:
  :CUSTOM_ID: decimalescape
  :END:

The [[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]
productions evaluate as follows:

[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt

1. Return the CapturingGroupNumber of this
   [[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]].

Note

If =\= is followed by a decimal number =n= whose first digit is not =0=,
then the escape sequence is considered to be a backreference. It is an
error if =n= is greater than the total number of left-capturing
parentheses in the entire regular expression.

* 21.2.2.12CharacterClassEscape
  :PROPERTIES:
  :CUSTOM_ID: characterclassescape
  :END:

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::d
evaluates as follows:

1. Return the ten-element set of characters containing the characters
   =0= through =9= inclusive.

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::D
evaluates as follows:

1. Return the set of all characters not included in the set returned by
   [[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::d
   .

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::s
evaluates as follows:

1. Return the set of characters containing the characters that are on
   the right-hand side of the
   [[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]] or
   [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
   productions.

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::S
evaluates as follows:

1. Return the set of all characters not included in the set returned by
   [[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::s
   .

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::w
evaluates as follows:

1. Return the set of all characters returned by
   [[https://tc39.es/ecma262/#sec-runtime-semantics-wordcharacters-abstract-operation][WordCharacters]]().

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::W
evaluates as follows:

1. Return the set of all characters not included in the set returned by
   [[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::w
   .

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::p{[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]}
evaluates as follows:

1. Return the CharSet containing all Unicode code points included in the
   CharSet returned by
   [[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]].

The production
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]::P{[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]}
evaluates as follows:

1. Return the CharSet containing all Unicode code points not included in
   the CharSet returned by
   [[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]].

The production
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]=[[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]]
evaluates as follows:

1. Let =ps= be SourceText of
   [[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]].
2. Let =p= be
   ! [[https://tc39.es/ecma262/#sec-runtime-semantics-unicodematchproperty-p][UnicodeMatchProperty]](=ps=).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =p= is a Unicode
   [[https://tc39.es/ecma262/#property-name][property name]] or property
   alias listed in the
   “[[https://tc39.es/ecma262/#property-name][Property name]] and
   aliases” column of
   [[https://tc39.es/ecma262/#table-nonbinary-unicode-properties][Table
   56]].
4. Let =vs= be SourceText of
   [[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]].
5. Let =v= be
   ! [[https://tc39.es/ecma262/#sec-runtime-semantics-unicodematchpropertyvalue-p-v][UnicodeMatchPropertyValue]](=p=,
   =vs=).
6. Return the CharSet containing all Unicode code points whose character
   database definition includes the property =p= with value =v=.

The production
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]::[[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]]
evaluates as follows:

1. Let =s= be SourceText of
   [[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]].
2. If
   ! [[https://tc39.es/ecma262/#sec-runtime-semantics-unicodematchpropertyvalue-p-v][UnicodeMatchPropertyValue]](=General_Category=,
   =s=) is identical to a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of Unicode code points that is the name of a Unicode general category
   or general category alias listed in the “Property value and aliases”
   column of
   [[https://tc39.es/ecma262/#table-unicode-general-category-values][Table
   58]], then

   1. Return the CharSet containing all Unicode code points whose
      character database definition includes the property
      “General_Category” with value =s=.

3. Let =p= be
   ! [[https://tc39.es/ecma262/#sec-runtime-semantics-unicodematchproperty-p][UnicodeMatchProperty]](=s=).
4. [[https://tc39.es/ecma262/#assert][Assert]]: =p= is a binary Unicode
   property or binary property alias listed in the
   “[[https://tc39.es/ecma262/#property-name][Property name]] and
   aliases” column of
   [[https://tc39.es/ecma262/#table-binary-unicode-properties][Table
   57]].
5. Return the CharSet containing all Unicode code points whose character
   database definition includes the property =p= with value “True”.

* 21.2.2.13CharacterClass
  :PROPERTIES:
  :CUSTOM_ID: characterclass
  :END:

The production
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]]::[[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
   to obtain a CharSet =A=.
2. Return the two results =A= and false.

The production
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]]::[^[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
   to obtain a CharSet =A=.
2. Return the two results =A= and true.

* 21.2.2.14ClassRanges
  :PROPERTIES:
  :CUSTOM_ID: classranges
  :END:

The production
[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]::[empty]
evaluates as follows:

1. Return the empty CharSet.

The production
[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]::[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]]
evaluates as follows:

1. Return the CharSet that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]].

* 21.2.2.15NonemptyClassRanges
  :PROPERTIES:
  :CUSTOM_ID: nonemptyclassranges
  :END:

The production
[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]
evaluates as follows:

1. Return the CharSet that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]].

The production
[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]
evaluates as follows:

1. Evaluate [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] to
   obtain a CharSet =A=.
2. Evaluate
   [[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]
   to obtain a CharSet =B=.
3. Return the union of CharSets =A= and =B=.

The production
[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
evaluates as follows:

1. Evaluate the first
   [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] to obtain a
   CharSet =A=.
2. Evaluate the second
   [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] to obtain a
   CharSet =B=.
3. Evaluate [[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
   to obtain a CharSet =C=.
4. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-characterrange-abstract-operation][CharacterRange]](=A=,
   =B=) and let =D= be the resulting CharSet.
5. Return the union of CharSets =D= and =C=.

* 21.2.2.15.1Runtime Semantics: CharacterRange ( =A=, =B= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-characterrange-a-b
  :END:

The abstract operation CharacterRange takes two CharSet parameters =A=
and =B= and performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =A= and =B= each contain
   exactly one character.
2. Let =a= be the one character in CharSet =A=.
3. Let =b= be the one character in CharSet =B=.
4. Let =i= be the character value of character =a=.
5. Let =j= be the character value of character =b=.
6. [[https://tc39.es/ecma262/#assert][Assert]]: =i= ≤ =j=.
7. Return the set containing all characters numbered =i= through =j=,
   inclusive.

* 21.2.2.16NonemptyClassRangesNoDash
  :PROPERTIES:
  :CUSTOM_ID: nonemptyclassrangesnodash
  :END:

The production
[[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]
evaluates as follows:

1. Return the CharSet that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]].

The production
[[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]::[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]] to
   obtain a CharSet =A=.
2. Evaluate
   [[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]
   to obtain a CharSet =B=.
3. Return the union of CharSets =A= and =B=.

The production
[[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]::[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]] to
   obtain a CharSet =A=.
2. Evaluate [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] to
   obtain a CharSet =B=.
3. Evaluate [[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
   to obtain a CharSet =C=.
4. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-characterrange-abstract-operation][CharacterRange]](=A=,
   =B=) and let =D= be the resulting CharSet.
5. Return the union of CharSets =D= and =C=.

Note 1

[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]] can expand
into a single [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]
and/or ranges of two
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] separated by
dashes. In the latter case the
[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]] includes all
characters between the first
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] and the second
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]], inclusive; an
error occurs if either
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] does not
represent a single character (for example, if one is \w) or if the first
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]'s character value
is greater than the second
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]'s character
value.

Note 2

Even if the pattern ignores case, the case of the two ends of a range is
significant in determining which characters belong to the range. Thus,
for example, the pattern =/[E-F]/i= matches only the letters =E=, =F=,
=e=, and =f=, while the pattern =/[E-f]/i= matches all upper and
lower-case letters in the Unicode Basic Latin block as well as the
symbols =[=, =\=, =]=, =^=, =_=, and =`=.

Note 3

A =-= character can be treated literally or it can denote a range. It is
treated literally if it is the first or last character of
[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]], the
beginning or end limit of a range specification, or immediately follows
a range specification.

* 21.2.2.17ClassAtom
  :PROPERTIES:
  :CUSTOM_ID: classatom
  :END:

The production [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]::-
evaluates as follows:

1. Return the CharSet containing the single character =-= U+002D
   (HYPHEN-MINUS).

The production
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]::[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]]
evaluates as follows:

1. Return the CharSet that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]].

* 21.2.2.18ClassAtomNoDash
  :PROPERTIES:
  :CUSTOM_ID: classatomnodash
  :END:

The production
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of \ or ] or - evaluates as follows:

1. Return the CharSet containing the character matched by
   [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]].

The production
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]]::\[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]
evaluates as follows:

1. Return the CharSet that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]].

* 21.2.2.19ClassEscape
  :PROPERTIES:
  :CUSTOM_ID: classescape
  :END:

The [[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]
productions evaluate as follows:

[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::b
[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::-
[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]]

1. Let =cv= be the CharacterValue of this
   [[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]].
2. Let =c= be the character whose character value is =cv=.
3. Return the CharSet containing the single character =c=.

[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]]::[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]]

1. Return the CharSet that is the result of evaluating
   [[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]].

Note

A [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] can use any of
the escape sequences that are allowed in the rest of the regular
expression except for =\b=, =\B=, and backreferences. Inside a
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]], =\b=
means the backspace character, while =\B= and backreferences raise
errors. Using a backreference inside a
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] causes an error.

* 21.2.3The RegExp Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-regexp-constructor
  :END:

The RegExp [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %RegExp%.
- is the initial value of the "RegExp" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new RegExp object when called as a function
  rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. Thus the
  function call =RegExp(…)= is equivalent to the object creation
  expression =new RegExp(…)= with the same arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =RegExp= behaviour must include a
  =super= call to the =RegExp=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with the necessary internal slots.

* 21.2.3.1RegExp ( =pattern=, =flags= )
  :PROPERTIES:
  :CUSTOM_ID: regexp-pattern-flags
  :END:

The following steps are taken:

1. Let =patternIsRegExp= be
   ? [[https://tc39.es/ecma262/#sec-isregexp][IsRegExp]](=pattern=).
2. If NewTarget is undefined, then

   1. Let =newTarget= be the
      [[https://tc39.es/ecma262/#active-function-object][active function
      object]].
   2. If =patternIsRegExp= is true and =flags= is undefined, then

      1. Let =patternConstructor= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=pattern=,
         "constructor").
      2. If
         [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=newTarget=,
         =patternConstructor=) is true, return =pattern=.

3. Else, let =newTarget= be NewTarget.
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=pattern=)
   is Object and =pattern= has a [[RegExpMatcher]] internal slot, then

   1. Let =P= be =pattern=.[[OriginalSource]].
   2. If =flags= is undefined, let =F= be =pattern=.[[OriginalFlags]].
   3. Else, let =F= be =flags=.

5. Else if =patternIsRegExp= is true, then

   1. Let =P= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=pattern=,
      "source").
   2. If =flags= is undefined, then

      1. Let =F= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=pattern=,
         "flags").

   3. Else, let =F= be =flags=.

6. Else,

   1. Let =P= be =pattern=.
   2. Let =F= be =flags=.

7. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-regexpalloc][RegExpAlloc]](=newTarget=).
8. Return
   ? [[https://tc39.es/ecma262/#sec-regexpinitialize][RegExpInitialize]](=O=,
   =P=, =F=).

Note

If pattern is supplied using a
[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]], the
usual escape sequence substitutions are performed before the String is
processed by RegExp. If pattern must contain an escape sequence to be
recognized by RegExp, any U+005C (REVERSE SOLIDUS) code points must be
escaped within the
[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] to
prevent them being removed when the contents of the
[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] are
formed.

* 21.2.3.2Abstract Operations for the RegExp Constructor
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations-for-the-regexp-constructor
  :END:

* 21.2.3.2.1Runtime Semantics: RegExpAlloc ( =newTarget= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-regexpalloc-newtarget
  :END:

When the abstract operation RegExpAlloc with argument =newTarget= is
called, the following steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=newTarget=,
   "%RegExp.prototype%", « [[RegExpMatcher]], [[OriginalSource]],
   [[OriginalFlags]] »).
2. Perform
   ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=obj=,
   "lastIndex", PropertyDescriptor { [[Writable]]: true, [[Enumerable]]:
   false, [[Configurable]]: false }).
3. Return =obj=.

* 21.2.3.2.2Runtime Semantics: RegExpInitialize ( =obj=, =pattern=,
=flags= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-regexpinitialize-obj-pattern-flags
  :END:

When the abstract operation RegExpInitialize with arguments =obj=,
=pattern=, and =flags= is called, the following steps are taken:

1.  If =pattern= is undefined, let =P= be the empty String.
2.  Else, let =P= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=pattern=).
3.  If =flags= is undefined, let =F= be the empty String.
4.  Else, let =F= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=flags=).
5.  If =F= contains any code unit other than "g", "i", "m", "s", "u", or
    "y" or if it contains the same code unit more than once, throw a
    SyntaxError exception.
6.  If =F= contains "u", let =BMP= be false; else let =BMP= be true.
7.  If =BMP= is true, then

    1. Parse =P= using the grammars in
       [[https://tc39.es/ecma262/#sec-patterns][21.2.1]] and
       interpreting each of its 16-bit elements as a Unicode BMP code
       point. UTF-16 decoding is not applied to the elements. The
       [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
       symbol]] for the parse is
       [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][~U, ~N]. If
       the result of parsing contains a
       [[https://tc39.es/ecma262/#prod-GroupName][GroupName]], reparse
       with the
       [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
       symbol]] [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][~U,
       +N] and use this result instead. Throw a SyntaxError exception if
       =P= did not conform to the grammar, if any elements of =P= were
       not matched by the parse, or if any Early Error conditions exist.
    2. Let =patternCharacters= be a
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       whose elements are the code unit elements of =P=.

8.  Else,

    1. Parse =P= using the grammars in
       [[https://tc39.es/ecma262/#sec-patterns][21.2.1]] and
       interpreting =P= as UTF-16 encoded Unicode code points
       ([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]]).
       The [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
       symbol]] for the parse is
       [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][+U, +N]. Throw
       a SyntaxError exception if =P= did not conform to the grammar, if
       any elements of =P= were not matched by the parse, or if any
       Early Error conditions exist.
    2. Let =patternCharacters= be a
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       whose elements are the code points resulting from applying UTF-16
       decoding to =P='s sequence of elements.

9.  Set =obj=.[[OriginalSource]] to =P=.
10. Set =obj=.[[OriginalFlags]] to =F=.
11. Set =obj=.[[RegExpMatcher]] to the internal procedure that evaluates
    the above parse of =P= by applying the semantics provided in
    [[https://tc39.es/ecma262/#sec-pattern-semantics][21.2.2]] using
    =patternCharacters= as the pattern's
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    of
    [[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]
    values and =F= as the flag parameters.
12. Perform
    ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=obj=,
    "lastIndex", 0, true).
13. Return =obj=.

* 21.2.3.2.3Runtime Semantics: RegExpCreate ( =P=, =F= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-regexpcreate-p-f
  :END:

When the abstract operation RegExpCreate with arguments =P= and =F= is
called, the following steps are taken:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-regexpalloc][RegExpAlloc]]([[https://tc39.es/ecma262/#sec-regexp-constructor][%RegExp%]]).
2. Return
   ? [[https://tc39.es/ecma262/#sec-regexpinitialize][RegExpInitialize]](=obj=,
   =P=, =F=).

* 21.2.3.2.4Runtime Semantics: EscapeRegExpPattern ( =P=, =F= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-escaperegexppattern-p-f
  :END:

When the abstract operation EscapeRegExpPattern with arguments =P= and
=F= is called, the following occurs:

1. Let =S= be a String in the form of a
   [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][~U]
   ([[https://tc39.es/ecma262/#prod-Pattern][Pattern]][+U] if =F=
   contains "u") equivalent to =P= interpreted as UTF-16 encoded Unicode
   code points
   ([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]]),
   in which certain code points are escaped as described below. =S= may
   or may not be identical to =P=; however, the internal procedure that
   would result from evaluating =S= as a
   [[https://tc39.es/ecma262/#prod-Pattern][Pattern]][~U]
   ([[https://tc39.es/ecma262/#prod-Pattern][Pattern]][+U] if =F=
   contains "u") must behave identically to the internal procedure given
   by the constructed object's [[RegExpMatcher]] internal slot. Multiple
   calls to this abstract operation using the same values for =P= and
   =F= must produce identical results.
2. The code points =/= or any
   [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
   occurring in the pattern shall be escaped in =S= as necessary to
   ensure that the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of "/", =S=, "/", and =F= can be parsed (in an appropriate lexical
   context) as a
   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
   that behaves identically to the constructed regular expression. For
   example, if =P= is "/", then =S= could be "\/" or "\u002F", among
   other possibilities, but not "/", because =///= followed by =F= would
   be parsed as a
   [[https://tc39.es/ecma262/#prod-SingleLineComment][SingleLineComment]]
   rather than a
   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]].
   If =P= is the empty String, this specification can be met by letting
   =S= be "(?:)".
3. Return =S=.

* 21.2.4Properties of the RegExp Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-regexp-constructor
  :END:

The RegExp [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 21.2.4.1RegExp.prototype
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype
  :END:

The initial value of =RegExp.prototype= is %RegExp.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 21.2.4.2get RegExp [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-regexp-species
  :END:

=RegExp[@@species]= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

Note

RegExp prototype methods normally use their this object's
[[https://tc39.es/ecma262/#constructor][constructor]] to create a
derived object. However, a subclass
[[https://tc39.es/ecma262/#constructor][constructor]] may over-ride that
default behaviour by redefining its @@species property.

* 21.2.5Properties of the RegExp Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-regexp-prototype-object
  :END:

The RegExp prototype object:

- is the intrinsic object %RegExpPrototype%.
- is an ordinary object.
- is not a RegExp instance and does not have a [[RegExpMatcher]]
  internal slot or any of the other internal slots of RegExp instance
  objects.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

Note

The RegExp prototype object does not have a "valueOf" property of its
own; however, it inherits the "valueOf" property from the Object
prototype object.

* 21.2.5.1RegExp.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype.constructor
  :END:

The initial value of =RegExp.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-regexp-constructor][%RegExp%]].

* 21.2.5.2RegExp.prototype.exec ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype.exec-string
  :END:

Performs a regular expression match of =string= against the regular
expression and returns an Array object containing the results of the
match, or null if =string= did not match.

The String [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=)
is searched for an occurrence of the regular expression pattern as
follows:

1. Let =R= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=R=,
   [[RegExpMatcher]]).
3. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
4. Return
   ? [[https://tc39.es/ecma262/#sec-regexpbuiltinexec][RegExpBuiltinExec]](=R=,
   =S=).

* 21.2.5.2.1Runtime Semantics: RegExpExec ( =R=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-regexpexec-r-s
  :END:

The abstract operation RegExpExec with arguments =R= and =S= performs
the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is Object.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=S=)
   is String.
3. Let =exec= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=,
   "exec").
4. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=exec=) is
   true, then

   1. Let =result= be
      ? [[https://tc39.es/ecma262/#sec-call][Call]](=exec=, =R=, « =S=
      »).
   2. If
      [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=)
      is neither Object nor Null, throw a TypeError exception.
   3. Return =result=.

5. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=R=,
   [[RegExpMatcher]]).
6. Return
   ? [[https://tc39.es/ecma262/#sec-regexpbuiltinexec][RegExpBuiltinExec]](=R=,
   =S=).

Note

If a callable "exec" property is not found this algorithm falls back to
attempting to use the built-in RegExp matching algorithm. This provides
compatible behaviour for code written for prior editions where most
built-in algorithms that use regular expressions did not perform a
dynamic property lookup of "exec".

* 21.2.5.2.2Runtime Semantics: RegExpBuiltinExec ( =R=, =S= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-regexpbuiltinexec-r-s
  :END:

The abstract operation RegExpBuiltinExec with arguments =R= and =S=
performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =R= is an initialized
    RegExp instance.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=S=)
    is String.
3.  Let =length= be the number of code units in =S=.
4.  Let =lastIndex= be
    ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "lastIndex")).
5.  Let =flags= be =R=.[[OriginalFlags]].
6.  If =flags= contains "g", let =global= be true; else let =global= be
    false.
7.  If =flags= contains "y", let =sticky= be true; else let =sticky= be
    false.
8.  If =global= is false and =sticky= is false, set =lastIndex= to 0.
9.  Let =matcher= be =R=.[[RegExpMatcher]].
10. If =flags= contains "u", let =fullUnicode= be true; else let
    =fullUnicode= be false.
11. Let =matchSucceeded= be false.
12. Repeat, while =matchSucceeded= is false

    1. If =lastIndex= > =length=, then

       1. If =global= is true or =sticky= is true, then

          1. Perform
             ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=R=,
             "lastIndex", 0, true).

       2. Return null.

    2. Let =r= be =matcher=(=S=, =lastIndex=).
    3. If =r= is failure, then

       1. If =sticky= is true, then

          1. Perform
             ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=R=,
             "lastIndex", 0, true).
          2. Return null.

       2. Set =lastIndex= to
          [[https://tc39.es/ecma262/#sec-advancestringindex][AdvanceStringIndex]](=S=,
          =lastIndex=, =fullUnicode=).

    4. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =r= is a State.
       2. Set =matchSucceeded= to true.

13. Let =e= be =r='s =endIndex= value.
14. If =fullUnicode= is true, then

    1. =e= is an index into the =Input= character list, derived from
       =S=, matched by =matcher=. Let =eUTF= be the smallest index into
       =S= that corresponds to the character at element =e= of =Input=.
       If =e= is greater than or equal to the number of elements in
       =Input=, then =eUTF= is the number of code units in =S=.
    2. Set =e= to =eUTF=.

15. If =global= is true or =sticky= is true, then

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=R=,
       "lastIndex", =e=, true).

16. Let =n= be the number of elements in =r='s =captures=
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    (This is the same value as
    [[https://tc39.es/ecma262/#sec-notation][21.2.2.1]]'s
    =NcapturingParens=.)
17. [[https://tc39.es/ecma262/#assert][Assert]]: =n= < 2^{32} - 1.
18. Let =A= be
    ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=n= +
    1).
19. [[https://tc39.es/ecma262/#assert][Assert]]: The value of =A='s
    "length" property is =n= + 1.
20. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
    "index", =lastIndex=).
21. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
    "input", =S=).
22. Let =matchedSubstr= be the matched substring (i.e. the portion of
    =S= between offset =lastIndex= inclusive and offset =e= exclusive).
23. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
    "0", =matchedSubstr=).
24. If =R= contains any
    [[https://tc39.es/ecma262/#prod-GroupName][GroupName]], then

    1. Let =groups= be
       [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](null).

25. Else,

    1. Let =groups= be undefined.

26. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
    "groups", =groups=).
27. For each [[https://tc39.es/ecma262/#integer][integer]] =i= such that
    =i= > 0 and =i= ≤ =n=, do

    1. Let =captureI= be =i=^{th} element of =r='s =captures=
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    2. If =captureI= is undefined, let =capturedValue= be undefined.
    3. Else if =fullUnicode= is true, then

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =captureI= is a
          [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
          of code points.
       2. Let =capturedValue= be the String value whose code units are
          the
          [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]]
          of the code points of =captureI=.

    4. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =fullUnicode= is
          false.
       2. [[https://tc39.es/ecma262/#assert][Assert]]: =captureI= is a
          [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
          of code units.
       3. Let =capturedValue= be the String value consisting of the code
          units of =captureI=.

    5. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=i=),
       =capturedValue=).
    6. If the =i=^{th} capture of =R= was defined with a
       [[https://tc39.es/ecma262/#prod-GroupName][GroupName]], then

       1. Let =s= be the StringValue of the corresponding
          [[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]].
       2. Perform
          ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=groups=,
          =s=, =capturedValue=).

28. Return =A=.

* 21.2.5.2.3AdvanceStringIndex ( =S=, =index=, =unicode= )
  :PROPERTIES:
  :CUSTOM_ID: advancestringindex-s-index-unicode
  :END:

The abstract operation AdvanceStringIndex with arguments =S=, =index=,
and =unicode= performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=S=)
   is String.
2. [[https://tc39.es/ecma262/#assert][Assert]]: 0 ≤ =index= ≤ 2^{53} - 1
   and ! [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=index=)
   is true.
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=unicode=)
   is Boolean.
4. If =unicode= is false, return =index= + 1.
5. Let =length= be the number of code units in =S=.
6. If =index= + 1 ≥ =length=, return =index= + 1.
7. Let =cp= be
   ! [[https://tc39.es/ecma262/#sec-codepointat][CodePointAt]](=S=,
   =index=).
8. Return =index= + =cp=.[[CodeUnitCount]].

* 21.2.5.3get RegExp.prototype.dotAll
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.dotall
  :END:

=RegExp.prototype.dotAll= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. If =R= does not have an [[OriginalFlags]] internal slot, then

   1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=R=,
      %RegExp.prototype%) is true, return undefined.
   2. Otherwise, throw a TypeError exception.

4. Let =flags= be =R=.[[OriginalFlags]].
5. If =flags= contains the code unit 0x0073 (LATIN SMALL LETTER S),
   return true.
6. Return false.

* 21.2.5.4get RegExp.prototype.flags
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.flags
  :END:

=RegExp.prototype.flags= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1.  Let =R= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
    is not Object, throw a TypeError exception.
3.  Let =result= be the empty String.
4.  Let =global= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "global")).
5.  If =global= is true, append the code unit 0x0067 (LATIN SMALL LETTER
    G) as the last code unit of =result=.
6.  Let =ignoreCase= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "ignoreCase")).
7.  If =ignoreCase= is true, append the code unit 0x0069 (LATIN SMALL
    LETTER I) as the last code unit of =result=.
8.  Let =multiline= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "multiline")).
9.  If =multiline= is true, append the code unit 0x006D (LATIN SMALL
    LETTER M) as the last code unit of =result=.
10. Let =dotAll= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "dotAll")).
11. If =dotAll= is true, append the code unit 0x0073 (LATIN SMALL LETTER
    S) as the last code unit of =result=.
12. Let =unicode= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "unicode")).
13. If =unicode= is true, append the code unit 0x0075 (LATIN SMALL
    LETTER U) as the last code unit of =result=.
14. Let =sticky= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "sticky")).
15. If =sticky= is true, append the code unit 0x0079 (LATIN SMALL LETTER
    Y) as the last code unit of =result=.
16. Return =result=.

* 21.2.5.5get RegExp.prototype.global
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.global
  :END:

=RegExp.prototype.global= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. If =R= does not have an [[OriginalFlags]] internal slot, then

   1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=R=,
      %RegExp.prototype%) is true, return undefined.
   2. Otherwise, throw a TypeError exception.

4. Let =flags= be =R=.[[OriginalFlags]].
5. If =flags= contains the code unit 0x0067 (LATIN SMALL LETTER G),
   return true.
6. Return false.

* 21.2.5.6get RegExp.prototype.ignoreCase
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.ignorecase
  :END:

=RegExp.prototype.ignoreCase= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. If =R= does not have an [[OriginalFlags]] internal slot, then

   1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=R=,
      %RegExp.prototype%) is true, return undefined.
   2. Otherwise, throw a TypeError exception.

4. Let =flags= be =R=.[[OriginalFlags]].
5. If =flags= contains the code unit 0x0069 (LATIN SMALL LETTER I),
   return true.
6. Return false.

* 21.2.5.7RegExp.prototype [ @@match ] ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype-match-string
  :END:

When the =@@match= method is called with argument =string=, the
following steps are taken:

1. Let =rx= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rx=)
   is not Object, throw a TypeError exception.
3. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
4. Let =global= be
   ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
   [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=, "global")).
5. If =global= is false, then

   1. Return
      ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=rx=,
      =S=).

6. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =global= is true.
   2. Let =fullUnicode= be
      ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
      [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=, "unicode")).
   3. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=rx=,
      "lastIndex", 0, true).
   4. Let =A= be
      ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
   5. Let =n= be 0.
   6. Repeat,

      1. Let =result= be
         ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=rx=,
         =S=).
      2. If =result= is null, then

         1. If =n= = 0, return null.
         2. Return =A=.

      3. Else,

         1. Let =matchStr= be
            ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
            [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=result=,
            "0")).
         2. Perform
            ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
            ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
            =matchStr=).
         3. If =matchStr= is the empty String, then

            1. Let =thisIndex= be
               ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](?
               [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=,
               "lastIndex")).
            2. Let =nextIndex= be
               [[https://tc39.es/ecma262/#sec-advancestringindex][AdvanceStringIndex]](=S=,
               =thisIndex=, =fullUnicode=).
            3. Perform
               ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=rx=,
               "lastIndex", =nextIndex=, true).

         4. Set =n= to =n= + 1.

The value of the "name" property of this function is "[Symbol.match]".

Note

The @@match property is used by the
[[https://tc39.es/ecma262/#sec-isregexp][IsRegExp]] abstract operation
to identify objects that have the basic behaviour of regular
expressions. The absence of a @@match property or the existence of such
a property whose value does not Boolean coerce to true indicates that
the object is not intended to be used as a regular expression object.

* 21.2.5.8RegExp.prototype [ @@matchAll ] ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype-matchall-string
  :END:

When the =@@matchAll= method is called with argument =string=, the
following steps are taken:

1.  Let =R= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
    is not Object, throw a TypeError exception.
3.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
4.  Let =C= be
    ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=R=,
    [[https://tc39.es/ecma262/#sec-regexp-constructor][%RegExp%]]).
5.  Let =flags= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "flags")).
6.  Let =matcher= be
    ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=C=, « =R=,
    =flags= »).
7.  Let =lastIndex= be
    ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "lastIndex")).
8.  Perform
    ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=matcher=,
    "lastIndex", =lastIndex=, true).
9.  If =flags= contains "g", let =global= be true.
10. Else, let =global= be false.
11. If =flags= contains "u", let =fullUnicode= be true.
12. Else, let =fullUnicode= be false.
13. Return
    ! [[https://tc39.es/ecma262/#sec-createregexpstringiterator][CreateRegExpStringIterator]](=matcher=,
    =S=, =global=, =fullUnicode=).

The value of the "name" property of this function is
"[Symbol.matchAll]".

* 21.2.5.8.1CreateRegExpStringIterator ( =R=, =S=, =global=,
=fullUnicode= )
  :PROPERTIES:
  :CUSTOM_ID: createregexpstringiterator-r-s-global-fullunicode
  :END:

The abstract operation CreateRegExpStringIterator is used to create such
iterator objects. It performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=S=)
    is String.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=global=)
    is Boolean.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=fullUnicode=)
    is Boolean.
4.  Let =iterator= be
    [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]]([[https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%-object][%RegExpStringIteratorPrototype%]],
    « [[IteratingRegExp]], [[IteratedString]], [[Global]], [[Unicode]],
    [[Done]] »).
5.  Set =iterator=.[[IteratingRegExp]] to =R=.
6.  Set =iterator=.[[IteratedString]] to =S=.
7.  Set =iterator=.[[Global]] to =global=.
8.  Set =iterator=.[[Unicode]] to =fullUnicode=.
9.  Set =iterator=.[[Done]] to false.
10. Return =iterator=.

* 21.2.5.9get RegExp.prototype.multiline
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.multiline
  :END:

=RegExp.prototype.multiline= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. If =R= does not have an [[OriginalFlags]] internal slot, then

   1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=R=,
      %RegExp.prototype%) is true, return undefined.
   2. Otherwise, throw a TypeError exception.

4. Let =flags= be =R=.[[OriginalFlags]].
5. If =flags= contains the code unit 0x006D (LATIN SMALL LETTER M),
   return true.
6. Return false.

* 21.2.5.10RegExp.prototype [ @@replace ] ( =string=, =replaceValue= )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype-replace-string-replacevalue
  :END:

When the =@@replace= method is called with arguments =string= and
=replaceValue=, the following steps are taken:

1.  Let =rx= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rx=)
    is not Object, throw a TypeError exception.
3.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
4.  Let =lengthS= be the number of code unit elements in =S=.
5.  Let =functionalReplace= be
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=replaceValue=).
6.  If =functionalReplace= is false, then

    1. Set =replaceValue= to
       ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=replaceValue=).

7.  Let =global= be
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=, "global")).
8.  If =global= is true, then

    1. Let =fullUnicode= be
       ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
       [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=, "unicode")).
    2. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=rx=,
       "lastIndex", 0, true).

9.  Let =results= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
10. Let =done= be false.
11. Repeat, while =done= is false

    1. Let =result= be
       ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=rx=,
       =S=).
    2. If =result= is null, set =done= to true.
    3. Else,

       1. Append =result= to the end of =results=.
       2. If =global= is false, set =done= to true.
       3. Else,

          1. Let =matchStr= be
             ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
             [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=result=,
             "0")).
          2. If =matchStr= is the empty String, then

             1. Let =thisIndex= be
                ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](?
                [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=,
                "lastIndex")).
             2. Let =nextIndex= be
                [[https://tc39.es/ecma262/#sec-advancestringindex][AdvanceStringIndex]](=S=,
                =thisIndex=, =fullUnicode=).
             3. Perform
                ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=rx=,
                "lastIndex", =nextIndex=, true).

12. Let =accumulatedResult= be the empty String value.
13. Let =nextSourcePosition= be 0.
14. For each =result= in =results=, do

    1.  Let =nCaptures= be
        ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=result=).
    2.  Set =nCaptures= to
        [[https://tc39.es/ecma262/#eqn-max][max]](=nCaptures= - 1, 0).
    3.  Let =matched= be
        ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
        [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=result=, "0")).
    4.  Let =matchLength= be the number of code units in =matched=.
    5.  Let =position= be
        ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](?
        [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=result=,
        "index")).
    6.  Set =position= to
        [[https://tc39.es/ecma262/#eqn-max][max]]([[https://tc39.es/ecma262/#eqn-min][min]](=position=,
        =lengthS=), 0).
    7.  Let =n= be 1.
    8.  Let =captures= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    9.  Repeat, while =n= ≤ =nCaptures=

        1. Let =capN= be
           ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=result=,
           ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=)).
        2. If =capN= is not undefined, then

           1. Set =capN= to
              ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=capN=).

        3. Append =capN= as the last element of =captures=.
        4. Set =n= to =n= + 1.

    10. Let =namedCaptures= be
        ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=result=,
        "groups").
    11. If =functionalReplace= is true, then

        1. Let =replacerArgs= be « =matched= ».
        2. Append in list order the elements of =captures= to the end of
           the
           [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
           =replacerArgs=.
        3. Append =position= and =S= to =replacerArgs=.
        4. If =namedCaptures= is not undefined, then

           1. Append =namedCaptures= as the last element of
              =replacerArgs=.

        5. Let =replValue= be
           ? [[https://tc39.es/ecma262/#sec-call][Call]](=replaceValue=,
           undefined, =replacerArgs=).
        6. Let =replacement= be
           ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=replValue=).

    12. Else,

        1. If =namedCaptures= is not undefined, then

           1. Set =namedCaptures= to
              ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=namedCaptures=).

        2. Let =replacement= be
           ? [[https://tc39.es/ecma262/#sec-getsubstitution][GetSubstitution]](=matched=,
           =S=, =position=, =captures=, =namedCaptures=,
           =replaceValue=).

    13. If =position= ≥ =nextSourcePosition=, then

        1. NOTE: =position= should not normally move backwards. If it
           does, it is an indication of an ill-behaving RegExp subclass
           or use of an access triggered side-effect to change the
           global flag or other characteristics of =rx=. In such cases,
           the corresponding substitution is ignored.
        2. Set =accumulatedResult= to the
           [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
           of the current value of =accumulatedResult=, the substring of
           =S= consisting of the code units from =nextSourcePosition=
           (inclusive) up to =position= (exclusive), and =replacement=.
        3. Set =nextSourcePosition= to =position= + =matchLength=.

15. If =nextSourcePosition= ≥ =lengthS=, return =accumulatedResult=.
16. Return the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =accumulatedResult= and the substring of =S= consisting of the
    code units from =nextSourcePosition= (inclusive) up through the
    final code unit of =S= (inclusive).

The value of the "name" property of this function is "[Symbol.replace]".

* 21.2.5.11RegExp.prototype [ @@search ] ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype-search-string
  :END:

When the =@@search= method is called with argument =string=, the
following steps are taken:

1.  Let =rx= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rx=)
    is not Object, throw a TypeError exception.
3.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
4.  Let =previousLastIndex= be
    ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=, "lastIndex").
5.  If
    [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=previousLastIndex=,
    0) is false, then

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=rx=,
       "lastIndex", 0, true).

6.  Let =result= be
    ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=rx=,
    =S=).
7.  Let =currentLastIndex= be
    ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=, "lastIndex").
8.  If
    [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=currentLastIndex=,
    =previousLastIndex=) is false, then

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=rx=,
       "lastIndex", =previousLastIndex=, true).

9.  If =result= is null, return -1.
10. Return ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=result=,
    "index").

The value of the "name" property of this function is "[Symbol.search]".

Note

The "lastIndex" and "global" properties of this RegExp object are
ignored when performing the search. The "lastIndex" property is left
unchanged.

* 21.2.5.12get RegExp.prototype.source
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.source
  :END:

=RegExp.prototype.source= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. If =R= does not have an [[OriginalSource]] internal slot, then

   1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=R=,
      %RegExp.prototype%) is true, return "(?:)".
   2. Otherwise, throw a TypeError exception.

4. [[https://tc39.es/ecma262/#assert][Assert]]: =R= has an
   [[OriginalFlags]] internal slot.
5. Let =src= be =R=.[[OriginalSource]].
6. Let =flags= be =R=.[[OriginalFlags]].
7. Return
   [[https://tc39.es/ecma262/#sec-escaperegexppattern][EscapeRegExpPattern]](=src=,
   =flags=).

* 21.2.5.13RegExp.prototype [ @@split ] ( =string=, =limit= )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype-split-string-limit
  :END:

Note 1

Returns an Array object into which substrings of the result of
converting =string= to a String have been stored. The substrings are
determined by searching from left to right for matches of the this value
regular expression; these occurrences are not part of any substring in
the returned array, but serve to divide up the String value.

The this value may be an empty regular expression or a regular
expression that can match an empty String. In this case, the regular
expression does not match the empty substring at the beginning or end of
the input String, nor does it match the empty substring at the end of
the previous separator match. (For example, if the regular expression
matches the empty String, the String is split up into individual code
unit elements; the length of the result array equals the length of the
String, and each substring contains one code unit.) Only the first match
at a given index of the String is considered, even if backtracking could
yield a non-empty-substring match at that index. (For example,
=/a*?/[Symbol.split]("ab")= evaluates to the array =["a", "b"]=, while
=/a*/[Symbol.split]("ab")= evaluates to the array =["","b"]=.)

If the =string= is (or converts to) the empty String, the result depends
on whether the regular expression can match the empty String. If it can,
the result array contains no elements. Otherwise, the result array
contains one element, which is the empty String.

If the regular expression contains capturing parentheses, then each time
=separator= is matched the results (including any undefined results) of
the capturing parentheses are spliced into the output array. For
example,

#+BEGIN_EXAMPLE
  /<(\/)?([^<>]+)>/[Symbol.split]("A<B>bold</B>and<CODE>coded</CODE>")
#+END_EXAMPLE

evaluates to the array

#+BEGIN_EXAMPLE
  ["A", undefined, "B", "bold", "/", "B", "and", undefined, "CODE", "coded", "/", "CODE", ""]
#+END_EXAMPLE

If =limit= is not undefined, then the output array is truncated so that
it contains no more than =limit= elements.

When the =@@split= method is called, the following steps are taken:

1.  Let =rx= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=rx=)
    is not Object, throw a TypeError exception.
3.  Let =S= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
4.  Let =C= be
    ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=rx=,
    [[https://tc39.es/ecma262/#sec-regexp-constructor][%RegExp%]]).
5.  Let =flags= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=rx=, "flags")).
6.  If =flags= contains "u", let =unicodeMatching= be true.
7.  Else, let =unicodeMatching= be false.
8.  If =flags= contains "y", let =newFlags= be =flags=.
9.  Else, let =newFlags= be the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =flags= and "y".
10. Let =splitter= be
    ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=C=, « =rx=,
    =newFlags= »).
11. Let =A= be
    ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).
12. Let =lengthA= be 0.
13. If =limit= is undefined, let =lim= be 2^{32} - 1; else let =lim= be
    ? [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=limit=).
14. Let =size= be the length of =S=.
15. Let =p= be 0.
16. If =lim= = 0, return =A=.
17. If =size= = 0, then

    1. Let =z= be
       ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=splitter=,
       =S=).
    2. If =z= is not null, return =A=.
    3. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
       "0", =S=).
    4. Return =A=.

18. Let =q= be =p=.
19. Repeat, while =q= < =size=

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=splitter=,
       "lastIndex", =q=, true).
    2. Let =z= be
       ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=splitter=,
       =S=).
    3. If =z= is null, set =q= to
       [[https://tc39.es/ecma262/#sec-advancestringindex][AdvanceStringIndex]](=S=,
       =q=, =unicodeMatching=).
    4. Else,

       1. Let =e= be
          ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](?
          [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=splitter=,
          "lastIndex")).
       2. Set =e= to [[https://tc39.es/ecma262/#eqn-min][min]](=e=,
          =size=).
       3. If =e= = =p=, set =q= to
          [[https://tc39.es/ecma262/#sec-advancestringindex][AdvanceStringIndex]](=S=,
          =q=, =unicodeMatching=).
       4. Else,

          1.  Let =T= be the String value equal to the substring of =S=
              consisting of the code units at indices =p= (inclusive)
              through =q= (exclusive).
          2.  Perform
              ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
              ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=lengthA=),
              =T=).
          3.  Set =lengthA= to =lengthA= + 1.
          4.  If =lengthA= = =lim=, return =A=.
          5.  Set =p= to =e=.
          6.  Let =numberOfCaptures= be
              ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=z=).
          7.  Set =numberOfCaptures= to
              [[https://tc39.es/ecma262/#eqn-max][max]](=numberOfCaptures= -
              1, 0).
          8.  Let =i= be 1.
          9.  Repeat, while =i= ≤ =numberOfCaptures=,

              1. Let =nextCapture= be
                 ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=z=,
                 ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=i=)).
              2. Perform
                 ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
                 ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=lengthA=),
                 =nextCapture=).
              3. Set =i= to =i= + 1.
              4. Set =lengthA= to =lengthA= + 1.
              5. If =lengthA= = =lim=, return =A=.

          10. Set =q= to =p=.

20. Let =T= be the String value equal to the substring of =S= consisting
    of the code units at indices =p= (inclusive) through =size=
    (exclusive).
21. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
    ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=lengthA=),
    =T=).
22. Return =A=.

The value of the "name" property of this function is "[Symbol.split]".

Note 2

The =@@split= method ignores the value of the "global" and "sticky"
properties of this RegExp object.

* 21.2.5.14get RegExp.prototype.sticky
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.sticky
  :END:

=RegExp.prototype.sticky= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. If =R= does not have an [[OriginalFlags]] internal slot, then

   1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=R=,
      %RegExp.prototype%) is true, return undefined.
   2. Otherwise, throw a TypeError exception.

4. Let =flags= be =R=.[[OriginalFlags]].
5. If =flags= contains the code unit 0x0079 (LATIN SMALL LETTER Y),
   return true.
6. Return false.

* 21.2.5.15RegExp.prototype.test ( =S= )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype.test-s
  :END:

The following steps are taken:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. Let =string= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=S=).
4. Let =match= be
   ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=R=,
   =string=).
5. If =match= is not null, return true; else return false.

* 21.2.5.16RegExp.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: regexp.prototype.tostring
  :END:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. Let =pattern= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
   [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "source")).
4. Let =flags= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
   [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=, "flags")).
5. Let =result= be the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of "/", =pattern=, "/", and =flags=.
6. Return =result=.

Note

The returned String has the form of a
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
that evaluates to another RegExp object with the same behaviour as this
object.

* 21.2.5.17get RegExp.prototype.unicode
  :PROPERTIES:
  :CUSTOM_ID: get-regexp.prototype.unicode
  :END:

=RegExp.prototype.unicode= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =R= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=R=)
   is not Object, throw a TypeError exception.
3. If =R= does not have an [[OriginalFlags]] internal slot, then

   1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=R=,
      %RegExp.prototype%) is true, return undefined.
   2. Otherwise, throw a TypeError exception.

4. Let =flags= be =R=.[[OriginalFlags]].
5. If =flags= contains the code unit 0x0075 (LATIN SMALL LETTER U),
   return true.
6. Return false.

* 21.2.6Properties of RegExp Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-regexp-instances
  :END:

RegExp instances are ordinary objects that inherit properties from the
RegExp prototype object. RegExp instances have internal slots
[[RegExpMatcher]], [[OriginalSource]], and [[OriginalFlags]]. The value
of the [[RegExpMatcher]] internal slot is an implementation-dependent
representation of the [[https://tc39.es/ecma262/#prod-Pattern][Pattern]]
of the RegExp object.

Note

Prior to ECMAScript 2015, =RegExp= instances were specified as having
the own data properties "source", "global", "ignoreCase", and
"multiline". Those properties are now specified as accessor properties
of =RegExp.prototype=.

RegExp instances also have the following property:

* 21.2.6.1lastIndex
  :PROPERTIES:
  :CUSTOM_ID: lastindex
  :END:

The value of the "lastIndex" property specifies the String index at
which to start the next match. It is coerced to an
[[https://tc39.es/ecma262/#integer][integer]] when used (see
[[https://tc39.es/ecma262/#sec-regexpbuiltinexec][21.2.5.2.2]]). This
property shall have the attributes { [[Writable]]: true, [[Enumerable]]:
false, [[Configurable]]: false }.

* 21.2.7RegExp String Iterator Objects
  :PROPERTIES:
  :CUSTOM_ID: regexp-string-iterator-objects
  :END:

A RegExp String Iterator is an object, that represents a specific
iteration over some specific String instance object, matching against
some specific RegExp instance object. There is not a named
[[https://tc39.es/ecma262/#constructor][constructor]] for RegExp String
Iterator objects. Instead, RegExp String Iterator objects are created by
calling certain methods of RegExp instance objects.

* 21.2.7.1The %RegExpStringIteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-regexpstringiteratorprototype-object
  :END:

The %RegExpStringIteratorPrototype% object:

- has properties that are inherited by all RegExp String Iterator
  Objects.
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is the intrinsic object
  [[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]].
- has the following properties:

* 21.2.7.1.1%RegExpStringIteratorPrototype%.next ( )
  :PROPERTIES:
  :CUSTOM_ID: regexpstringiteratorprototype.next
  :END:

1.  Let =O= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
    is not Object, throw a TypeError exception.
3.  If =O= does not have all of the internal slots of a RegExp String
    Iterator Object Instance (see
    [[https://tc39.es/ecma262/#sec-properties-of-regexp-string-iterator-instances][21.2.7.2]]),
    throw a TypeError exception.
4.  If =O=.[[Done]] is true, then

    1. Return
       ! [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
       true).

5.  Let =R= be =O=.[[IteratingRegExp]].
6.  Let =S= be =O=.[[IteratedString]].
7.  Let =global= be =O=.[[Global]].
8.  Let =fullUnicode= be =O=.[[Unicode]].
9.  Let =match= be
    ? [[https://tc39.es/ecma262/#sec-regexpexec][RegExpExec]](=R=, =S=).
10. If =match= is null, then

    1. Set =O=.[[Done]] to true.
    2. Return
       ! [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
       true).

11. Else,

    1. If =global= is true, then

       1. Let =matchStr= be
          ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
          [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=match=, "0")).
       2. If =matchStr= is the empty string, then

          1. Let =thisIndex= be
             ? [[https://tc39.es/ecma262/#sec-tolength][ToLength]](?
             [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=R=,
             "lastIndex")).
          2. Let =nextIndex= be
             ! [[https://tc39.es/ecma262/#sec-advancestringindex][AdvanceStringIndex]](=S=,
             =thisIndex=, =fullUnicode=).
          3. Perform
             ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=R=,
             "lastIndex", =nextIndex=, true).

       3. Return
          ! [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=match=,
          false).

    2. Else,

       1. Set =O=.[[Done]] to true.
       2. Return
          ! [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=match=,
          false).

* 21.2.7.1.2%RegExpStringIteratorPrototype% [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: regexpstringiteratorprototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"RegExp String Iterator".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 21.2.7.2Properties of RegExp String Iterator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-regexp-string-iterator-instances
  :END:

RegExp String Iterator instances are ordinary objects that inherit
properties from the
[[https://tc39.es/ecma262/#sec-%regexpstringiteratorprototype%-object][%RegExpStringIteratorPrototype%]]
intrinsic object. RegExp String Iterator instances are initially created
with the internal slots listed in
[[https://tc39.es/ecma262/#table-regexp-string-iterator-instance-slots][Table
60]].

Table 60: Internal Slots of RegExp String Iterator Instances

| Internal Slot         | Description                                                                                                                              |
|-----------------------+------------------------------------------------------------------------------------------------------------------------------------------|
| [[IteratingRegExp]]   | The regular expression used for iteration. [[https://tc39.es/ecma262/#sec-isregexp][IsRegExp]]([[IteratingRegExp]]) is initially true.   |
| [[IteratedString]]    | The String value being iterated upon.                                                                                                    |
| [[Global]]            | A Boolean value to indicate whether the [[IteratingRegExp]] is global or not.                                                            |
| [[Unicode]]           | A Boolean value to indicate whether the [[IteratingRegExp]] is in Unicode mode or not.                                                   |
| [[Done]]              | A Boolean value to indicate whether the iteration is complete or not.                                                                    |

* 22Indexed Collections
  :PROPERTIES:
  :CUSTOM_ID: indexed-collections
  :END:

* 22.1Array Objects
  :PROPERTIES:
  :CUSTOM_ID: array-objects
  :END:

Array objects are exotic objects that give special treatment to a
certain class of property names. See
[[https://tc39.es/ecma262/#sec-array-exotic-objects][9.4.2]] for a
definition of this special treatment.

* 22.1.1The Array Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-array-constructor
  :END:

The Array [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Array%.
- is the initial value of the "Array" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Array
  [[https://tc39.es/ecma262/#exotic-object][exotic object]] when called
  as a [[https://tc39.es/ecma262/#constructor][constructor]].
- also creates and initializes a new Array object when called as a
  function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. Thus the
  function call =Array(…)= is equivalent to the object creation
  expression =new Array(…)= with the same arguments.
- is a single function whose behaviour is overloaded based upon the
  number and types of its arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the exotic =Array= behaviour must include a =super=
  call to the =Array=
  [[https://tc39.es/ecma262/#constructor][constructor]] to initialize
  subclass instances that are Array exotic objects. However, most of the
  =Array.prototype= methods are generic methods that are not dependent
  upon their this value being an Array
  [[https://tc39.es/ecma262/#exotic-object][exotic object]].
- has a "length" property whose value is 1.

* 22.1.1.1Array ( )
  :PROPERTIES:
  :CUSTOM_ID: array
  :END:

This description applies if and only if the Array
[[https://tc39.es/ecma262/#constructor][constructor]] is called with no
arguments.

1. Let =numberOfArgs= be the number of arguments passed to this function
   call.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =numberOfArgs= = 0.
3. If NewTarget is undefined, let =newTarget= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]]; else let =newTarget= be NewTarget.
4. Let =proto= be
   ? [[https://tc39.es/ecma262/#sec-getprototypefromconstructor][GetPrototypeFromConstructor]](=newTarget=,
   "%Array.prototype%").
5. Return ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0,
   =proto=).

* 22.1.1.2Array ( =len= )
  :PROPERTIES:
  :CUSTOM_ID: array-len
  :END:

This description applies if and only if the Array
[[https://tc39.es/ecma262/#constructor][constructor]] is called with
exactly one argument.

1. Let =numberOfArgs= be the number of arguments passed to this function
   call.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =numberOfArgs= = 1.
3. If NewTarget is undefined, let =newTarget= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]]; else let =newTarget= be NewTarget.
4. Let =proto= be
   ? [[https://tc39.es/ecma262/#sec-getprototypefromconstructor][GetPrototypeFromConstructor]](=newTarget=,
   "%Array.prototype%").
5. Let =array= be
   ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0,
   =proto=).
6. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=len=)
   is not Number, then

   1. Perform
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=array=,
      "0", =len=).
   2. Let =intLen= be 1.

7. Else,

   1. Let =intLen= be
      [[https://tc39.es/ecma262/#sec-touint32][ToUint32]](=len=).
   2. If =intLen= ≠ =len=, throw a RangeError exception.

8. Perform
   ! [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=array=,
   "length", =intLen=, true).
9. Return =array=.

* 22.1.1.3Array ( ...=items= )
  :PROPERTIES:
  :CUSTOM_ID: array-...items
  :END:

This description applies if and only if the Array
[[https://tc39.es/ecma262/#constructor][constructor]] is called with at
least two arguments.

When the =Array= function is called, the following steps are taken:

1.  Let =numberOfArgs= be the number of arguments passed to this
    function call.
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =numberOfArgs= ≥ 2.
3.  If NewTarget is undefined, let =newTarget= be the
    [[https://tc39.es/ecma262/#active-function-object][active function
    object]]; else let =newTarget= be NewTarget.
4.  Let =proto= be
    ? [[https://tc39.es/ecma262/#sec-getprototypefromconstructor][GetPrototypeFromConstructor]](=newTarget=,
    "%Array.prototype%").
5.  Let =array= be
    ? [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=numberOfArgs=,
    =proto=).
6.  Let =k= be 0.
7.  Let =items= be a zero-origined
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    containing the argument items in order.
8.  Repeat, while =k= < =numberOfArgs=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =itemK= be =items=[=k=].
    3. Perform
       ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=array=,
       =Pk=, =itemK=).
    4. Set =k= to =k= + 1.

9.  [[https://tc39.es/ecma262/#assert][Assert]]: The value of =array='s
    "length" property is =numberOfArgs=.
10. Return =array=.

* 22.1.2Properties of the Array Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-array-constructor
  :END:

The Array [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 22.1.2.1Array.from ( =items= [ , =mapfn= [ , =thisArg= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: array.from-items-mapfn-thisarg
  :END:

When the =from= method is called with argument =items= and optional
arguments =mapfn= and =thisArg=, the following steps are taken:

1.  Let =C= be the this value.
2.  If =mapfn= is undefined, let =mapping= be false.
3.  Else,

    1. If
       [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=mapfn=)
       is false, throw a TypeError exception.
    2. Let =mapping= be true.

4.  Let =usingIterator= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=items=,
    @@iterator).
5.  If =usingIterator= is not undefined, then

    1. If
       [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
       is true, then

       1. Let =A= be
          ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=C=).

    2. Else,

       1. Let =A= be
          ! [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](0).

    3. Let =iteratorRecord= be
       ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=items=,
       sync, =usingIterator=).
    4. Let =k= be 0.
    5. Repeat,

       1.  If =k= ≥ 2^{53} - 1, then

           1. Let =error= be
              [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](a
              newly created TypeError object).
           2. Return
              ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
              =error=).

       2.  Let =Pk= be
           ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
       3.  Let =next= be
           ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
       4.  If =next= is false, then

           1. Perform
              ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
              "length", =k=, true).
           2. Return =A=.

       5.  Let =nextValue= be
           ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
       6.  If =mapping= is true, then

           1. Let =mappedValue= be
              [[https://tc39.es/ecma262/#sec-call][Call]](=mapfn=,
              =thisArg=, « =nextValue=, =k= »).
           2. If =mappedValue= is an
              [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
              completion]], return
              ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
              =mappedValue=).
           3. Set =mappedValue= to =mappedValue=.[[Value]].

       7.  Else, let =mappedValue= be =nextValue=.
       8.  Let =defineStatus= be
           [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
           =Pk=, =mappedValue=).
       9.  If =defineStatus= is an
           [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
           completion]], return
           ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
           =defineStatus=).
       10. Set =k= to =k= + 1.

6.  NOTE: =items= is not an Iterable so assume it is an
    [[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like
    object]].
7.  Let =arrayLike= be
    ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=items=).
8.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=arrayLike=).
9.  If
    [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
    is true, then

    1. Let =A= be
       ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=C=, «
       =len= »).

10. Else,

    1. Let =A= be
       ? [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=len=).

11. Let =k= be 0.
12. Repeat, while =k= < =len=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =kValue= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=arrayLike=,
       =Pk=).
    3. If =mapping= is true, then

       1. Let =mappedValue= be
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=mapfn=,
          =thisArg=, « =kValue=, =k= »).

    4. Else, let =mappedValue= be =kValue=.
    5. Perform
       ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
       =Pk=, =mappedValue=).
    6. Set =k= to =k= + 1.

13. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
    "length", =len=, true).
14. Return =A=.

Note

The =from= function is an intentionally generic factory method; it does
not require that its this value be the Array
[[https://tc39.es/ecma262/#constructor][constructor]]. Therefore it can
be transferred to or inherited by any other constructors that may be
called with a single numeric argument.

* 22.1.2.2Array.isArray ( =arg= )
  :PROPERTIES:
  :CUSTOM_ID: array.isarray-arg
  :END:

The =isArray= function takes one argument =arg=, and performs the
following steps:

1. Return ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=arg=).

* 22.1.2.3Array.of ( ...=items= )
  :PROPERTIES:
  :CUSTOM_ID: array.of-...items
  :END:

When the =of= method is called with any number of arguments, the
following steps are taken:

1. Let =len= be the actual number of arguments passed to this function.
2. Let =items= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of arguments passed to this function.
3. Let =C= be the this value.
4. If [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
   is true, then

   1. Let =A= be
      ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=C=, «
      =len= »).

5. Else,

   1. Let =A= be
      ? [[https://tc39.es/ecma262/#sec-arraycreate][ArrayCreate]](=len=).

6. Let =k= be 0.
7. Repeat, while =k= < =len=

   1. Let =kValue= be =items=[=k=].
   2. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   3. Perform
      ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
      =Pk=, =kValue=).
   4. Set =k= to =k= + 1.

8. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
   "length", =len=, true).
9. Return =A=.

Note 1

The =items= argument is assumed to be a well-formed rest argument value.

Note 2

The =of= function is an intentionally generic factory method; it does
not require that its this value be the Array
[[https://tc39.es/ecma262/#constructor][constructor]]. Therefore it can
be transferred to or inherited by other constructors that may be called
with a single numeric argument.

* 22.1.2.4Array.prototype
  :PROPERTIES:
  :CUSTOM_ID: array.prototype
  :END:

The value of =Array.prototype= is %Array.prototype%, the intrinsic Array
prototype object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 22.1.2.5get Array [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-array-species
  :END:

=Array[@@species]= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

Note

Array prototype methods normally use their this object's
[[https://tc39.es/ecma262/#constructor][constructor]] to create a
derived object. However, a subclass
[[https://tc39.es/ecma262/#constructor][constructor]] may over-ride that
default behaviour by redefining its @@species property.

* 22.1.3Properties of the Array Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-array-prototype-object
  :END:

The Array prototype object:

- is the intrinsic object %ArrayPrototype%.
- is an Array [[https://tc39.es/ecma262/#exotic-object][exotic object]]
  and has the internal methods specified for such objects.
- has a "length" property whose initial value is 0 and whose attributes
  are { [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]:
  false }.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.

Note

The Array prototype object is specified to be an Array
[[https://tc39.es/ecma262/#exotic-object][exotic object]] to ensure
compatibility with ECMAScript code that was created prior to the
ECMAScript 2015 specification.

* 22.1.3.1Array.prototype.concat ( ...=arguments= )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.concat-...arguments
  :END:

When the =concat= method is called with zero or more arguments, it
returns an array containing the array elements of the object followed by
the array elements of each argument in order.

The following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =A= be
   ? [[https://tc39.es/ecma262/#sec-arrayspeciescreate][ArraySpeciesCreate]](=O=,
   0).
3. Let =n= be 0.
4. Let =items= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   whose first element is =O= and whose subsequent elements are, in left
   to right order, the arguments that were passed to this function
   invocation.
5. Repeat, while =items= is not empty

   1. Remove the first element from =items= and let =E= be the value of
      the element.
   2. Let =spreadable= be
      ? [[https://tc39.es/ecma262/#sec-isconcatspreadable][IsConcatSpreadable]](=E=).
   3. If =spreadable= is true, then

      1. Let =k= be 0.
      2. Let =len= be
         ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=E=).
      3. If =n= + =len= > 2^{53} - 1, throw a TypeError exception.
      4. Repeat, while =k= < =len=

         1. Let =P= be
            ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
         2. Let =exists= be
            ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=E=,
            =P=).
         3. If =exists= is true, then

            1. Let =subElement= be
               ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=E=,
               =P=).
            2. Perform
               ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
               ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
               =subElement=).

         4. Set =n= to =n= + 1.
         5. Set =k= to =k= + 1.

   4. Else,

      1. NOTE: =E= is added as a single item rather than spread.
      2. If =n= ≥ 2^{53} - 1, throw a TypeError exception.
      3. Perform
         ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
         =E=).
      4. Set =n= to =n= + 1.

6. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
   "length", =n=, true).
7. Return =A=.

The "length" property of the =concat= method is 1.

Note 1

The explicit setting of the "length" property in step 6 is necessary to
ensure that its value is correct in situations where the trailing
elements of the result Array are not present.

Note 2

The =concat= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.1.1Runtime Semantics: IsConcatSpreadable ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-isconcatspreadable-o
  :END:

The abstract operation IsConcatSpreadable with argument =O= performs the
following steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return false.
2. Let =spreadable= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
   @@isConcatSpreadable).
3. If =spreadable= is not undefined, return
   ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=spreadable=).
4. Return ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=O=).

* 22.1.3.2Array.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.constructor
  :END:

The initial value of =Array.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-array-constructor][%Array%]].

* 22.1.3.3Array.prototype.copyWithin ( =target=, =start= [ , =end= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.copywithin-target-start-end
  :END:

The =copyWithin= method takes up to three arguments =target=, =start=
and =end=.

Note 1

The =end= argument is optional with the length of the this object as its
default value. If =target= is negative, it is treated as =length= +
=target= where =length= is the length of the array. If =start= is
negative, it is treated as =length= + =start=. If =end= is negative, it
is treated as =length= + =end=.

The following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3.  Let =relativeTarget= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=target=).
4.  If =relativeTarget= < 0, let =to= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= +
    =relativeTarget=), 0); else let =to= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeTarget=, =len=).
5.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
6.  If =relativeStart= < 0, let =from= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =from= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
7.  If =end= is undefined, let =relativeEnd= be =len=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
8.  If =relativeEnd= < 0, let =final= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
    0); else let =final= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
9.  Let =count= be [[https://tc39.es/ecma262/#eqn-min][min]](=final= -
    =from=, =len= - =to=).
10. If =from= < =to= and =to= < =from= + =count=, then

    1. Let =direction= be -1.
    2. Set =from= to =from= + =count= - 1.
    3. Set =to= to =to= + =count= - 1.

11. Else,

    1. Let =direction= be 1.

12. Repeat, while =count= > 0

    1. Let =fromKey= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=from=).
    2. Let =toKey= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=to=).
    3. Let =fromPresent= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       =fromKey=).
    4. If =fromPresent= is true, then

       1. Let =fromVal= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
          =fromKey=).
       2. Perform
          ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
          =toKey=, =fromVal=, true).

    5. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =fromPresent= is
          false.
       2. Perform
          ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
          =toKey=).

    6. Set =from= to =from= + =direction=.
    7. Set =to= to =to= + =direction=.
    8. Set =count= to =count= - 1.

13. Return =O=.

Note 2

The =copyWithin= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.4Array.prototype.entries ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.entries
  :END:

The following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Return
   [[https://tc39.es/ecma262/#sec-createarrayiterator][CreateArrayIterator]](=O=,
   key+value).

This function is the %ArrayProto_entries% intrinsic object.

* 22.1.3.5Array.prototype.every ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.every-callbackfn-thisarg
  :END:

Note 1

=callbackfn= should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value true or false.
=every= calls =callbackfn= once for each element present in the array,
in ascending order, until it finds one where =callbackfn= returns false.
If such an element is found, =every= immediately returns false.
Otherwise, if =callbackfn= returned true for all elements, =every= will
return true. =callbackfn= is called only for elements of the array which
actually exist; it is not called for missing elements of the array.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =callbackfn=. If it is not provided, undefined is
used instead.

=callbackfn= is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

=every= does not directly mutate the object on which it is called but
the object may be mutated by the calls to =callbackfn=.

The range of elements processed by =every= is set before the first call
to =callbackfn=. Elements which are appended to the array after the call
to =every= begins will not be visited by =callbackfn=. If existing
elements of the array are changed, their value as passed to =callbackfn=
will be the value at the time =every= visits them; elements that are
deleted after the call to =every= begins and before being visited are
not visited. =every= acts like the "for all" quantifier in mathematics.
In particular, for an empty array, it returns true.

When the =every= method is called with one or two arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
4. Let =k= be 0.
5. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kPresent= be
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
      =Pk=).
   3. If =kPresent= is true, then

      1. Let =kValue= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
      2. Let =testResult= be
         ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
         [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
         =thisArg=, « =kValue=, =k=, =O= »)).
      3. If =testResult= is false, return false.

   4. Set =k= to =k= + 1.

6. Return true.

Note 2

The =every= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.6Array.prototype.fill ( =value= [ , =start= [ , =end= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.fill-value-start-end
  :END:

The =fill= method takes up to three arguments =value=, =start= and
=end=.

Note 1

The =start= and =end= arguments are optional with default values of 0
and the length of the this object. If =start= is negative, it is treated
as =length= + =start= where =length= is the length of the array. If
=end= is negative, it is treated as =length= + =end=.

The following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. Let =relativeStart= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
4. If =relativeStart= < 0, let =k= be
   [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
   0); else let =k= be
   [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
5. If =end= is undefined, let =relativeEnd= be =len=; else let
   =relativeEnd= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
6. If =relativeEnd= < 0, let =final= be
   [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
   0); else let =final= be
   [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
7. Repeat, while =k= < =final=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=, =Pk=,
      =value=, true).
   3. Set =k= to =k= + 1.

8. Return =O=.

Note 2

The =fill= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.7Array.prototype.filter ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.filter-callbackfn-thisarg
  :END:

Note 1

=callbackfn= should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value true or false.
=filter= calls =callbackfn= once for each element in the array, in
ascending order, and constructs a new array of all the values for which
=callbackfn= returns true. =callbackfn= is called only for elements of
the array which actually exist; it is not called for missing elements of
the array.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =callbackfn=. If it is not provided, undefined is
used instead.

=callbackfn= is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

=filter= does not directly mutate the object on which it is called but
the object may be mutated by the calls to =callbackfn=.

The range of elements processed by =filter= is set before the first call
to =callbackfn=. Elements which are appended to the array after the call
to =filter= begins will not be visited by =callbackfn=. If existing
elements of the array are changed their value as passed to =callbackfn=
will be the value at the time =filter= visits them; elements that are
deleted after the call to =filter= begins and before being visited are
not visited.

When the =filter= method is called with one or two arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
4. Let =A= be
   ? [[https://tc39.es/ecma262/#sec-arrayspeciescreate][ArraySpeciesCreate]](=O=,
   0).
5. Let =k= be 0.
6. Let =to= be 0.
7. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kPresent= be
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
      =Pk=).
   3. If =kPresent= is true, then

      1. Let =kValue= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
      2. Let =selected= be
         ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
         [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
         =thisArg=, « =kValue=, =k=, =O= »)).
      3. If =selected= is true, then

         1. Perform
            ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
            ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=to=),
            =kValue=).
         2. Set =to= to =to= + 1.

   4. Set =k= to =k= + 1.

8. Return =A=.

Note 2

The =filter= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.8Array.prototype.find ( =predicate= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.find-predicate-thisarg
  :END:

The =find= method is called with one or two arguments, =predicate= and
=thisArg=.

Note 1

=predicate= should be a function that accepts three arguments and
returns a value that is coercible to a Boolean value. =find= calls
=predicate= once for each element of the array, in ascending order,
until it finds one where =predicate= returns true. If such an element is
found, =find= immediately returns that element value. Otherwise, =find=
returns undefined.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =predicate=. If it is not provided, undefined is
used instead.

=predicate= is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

=find= does not directly mutate the object on which it is called but the
object may be mutated by the calls to =predicate=.

The range of elements processed by =find= is set before the first call
to =predicate=. Elements that are appended to the array after the call
to =find= begins will not be visited by =predicate=. If existing
elements of the array are changed, their value as passed to =predicate=
will be the value at the time that =find= visits them.

When the =find= method is called, the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=predicate=)
   is false, throw a TypeError exception.
4. Let =k= be 0.
5. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kValue= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
   3. Let =testResult= be
      ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
      [[https://tc39.es/ecma262/#sec-call][Call]](=predicate=,
      =thisArg=, « =kValue=, =k=, =O= »)).
   4. If =testResult= is true, return =kValue=.
   5. Set =k= to =k= + 1.

6. Return undefined.

Note 2

The =find= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.9Array.prototype.findIndex ( =predicate= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.findindex-predicate-thisarg
  :END:

Note 1

=predicate= should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value true or false.
=findIndex= calls =predicate= once for each element of the array, in
ascending order, until it finds one where =predicate= returns true. If
such an element is found, =findIndex= immediately returns the index of
that element value. Otherwise, =findIndex= returns -1.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =predicate=. If it is not provided, undefined is
used instead.

=predicate= is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

=findIndex= does not directly mutate the object on which it is called
but the object may be mutated by the calls to =predicate=.

The range of elements processed by =findIndex= is set before the first
call to =predicate=. Elements that are appended to the array after the
call to =findIndex= begins will not be visited by =predicate=. If
existing elements of the array are changed, their value as passed to
=predicate= will be the value at the time that =findIndex= visits them.

When the =findIndex= method is called with one or two arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=predicate=)
   is false, throw a TypeError exception.
4. Let =k= be 0.
5. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kValue= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
   3. Let =testResult= be
      ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
      [[https://tc39.es/ecma262/#sec-call][Call]](=predicate=,
      =thisArg=, « =kValue=, =k=, =O= »)).
   4. If =testResult= is true, return =k=.
   5. Set =k= to =k= + 1.

6. Return -1.

Note 2

The =findIndex= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.10Array.prototype.flat ( [ =depth= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.flat-depth
  :END:

When the =flat= method is called with zero or one arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =sourceLen= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. Let =depthNum= be 1.
4. If =depth= is not undefined, then

   1. Set =depthNum= to
      ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=depth=).

5. Let =A= be
   ? [[https://tc39.es/ecma262/#sec-arrayspeciescreate][ArraySpeciesCreate]](=O=,
   0).
6. Perform
   ? [[https://tc39.es/ecma262/#sec-flattenintoarray][FlattenIntoArray]](=A=,
   =O=, =sourceLen=, 0, =depthNum=).
7. Return =A=.

* 22.1.3.10.1FlattenIntoArray ( =target=, =source=, =sourceLen=,
=start=, =depth= [ , =mapperFunction=, =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: flattenintoarray-target-source-sourcelen-start-depth-mapperfunction-thisarg
  :END:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
    is Object.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=source=)
    is Object.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=sourceLen=)
    is true.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=start=)
    is true.
5.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isinteger][IsInteger]](=depth=) is
    true, or =depth= is either +∞ or -∞.
6.  [[https://tc39.es/ecma262/#assert][Assert]]: If =mapperFunction= is
    present, then
    ! [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=mapperFunction=)
    is true, =thisArg= is present, and =depth= is 1.
7.  Let =targetIndex= be =start=.
8.  Let =sourceIndex= be 0.
9.  Repeat, while =sourceIndex= < =sourceLen=

    1. Let =P= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=sourceIndex=).
    2. Let =exists= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=source=,
       =P=).
    3. If =exists= is true, then

       1. Let =element= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=source=,
          =P=).
       2. If =mapperFunction= is present, then

          1. Set =element= to
             ? [[https://tc39.es/ecma262/#sec-call][Call]](=mapperFunction=,
             =thisArg=, « =element=, =sourceIndex=, =source= »).

       3. Let =shouldFlatten= be false.
       4. If =depth= > 0, then

          1. Set =shouldFlatten= to
             ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=element=).

       5. If =shouldFlatten= is true, then

          1. Let =elementLen= be
             ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=element=).
          2. Set =targetIndex= to
             ? [[https://tc39.es/ecma262/#sec-flattenintoarray][FlattenIntoArray]](=target=,
             =element=, =elementLen=, =targetIndex=, =depth= - 1).

       6. Else,

          1. If =targetIndex= ≥ 2^{53} - 1, throw a TypeError exception.
          2. Perform
             ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=target=,
             ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=targetIndex=),
             =element=).
          3. Set =targetIndex= to =targetIndex= + 1.

    4. Set =sourceIndex= to =sourceIndex= + 1.

10. Return =targetIndex=.

* 22.1.3.11Array.prototype.flatMap ( =mapperFunction= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.flatmap-mapperfunction-thisarg
  :END:

When the =flatMap= method is called with one or two arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =sourceLen= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   ! [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=mapperFunction=)
   is false, throw a TypeError exception.
4. If =thisArg= is present, let =T= be =thisArg=; else let =T= be
   undefined.
5. Let =A= be
   ? [[https://tc39.es/ecma262/#sec-arrayspeciescreate][ArraySpeciesCreate]](=O=,
   0).
6. Perform
   ? [[https://tc39.es/ecma262/#sec-flattenintoarray][FlattenIntoArray]](=A=,
   =O=, =sourceLen=, 0, 1, =mapperFunction=, =T=).
7. Return =A=.

* 22.1.3.12Array.prototype.forEach ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.foreach-callbackfn-thisarg
  :END:

Note 1

=callbackfn= should be a function that accepts three arguments.
=forEach= calls =callbackfn= once for each element present in the array,
in ascending order. =callbackfn= is called only for elements of the
array which actually exist; it is not called for missing elements of the
array.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =callbackfn=. If it is not provided, undefined is
used instead.

=callbackfn= is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

=forEach= does not directly mutate the object on which it is called but
the object may be mutated by the calls to =callbackfn=.

When the =forEach= method is called with one or two arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
4. Let =k= be 0.
5. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kPresent= be
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
      =Pk=).
   3. If =kPresent= is true, then

      1. Let =kValue= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
      2. Perform
         ? [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
         =thisArg=, « =kValue=, =k=, =O= »).

   4. Set =k= to =k= + 1.

6. Return undefined.

This function is the %ArrayProto_forEach% intrinsic object.

Note 2

The =forEach= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.13Array.prototype.includes ( =searchElement= [ , =fromIndex= ]
)
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.includes-searchelement-fromindex
  :END:

Note 1

=includes= compares =searchElement= to the elements of the array, in
ascending order, using the
[[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]] algorithm,
and if found at any position, returns true; otherwise, false is
returned.

The optional second argument =fromIndex= defaults to 0 (i.e. the whole
array is searched). If it is greater than or equal to the length of the
array, false is returned, i.e. the array will not be searched. If it is
negative, it is used as the offset from the end of the array to compute
=fromIndex=. If the computed index is less than 0, the whole array will
be searched.

When the =includes= method is called, the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If =len= is 0, return false.
4. Let =n= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=fromIndex=).
5. [[https://tc39.es/ecma262/#assert][Assert]]: If =fromIndex= is
   undefined, then =n= is 0.
6. If =n= ≥ 0, then

   1. Let =k= be =n=.

7. Else,

   1. Let =k= be =len= + =n=.
   2. If =k= < 0, set =k= to 0.

8. Repeat, while =k= < =len=

   1. Let =elementK= be the result of
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
   2. If
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=searchElement=,
      =elementK=) is true, return true.
   3. Set =k= to =k= + 1.

9. Return false.

Note 2

The =includes= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

Note 3

The =includes= method intentionally differs from the similar =indexOf=
method in two ways. First, it uses the
[[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]] algorithm,
instead of
[[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
Equality Comparison]], allowing it to detect NaN array elements. Second,
it does not skip missing array elements, instead treating them as
undefined.

* 22.1.3.14Array.prototype.indexOf ( =searchElement= [ , =fromIndex= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.indexof-searchelement-fromindex
  :END:

Note 1

=indexOf= compares =searchElement= to the elements of the array, in
ascending order, using the
[[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
Equality Comparison]] algorithm, and if found at one or more indices,
returns the smallest such index; otherwise, -1 is returned.

The optional second argument =fromIndex= defaults to 0 (i.e. the whole
array is searched). If it is greater than or equal to the length of the
array, -1 is returned, i.e. the array will not be searched. If it is
negative, it is used as the offset from the end of the array to compute
=fromIndex=. If the computed index is less than 0, the whole array will
be searched.

When the =indexOf= method is called with one or two arguments, the
following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3.  If =len= is 0, return -1.
4.  Let =n= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=fromIndex=).
5.  [[https://tc39.es/ecma262/#assert][Assert]]: If =fromIndex= is
    undefined, then =n= is 0.
6.  If =n= ≥ =len=, return -1.
7.  If =n= ≥ 0, then

    1. If =n= is -0, let =k= be +0; else let =k= be =n=.

8.  Else,

    1. Let =k= be =len= + =n=.
    2. If =k= < 0, set =k= to 0.

9.  Repeat, while =k= < =len=

    1. Let =kPresent= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
    2. If =kPresent= is true, then

       1. Let =elementK= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
       2. Let =same= be the result of performing
          [[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
          Equality Comparison]] =searchElement= === =elementK=.
       3. If =same= is true, return =k=.

    3. Set =k= to =k= + 1.

10. Return -1.

Note 2

The =indexOf= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.15Array.prototype.join ( =separator= )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.join-separator
  :END:

Note 1

The elements of the array are converted to Strings, and these Strings
are then concatenated, separated by occurrences of the =separator=. If
no separator is provided, a single comma is used as the separator.

The =join= method takes one argument, =separator=, and performs the
following steps:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If =separator= is undefined, let =sep= be the single-element String
   ",".
4. Else, let =sep= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=separator=).
5. Let =R= be the empty String.
6. Let =k= be 0.
7. Repeat, while =k= < =len=

   1. If =k= > 0, set =R= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of =R= and =sep=.
   2. Let =element= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
   3. If =element= is undefined or null, let =next= be the empty String;
      otherwise, let =next= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=element=).
   4. Set =R= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of =R= and =next=.
   5. Set =k= to =k= + 1.

8. Return =R=.

Note 2

The =join= function is intentionally generic; it does not require that
its this value be an Array object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.16Array.prototype.keys ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.keys
  :END:

The following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Return
   [[https://tc39.es/ecma262/#sec-createarrayiterator][CreateArrayIterator]](=O=,
   key).

This function is the %ArrayProto_keys% intrinsic object.

* 22.1.3.17Array.prototype.lastIndexOf ( =searchElement= [ , =fromIndex=
] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.lastindexof-searchelement-fromindex
  :END:

Note 1

=lastIndexOf= compares =searchElement= to the elements of the array in
descending order using the
[[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
Equality Comparison]] algorithm, and if found at one or more indices,
returns the largest such index; otherwise, -1 is returned.

The optional second argument =fromIndex= defaults to the array's length
minus one (i.e. the whole array is searched). If it is greater than or
equal to the length of the array, the whole array will be searched. If
it is negative, it is used as the offset from the end of the array to
compute =fromIndex=. If the computed index is less than 0, -1 is
returned.

When the =lastIndexOf= method is called with one or two arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If =len= is 0, return -1.
4. If =fromIndex= is present, let =n= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=fromIndex=);
   else let =n= be =len= - 1.
5. If =n= ≥ 0, then

   1. If =n= is -0, let =k= be +0; else let =k= be
      [[https://tc39.es/ecma262/#eqn-min][min]](=n=, =len= - 1).

6. Else,

   1. Let =k= be =len= + =n=.

7. Repeat, while =k= ≥ 0

   1. Let =kPresent= be
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
   2. If =kPresent= is true, then

      1. Let =elementK= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
      2. Let =same= be the result of performing
         [[https://tc39.es/ecma262/#sec-strict-equality-comparison][Strict
         Equality Comparison]] =searchElement= === =elementK=.
      3. If =same= is true, return =k=.

   3. Set =k= to =k= - 1.

8. Return -1.

Note 2

The =lastIndexOf= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.18Array.prototype.map ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.map-callbackfn-thisarg
  :END:

Note 1

=callbackfn= should be a function that accepts three arguments. =map=
calls =callbackfn= once for each element in the array, in ascending
order, and constructs a new Array from the results. =callbackfn= is
called only for elements of the array which actually exist; it is not
called for missing elements of the array.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =callbackfn=. If it is not provided, undefined is
used instead.

=callbackfn= is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

=map= does not directly mutate the object on which it is called but the
object may be mutated by the calls to =callbackfn=.

The range of elements processed by =map= is set before the first call to
=callbackfn=. Elements which are appended to the array after the call to
=map= begins will not be visited by =callbackfn=. If existing elements
of the array are changed, their value as passed to =callbackfn= will be
the value at the time =map= visits them; elements that are deleted after
the call to =map= begins and before being visited are not visited.

When the =map= method is called with one or two arguments, the following
steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
4. Let =A= be
   ? [[https://tc39.es/ecma262/#sec-arrayspeciescreate][ArraySpeciesCreate]](=O=,
   =len=).
5. Let =k= be 0.
6. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kPresent= be
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
      =Pk=).
   3. If =kPresent= is true, then

      1. Let =kValue= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
      2. Let =mappedValue= be
         ? [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
         =thisArg=, « =kValue=, =k=, =O= »).
      3. Perform
         ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
         =Pk=, =mappedValue=).

   4. Set =k= to =k= + 1.

7. Return =A=.

Note 2

The =map= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.19Array.prototype.pop ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.pop
  :END:

Note 1

The last element of the array is removed from the array and returned.

When the =pop= method is called, the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If =len= is zero, then

   1. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
      "length", 0, true).
   2. Return undefined.

4. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =len= > 0.
   2. Let =newLen= be =len= - 1.
   3. Let =index= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=newLen=).
   4. Let =element= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =index=).
   5. Perform
      ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
      =index=).
   6. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
      "length", =newLen=, true).
   7. Return =element=.

Note 2

The =pop= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.20Array.prototype.push ( ...=items= )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.push-...items
  :END:

Note 1

The arguments are appended to the end of the array, in the order in
which they appear. The new length of the array is returned as the result
of the call.

When the =push= method is called with zero or more arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. Let =items= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   whose elements are, in left to right order, the arguments that were
   passed to this function invocation.
4. Let =argCount= be the number of elements in =items=.
5. If =len= + =argCount= > 2^{53} - 1, throw a TypeError exception.
6. Repeat, while =items= is not empty

   1. Remove the first element from =items= and let =E= be the value of
      the element.
   2. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=len=), =E=,
      true).
   3. Set =len= to =len= + 1.

7. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
   "length", =len=, true).
8. Return =len=.

The "length" property of the =push= method is 1.

Note 2

The =push= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.21Array.prototype.reduce ( =callbackfn= [ , =initialValue= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.reduce-callbackfn-initialvalue
  :END:

Note 1

=callbackfn= should be a function that takes four arguments. =reduce=
calls the callback, as a function, once for each element after the first
element present in the array, in ascending order.

=callbackfn= is called with four arguments: the =previousValue= (value
from the previous call to =callbackfn=), the =currentValue= (value of
the current element), the =currentIndex=, and the object being
traversed. The first time that callback is called, the =previousValue=
and =currentValue= can be one of two values. If an =initialValue= was
supplied in the call to =reduce=, then =previousValue= will be equal to
=initialValue= and =currentValue= will be equal to the first value in
the array. If no =initialValue= was supplied, then =previousValue= will
be equal to the first value in the array and =currentValue= will be
equal to the second. It is a TypeError if the array contains no elements
and =initialValue= is not provided.

=reduce= does not directly mutate the object on which it is called but
the object may be mutated by the calls to =callbackfn=.

The range of elements processed by =reduce= is set before the first call
to =callbackfn=. Elements that are appended to the array after the call
to =reduce= begins will not be visited by =callbackfn=. If existing
elements of the array are changed, their value as passed to =callbackfn=
will be the value at the time =reduce= visits them; elements that are
deleted after the call to =reduce= begins and before being visited are
not visited.

When the =reduce= method is called with one or two arguments, the
following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
    is false, throw a TypeError exception.
4.  If =len= is 0 and =initialValue= is not present, throw a TypeError
    exception.
5.  Let =k= be 0.
6.  Let =accumulator= be undefined.
7.  If =initialValue= is present, then

    1. Set =accumulator= to =initialValue=.

8.  Else,

    1. Let =kPresent= be false.
    2. Repeat, while =kPresent= is false and =k= < =len=

       1. Let =Pk= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
       2. Set =kPresent= to
          ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
          =Pk=).
       3. If =kPresent= is true, then

          1. Set =accumulator= to
             ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).

       4. Set =k= to =k= + 1.

    3. If =kPresent= is false, throw a TypeError exception.

9.  Repeat, while =k= < =len=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =kPresent= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       =Pk=).
    3. If =kPresent= is true, then

       1. Let =kValue= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
       2. Set =accumulator= to
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
          undefined, « =accumulator=, =kValue=, =k=, =O= »).

    4. Set =k= to =k= + 1.

10. Return =accumulator=.

Note 2

The =reduce= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.22Array.prototype.reduceRight ( =callbackfn= [ , =initialValue=
] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.reduceright-callbackfn-initialvalue
  :END:

Note 1

=callbackfn= should be a function that takes four arguments.
=reduceRight= calls the callback, as a function, once for each element
after the first element present in the array, in descending order.

=callbackfn= is called with four arguments: the =previousValue= (value
from the previous call to =callbackfn=), the =currentValue= (value of
the current element), the =currentIndex=, and the object being
traversed. The first time the function is called, the =previousValue=
and =currentValue= can be one of two values. If an =initialValue= was
supplied in the call to =reduceRight=, then =previousValue= will be
equal to =initialValue= and =currentValue= will be equal to the last
value in the array. If no =initialValue= was supplied, then
=previousValue= will be equal to the last value in the array and
=currentValue= will be equal to the second-to-last value. It is a
TypeError if the array contains no elements and =initialValue= is not
provided.

=reduceRight= does not directly mutate the object on which it is called
but the object may be mutated by the calls to =callbackfn=.

The range of elements processed by =reduceRight= is set before the first
call to =callbackfn=. Elements that are appended to the array after the
call to =reduceRight= begins will not be visited by =callbackfn=. If
existing elements of the array are changed by =callbackfn=, their value
as passed to =callbackfn= will be the value at the time =reduceRight=
visits them; elements that are deleted after the call to =reduceRight=
begins and before being visited are not visited.

When the =reduceRight= method is called with one or two arguments, the
following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
    is false, throw a TypeError exception.
4.  If =len= is 0 and =initialValue= is not present, throw a TypeError
    exception.
5.  Let =k= be =len= - 1.
6.  Let =accumulator= be undefined.
7.  If =initialValue= is present, then

    1. Set =accumulator= to =initialValue=.

8.  Else,

    1. Let =kPresent= be false.
    2. Repeat, while =kPresent= is false and =k= ≥ 0

       1. Let =Pk= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
       2. Set =kPresent= to
          ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
          =Pk=).
       3. If =kPresent= is true, then

          1. Set =accumulator= to
             ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).

       4. Set =k= to =k= - 1.

    3. If =kPresent= is false, throw a TypeError exception.

9.  Repeat, while =k= ≥ 0

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =kPresent= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       =Pk=).
    3. If =kPresent= is true, then

       1. Let =kValue= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
       2. Set =accumulator= to
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
          undefined, « =accumulator=, =kValue=, =k=, =O= »).

    4. Set =k= to =k= - 1.

10. Return =accumulator=.

Note 2

The =reduceRight= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.23Array.prototype.reverse ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.reverse
  :END:

Note 1

The elements of the array are rearranged so as to reverse their order.
The object is returned as the result of the call.

When the =reverse= method is called, the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. Let =middle= be [[https://tc39.es/ecma262/#eqn-floor][floor]](=len= /
   2).
4. Let =lower= be 0.
5. Repeat, while =lower= ≠ =middle=

   1.  Let =upper= be =len= - =lower= - 1.
   2.  Let =upperP= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=upper=).
   3.  Let =lowerP= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=lower=).
   4.  Let =lowerExists= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       =lowerP=).
   5.  If =lowerExists= is true, then

       1. Let =lowerValue= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
          =lowerP=).

   6.  Let =upperExists= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       =upperP=).
   7.  If =upperExists= is true, then

       1. Let =upperValue= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
          =upperP=).

   8.  If =lowerExists= is true and =upperExists= is true, then

       1. Perform
          ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
          =lowerP=, =upperValue=, true).
       2. Perform
          ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
          =upperP=, =lowerValue=, true).

   9.  Else if =lowerExists= is false and =upperExists= is true, then

       1. Perform
          ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
          =lowerP=, =upperValue=, true).
       2. Perform
          ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
          =upperP=).

   10. Else if =lowerExists= is true and =upperExists= is false, then

       1. Perform
          ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
          =lowerP=).
       2. Perform
          ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
          =upperP=, =lowerValue=, true).

   11. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =lowerExists= and
          =upperExists= are both false.
       2. No action is required.

   12. Set =lower= to =lower= + 1.

6. Return =O=.

Note 2

The =reverse= function is intentionally generic; it does not require
that its this value be an Array object. Therefore, it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.24Array.prototype.shift ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.shift
  :END:

Note 1

The first element of the array is removed from the array and returned.

When the =shift= method is called, the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If =len= is zero, then

   1. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
      "length", 0, true).
   2. Return undefined.

4. Let =first= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
   "0").
5. Let =k= be 1.
6. Repeat, while =k= < =len=

   1. Let =from= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =to= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= - 1).
   3. Let =fromPresent= be
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
      =from=).
   4. If =fromPresent= is true, then

      1. Let =fromVal= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =from=).
      2. Perform
         ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
         =to=, =fromVal=, true).

   5. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =fromPresent= is
         false.
      2. Perform
         ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
         =to=).

   6. Set =k= to =k= + 1.

7. Perform
   ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
   ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=len= - 1)).
8. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
   "length", =len= - 1, true).
9. Return =first=.

Note 2

The =shift= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.25Array.prototype.slice ( =start=, =end= )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.slice-start-end
  :END:

Note 1

The =slice= method takes two arguments, =start= and =end=, and returns
an array containing the elements of the array from element =start= up
to, but not including, element =end= (or through the end of the array if
=end= is undefined). If =start= is negative, it is treated as =length= +
=start= where =length= is the length of the array. If =end= is negative,
it is treated as =length= + =end= where =length= is the length of the
array.

The following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
4.  If =relativeStart= < 0, let =k= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =k= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
5.  If =end= is undefined, let =relativeEnd= be =len=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
6.  If =relativeEnd= < 0, let =final= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
    0); else let =final= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
7.  Let =count= be [[https://tc39.es/ecma262/#eqn-max][max]](=final= -
    =k=, 0).
8.  Let =A= be
    ? [[https://tc39.es/ecma262/#sec-arrayspeciescreate][ArraySpeciesCreate]](=O=,
    =count=).
9.  Let =n= be 0.
10. Repeat, while =k= < =final=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =kPresent= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       =Pk=).
    3. If =kPresent= is true, then

       1. Let =kValue= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
       2. Perform
          ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
          =kValue=).

    4. Set =k= to =k= + 1.
    5. Set =n= to =n= + 1.

11. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
    "length", =n=, true).
12. Return =A=.

Note 2

The explicit setting of the "length" property of the result Array in
step 11 was necessary in previous editions of ECMAScript to ensure that
its length was correct in situations where the trailing elements of the
result Array were not present. Setting "length" became unnecessary
starting in ES2015 when the result Array was initialized to its proper
length rather than an empty Array but is carried forward to preserve
backward compatibility.

Note 3

The =slice= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.26Array.prototype.some ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.some-callbackfn-thisarg
  :END:

Note 1

=callbackfn= should be a function that accepts three arguments and
returns a value that is coercible to the Boolean value true or false.
=some= calls =callbackfn= once for each element present in the array, in
ascending order, until it finds one where =callbackfn= returns true. If
such an element is found, =some= immediately returns true. Otherwise,
=some= returns false. =callbackfn= is called only for elements of the
array which actually exist; it is not called for missing elements of the
array.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =callbackfn=. If it is not provided, undefined is
used instead.

=callbackfn= is called with three arguments: the value of the element,
the index of the element, and the object being traversed.

=some= does not directly mutate the object on which it is called but the
object may be mutated by the calls to =callbackfn=.

The range of elements processed by =some= is set before the first call
to =callbackfn=. Elements that are appended to the array after the call
to =some= begins will not be visited by =callbackfn=. If existing
elements of the array are changed, their value as passed to =callbackfn=
will be the value at the time that =some= visits them; elements that are
deleted after the call to =some= begins and before being visited are not
visited. =some= acts like the "exists" quantifier in mathematics. In
particular, for an empty array, it returns false.

When the =some= method is called with one or two arguments, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
4. Let =k= be 0.
5. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kPresent= be
      ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
      =Pk=).
   3. If =kPresent= is true, then

      1. Let =kValue= be
         ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
      2. Let =testResult= be
         ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
         [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
         =thisArg=, « =kValue=, =k=, =O= »)).
      3. If =testResult= is true, return true.

   4. Set =k= to =k= + 1.

6. Return false.

Note 2

The =some= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.27Array.prototype.sort ( =comparefn= )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.sort-comparefn
  :END:

The elements of this array are sorted. The sort must be stable (that is,
elements that compare equal must remain in their original order). If
=comparefn= is not undefined, it should be a function that accepts two
arguments =x= and =y= and returns a negative value if =x= < =y=, zero if
=x= = =y=, or a positive value if =x= > =y=.

Upon entry, the following steps are performed to initialize evaluation
of the =sort= function:

1. If =comparefn= is not undefined and
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=comparefn=)
   is false, throw a TypeError exception.
2. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
3. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=obj=).

Within this specification of the =sort= method, an object, =obj=, is
said to be /sparse/ if the following algorithm returns true:

1. For each [[https://tc39.es/ecma262/#integer][integer]] =i= in the
   range 0 ≤ =i= < =len=, do

   1. Let =elem= be =obj=.[[GetOwnProperty]](!
      [[https://tc39.es/ecma262/#sec-tostring][ToString]](=i=)).
   2. If =elem= is undefined, return true.

2. Return false.

The /sort order/ is the ordering, after completion of this function, of
the [[https://tc39.es/ecma262/#integer-index][integer-indexed]] property
values of =obj= whose [[https://tc39.es/ecma262/#integer][integer]]
indexes are less than =len=. The result of the =sort= function is then
determined as follows:

If =comparefn= is not undefined and is not a consistent comparison
function for the elements of this array (see below), the sort order is
implementation-defined. The sort order is also implementation-defined if
=comparefn= is undefined and
[[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] does not act
as a consistent comparison function.

Let =proto= be =obj=.[[GetPrototypeOf]](). If =proto= is not null and
there exists an [[https://tc39.es/ecma262/#integer][integer]] =j= such
that all of the conditions below are satisfied then the sort order is
implementation-defined:

- =obj= is sparse
- 0 ≤ =j= < =len=
- [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=proto=,
  [[https://tc39.es/ecma262/#sec-tostring][ToString]](=j=)) is true.

The sort order is also implementation-defined if =obj= is sparse and any
of the following conditions are true:

- [[https://tc39.es/ecma262/#sec-isextensible-o][IsExtensible]](=obj=)
  is false.
- Any [[https://tc39.es/ecma262/#integer-index][integer index]] property
  of =obj= whose name is a nonnegative
  [[https://tc39.es/ecma262/#integer][integer]] less than =len= is a
  [[https://tc39.es/ecma262/#sec-object-type][data property]] whose
  [[Configurable]] attribute is false.

The sort order is also implementation-defined if any of the following
conditions are true:

- If =obj= is an [[https://tc39.es/ecma262/#exotic-object][exotic
  object]] (including Proxy exotic objects) whose behaviour for [[Get]],
  [[Set]], [[Delete]], and [[GetOwnProperty]] is not the ordinary object
  implementation of these internal methods.
- If any index property of =obj= whose name is a nonnegative
  [[https://tc39.es/ecma262/#integer][integer]] less than =len= is an
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] or is
  a [[https://tc39.es/ecma262/#sec-object-type][data property]] whose
  [[Writable]] attribute is false.
- If =comparefn= is undefined and the application of
  [[https://tc39.es/ecma262/#sec-tostring][ToString]] to any value
  passed as an argument to
  [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] modifies
  =obj= or any object on =obj='s prototype chain.
- If =comparefn= is undefined and all applications of
  [[https://tc39.es/ecma262/#sec-tostring][ToString]], to any specific
  value passed as an argument to
  [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]], do not
  produce the same result.

The following steps are taken:

1. Perform an implementation-dependent sequence of calls to the [[Get]]
   and [[Set]] internal methods of =obj=, to the
   [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]]
   and [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]]
   abstract operation with =obj= as the first argument, and to
   [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] (described
   below), such that:

   - The property key argument for each call to [[Get]], [[Set]],
     [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]], or
     [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]]
     is the string representation of a nonnegative
     [[https://tc39.es/ecma262/#integer][integer]] less than =len=.
   - The arguments for calls to
     [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] are
     values returned by a previous call to the [[Get]] internal method,
     unless the properties accessed by those previous calls did not
     exist according to
     [[https://tc39.es/ecma262/#sec-hasownproperty][HasOwnProperty]]. If
     both prospective arguments to
     [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]]
     correspond to non-existent properties, use +0 instead of calling
     [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]]. If only
     the first prospective argument is non-existent use +1. If only the
     second prospective argument is non-existent use -1.
   - If =obj= is not sparse then
     [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]]
     must not be called.
   - If any [[Set]] call returns false a TypeError exception is thrown.
   - If an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]] is returned from any of these operations, it is
     immediately returned as the value of this function.

2. Return =obj=.

Unless the sort order is specified above to be implementation-defined,
the returned object must have the following two characteristics:

- There must be some mathematical permutation π of the nonnegative
  integers less than =len=, such that for every nonnegative
  [[https://tc39.es/ecma262/#integer][integer]] =j= less than =len=, if
  property old[=j=] existed, then new[π(=j=)] is exactly the same value
  as old[=j=]. But if property old[=j=] did not exist, then new[π(=j=)]
  does not exist.
- Then for all nonnegative integers =j= and =k=, each less than =len=,
  if [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]](old[=j=],
  old[=k=]) < 0 (see
  [[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] below), then
  new[π(=j=)] < new[π(=k=)].

Here the notation old[=j=] is used to refer to the hypothetical result
of calling =obj=.[[Get]](=j=) before this function is executed, and the
notation new[=j=] to refer to the hypothetical result of calling
=obj=.[[Get]](=j=) after this function has been executed.

A function =comparefn= is a consistent comparison function for a set of
values =S= if all of the requirements below are met for all values =a=,
=b=, and =c= (possibly the same value) in the set =S=: The notation =a=
<_{CF} =b= means =comparefn=(=a=, =b=) < 0; =a= =_{CF} =b= means
=comparefn=(=a=, =b=) = 0 (of either sign); and =a= >_{CF} =b= means
=comparefn=(=a=, =b=) > 0.

- Calling =comparefn=(=a=, =b=) always returns the same value =v= when
  given a specific pair of values =a= and =b= as its two arguments.
  Furthermore,
  [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=v=)
  is Number, and =v= is not NaN. Note that this implies that exactly one
  of =a= <_{CF} =b=, =a= =_{CF} =b=, and =a= >_{CF} =b= will be true for
  a given pair of =a= and =b=.
- Calling =comparefn=(=a=, =b=) does not modify =obj= or any object on
  =obj='s prototype chain.
- =a= =_{CF} =a= (reflexivity)
- If =a= =_{CF} =b=, then =b= =_{CF} =a= (symmetry)
- If =a= =_{CF} =b= and =b= =_{CF} =c=, then =a= =_{CF} =c=
  (transitivity of =_{CF})
- If =a= <_{CF} =b= and =b= <_{CF} =c=, then =a= <_{CF} =c=
  (transitivity of <_{CF})
- If =a= >_{CF} =b= and =b= >_{CF} =c=, then =a= >_{CF} =c=
  (transitivity of >_{CF})

Note 1

The above conditions are necessary and sufficient to ensure that
=comparefn= divides the set =S= into equivalence classes and that these
equivalence classes are totally ordered.

Note 2

The =sort= function is intentionally generic; it does not require that
its this value be an Array object. Therefore, it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.27.1Runtime Semantics: SortCompare ( =x=, =y= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-sortcompare-x-y
  :END:

The SortCompare abstract operation is called with two arguments =x= and
=y=. It also has access to the =comparefn= argument passed to the
current invocation of the =sort= method. The following steps are taken:

1.  If =x= and =y= are both undefined, return +0.
2.  If =x= is undefined, return 1.
3.  If =y= is undefined, return -1.
4.  If =comparefn= is not undefined, then

    1. Let =v= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](?
       [[https://tc39.es/ecma262/#sec-call][Call]](=comparefn=,
       undefined, « =x=, =y= »)).
    2. If =v= is NaN, return +0.
    3. Return =v=.

5.  Let =xString= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=x=).
6.  Let =yString= be
    ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=y=).
7.  Let =xSmaller= be the result of performing
    [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
    Relational Comparison]] =xString= < =yString=.
8.  If =xSmaller= is true, return -1.
9.  Let =ySmaller= be the result of performing
    [[https://tc39.es/ecma262/#sec-abstract-relational-comparison][Abstract
    Relational Comparison]] =yString= < =xString=.
10. If =ySmaller= is true, return 1.
11. Return +0.

Note 1

Because non-existent property values always compare greater than
undefined property values, and undefined always compares greater than
any other value, undefined property values always sort to the end of the
result, followed by non-existent property values.

Note 2

Method calls performed by the
[[https://tc39.es/ecma262/#sec-tostring][ToString]]
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] in steps 5 and 7 have the potential to cause SortCompare to
not behave as a consistent comparison function.

* 22.1.3.28Array.prototype.splice ( =start=, =deleteCount=, ...=items= )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.splice-start-deletecount-...items
  :END:

Note 1

When the =splice= method is called with two or more arguments =start=,
=deleteCount= and zero or more =items=, the =deleteCount= elements of
the array starting at [[https://tc39.es/ecma262/#integer-index][integer
index]] =start= are replaced by the arguments =items=. An Array object
containing the deleted elements (if any) is returned.

The following steps are taken:

1.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
4.  If =relativeStart= < 0, let =actualStart= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =actualStart= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
5.  If the number of actual arguments is 0, then

    1. Let =insertCount= be 0.
    2. Let =actualDeleteCount= be 0.

6.  Else if the number of actual arguments is 1, then

    1. Let =insertCount= be 0.
    2. Let =actualDeleteCount= be =len= - =actualStart=.

7.  Else,

    1. Let =insertCount= be the number of actual arguments minus 2.
    2. Let =dc= be
       ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=deleteCount=).
    3. Let =actualDeleteCount= be
       [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=dc=,
       0), =len= - =actualStart=).

8.  If =len= + =insertCount= - =actualDeleteCount= > 2^{53} - 1, throw a
    TypeError exception.
9.  Let =A= be
    ? [[https://tc39.es/ecma262/#sec-arrayspeciescreate][ArraySpeciesCreate]](=O=,
    =actualDeleteCount=).
10. Let =k= be 0.
11. Repeat, while =k= < =actualDeleteCount=

    1. Let =from= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=actualStart=
       + =k=).
    2. Let =fromPresent= be
       ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
       =from=).
    3. If =fromPresent= is true, then

       1. Let =fromValue= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =from=).
       2. Perform
          ? [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=A=,
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=),
          =fromValue=).

    4. Set =k= to =k= + 1.

12. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
    "length", =actualDeleteCount=, true).
13. Let =items= be a
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    whose elements are, in left to right order, the portion of the
    actual argument list starting with the third argument. The list is
    empty if fewer than three arguments were passed.
14. Let =itemCount= be the number of elements in =items=.
15. If =itemCount= < =actualDeleteCount=, then

    1. Set =k= to =actualStart=.
    2. Repeat, while =k= < (=len= - =actualDeleteCount=)

       1. Let =from= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= +
          =actualDeleteCount=).
       2. Let =to= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= +
          =itemCount=).
       3. Let =fromPresent= be
          ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
          =from=).
       4. If =fromPresent= is true, then

          1. Let =fromValue= be
             ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
             =from=).
          2. Perform
             ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
             =to=, =fromValue=, true).

       5. Else,

          1. [[https://tc39.es/ecma262/#assert][Assert]]: =fromPresent=
             is false.
          2. Perform
             ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
             =to=).

       6. Set =k= to =k= + 1.

    3. Set =k= to =len=.
    4. Repeat, while =k= > (=len= - =actualDeleteCount= + =itemCount=)

       1. Perform
          ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= -
          1)).
       2. Set =k= to =k= - 1.

16. Else if =itemCount= > =actualDeleteCount=, then

    1. Set =k= to (=len= - =actualDeleteCount=).
    2. Repeat, while =k= > =actualStart=

       1. Let =from= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= +
          =actualDeleteCount= - 1).
       2. Let =to= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= +
          =itemCount= - 1).
       3. Let =fromPresent= be
          ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
          =from=).
       4. If =fromPresent= is true, then

          1. Let =fromValue= be
             ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
             =from=).
          2. Perform
             ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
             =to=, =fromValue=, true).

       5. Else,

          1. [[https://tc39.es/ecma262/#assert][Assert]]: =fromPresent=
             is false.
          2. Perform
             ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
             =to=).

       6. Set =k= to =k= - 1.

17. Set =k= to =actualStart=.
18. Repeat, while =items= is not empty

    1. Remove the first element from =items= and let =E= be the value of
       that element.
    2. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=), =E=,
       true).
    3. Set =k= to =k= + 1.

19. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
    "length", =len= - =actualDeleteCount= + =itemCount=, true).
20. Return =A=.

Note 2

The explicit setting of the "length" property of the result Array in
step 19 was necessary in previous editions of ECMAScript to ensure that
its length was correct in situations where the trailing elements of the
result Array were not present. Setting "length" became unnecessary
starting in ES2015 when the result Array was initialized to its proper
length rather than an empty Array but is carried forward to preserve
backward compatibility.

Note 3

The =splice= function is intentionally generic; it does not require that
its this value be an Array object. Therefore it can be transferred to
other kinds of objects for use as a method.

* 22.1.3.29Array.prototype.toLocaleString ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.tolocalestring-reserved1-reserved2
  :END:

An ECMAScript implementation that includes the ECMA-402
Internationalization API must implement the
=Array.prototype.toLocaleString= method as specified in the ECMA-402
specification. If an ECMAScript implementation does not include the
ECMA-402 API the following specification of the =toLocaleString= method
is used.

Note 1

The first edition of ECMA-402 did not include a replacement
specification for the =Array.prototype.toLocaleString= method.

The meanings of the optional parameters to this method are defined in
the ECMA-402 specification; implementations that do not include ECMA-402
support must not use those parameter positions for anything else.

The following steps are taken:

1. Let =array= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=array=).
3. Let =separator= be the String value for the list-separator String
   appropriate for the host environment's current locale (this is
   derived in an implementation-defined way).
4. Let =R= be the empty String.
5. Let =k= be 0.
6. Repeat, while =k= < =len=

   1. If =k= > 0, then

      1. Set =R= to the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of =R= and =separator=.

   2. Let =nextElement= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=array=,
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
   3. If =nextElement= is not undefined or null, then

      1. Let =S= be
         ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](?
         [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=nextElement=,
         "toLocaleString")).
      2. Set =R= to the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of =R= and =S=.

   4. Set =k= to =k= + 1.

7. Return =R=.

Note 2

The elements of the array are converted to Strings using their
=toLocaleString= methods, and these Strings are then concatenated,
separated by occurrences of a separator String that has been derived in
an implementation-defined locale-specific way. The result of calling
this function is intended to be analogous to the result of =toString=,
except that the result of this function is intended to be
locale-specific.

Note 3

The =toLocaleString= function is intentionally generic; it does not
require that its this value be an Array object. Therefore it can be
transferred to other kinds of objects for use as a method.

* 22.1.3.30Array.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.tostring
  :END:

When the =toString= method is called, the following steps are taken:

1. Let =array= be
   ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this value).
2. Let =func= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=array=, "join").
3. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=func=) is
   false, set =func= to the intrinsic function
   %Object.prototype.toString%.
4. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=func=,
   =array=).

Note

The =toString= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.31Array.prototype.unshift ( ...=items= )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.unshift-...items
  :END:

Note 1

The arguments are prepended to the start of the array, such that their
order within the array is the same as the order in which they appear in
the argument list.

When the =unshift= method is called with zero or more arguments =item1=,
=item2=, etc., the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =len= be
   ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=O=).
3. Let =argCount= be the number of actual arguments.
4. If =argCount= > 0, then

   1. If =len= + =argCount= > 2^{53} - 1, throw a TypeError exception.
   2. Let =k= be =len=.
   3. Repeat, while =k= > 0,

      1. Let =from= be
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= - 1).
      2. Let =to= be
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k= +
         =argCount= - 1).
      3. Let =fromPresent= be
         ? [[https://tc39.es/ecma262/#sec-hasproperty][HasProperty]](=O=,
         =from=).
      4. If =fromPresent= is true, then

         1. Let =fromValue= be
            ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=,
            =from=).
         2. Perform
            ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
            =to=, =fromValue=, true).

      5. Else,

         1. [[https://tc39.es/ecma262/#assert][Assert]]: =fromPresent=
            is false.
         2. Perform
            ? [[https://tc39.es/ecma262/#sec-deletepropertyorthrow][DeletePropertyOrThrow]](=O=,
            =to=).

      6. Set =k= to =k= - 1.

   4. Let =j= be 0.
   5. Let =items= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      whose elements are, in left to right order, the arguments that
      were passed to this function invocation.
   6. Repeat, while =items= is not empty

      1. Remove the first element from =items= and let =E= be the value
         of that element.
      2. Perform
         ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
         ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=j=),
         =E=, true).
      3. Set =j= to =j= + 1.

5. Perform ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
   "length", =len= + =argCount=, true).
6. Return =len= + =argCount=.

The "length" property of the =unshift= method is 1.

Note 2

The =unshift= function is intentionally generic; it does not require
that its this value be an Array object. Therefore it can be transferred
to other kinds of objects for use as a method.

* 22.1.3.32Array.prototype.values ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype.values
  :END:

The following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Return
   [[https://tc39.es/ecma262/#sec-createarrayiterator][CreateArrayIterator]](=O=,
   value).

This function is the %ArrayProto_values% intrinsic object.

* 22.1.3.33Array.prototype [ @@iterator ] ( )
  :PROPERTIES:
  :CUSTOM_ID: array.prototype-iterator
  :END:

The initial value of the @@iterator property is the same
[[https://tc39.es/ecma262/#function-object][function object]] as the
initial value of the =Array.prototype.values= property.

* 22.1.3.34Array.prototype [ @@unscopables ]
  :PROPERTIES:
  :CUSTOM_ID: array.prototype-unscopables
  :END:

The initial value of the @@unscopables
[[https://tc39.es/ecma262/#sec-object-type][data property]] is an object
created by the following steps:

1.  Let =unscopableList= be
    [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](null).
2.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "copyWithin", true).
3.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "entries", true).
4.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "fill", true).
5.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "find", true).
6.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "findIndex", true).
7.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "flat", true).
8.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "flatMap", true).
9.  Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "includes", true).
10. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "keys", true).
11. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=unscopableList=,
    "values", true).
12. Return =unscopableList=.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

Note

The own property names of this object are property names that were not
included as standard properties of =Array.prototype= prior to the
ECMAScript 2015 specification. These names are ignored for =with=
statement binding purposes in order to preserve the behaviour of
existing code that might use one of these names as a binding in an outer
scope that is shadowed by a =with= statement whose binding object is an
Array object.

* 22.1.4Properties of Array Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-array-instances
  :END:

Array instances are Array exotic objects and have the internal methods
specified for such objects. Array instances inherit properties from the
Array prototype object.

Array instances have a "length" property, and a set of enumerable
properties with [[https://tc39.es/ecma262/#array-index][array index]]
names.

* 22.1.4.1length
  :PROPERTIES:
  :CUSTOM_ID: length-2
  :END:

The "length" property of an Array instance is a
[[https://tc39.es/ecma262/#sec-object-type][data property]] whose value
is always numerically greater than the name of every configurable own
property whose name is an [[https://tc39.es/ecma262/#array-index][array
index]].

The "length" property initially has the attributes { [[Writable]]: true,
[[Enumerable]]: false, [[Configurable]]: false }.

Note

Reducing the value of the "length" property has the side-effect of
deleting own array elements whose
[[https://tc39.es/ecma262/#array-index][array index]] is between the old
and new length values. However, non-configurable properties can not be
deleted. Attempting to set the "length" property of an Array object to a
value that is numerically less than or equal to the largest numeric own
[[https://tc39.es/ecma262/#property-name][property name]] of an existing
non-configurable [[https://tc39.es/ecma262/#array-index][array-indexed]]
property of the array will result in the length being set to a numeric
value that is one greater than that non-configurable numeric own
[[https://tc39.es/ecma262/#property-name][property name]]. See
[[https://tc39.es/ecma262/#sec-array-exotic-objects-defineownproperty-p-desc][9.4.2.1]].

* 22.1.5Array Iterator Objects
  :PROPERTIES:
  :CUSTOM_ID: array-iterator-objects
  :END:

An Array Iterator is an object, that represents a specific iteration
over some specific Array instance object. There is not a named
[[https://tc39.es/ecma262/#constructor][constructor]] for Array Iterator
objects. Instead, Array iterator objects are created by calling certain
methods of Array instance objects.

* 22.1.5.1CreateArrayIterator ( =array=, =kind= )
  :PROPERTIES:
  :CUSTOM_ID: createarrayiterator-array-kind
  :END:

Several methods of Array objects return Iterator objects. The abstract
operation CreateArrayIterator with arguments =array= and =kind= is used
to create such iterator objects. It performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=array=)
   is Object.
2. Let =iterator= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]]([[https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object][%ArrayIteratorPrototype%]],
   « [[IteratedArrayLike]], [[ArrayLikeNextIndex]],
   [[ArrayLikeIterationKind]] »).
3. Set =iterator=.[[IteratedArrayLike]] to =array=.
4. Set =iterator=.[[ArrayLikeNextIndex]] to 0.
5. Set =iterator=.[[ArrayLikeIterationKind]] to =kind=.
6. Return =iterator=.

* 22.1.5.2The %ArrayIteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-arrayiteratorprototype-object
  :END:

The %ArrayIteratorPrototype% object:

- has properties that are inherited by all Array Iterator Objects.
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]].
- has the following properties:

* 22.1.5.2.1%ArrayIteratorPrototype%.next ( )
  :PROPERTIES:
  :CUSTOM_ID: arrayiteratorprototype.next
  :END:

1.  Let =O= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
    is not Object, throw a TypeError exception.
3.  If =O= does not have all of the internal slots of an Array Iterator
    Instance
    ([[https://tc39.es/ecma262/#sec-properties-of-array-iterator-instances][22.1.5.3]]),
    throw a TypeError exception.
4.  Let =a= be =O=.[[IteratedArrayLike]].
5.  If =a= is undefined, return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
    true).
6.  Let =index= be =O=.[[ArrayLikeNextIndex]].
7.  Let =itemKind= be =O=.[[ArrayLikeIterationKind]].
8.  If =a= has a [[TypedArrayName]] internal slot, then

    1. If
       [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=a=.[[ViewedArrayBuffer]])
       is true, throw a TypeError exception.
    2. Let =len= be =a=.[[ArrayLength]].

9.  Else,

    1. Let =len= be
       ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=a=).

10. If =index= ≥ =len=, then

    1. Set =O=.[[IteratedArrayLike]] to undefined.
    2. Return
       [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
       true).

11. Set =O=.[[ArrayLikeNextIndex]] to =index= + 1.
12. If =itemKind= is key, return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=index=,
    false).
13. Let =elementKey= be
    ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=index=).
14. Let =elementValue= be
    ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=a=, =elementKey=).
15. If =itemKind= is value, let =result= be =elementValue=.
16. Else,

    1. [[https://tc39.es/ecma262/#assert][Assert]]: =itemKind= is
       key+value.
    2. Let =result= be
       ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](«
       =index=, =elementValue= »).

17. Return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=result=,
    false).

* 22.1.5.2.2%ArrayIteratorPrototype% [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: arrayiteratorprototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Array Iterator".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 22.1.5.3Properties of Array Iterator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-array-iterator-instances
  :END:

Array Iterator instances are ordinary objects that inherit properties
from the
[[https://tc39.es/ecma262/#sec-%arrayiteratorprototype%-object][%ArrayIteratorPrototype%]]
intrinsic object. Array Iterator instances are initially created with
the internal slots listed in [[https://tc39.es/ecma262/#table-48][Table
61]].

Table 61: Internal Slots of Array Iterator Instances

| Internal Slot                | Description                                                                                                                          |
|------------------------------+--------------------------------------------------------------------------------------------------------------------------------------|
| [[IteratedArrayLike]]        | The [[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like object]] that is being iterated.                                    |
| [[ArrayLikeNextIndex]]       | The [[https://tc39.es/ecma262/#integer-index][integer index]] of the next element to be examined by this iterator.                   |
| [[ArrayLikeIterationKind]]   | A String value that identifies what is returned for each element of the iteration. The possible values are: key, value, key+value.   |

* 22.2TypedArray Objects
  :PROPERTIES:
  :CUSTOM_ID: typedarray-objects
  :END:

=TypedArray= objects present an array-like view of an underlying binary
data buffer
([[https://tc39.es/ecma262/#sec-arraybuffer-objects][24.1]]). Each
element of a =TypedArray= instance has the same underlying binary scalar
data type. There is a distinct =TypedArray=
[[https://tc39.es/ecma262/#constructor][constructor]], listed in
[[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
62]], for each of the supported element types. Each
[[https://tc39.es/ecma262/#constructor][constructor]] in
[[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table 62]]
has a corresponding distinct prototype object.

Table 62: The TypedArray Constructors

<<table-49>>

| [[https://tc39.es/ecma262/#constructor][Constructor]] Name and Intrinsic   | Element Type   | Element Size   | Conversion Operation                                          | Description                                                                         |
|----------------------------------------------------------------------------+----------------+----------------+---------------------------------------------------------------+-------------------------------------------------------------------------------------|
| Int8Array\\                                                                | Int8           | 1              | [[https://tc39.es/ecma262/#sec-toint8][ToInt8]]               | 8-bit 2's complement signed [[https://tc39.es/ecma262/#integer][integer]]           |
| %Int8Array%                                                                |                |                |                                                               |                                                                                     |
| Uint8Array\\                                                               | Uint8          | 1              | [[https://tc39.es/ecma262/#sec-touint8][ToUint8]]             | 8-bit unsigned [[https://tc39.es/ecma262/#integer][integer]]                        |
| %Uint8Array%                                                               |                |                |                                                               |                                                                                     |
| Uint8ClampedArray\\                                                        | Uint8C         | 1              | [[https://tc39.es/ecma262/#sec-touint8clamp][ToUint8Clamp]]   | 8-bit unsigned [[https://tc39.es/ecma262/#integer][integer]] (clamped conversion)   |
| %Uint8ClampedArray%                                                        |                |                |                                                               |                                                                                     |
| Int16Array\\                                                               | Int16          | 2              | [[https://tc39.es/ecma262/#sec-toint16][ToInt16]]             | 16-bit 2's complement signed [[https://tc39.es/ecma262/#integer][integer]]          |
| %Int16Array%                                                               |                |                |                                                               |                                                                                     |
| Uint16Array\\                                                              | Uint16         | 2              | [[https://tc39.es/ecma262/#sec-touint16][ToUint16]]           | 16-bit unsigned [[https://tc39.es/ecma262/#integer][integer]]                       |
| %Uint16Array%                                                              |                |                |                                                               |                                                                                     |
| Int32Array\\                                                               | Int32          | 4              | [[https://tc39.es/ecma262/#sec-toint32][ToInt32]]             | 32-bit 2's complement signed [[https://tc39.es/ecma262/#integer][integer]]          |
| %Int32Array%                                                               |                |                |                                                               |                                                                                     |
| Uint32Array\\                                                              | Uint32         | 4              | [[https://tc39.es/ecma262/#sec-touint32][ToUint32]]           | 32-bit unsigned [[https://tc39.es/ecma262/#integer][integer]]                       |
| %Uint32Array%                                                              |                |                |                                                               |                                                                                     |
| BigInt64Array\\                                                            | BigInt64       | 8              | [[https://tc39.es/ecma262/#sec-tobigint64][ToBigInt64]]       | 64-bit two's complement signed [[https://tc39.es/ecma262/#integer][integer]]        |
| %BigInt64Array%                                                            |                |                |                                                               |                                                                                     |
| BigUint64Array\\                                                           | BigUint64      | 8              | [[https://tc39.es/ecma262/#sec-tobiguint64][ToBigUint64]]     | 64-bit unsigned [[https://tc39.es/ecma262/#integer][integer]]                       |
| %BigUint64Array%                                                           |                |                |                                                               |                                                                                     |
| Float32Array\\                                                             | Float32        | 4              |                                                               | 32-bit IEEE floating point                                                          |
| %Float32Array%                                                             |                |                |                                                               |                                                                                     |
| Float64Array\\                                                             | Float64        | 8              |                                                               | 64-bit IEEE floating point                                                          |
| %Float64Array%                                                             |                |                |                                                               |                                                                                     |

In the definitions below, references to =TypedArray= should be replaced
with the appropriate
[[https://tc39.es/ecma262/#constructor][constructor]] name from the
above table.

* 22.2.1The %TypedArray% Intrinsic Object
  :PROPERTIES:
  :CUSTOM_ID: the-typedarray-intrinsic-object
  :END:

The %TypedArray% intrinsic object:

- is a [[https://tc39.es/ecma262/#constructor][constructor]]
  [[https://tc39.es/ecma262/#function-object][function object]] that all
  of the =TypedArray=
  [[https://tc39.es/ecma262/#constructor][constructor]] objects inherit
  from.
- along with its corresponding prototype object, provides common
  properties that are inherited by all =TypedArray= constructors and
  their instances.
- does not have a global name or appear as a property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- acts as the abstract superclass of the various =TypedArray=
  constructors.
- will throw an error when invoked, because it is an abstract class
  [[https://tc39.es/ecma262/#constructor][constructor]]. The
  =TypedArray= constructors do not perform a =super= call to it.

* 22.2.1.1%TypedArray% ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray
  :END:

The
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]
[[https://tc39.es/ecma262/#constructor][constructor]] performs the
following steps:

1. Throw a TypeError exception.

The "length" property of the
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]
[[https://tc39.es/ecma262/#constructor][constructor]] function is 0.

* 22.2.2Properties of the %TypedArray% Intrinsic Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-typedarray-intrinsic-object
  :END:

The
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]
intrinsic object:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has a "name" property whose value is "TypedArray".
- has the following properties:

* 22.2.2.1%TypedArray%.from ( =source= [ , =mapfn= [ , =thisArg= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.from-source-mapfn-thisarg
  :END:

When the =from= method is called with argument =source=, and optional
arguments =mapfn= and =thisArg=, the following steps are taken:

1.  Let =C= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
    is false, throw a TypeError exception.
3.  If =mapfn= is undefined, let =mapping= be false.
4.  Else,

    1. If
       [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=mapfn=)
       is false, throw a TypeError exception.
    2. Let =mapping= be true.

5.  Let =usingIterator= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=source=,
    @@iterator).
6.  If =usingIterator= is not undefined, then

    1. Let =values= be
       ? [[https://tc39.es/ecma262/#sec-iterabletolist][IterableToList]](=source=,
       =usingIterator=).
    2. Let =len= be the number of elements in =values=.
    3. Let =targetObj= be
       ? [[https://tc39.es/ecma262/#typedarray-create][TypedArrayCreate]](=C=,
       « =len= »).
    4. Let =k= be 0.
    5. Repeat, while =k= < =len=

       1. Let =Pk= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
       2. Let =kValue= be the first element of =values= and remove that
          element from =values=.
       3. If =mapping= is true, then

          1. Let =mappedValue= be
             ? [[https://tc39.es/ecma262/#sec-call][Call]](=mapfn=,
             =thisArg=, « =kValue=, =k= »).

       4. Else, let =mappedValue= be =kValue=.
       5. Perform
          ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=targetObj=,
          =Pk=, =mappedValue=, true).
       6. Set =k= to =k= + 1.

    6. [[https://tc39.es/ecma262/#assert][Assert]]: =values= is now an
       empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    7. Return =targetObj=.

7.  NOTE: =source= is not an Iterable so assume it is already an
    [[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like
    object]].
8.  Let =arrayLike= be
    ! [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=source=).
9.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=arrayLike=).
10. Let =targetObj= be
    ? [[https://tc39.es/ecma262/#typedarray-create][TypedArrayCreate]](=C=,
    « =len= »).
11. Let =k= be 0.
12. Repeat, while =k= < =len=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =kValue= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=arrayLike=,
       =Pk=).
    3. If =mapping= is true, then

       1. Let =mappedValue= be
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=mapfn=,
          =thisArg=, « =kValue=, =k= »).

    4. Else, let =mappedValue= be =kValue=.
    5. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=targetObj=,
       =Pk=, =mappedValue=, true).
    6. Set =k= to =k= + 1.

13. Return =targetObj=.

* 22.2.2.1.1Runtime Semantics: IterableToList ( =items=, =method= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-iterabletolist-items-method
  :END:

The abstract operation IterableToList performs the following steps:

1. Let =iteratorRecord= be
   ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=items=,
   sync, =method=).
2. Let =values= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
3. Let =next= be true.
4. Repeat, while =next= is not false

   1. Set =next= to
      ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
   2. If =next= is not false, then

      1. Let =nextValue= be
         ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
      2. Append =nextValue= to the end of the
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         =values=.

5. Return =values=.

* 22.2.2.2%TypedArray%.of ( ...=items= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.of-...items
  :END:

When the =of= method is called with any number of arguments, the
following steps are taken:

1. Let =len= be the actual number of arguments passed to this function.
2. Let =items= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of arguments passed to this function.
3. Let =C= be the this value.
4. If [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
   is false, throw a TypeError exception.
5. Let =newObj= be
   ? [[https://tc39.es/ecma262/#typedarray-create][TypedArrayCreate]](=C=,
   « =len= »).
6. Let =k= be 0.
7. Repeat, while =k= < =len=

   1. Let =kValue= be =items=[=k=].
   2. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   3. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=newObj=,
      =Pk=, =kValue=, true).
   4. Set =k= to =k= + 1.

8. Return =newObj=.

Note

The =items= argument is assumed to be a well-formed rest argument value.

* 22.2.2.3%TypedArray%.prototype
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype
  :END:

The initial value of
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype=
is the
[[https://tc39.es/ecma262/#sec-properties-of-the-%typedarrayprototype%-object][%TypedArray.prototype%]]
intrinsic object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 22.2.2.4get %TypedArray% [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-typedarray-species
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=[@@species]=
is an [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
whose set accessor function is undefined. Its get accessor function
performs the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

Note

[[https://tc39.es/ecma262/#sec-properties-of-the-%typedarrayprototype%-object][%TypedArray.prototype%]]
methods normally use their this object's
[[https://tc39.es/ecma262/#constructor][constructor]] to create a
derived object. However, a subclass
[[https://tc39.es/ecma262/#constructor][constructor]] may over-ride that
default behaviour by redefining its @@species property.

* 22.2.3Properties of the %TypedArray.prototype% Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-typedarray.prototype-object
  :END:

The %TypedArray.prototype% object:

- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have a [[ViewedArrayBuffer]] or any other of the internal
  slots that are specific to =TypedArray= instance objects.

* 22.2.3.1get %TypedArray%.prototype.buffer
  :PROPERTIES:
  :CUSTOM_ID: get-typedarray.prototype.buffer
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.buffer=
is an [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
whose set accessor function is undefined. Its get accessor function
performs the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[TypedArrayName]]).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
   [[ViewedArrayBuffer]] internal slot.
4. Let =buffer= be =O=.[[ViewedArrayBuffer]].
5. Return =buffer=.

* 22.2.3.2get %TypedArray%.prototype.byteLength
  :PROPERTIES:
  :CUSTOM_ID: get-typedarray.prototype.bytelength
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.byteLength=
is an [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
whose set accessor function is undefined. Its get accessor function
performs the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[TypedArrayName]]).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
   [[ViewedArrayBuffer]] internal slot.
4. Let =buffer= be =O=.[[ViewedArrayBuffer]].
5. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
   is true, return 0.
6. Let =size= be =O=.[[ByteLength]].
7. Return =size=.

* 22.2.3.3get %TypedArray%.prototype.byteOffset
  :PROPERTIES:
  :CUSTOM_ID: get-typedarray.prototype.byteoffset
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.byteOffset=
is an [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
whose set accessor function is undefined. Its get accessor function
performs the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[TypedArrayName]]).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
   [[ViewedArrayBuffer]] internal slot.
4. Let =buffer= be =O=.[[ViewedArrayBuffer]].
5. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
   is true, return 0.
6. Let =offset= be =O=.[[ByteOffset]].
7. Return =offset=.

* 22.2.3.4%TypedArray%.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.constructor
  :END:

The initial value of
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.constructor=
is the
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]
intrinsic object.

* 22.2.3.5%TypedArray%.prototype.copyWithin ( =target=, =start= [ ,
=end= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.copywithin-target-start-end
  :END:

The interpretation and use of the arguments of
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.copyWithin=
are the same as for =Array.prototype.copyWithin= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.copywithin][22.1.3.3]].

The following steps are taken:

1.  Let =O= be the this value.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3.  Let =len= be =O=.[[ArrayLength]].
4.  Let =relativeTarget= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=target=).
5.  If =relativeTarget= < 0, let =to= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= +
    =relativeTarget=), 0); else let =to= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeTarget=, =len=).
6.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
7.  If =relativeStart= < 0, let =from= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =from= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
8.  If =end= is undefined, let =relativeEnd= be =len=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
9.  If =relativeEnd= < 0, let =final= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
    0); else let =final= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
10. Let =count= be [[https://tc39.es/ecma262/#eqn-min][min]](=final= -
    =from=, =len= - =to=).
11. If =count= > 0, then

    1.  NOTE: The copying must be performed in a manner that preserves
        the bit-level encoding of the source data.
    2.  Let =buffer= be =O=.[[ViewedArrayBuffer]].
    3.  If
        [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
        is true, throw a TypeError exception.
    4.  Let =typedArrayName= be the String value of
        =O=.[[TypedArrayName]].
    5.  Let =elementSize= be the Element Size value specified in
        [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
        62]] for =typedArrayName=.
    6.  Let =byteOffset= be =O=.[[ByteOffset]].
    7.  Let =toByteIndex= be =to= × =elementSize= + =byteOffset=.
    8.  Let =fromByteIndex= be =from= × =elementSize= + =byteOffset=.
    9.  Let =countBytes= be =count= × =elementSize=.
    10. If =fromByteIndex= < =toByteIndex= and =toByteIndex= <
        =fromByteIndex= + =countBytes=, then

        1. Let =direction= be -1.
        2. Set =fromByteIndex= to =fromByteIndex= + =countBytes= - 1.
        3. Set =toByteIndex= to =toByteIndex= + =countBytes= - 1.

    11. Else,

        1. Let =direction= be 1.

    12. Repeat, while =countBytes= > 0

        1. Let =value= be
           [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=buffer=,
           =fromByteIndex=, Uint8, true, Unordered).
        2. Perform
           [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=buffer=,
           =toByteIndex=, Uint8, =value=, true, Unordered).
        3. Set =fromByteIndex= to =fromByteIndex= + =direction=.
        4. Set =toByteIndex= to =toByteIndex= + =direction=.
        5. Set =countBytes= to =countBytes= - 1.

12. Return =O=.

* 22.2.3.5.1Runtime Semantics: ValidateTypedArray ( =O= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-validatetypedarray-o
  :END:

When called with argument =O=, the following steps are taken:

1. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[TypedArrayName]]).
2. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
   [[ViewedArrayBuffer]] internal slot.
3. Let =buffer= be =O=.[[ViewedArrayBuffer]].
4. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
   is true, throw a TypeError exception.
5. Return =buffer=.

* 22.2.3.6%TypedArray%.prototype.entries ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.entries
  :END:

The following steps are taken:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3. Return
   [[https://tc39.es/ecma262/#sec-createarrayiterator][CreateArrayIterator]](=O=,
   key+value).

* 22.2.3.7%TypedArray%.prototype.every ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.every-callbackfn-thisarg
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.every=
is a distinct function that implements the same algorithm as
=Array.prototype.every= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.every][22.1.3.5]] except
that the this object's [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer][integer]]-indexed properties are not
sparse. However, such optimization must not introduce any observable
changes in the specified behaviour of the algorithm and must take into
account the possibility that calls to =callbackfn= may cause the this
value to become detached.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.8%TypedArray%.prototype.fill ( =value= [ , =start= [ , =end= ]
] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.fill-value-start-end
  :END:

The interpretation and use of the arguments of
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.fill=
are the same as for =Array.prototype.fill= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.fill][22.1.3.6]].

The following steps are taken:

1.  Let =O= be the this value.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3.  Let =len= be =O=.[[ArrayLength]].
4.  If =O=.[[ContentType]] is BigInt, set =value= to
    ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=value=).
5.  Otherwise, set =value= to
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=value=).
6.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
7.  If =relativeStart= < 0, let =k= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =k= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
8.  If =end= is undefined, let =relativeEnd= be =len=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
9.  If =relativeEnd= < 0, let =final= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
    0); else let =final= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
10. If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=O=.[[ViewedArrayBuffer]])
    is true, throw a TypeError exception.
11. Repeat, while =k= < =final=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Perform
       ! [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
       =Pk=, =value=, true).
    3. Set =k= to =k= + 1.

12. Return =O=.

* 22.2.3.9%TypedArray%.prototype.filter ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.filter-callbackfn-thisarg
  :END:

The interpretation and use of the arguments of
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.filter=
are the same as for =Array.prototype.filter= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.filter][22.1.3.7]].

When the =filter= method is called with one or two arguments, the
following steps are taken:

1.  Let =O= be the this value.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3.  Let =len= be =O=.[[ArrayLength]].
4.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
    is false, throw a TypeError exception.
5.  Let =kept= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
6.  Let =k= be 0.
7.  Let =captured= be 0.
8.  Repeat, while =k= < =len=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =kValue= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
    3. Let =selected= be
       ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](?
       [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
       =thisArg=, « =kValue=, =k=, =O= »)).
    4. If =selected= is true, then

       1. Append =kValue= to the end of =kept=.
       2. Set =captured= to =captured= + 1.

    5. Set =k= to =k= + 1.

9.  Let =A= be
    ? [[https://tc39.es/ecma262/#typedarray-species-create][TypedArraySpeciesCreate]](=O=,
    « =captured= »).
10. Let =n= be 0.
11. For each element =e= of =kept=, do

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=), =e=,
       true).
    2. Set =n= to =n= + 1.

12. Return =A=.

This function is not generic. The this value must be an object with a
[[TypedArrayName]] internal slot.

* 22.2.3.10%TypedArray%.prototype.find ( =predicate= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.find-predicate-thisarg
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.find=
is a distinct function that implements the same algorithm as
=Array.prototype.find= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.find][22.1.3.8]] except
that the this object's [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm and must
take into account the possibility that calls to =predicate= may cause
the this value to become detached.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.11%TypedArray%.prototype.findIndex ( =predicate= [ , =thisArg=
] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.findindex-predicate-thisarg
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.findIndex=
is a distinct function that implements the same algorithm as
=Array.prototype.findIndex= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.findindex][22.1.3.9]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm and must
take into account the possibility that calls to =predicate= may cause
the this value to become detached.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.12%TypedArray%.prototype.forEach ( =callbackfn= [ , =thisArg= ]
)
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.foreach-callbackfn-thisarg
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.forEach=
is a distinct function that implements the same algorithm as
=Array.prototype.forEach= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.foreach][22.1.3.12]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm and must
take into account the possibility that calls to =callbackfn= may cause
the this value to become detached.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.13%TypedArray%.prototype.includes ( =searchElement= [ ,
=fromIndex= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.includes-searchelement-fromindex
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.includes=
is a distinct function that implements the same algorithm as
=Array.prototype.includes= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.includes][22.1.3.13]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.14%TypedArray%.prototype.indexOf ( =searchElement= [ ,
=fromIndex= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.indexof-searchelement-fromindex
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.indexOf=
is a distinct function that implements the same algorithm as
=Array.prototype.indexOf= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.indexof][22.1.3.14]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.15%TypedArray%.prototype.join ( =separator= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.join-separator
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.join=
is a distinct function that implements the same algorithm as
=Array.prototype.join= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.join][22.1.3.15]] except
that the this object's [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.16%TypedArray%.prototype.keys ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.keys
  :END:

The following steps are taken:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3. Return
   [[https://tc39.es/ecma262/#sec-createarrayiterator][CreateArrayIterator]](=O=,
   key).

* 22.2.3.17%TypedArray%.prototype.lastIndexOf ( =searchElement= [ ,
=fromIndex= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.lastindexof-searchelement-fromindex
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.lastIndexOf=
is a distinct function that implements the same algorithm as
=Array.prototype.lastIndexOf= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.lastindexof][22.1.3.17]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.18get %TypedArray%.prototype.length
  :PROPERTIES:
  :CUSTOM_ID: get-typedarray.prototype.length
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.length=
is an [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
whose set accessor function is undefined. Its get accessor function
performs the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[TypedArrayName]]).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has
   [[ViewedArrayBuffer]] and [[ArrayLength]] internal slots.
4. Let =buffer= be =O=.[[ViewedArrayBuffer]].
5. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
   is true, return 0.
6. Let =length= be =O=.[[ArrayLength]].
7. Return =length=.

This function is not generic. The this value must be an object with a
[[TypedArrayName]] internal slot.

* 22.2.3.19%TypedArray%.prototype.map ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.map-callbackfn-thisarg
  :END:

The interpretation and use of the arguments of
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.map=
are the same as for =Array.prototype.map= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.map][22.1.3.18]].

When the =map= method is called with one or two arguments, the following
steps are taken:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3. Let =len= be =O=.[[ArrayLength]].
4. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
5. Let =A= be
   ? [[https://tc39.es/ecma262/#typedarray-species-create][TypedArraySpeciesCreate]](=O=,
   « =len= »).
6. Let =k= be 0.
7. Repeat, while =k= < =len=

   1. Let =Pk= be
      ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
   2. Let =kValue= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
   3. Let =mappedValue= be
      ? [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
      =thisArg=, « =kValue=, =k=, =O= »).
   4. Perform
      ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=, =Pk=,
      =mappedValue=, true).
   5. Set =k= to =k= + 1.

8. Return =A=.

This function is not generic. The this value must be an object with a
[[TypedArrayName]] internal slot.

* 22.2.3.20%TypedArray%.prototype.reduce ( =callbackfn= [ ,
=initialValue= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.reduce-callbackfn-initialvalue
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.reduce=
is a distinct function that implements the same algorithm as
=Array.prototype.reduce= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.reduce][22.1.3.21]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm and must
take into account the possibility that calls to =callbackfn= may cause
the this value to become detached.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.21%TypedArray%.prototype.reduceRight ( =callbackfn= [ ,
=initialValue= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.reduceright-callbackfn-initialvalue
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.reduceRight=
is a distinct function that implements the same algorithm as
=Array.prototype.reduceRight= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.reduceright][22.1.3.22]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm and must
take into account the possibility that calls to =callbackfn= may cause
the this value to become detached.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.22%TypedArray%.prototype.reverse ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.reverse
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.reverse=
is a distinct function that implements the same algorithm as
=Array.prototype.reverse= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.reverse][22.1.3.23]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.23%TypedArray%.prototype.set ( =overloaded= [ , =offset= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.set-overloaded-offset
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.set=
is a single function whose behaviour is overloaded based upon the type
of its first argument.

This function is not generic. The this value must be an object with a
[[TypedArrayName]] internal slot.

* 22.2.3.23.1%TypedArray%.prototype.set ( =array= [ , =offset= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.set-array-offset
  :END:

Sets multiple values in this =TypedArray=, reading the values from the
object =array=. The optional =offset= value indicates the first element
index in this =TypedArray= where values are written. If omitted, it is
assumed to be 0.

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =array= is any
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript
    language value]] other than an Object with a [[TypedArrayName]]
    internal slot. If it is such an Object, the definition in
    [[https://tc39.es/ecma262/#sec-%typedarray%.prototype.set-typedarray-offset][22.2.3.23.2]]
    applies.
2.  Let =target= be the this value.
3.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=target=,
    [[TypedArrayName]]).
4.  [[https://tc39.es/ecma262/#assert][Assert]]: =target= has a
    [[ViewedArrayBuffer]] internal slot.
5.  Let =targetOffset= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=offset=).
6.  If =targetOffset= < 0, throw a RangeError exception.
7.  Let =targetBuffer= be =target=.[[ViewedArrayBuffer]].
8.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=targetBuffer=)
    is true, throw a TypeError exception.
9.  Let =targetLength= be =target=.[[ArrayLength]].
10. Let =targetName= be the String value of =target=.[[TypedArrayName]].
11. Let =targetElementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =targetName=.
12. Let =targetType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =targetName=.
13. Let =targetByteOffset= be =target=.[[ByteOffset]].
14. Let =src= be
    ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](=array=).
15. Let =srcLength= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=src=).
16. If =srcLength= + =targetOffset= > =targetLength=, throw a RangeError
    exception.
17. Let =targetByteIndex= be =targetOffset= × =targetElementSize= +
    =targetByteOffset=.
18. Let =k= be 0.
19. Let =limit= be =targetByteIndex= + =targetElementSize= ×
    =srcLength=.
20. Repeat, while =targetByteIndex= < =limit=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =value= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=src=, =Pk=).
    3. If =target=.[[ContentType]] is BigInt, set =value= to
       ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=value=).
    4. Otherwise, set =value= to
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=value=).
    5. If
       [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=targetBuffer=)
       is true, throw a TypeError exception.
    6. Perform
       [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=targetBuffer=,
       =targetByteIndex=, =targetType=, =value=, true, Unordered).
    7. Set =k= to =k= + 1.
    8. Set =targetByteIndex= to =targetByteIndex= + =targetElementSize=.

21. Return undefined.

* 22.2.3.23.2%TypedArray%.prototype.set ( =typedArray= [ , =offset= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.set-typedarray-offset
  :END:

Sets multiple values in this =TypedArray=, reading the values from the
=typedArray= argument object. The optional =offset= value indicates the
first element index in this =TypedArray= where values are written. If
omitted, it is assumed to be 0.

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =typedArray= has a
    [[TypedArrayName]] internal slot. If it does not, the definition in
    [[https://tc39.es/ecma262/#sec-%typedarray%.prototype.set-array-offset][22.2.3.23.1]]
    applies.
2.  Let =target= be the this value.
3.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=target=,
    [[TypedArrayName]]).
4.  [[https://tc39.es/ecma262/#assert][Assert]]: =target= has a
    [[ViewedArrayBuffer]] internal slot.
5.  Let =targetOffset= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=offset=).
6.  If =targetOffset= < 0, throw a RangeError exception.
7.  Let =targetBuffer= be =target=.[[ViewedArrayBuffer]].
8.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=targetBuffer=)
    is true, throw a TypeError exception.
9.  Let =targetLength= be =target=.[[ArrayLength]].
10. Let =srcBuffer= be =typedArray=.[[ViewedArrayBuffer]].
11. If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=srcBuffer=)
    is true, throw a TypeError exception.
12. Let =targetName= be the String value of =target=.[[TypedArrayName]].
13. Let =targetType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =targetName=.
14. Let =targetElementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =targetName=.
15. Let =targetByteOffset= be =target=.[[ByteOffset]].
16. Let =srcName= be the String value of
    =typedArray=.[[TypedArrayName]].
17. Let =srcType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =srcName=.
18. Let =srcElementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =srcName=.
19. Let =srcLength= be =typedArray=.[[ArrayLength]].
20. Let =srcByteOffset= be =typedArray=.[[ByteOffset]].
21. If =srcLength= + =targetOffset= > =targetLength=, throw a RangeError
    exception.
22. If =target=.[[ContentType]] is not equal to
    =typedArray=.[[ContentType]], throw a TypeError exception.
23. If both
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=srcBuffer=)
    and
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=targetBuffer=)
    are true, then

    1. If =srcBuffer=.[[ArrayBufferData]] and
       =targetBuffer=.[[ArrayBufferData]] are the same
       [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]]
       values, let =same= be true; else let =same= be false.

24. Else, let =same= be
    [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=srcBuffer=,
    =targetBuffer=).
25. If =same= is true, then

    1. Let =srcByteLength= be =typedArray=.[[ByteLength]].
    2. Set =srcBuffer= to
       ? [[https://tc39.es/ecma262/#sec-clonearraybuffer][CloneArrayBuffer]](=srcBuffer=,
       =srcByteOffset=, =srcByteLength=,
       [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]]).
    3. NOTE:
       [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]]
       is used to clone =srcBuffer= because is it known to not have any
       observable side-effects.
    4. Let =srcByteIndex= be 0.

26. Else, let =srcByteIndex= be =srcByteOffset=.
27. Let =targetByteIndex= be =targetOffset= × =targetElementSize= +
    =targetByteOffset=.
28. Let =limit= be =targetByteIndex= + =targetElementSize= ×
    =srcLength=.
29. If =srcType= is the same as =targetType=, then

    1. NOTE: If =srcType= and =targetType= are the same, the transfer
       must be performed in a manner that preserves the bit-level
       encoding of the source data.
    2. Repeat, while =targetByteIndex= < =limit=

       1. Let =value= be
          [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=srcBuffer=,
          =srcByteIndex=, Uint8, true, Unordered).
       2. Perform
          [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=targetBuffer=,
          =targetByteIndex=, Uint8, =value=, true, Unordered).
       3. Set =srcByteIndex= to =srcByteIndex= + 1.
       4. Set =targetByteIndex= to =targetByteIndex= + 1.

30. Else,

    1. Repeat, while =targetByteIndex= < =limit=

       1. Let =value= be
          [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=srcBuffer=,
          =srcByteIndex=, =srcType=, true, Unordered).
       2. Perform
          [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=targetBuffer=,
          =targetByteIndex=, =targetType=, =value=, true, Unordered).
       3. Set =srcByteIndex= to =srcByteIndex= + =srcElementSize=.
       4. Set =targetByteIndex= to =targetByteIndex= +
          =targetElementSize=.

31. Return undefined.

* 22.2.3.24%TypedArray%.prototype.slice ( =start=, =end= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.slice-start-end
  :END:

The interpretation and use of the arguments of
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.slice=
are the same as for =Array.prototype.slice= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.slice][22.1.3.25]]. The
following steps are taken:

1.  Let =O= be the this value.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3.  Let =len= be =O=.[[ArrayLength]].
4.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
5.  If =relativeStart= < 0, let =k= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =k= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
6.  If =end= is undefined, let =relativeEnd= be =len=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
7.  If =relativeEnd= < 0, let =final= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
    0); else let =final= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
8.  Let =count= be [[https://tc39.es/ecma262/#eqn-max][max]](=final= -
    =k=, 0).
9.  Let =A= be
    ? [[https://tc39.es/ecma262/#typedarray-species-create][TypedArraySpeciesCreate]](=O=,
    « =count= »).
10. Let =srcName= be the String value of =O=.[[TypedArrayName]].
11. Let =srcType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =srcName=.
12. Let =targetName= be the String value of =A=.[[TypedArrayName]].
13. Let =targetType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =targetName=.
14. If =srcType= is different from =targetType=, then

    1. Let =n= be 0.
    2. Repeat, while =k= < =final=

       1. Let =Pk= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
       2. Let =kValue= be
          ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=O=, =Pk=).
       3. Perform
          ! [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=A=,
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=n=),
          =kValue=, true).
       4. Set =k= to =k= + 1.
       5. Set =n= to =n= + 1.

15. Else if =count= > 0, then

    1.  Let =srcBuffer= be =O=.[[ViewedArrayBuffer]].
    2.  If
        [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=srcBuffer=)
        is true, throw a TypeError exception.
    3.  Let =targetBuffer= be =A=.[[ViewedArrayBuffer]].
    4.  Let =elementSize= be the Element Size value specified in
        [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
        62]] for Element Type =srcType=.
    5.  NOTE: If =srcType= and =targetType= are the same, the transfer
        must be performed in a manner that preserves the bit-level
        encoding of the source data.
    6.  Let =srcByteOffet= be =O=.[[ByteOffset]].
    7.  Let =targetByteIndex= be =A=.[[ByteOffset]].
    8.  Let =srcByteIndex= be (=k= × =elementSize=) + =srcByteOffet=.
    9.  Let =limit= be =targetByteIndex= + =count= × =elementSize=.
    10. Repeat, while =targetByteIndex= < =limit=

        1. Let =value= be
           [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=srcBuffer=,
           =srcByteIndex=, Uint8, true, Unordered).
        2. Perform
           [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=targetBuffer=,
           =targetByteIndex=, Uint8, =value=, true, Unordered).
        3. Set =srcByteIndex= to =srcByteIndex= + 1.
        4. Set =targetByteIndex= to =targetByteIndex= + 1.

16. Return =A=.

This function is not generic. The this value must be an object with a
[[TypedArrayName]] internal slot.

* 22.2.3.25%TypedArray%.prototype.some ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.some-callbackfn-thisarg
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.some=
is a distinct function that implements the same algorithm as
=Array.prototype.some= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.some][22.1.3.26]] except
that the this object's [[ArrayLength]] internal slot is accessed in
place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm and must
take into account the possibility that calls to =callbackfn= may cause
the this value to become detached.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

* 22.2.3.26%TypedArray%.prototype.sort ( =comparefn= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.sort-comparefn
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.sort=
is a distinct function that, except as described below, implements the
same requirements as those of =Array.prototype.sort= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.sort][22.1.3.27]]. The
implementation of the
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.sort=
specification may be optimized with the knowledge that the this value is
an object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. The only internal methods of the this object that the
algorithm may call are [[Get]] and [[Set]].

This function is not generic. The this value must be an object with a
[[TypedArrayName]] internal slot.

Upon entry, the following steps are performed to initialize evaluation
of the =sort= function. These steps are used instead of the entry steps
in [[https://tc39.es/ecma262/#sec-array.prototype.sort][22.1.3.27]]:

1. If =comparefn= is not undefined and
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=comparefn=)
   is false, throw a TypeError exception.
2. Let =obj= be the this value.
3. Let =buffer= be
   ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=obj=).
4. Let =len= be =obj=.[[ArrayLength]].

The implementation-defined sort order condition for exotic objects is
not applied by
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.sort=.

The following version of
[[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] is used by
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.sort=.
It performs a numeric comparison rather than the string comparison used
in [[https://tc39.es/ecma262/#sec-array.prototype.sort][22.1.3.27]].
[[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] has access to
the =comparefn= and =buffer= values of the current invocation of the
=sort= method.

When the TypedArray
[[https://tc39.es/ecma262/#sec-sortcompare][SortCompare]] abstract
operation is called with two arguments =x= and =y=, the following steps
are taken:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: Both
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
    and
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
    are Number or both are BigInt.
2.  If =comparefn= is not undefined, then

    1. Let =v= be
       ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](?
       [[https://tc39.es/ecma262/#sec-call][Call]](=comparefn=,
       undefined, « =x=, =y= »)).
    2. If
       [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
       is true, throw a TypeError exception.
    3. If =v= is NaN, return +0.
    4. Return =v=.

3.  If =x= and =y= are both NaN, return +0.
4.  If =x= is NaN, return 1.
5.  If =y= is NaN, return -1.
6.  If =x= < =y=, return -1.
7.  If =x= > =y=, return 1.
8.  If =x= is -0 and =y= is +0, return -1.
9.  If =x= is +0 and =y= is -0, return 1.
10. Return +0.

Note

Because NaN always compares greater than any other value, NaN property
values always sort to the end of the result when =comparefn= is not
provided.

* 22.2.3.27%TypedArray%.prototype.subarray ( =begin=, =end= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.subarray-begin-end
  :END:

Returns a new =TypedArray= object whose element type is the same as this
=TypedArray= and whose ArrayBuffer is the same as the ArrayBuffer of
this =TypedArray=, referencing the elements at =begin=, inclusive, up to
=end=, exclusive. If either =begin= or =end= is negative, it refers to
an index from the end of the array, as opposed to from the beginning.

1.  Let =O= be the this value.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
    [[TypedArrayName]]).
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
    [[ViewedArrayBuffer]] internal slot.
4.  Let =buffer= be =O=.[[ViewedArrayBuffer]].
5.  Let =srcLength= be =O=.[[ArrayLength]].
6.  Let =relativeBegin= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=begin=).
7.  If =relativeBegin= < 0, let =beginIndex= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=srcLength= +
    =relativeBegin=), 0); else let =beginIndex= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeBegin=,
    =srcLength=).
8.  If =end= is undefined, let =relativeEnd= be =srcLength=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
9.  If =relativeEnd= < 0, let =endIndex= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=srcLength= +
    =relativeEnd=), 0); else let =endIndex= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=,
    =srcLength=).
10. Let =newLength= be
    [[https://tc39.es/ecma262/#eqn-max][max]](=endIndex= - =beginIndex=,
    0).
11. Let =constructorName= be the String value of =O=.[[TypedArrayName]].
12. Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =constructorName=.
13. Let =srcByteOffset= be =O=.[[ByteOffset]].
14. Let =beginByteOffset= be =srcByteOffset= + =beginIndex= ×
    =elementSize=.
15. Let =argumentsList= be « =buffer=, =beginByteOffset=, =newLength= ».
16. Return
    ? [[https://tc39.es/ecma262/#typedarray-species-create][TypedArraySpeciesCreate]](=O=,
    =argumentsList=).

This function is not generic. The this value must be an object with a
[[TypedArrayName]] internal slot.

* 22.2.3.28%TypedArray%.prototype.toLocaleString ( [ =reserved1= [ ,
=reserved2= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.tolocalestring-reserved1-reserved2
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.toLocaleString=
is a distinct function that implements the same algorithm as
=Array.prototype.toLocaleString= as defined in
[[https://tc39.es/ecma262/#sec-array.prototype.tolocalestring][22.1.3.29]]
except that the this object's [[ArrayLength]] internal slot is accessed
in place of performing a [[Get]] of "length". The implementation of the
algorithm may be optimized with the knowledge that the this value is an
object that has a fixed length and whose
[[https://tc39.es/ecma262/#integer-index][integer-indexed]] properties
are not sparse. However, such optimization must not introduce any
observable changes in the specified behaviour of the algorithm.

This function is not generic.
[[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]]
is applied to the this value prior to evaluating the algorithm. If its
result is an
[[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
completion]] that exception is thrown instead of evaluating the
algorithm.

Note

If the ECMAScript implementation includes the ECMA-402
Internationalization API this function is based upon the algorithm for
=Array.prototype.toLocaleString= that is in the ECMA-402 specification.

* 22.2.3.29%TypedArray%.prototype.toString ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.tostring
  :END:

The initial value of the
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.toString=
[[https://tc39.es/ecma262/#sec-object-type][data property]] is the same
built-in [[https://tc39.es/ecma262/#function-object][function object]]
as the =Array.prototype.toString= method defined in
[[https://tc39.es/ecma262/#sec-array.prototype.tostring][22.1.3.30]].

* 22.2.3.30%TypedArray%.prototype.values ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.values
  :END:

The following steps are taken:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=O=).
3. Return
   [[https://tc39.es/ecma262/#sec-createarrayiterator][CreateArrayIterator]](=O=,
   value).

* 22.2.3.31%TypedArray%.prototype [ @@iterator ] ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype-iterator
  :END:

The initial value of the @@iterator property is the same
[[https://tc39.es/ecma262/#function-object][function object]] as the
initial value of the
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype.values=
property.

* 22.2.3.32get %TypedArray%.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: get-typedarray.prototype-tostringtag
  :END:

[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype[@@toStringTag]=
is an [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
whose set accessor function is undefined. Its get accessor function
performs the following steps:

1. Let =O= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return undefined.
3. If =O= does not have a [[TypedArrayName]] internal slot, return
   undefined.
4. Let =name= be =O=.[[TypedArrayName]].
5. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=name=)
   is String.
6. Return =name=.

This property has the attributes { [[Enumerable]]: false,
[[Configurable]]: true }.

The initial value of the "name" property of this function is "get
[Symbol.toStringTag]".

* 22.2.4The =TypedArray= Constructors
  :PROPERTIES:
  :CUSTOM_ID: the-typedarray-constructors
  :END:

Each =TypedArray= [[https://tc39.es/ecma262/#constructor][constructor]]:

- is an intrinsic object that has the structure described below,
  differing only in the name used as the
  [[https://tc39.es/ecma262/#constructor][constructor]] name instead of
  =TypedArray=, in
  [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
  62]].
- is a single function whose behaviour is overloaded based upon the
  number and types of its arguments. The actual behaviour of a call of
  =TypedArray= depends upon the number and kind of arguments that are
  passed to it.
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =TypedArray= behaviour must include a
  =super= call to the =TypedArray=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with the internal state necessary to
  support the
  [[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]=.prototype=
  built-in methods.
- has a "length" property whose value is 3.

* 22.2.4.1=TypedArray= ( )
  :PROPERTIES:
  :CUSTOM_ID: typedarray-1
  :END:

This description applies only if the =TypedArray= function is called
with no arguments.

1. If NewTarget is undefined, throw a TypeError exception.
2. Let =constructorName= be the String value of the
   [[https://tc39.es/ecma262/#constructor][Constructor]] Name value
   specified in
   [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
   62]] for this =TypedArray=
   [[https://tc39.es/ecma262/#constructor][constructor]].
3. Return
   ? [[https://tc39.es/ecma262/#sec-allocatetypedarray][AllocateTypedArray]](=constructorName=,
   NewTarget, ="%TypedArray.prototype%"=, 0).

* 22.2.4.2=TypedArray= ( =length= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray-length
  :END:

This description applies only if the =TypedArray= function is called
with at least one argument and the Type of the first argument is not
Object.

=TypedArray= called with argument =length= performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=length=)
   is not Object.
2. If NewTarget is undefined, throw a TypeError exception.
3. Let =elementLength= be
   ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=length=).
4. Let =constructorName= be the String value of the
   [[https://tc39.es/ecma262/#constructor][Constructor]] Name value
   specified in
   [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
   62]] for this =TypedArray=
   [[https://tc39.es/ecma262/#constructor][constructor]].
5. Return
   ? [[https://tc39.es/ecma262/#sec-allocatetypedarray][AllocateTypedArray]](=constructorName=,
   NewTarget, ="%TypedArray.prototype%"=, =elementLength=).

* 22.2.4.2.1Runtime Semantics: AllocateTypedArray ( =constructorName=,
=newTarget=, =defaultProto= [ , =length= ] )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-allocatetypedarray-constructorname-newtarget-defaultproto-length
  :END:

The abstract operation AllocateTypedArray with arguments
=constructorName=, =newTarget=, =defaultProto= and optional argument
=length= is used to validate and create an instance of a TypedArray
[[https://tc39.es/ecma262/#constructor][constructor]]. =constructorName=
is required to be the name of a TypedArray
[[https://tc39.es/ecma262/#constructor][constructor]] in
[[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
62]]. If the =length= argument is passed, an ArrayBuffer of that length
is also allocated and associated with the new TypedArray instance.
AllocateTypedArray provides common semantics that is used by all of the
=TypedArray= overloads. AllocateTypedArray performs the following steps:

1. Let =proto= be
   ? [[https://tc39.es/ecma262/#sec-getprototypefromconstructor][GetPrototypeFromConstructor]](=newTarget=,
   =defaultProto=).
2. Let =obj= be
   [[https://tc39.es/ecma262/#sec-integerindexedobjectcreate][IntegerIndexedObjectCreate]](=proto=,
   « [[ViewedArrayBuffer]], [[TypedArrayName]], [[ContentType]],
   [[ByteLength]], [[ByteOffset]], [[ArrayLength]] »).
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   =obj=.[[ViewedArrayBuffer]] is undefined.
4. Set =obj=.[[TypedArrayName]] to =constructorName=.
5. If =constructorName= is "BigInt64Array" or "BigUint64Array", set
   =obj=.[[ContentType]] to BigInt.
6. Otherwise, set =obj=.[[ContentType]] to Number.
7. If =length= is not present, then

   1. Set =obj=.[[ByteLength]] to 0.
   2. Set =obj=.[[ByteOffset]] to 0.
   3. Set =obj=.[[ArrayLength]] to 0.

8. Else,

   1. Perform
      ? [[https://tc39.es/ecma262/#sec-allocatetypedarraybuffer][AllocateTypedArrayBuffer]](=obj=,
      =length=).

9. Return =obj=.

* 22.2.4.2.2Runtime Semantics: AllocateTypedArrayBuffer ( =O=, =length=
)
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-allocatetypedarraybuffer-o-length
  :END:

The abstract operation AllocateTypedArrayBuffer with arguments =O= and
=length= allocates and associates an ArrayBuffer with the TypedArray
instance =O=. It performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =O= is an Object that
    has a [[ViewedArrayBuffer]] internal slot.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    =O=.[[ViewedArrayBuffer]] is undefined.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=length=)
    is true.
4.  Let =constructorName= be the String value of =O=.[[TypedArrayName]].
5.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =constructorName=.
6.  Let =byteLength= be =elementSize= × =length=.
7.  Let =data= be
    ? [[https://tc39.es/ecma262/#sec-allocatearraybuffer][AllocateArrayBuffer]]([[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]],
    =byteLength=).
8.  Set =O=.[[ViewedArrayBuffer]] to =data=.
9.  Set =O=.[[ByteLength]] to =byteLength=.
10. Set =O=.[[ByteOffset]] to 0.
11. Set =O=.[[ArrayLength]] to =length=.
12. Return =O=.

* 22.2.4.3=TypedArray= ( =typedArray= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray-typedarray
  :END:

This description applies only if the =TypedArray= function is called
with at least one argument and the Type of the first argument is Object
and that object has a [[TypedArrayName]] internal slot.

=TypedArray= called with argument =typedArray= performs the following
steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=typedArray=)
    is Object and =typedArray= has a [[TypedArrayName]] internal slot.
2.  If NewTarget is undefined, throw a TypeError exception.
3.  Let =constructorName= be the String value of the
    [[https://tc39.es/ecma262/#constructor][Constructor]] Name value
    specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for this =TypedArray=
    [[https://tc39.es/ecma262/#constructor][constructor]].
4.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-allocatetypedarray][AllocateTypedArray]](=constructorName=,
    NewTarget, ="%TypedArray.prototype%"=).
5.  Let =srcArray= be =typedArray=.
6.  Let =srcData= be =srcArray=.[[ViewedArrayBuffer]].
7.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=srcData=)
    is true, throw a TypeError exception.
8.  Let =elementType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =constructorName=.
9.  Let =elementLength= be =srcArray=.[[ArrayLength]].
10. Let =srcName= be the String value of =srcArray=.[[TypedArrayName]].
11. Let =srcType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =srcName=.
12. Let =srcElementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =srcName=.
13. Let =srcByteOffset= be =srcArray=.[[ByteOffset]].
14. Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =constructorName=.
15. Let =byteLength= be =elementSize= × =elementLength=.
16. If
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=srcData=)
    is false, then

    1. Let =bufferConstructor= be
       ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=srcData=,
       [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]]).

17. Else,

    1. Let =bufferConstructor= be
       [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]].

18. If =elementType= is the same as =srcType=, then

    1. Let =data= be
       ? [[https://tc39.es/ecma262/#sec-clonearraybuffer][CloneArrayBuffer]](=srcData=,
       =srcByteOffset=, =byteLength=, =bufferConstructor=).

19. Else,

    1. Let =data= be
       ? [[https://tc39.es/ecma262/#sec-allocatearraybuffer][AllocateArrayBuffer]](=bufferConstructor=,
       =byteLength=).
    2. If
       [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=srcData=)
       is true, throw a TypeError exception.
    3. If =srcArray=.[[ContentType]] is not equal to
       =O=.[[ContentType]], throw a TypeError exception.
    4. Let =srcByteIndex= be =srcByteOffset=.
    5. Let =targetByteIndex= be 0.
    6. Let =count= be =elementLength=.
    7. Repeat, while =count= > 0

       1. Let =value= be
          [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=srcData=,
          =srcByteIndex=, =srcType=, true, Unordered).
       2. Perform
          [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=data=,
          =targetByteIndex=, =elementType=, =value=, true, Unordered).
       3. Set =srcByteIndex= to =srcByteIndex= + =srcElementSize=.
       4. Set =targetByteIndex= to =targetByteIndex= + =elementSize=.
       5. Set =count= to =count= - 1.

20. Set =O=.[[ViewedArrayBuffer]] to =data=.
21. Set =O=.[[ByteLength]] to =byteLength=.
22. Set =O=.[[ByteOffset]] to 0.
23. Set =O=.[[ArrayLength]] to =elementLength=.
24. Return =O=.

* 22.2.4.4=TypedArray= ( =object= )
  :PROPERTIES:
  :CUSTOM_ID: typedarray-object
  :END:

This description applies only if the =TypedArray= function is called
with at least one argument and the Type of the first argument is Object
and that object does not have either a [[TypedArrayName]] or an
[[ArrayBufferData]] internal slot.

=TypedArray= called with argument =object= performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=object=)
    is Object and =object= does not have either a [[TypedArrayName]] or
    an [[ArrayBufferData]] internal slot.
2.  If NewTarget is undefined, throw a TypeError exception.
3.  Let =constructorName= be the String value of the
    [[https://tc39.es/ecma262/#constructor][Constructor]] Name value
    specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for this =TypedArray=
    [[https://tc39.es/ecma262/#constructor][constructor]].
4.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-allocatetypedarray][AllocateTypedArray]](=constructorName=,
    NewTarget, ="%TypedArray.prototype%"=).
5.  Let =usingIterator= be
    ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=object=,
    @@iterator).
6.  If =usingIterator= is not undefined, then

    1. Let =values= be
       ? [[https://tc39.es/ecma262/#sec-iterabletolist][IterableToList]](=object=,
       =usingIterator=).
    2. Let =len= be the number of elements in =values=.
    3. Perform
       ? [[https://tc39.es/ecma262/#sec-allocatetypedarraybuffer][AllocateTypedArrayBuffer]](=O=,
       =len=).
    4. Let =k= be 0.
    5. Repeat, while =k= < =len=

       1. Let =Pk= be
          ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
       2. Let =kValue= be the first element of =values= and remove that
          element from =values=.
       3. Perform
          ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
          =Pk=, =kValue=, true).
       4. Set =k= to =k= + 1.

    6. [[https://tc39.es/ecma262/#assert][Assert]]: =values= is now an
       empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    7. Return =O=.

7.  NOTE: =object= is not an Iterable so assume it is already an
    [[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like
    object]].
8.  Let =arrayLike= be =object=.
9.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=arrayLike=).
10. Perform
    ? [[https://tc39.es/ecma262/#sec-allocatetypedarraybuffer][AllocateTypedArrayBuffer]](=O=,
    =len=).
11. Let =k= be 0.
12. Repeat, while =k= < =len=

    1. Let =Pk= be
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=).
    2. Let =kValue= be
       ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=arrayLike=,
       =Pk=).
    3. Perform
       ? [[https://tc39.es/ecma262/#sec-set-o-p-v-throw][Set]](=O=,
       =Pk=, =kValue=, true).
    4. Set =k= to =k= + 1.

13. Return =O=.

* 22.2.4.5=TypedArray= ( =buffer= [ , =byteOffset= [ , =length= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: typedarray-buffer-byteoffset-length
  :END:

This description applies only if the =TypedArray= function is called
with at least one argument and the Type of the first argument is Object
and that object has an [[ArrayBufferData]] internal slot.

=TypedArray= called with at least one argument =buffer= performs the
following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=buffer=)
    is Object and =buffer= has an [[ArrayBufferData]] internal slot.
2.  If NewTarget is undefined, throw a TypeError exception.
3.  Let =constructorName= be the String value of the
    [[https://tc39.es/ecma262/#constructor][Constructor]] Name value
    specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for this =TypedArray=
    [[https://tc39.es/ecma262/#constructor][constructor]].
4.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-allocatetypedarray][AllocateTypedArray]](=constructorName=,
    NewTarget, ="%TypedArray.prototype%"=).
5.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =constructorName=.
6.  Let =offset= be
    ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=byteOffset=).
7.  If =offset= [[https://tc39.es/ecma262/#eqn-modulo][modulo]]
    =elementSize= ≠ 0, throw a RangeError exception.
8.  If =length= is not undefined, then

    1. Let =newLength= be
       ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=length=).

9.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
    is true, throw a TypeError exception.
10. Let =bufferByteLength= be =buffer=.[[ArrayBufferByteLength]].
11. If =length= is undefined, then

    1. If =bufferByteLength=
       [[https://tc39.es/ecma262/#eqn-modulo][modulo]] =elementSize= ≠
       0, throw a RangeError exception.
    2. Let =newByteLength= be =bufferByteLength= - =offset=.
    3. If =newByteLength= < 0, throw a RangeError exception.

12. Else,

    1. Let =newByteLength= be =newLength= × =elementSize=.
    2. If =offset= + =newByteLength= > =bufferByteLength=, throw a
       RangeError exception.

13. Set =O=.[[ViewedArrayBuffer]] to =buffer=.
14. Set =O=.[[ByteLength]] to =newByteLength=.
15. Set =O=.[[ByteOffset]] to =offset=.
16. Set =O=.[[ArrayLength]] to =newByteLength= / =elementSize=.
17. Return =O=.

* 22.2.4.6TypedArrayCreate ( =constructor=, =argumentList= )
  :PROPERTIES:
  :CUSTOM_ID: typedarraycreate-constructor-argumentlist
  :END:

The abstract operation TypedArrayCreate with arguments =constructor= and
=argumentList= is used to specify the creation of a new TypedArray
object using a [[https://tc39.es/ecma262/#constructor][constructor]]
function. It performs the following steps:

1. Let =newTypedArray= be
   ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=constructor=,
   =argumentList=).
2. Perform
   ? [[https://tc39.es/ecma262/#sec-validatetypedarray][ValidateTypedArray]](=newTypedArray=).
3. If =argumentList= is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of a single Number, then

   1. If =newTypedArray=.[[ArrayLength]] < =argumentList=[0], throw a
      TypeError exception.

4. Return =newTypedArray=.

* 22.2.4.7TypedArraySpeciesCreate ( =exemplar=, =argumentList= )
  :PROPERTIES:
  :CUSTOM_ID: typedarrayspeciescreate-exemplar-argumentlist
  :END:

The abstract operation TypedArraySpeciesCreate with arguments =exemplar=
and =argumentList= is used to specify the creation of a new TypedArray
object using a [[https://tc39.es/ecma262/#constructor][constructor]]
function that is derived from =exemplar=. It performs the following
steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =exemplar= is an Object
   that has [[TypedArrayName]] and [[ContentType]] internal slots.
2. Let =defaultConstructor= be the intrinsic object listed in column one
   of
   [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
   62]] for =exemplar=.[[TypedArrayName]].
3. Let =constructor= be
   ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=exemplar=,
   =defaultConstructor=).
4. Let =result= be
   ? [[https://tc39.es/ecma262/#typedarray-create][TypedArrayCreate]](=constructor=,
   =argumentList=).
5. [[https://tc39.es/ecma262/#assert][Assert]]: =result= has
   [[TypedArrayName]] and [[ContentType]] internal slots.
6. If =result=.[[ContentType]] is not equal to
   =exemplar=.[[ContentType]], throw a TypeError exception.
7. Return =result=.

* 22.2.5Properties of the =TypedArray= Constructors
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-typedarray-constructors
  :END:

Each =TypedArray= [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]].
- has a "name" property whose value is the String value of the
  [[https://tc39.es/ecma262/#constructor][constructor]] name specified
  for it in
  [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
  62]].
- has the following properties:

* 22.2.5.1=TypedArray=.BYTES_PER_ELEMENT
  :PROPERTIES:
  :CUSTOM_ID: typedarray.bytes_per_element
  :END:

The value of =TypedArray==.BYTES_PER_ELEMENT= is the Element Size value
specified in
[[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table 62]]
for =TypedArray=.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 22.2.5.2=TypedArray=.prototype
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype-1
  :END:

The initial value of =TypedArray==.prototype= is the corresponding
=TypedArray= prototype intrinsic object
([[https://tc39.es/ecma262/#sec-properties-of-typedarray-prototype-objects][22.2.6]]).

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 22.2.6Properties of the =TypedArray= Prototype Objects
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-typedarray-prototype-objects
  :END:

Each =TypedArray= prototype object:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-%typedarrayprototype%-object][%TypedArray.prototype%]].
- is an ordinary object.
- does not have a [[ViewedArrayBuffer]] or any other of the internal
  slots that are specific to =TypedArray= instance objects.

* 22.2.6.1=TypedArray=.prototype.BYTES_PER_ELEMENT
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.bytes_per_element
  :END:

The value of =TypedArray==.prototype.BYTES_PER_ELEMENT= is the Element
Size value specified in
[[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table 62]]
for =TypedArray=.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 22.2.6.2=TypedArray=.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: typedarray.prototype.constructor-1
  :END:

The initial value of a =TypedArray==.prototype.constructor= is the
corresponding
[[https://tc39.es/ecma262/#sec-%typedarray%-intrinsic-object][%TypedArray%]]
intrinsic object.

* 22.2.7Properties of =TypedArray= Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-typedarray-instances
  :END:

=TypedArray= instances are
[[https://tc39.es/ecma262/#integer-indexed-exotic-object][Integer-Indexed
exotic objects]]. Each =TypedArray= instance inherits properties from
the corresponding =TypedArray= prototype object. Each =TypedArray=
instance has the following internal slots: [[TypedArrayName]],
[[ViewedArrayBuffer]], [[ByteLength]], [[ByteOffset]], and
[[ArrayLength]].

<<sec-keyed-collection>>

* 23Keyed Collections
  :PROPERTIES:
  :CUSTOM_ID: keyed-collections
  :END:

* 23.1Map Objects
  :PROPERTIES:
  :CUSTOM_ID: map-objects
  :END:

Map objects are collections of key/value pairs where both the keys and
values may be arbitrary ECMAScript language values. A distinct key value
may only occur in one key/value pair within the Map's collection.
Distinct key values are discriminated using the
[[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]] comparison
algorithm.

Map object must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of elements in the collection. The data structures used in
this Map objects specification is only intended to describe the required
observable semantics of Map objects. It is not intended to be a viable
implementation model.

* 23.1.1The Map Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-map-constructor
  :END:

The Map [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Map%.
- is the initial value of the "Map" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Map object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value in an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Map= behaviour must include a =super=
  call to the =Map=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with the internal state necessary to
  support the =Map.prototype= built-in methods.

* 23.1.1.1Map ( [ =iterable= ] )
  :PROPERTIES:
  :CUSTOM_ID: map-iterable
  :END:

When the =Map= function is called with optional argument =iterable=, the
following steps are taken:

1. If NewTarget is undefined, throw a TypeError exception.
2. Let =map= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
   "%Map.prototype%", « [[MapData]] »).
3. Set =map=.[[MapData]] to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. If =iterable= is either undefined or null, return =map=.
5. Let =adder= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=map=,
   "set").
6. Return
   ? [[https://tc39.es/ecma262/#sec-add-entries-from-iterable][AddEntriesFromIterable]](=map=,
   =iterable=, =adder=).

Note

If the parameter =iterable= is present, it is expected to be an object
that implements an @@iterator method that returns an iterator object
that produces a two element
[[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like object]]
whose first element is a value that will be used as a Map key and whose
second element is the value to associate with that key.

* 23.1.1.2AddEntriesFromIterable ( =target=, =iterable=, =adder= )
  :PROPERTIES:
  :CUSTOM_ID: addentriesfromiterable-target-iterable-adder
  :END:

The abstract operation AddEntriesFromIterable accepts a =target= object,
an =iterable= of entries, and an =adder= function to be invoked, with
=target= as the receiver.

1. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=adder=)
   is false, throw a TypeError exception.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =iterable= is present,
   and is neither undefined nor null.
3. Let =iteratorRecord= be
   ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=iterable=).
4. Repeat,

   1.  Let =next= be
       ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
   2.  If =next= is false, return =target=.
   3.  Let =nextItem= be
       ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
   4.  If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=nextItem=)
       is not Object, then

       1. Let =error= be
          [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](a
          newly created TypeError object).
       2. Return
          ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
          =error=).

   5.  Let =k= be
       [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=nextItem=, "0").
   6.  If =k= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       =k=).
   7.  Let =v= be
       [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=nextItem=, "1").
   8.  If =v= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       =v=).
   9.  Let =status= be
       [[https://tc39.es/ecma262/#sec-call][Call]](=adder=, =target=, «
       =k=.[[Value]], =v=.[[Value]] »).
   10. If =status= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], return
       ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
       =status=).

Note

The parameter =iterable= is expected to be an object that implements an
@@iterator method that returns an iterator object that produces a two
element [[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like
object]] whose first element is a value that will be used as a Map key
and whose second element is the value to associate with that key.

* 23.1.2Properties of the Map Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-map-constructor
  :END:

The Map [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 23.1.2.1Map.prototype
  :PROPERTIES:
  :CUSTOM_ID: map.prototype
  :END:

The initial value of =Map.prototype= is %Map.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 23.1.2.2get Map [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-map-species
  :END:

=Map[@@species]= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

Note

Methods that create derived collection objects should call @@species to
determine the [[https://tc39.es/ecma262/#constructor][constructor]] to
use to create the derived objects. Subclass
[[https://tc39.es/ecma262/#constructor][constructor]] may over-ride
@@species to change the default
[[https://tc39.es/ecma262/#constructor][constructor]] assignment.

* 23.1.3Properties of the Map Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-map-prototype-object
  :END:

The Map prototype object:

- is the intrinsic object %MapPrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have a [[MapData]] internal slot.

* 23.1.3.1Map.prototype.clear ( )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.clear
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[MapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[MapData]].
4. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. Set =p=.[[Key]] to empty.
   2. Set =p=.[[Value]] to empty.

5. Return undefined.

Note

The existing [[MapData]]
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
is preserved because there may be existing Map Iterator objects that are
suspended midway through iterating over that
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

* 23.1.3.2Map.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.constructor
  :END:

The initial value of =Map.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-map-constructor][%Map%]].

* 23.1.3.3Map.prototype.delete ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.delete-key
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[MapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[MapData]].
4. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=p=.[[Key]],
      =key=) is true, then

      1. Set =p=.[[Key]] to empty.
      2. Set =p=.[[Value]] to empty.
      3. Return true.

5. Return false.

Note

The value empty is used as a specification device to indicate that an
entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

* 23.1.3.4Map.prototype.entries ( )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.entries
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-createmapiterator][CreateMapIterator]](=M=,
   key+value).

* 23.1.3.5Map.prototype.forEach ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.foreach-callbackfn-thisarg
  :END:

When the =forEach= method is called with one or two arguments, the
following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[MapData]]).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
4. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[MapData]].
5. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =e= that is an element of =entries=, in
   original key insertion order, do

   1. If =e=.[[Key]] is not empty, then

      1. Perform
         ? [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
         =thisArg=, « =e=.[[Value]], =e=.[[Key]], =M= »).

6. Return undefined.

Note

=callbackfn= should be a function that accepts three arguments.
=forEach= calls =callbackfn= once for each key/value pair present in the
map object, in key insertion order. =callbackfn= is called only for keys
of the map which actually exist; it is not called for keys that have
been deleted from the map.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =callbackfn=. If it is not provided, undefined is
used instead.

=callbackfn= is called with three arguments: the value of the item, the
key of the item, and the Map object being traversed.

=forEach= does not directly mutate the object on which it is called but
the object may be mutated by the calls to =callbackfn=. Each entry of a
map's [[MapData]] is only visited once. New keys added after the call to
=forEach= begins are visited. A key will be revisited if it is deleted
after it has been visited and then re-added before the =forEach= call
completes. Keys that are deleted after the call to =forEach= begins and
before being visited are not visited unless the key is added again
before the =forEach= call completes.

* 23.1.3.6Map.prototype.get ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.get-key
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[MapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[MapData]].
4. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=p=.[[Key]],
      =key=) is true, return =p=.[[Value]].

5. Return undefined.

* 23.1.3.7Map.prototype.has ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.has-key
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[MapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[MapData]].
4. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=p=.[[Key]],
      =key=) is true, return true.

5. Return false.

* 23.1.3.8Map.prototype.keys ( )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.keys
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-createmapiterator][CreateMapIterator]](=M=,
   key).

* 23.1.3.9Map.prototype.set ( =key=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.set-key-value
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[MapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[MapData]].
4. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=p=.[[Key]],
      =key=) is true, then

      1. Set =p=.[[Value]] to =value=.
      2. Return =M=.

5. If =key= is -0, set =key= to +0.
6. Let =p= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]]: =key=, [[Value]]: =value= }.
7. Append =p= as the last element of =entries=.
8. Return =M=.

* 23.1.3.10get Map.prototype.size
  :PROPERTIES:
  :CUSTOM_ID: get-map.prototype.size
  :END:

=Map.prototype.size= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[MapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[MapData]].
4. Let =count= be 0.
5. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty, set =count= to =count= + 1.

6. Return =count=.

* 23.1.3.11Map.prototype.values ( )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype.values
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-createmapiterator][CreateMapIterator]](=M=,
   value).

* 23.1.3.12Map.prototype [ @@iterator ] ( )
  :PROPERTIES:
  :CUSTOM_ID: map.prototype-iterator
  :END:

The initial value of the @@iterator property is the same
[[https://tc39.es/ecma262/#function-object][function object]] as the
initial value of the "entries" property.

* 23.1.3.13Map.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: map.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Map".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 23.1.4Properties of Map Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-map-instances
  :END:

Map instances are ordinary objects that inherit properties from the Map
prototype. Map instances also have a [[MapData]] internal slot.

* 23.1.5Map Iterator Objects
  :PROPERTIES:
  :CUSTOM_ID: map-iterator-objects
  :END:

A Map Iterator is an object, that represents a specific iteration over
some specific Map instance object. There is not a named
[[https://tc39.es/ecma262/#constructor][constructor]] for Map Iterator
objects. Instead, map iterator objects are created by calling certain
methods of Map instance objects.

* 23.1.5.1CreateMapIterator ( =map=, =kind= )
  :PROPERTIES:
  :CUSTOM_ID: createmapiterator-map-kind
  :END:

Several methods of Map objects return Iterator objects. The abstract
operation CreateMapIterator with arguments =map= and =kind= is used to
create such iterator objects. It performs the following steps:

1. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=map=,
   [[MapData]]).
2. Let =iterator= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]]([[https://tc39.es/ecma262/#sec-%mapiteratorprototype%-object][%MapIteratorPrototype%]],
   « [[IteratedMap]], [[MapNextIndex]], [[MapIterationKind]] »).
3. Set =iterator=.[[IteratedMap]] to =map=.
4. Set =iterator=.[[MapNextIndex]] to 0.
5. Set =iterator=.[[MapIterationKind]] to =kind=.
6. Return =iterator=.

* 23.1.5.2The %MapIteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-mapiteratorprototype-object
  :END:

The %MapIteratorPrototype% object:

- has properties that are inherited by all Map Iterator Objects.
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]].
- has the following properties:

* 23.1.5.2.1%MapIteratorPrototype%.next ( )
  :PROPERTIES:
  :CUSTOM_ID: mapiteratorprototype.next
  :END:

1.  Let =O= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
    is not Object, throw a TypeError exception.
3.  If =O= does not have all of the internal slots of a Map Iterator
    Instance
    ([[https://tc39.es/ecma262/#sec-properties-of-map-iterator-instances][23.1.5.3]]),
    throw a TypeError exception.
4.  Let =m= be =O=.[[IteratedMap]].
5.  Let =index= be =O=.[[MapNextIndex]].
6.  Let =itemKind= be =O=.[[MapIterationKind]].
7.  If =m= is undefined, return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
    true).
8.  [[https://tc39.es/ecma262/#assert][Assert]]: =m= has a [[MapData]]
    internal slot.
9.  Let =entries= be the
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    that is =m=.[[MapData]].
10. Let =numEntries= be the number of elements of =entries=.
11. NOTE: =numEntries= must be redetermined each time this method is
    evaluated.
12. Repeat, while =index= is less than =numEntries=,

    1. Let =e= be the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
       { [[Key]], [[Value]] } that is the value of =entries=[=index=].
    2. Set =index= to =index= + 1.
    3. Set =O=.[[MapNextIndex]] to =index=.
    4. If =e=.[[Key]] is not empty, then

       1. If =itemKind= is key, let =result= be =e=.[[Key]].
       2. Else if =itemKind= is value, let =result= be =e=.[[Value]].
       3. Else,

          1. [[https://tc39.es/ecma262/#assert][Assert]]: =itemKind= is
             key+value.
          2. Let =result= be
             ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](«
             =e=.[[Key]], =e=.[[Value]] »).

       4. Return
          [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=result=,
          false).

13. Set =O=.[[IteratedMap]] to undefined.
14. Return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
    true).

* 23.1.5.2.2%MapIteratorPrototype% [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: mapiteratorprototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value "Map
Iterator".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 23.1.5.3Properties of Map Iterator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-map-iterator-instances
  :END:

Map Iterator instances are ordinary objects that inherit properties from
the
[[https://tc39.es/ecma262/#sec-%mapiteratorprototype%-object][%MapIteratorPrototype%]]
intrinsic object. Map Iterator instances are initially created with the
internal slots described in [[https://tc39.es/ecma262/#table-50][Table
63]].

Table 63: Internal Slots of Map Iterator Instances

| Internal Slot          | Description                                                                                                                          |
|------------------------+--------------------------------------------------------------------------------------------------------------------------------------|
| [[IteratedMap]]        | The Map object that is being iterated.                                                                                               |
| [[MapNextIndex]]       | The [[https://tc39.es/ecma262/#integer-index][integer index]] of the next [[MapData]] element to be examined by this iterator.       |
| [[MapIterationKind]]   | A String value that identifies what is returned for each element of the iteration. The possible values are: key, value, key+value.   |

* 23.2Set Objects
  :PROPERTIES:
  :CUSTOM_ID: set-objects
  :END:

Set objects are collections of ECMAScript language values. A distinct
value may only occur once as an element of a Set's collection. Distinct
values are discriminated using the
[[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]] comparison
algorithm.

Set objects must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of elements in the collection. The data structures used in
this Set objects specification is only intended to describe the required
observable semantics of Set objects. It is not intended to be a viable
implementation model.

* 23.2.1The Set Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-set-constructor
  :END:

The Set [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Set%.
- is the initial value of the "Set" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Set object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value in an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Set= behaviour must include a =super=
  call to the =Set=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with the internal state necessary to
  support the =Set.prototype= built-in methods.

* 23.2.1.1Set ( [ =iterable= ] )
  :PROPERTIES:
  :CUSTOM_ID: set-iterable
  :END:

When the =Set= function is called with optional argument =iterable=, the
following steps are taken:

1. If NewTarget is undefined, throw a TypeError exception.
2. Let =set= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
   "%Set.prototype%", « [[SetData]] »).
3. Set =set=.[[SetData]] to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. If =iterable= is either undefined or null, return =set=.
5. Let =adder= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=set=,
   "add").
6. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=adder=)
   is false, throw a TypeError exception.
7. Let =iteratorRecord= be
   ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=iterable=).
8. Repeat,

   1. Let =next= be
      ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
   2. If =next= is false, return =set=.
   3. Let =nextValue= be
      ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
   4. Let =status= be
      [[https://tc39.es/ecma262/#sec-call][Call]](=adder=, =set=, «
      =nextValue= »).
   5. If =status= is an
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
      completion]], return
      ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
      =status=).

* 23.2.2Properties of the Set Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-set-constructor
  :END:

The Set [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 23.2.2.1Set.prototype
  :PROPERTIES:
  :CUSTOM_ID: set.prototype
  :END:

The initial value of =Set.prototype= is the intrinsic
[[https://tc39.es/ecma262/#sec-properties-of-the-set-prototype-object][%SetPrototype%]]
object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 23.2.2.2get Set [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-set-species
  :END:

=Set[@@species]= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

Note

Methods that create derived collection objects should call @@species to
determine the [[https://tc39.es/ecma262/#constructor][constructor]] to
use to create the derived objects. Subclass
[[https://tc39.es/ecma262/#constructor][constructor]] may over-ride
@@species to change the default
[[https://tc39.es/ecma262/#constructor][constructor]] assignment.

* 23.2.3Properties of the Set Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-set-prototype-object
  :END:

The Set prototype object:

- is the intrinsic object %SetPrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have a [[SetData]] internal slot.

* 23.2.3.1Set.prototype.add ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.add-value
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[SetData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[SetData]].
4. For each =e= that is an element of =entries=, do

   1. If =e= is not empty and
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=e=,
      =value=) is true, then

      1. Return =S=.

5. If =value= is -0, set =value= to +0.
6. Append =value= as the last element of =entries=.
7. Return =S=.

* 23.2.3.2Set.prototype.clear ( )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.clear
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[SetData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[SetData]].
4. For each =e= that is an element of =entries=, do

   1. Replace the element of =entries= whose value is =e= with an
      element whose value is empty.

5. Return undefined.

Note

The existing [[SetData]]
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
is preserved because there may be existing Set Iterator objects that are
suspended midway through iterating over that
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

* 23.2.3.3Set.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.constructor
  :END:

The initial value of =Set.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-set-constructor][%Set%]].

* 23.2.3.4Set.prototype.delete ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.delete-value
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[SetData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[SetData]].
4. For each =e= that is an element of =entries=, do

   1. If =e= is not empty and
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=e=,
      =value=) is true, then

      1. Replace the element of =entries= whose value is =e= with an
         element whose value is empty.
      2. Return true.

5. Return false.

Note

The value empty is used as a specification device to indicate that an
entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

* 23.2.3.5Set.prototype.entries ( )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.entries
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-createsetiterator][CreateSetIterator]](=S=,
   key+value).

Note

For iteration purposes, a Set appears similar to a Map where each entry
has the same value for its key and value.

* 23.2.3.6Set.prototype.forEach ( =callbackfn= [ , =thisArg= ] )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.foreach-callbackfn-thisarg
  :END:

When the =forEach= method is called with one or two arguments, the
following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[SetData]]).
3. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=callbackfn=)
   is false, throw a TypeError exception.
4. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[SetData]].
5. For each =e= that is an element of =entries=, in original insertion
   order, do

   1. If =e= is not empty, then

      1. Perform
         ? [[https://tc39.es/ecma262/#sec-call][Call]](=callbackfn=,
         =thisArg=, « =e=, =e=, =S= »).

6. Return undefined.

Note

=callbackfn= should be a function that accepts three arguments.
=forEach= calls =callbackfn= once for each value present in the set
object, in value insertion order. =callbackfn= is called only for values
of the Set which actually exist; it is not called for keys that have
been deleted from the set.

If a =thisArg= parameter is provided, it will be used as the this value
for each invocation of =callbackfn=. If it is not provided, undefined is
used instead.

=callbackfn= is called with three arguments: the first two arguments are
a value contained in the Set. The same value is passed for both
arguments. The Set object being traversed is passed as the third
argument.

The =callbackfn= is called with three arguments to be consistent with
the call back functions used by =forEach= methods for Map and Array. For
Sets, each item value is considered to be both the key and the value.

=forEach= does not directly mutate the object on which it is called but
the object may be mutated by the calls to =callbackfn=.

Each value is normally visited only once. However, a value will be
revisited if it is deleted after it has been visited and then re-added
before the =forEach= call completes. Values that are deleted after the
call to =forEach= begins and before being visited are not visited unless
the value is added again before the =forEach= call completes. New values
added after the call to =forEach= begins are visited.

* 23.2.3.7Set.prototype.has ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.has-value
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[SetData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[SetData]].
4. For each =e= that is an element of =entries=, do

   1. If =e= is not empty and
      [[https://tc39.es/ecma262/#sec-samevaluezero][SameValueZero]](=e=,
      =value=) is true, return true.

5. Return false.

* 23.2.3.8Set.prototype.keys ( )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.keys
  :END:

The initial value of the "keys" property is the same
[[https://tc39.es/ecma262/#function-object][function object]] as the
initial value of the "values" property.

Note

For iteration purposes, a Set appears similar to a Map where each entry
has the same value for its key and value.

* 23.2.3.9get Set.prototype.size
  :PROPERTIES:
  :CUSTOM_ID: get-set.prototype.size
  :END:

=Set.prototype.size= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[SetData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[SetData]].
4. Let =count= be 0.
5. For each =e= that is an element of =entries=, do

   1. If =e= is not empty, set =count= to =count= + 1.

6. Return =count=.

* 23.2.3.10Set.prototype.values ( )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype.values
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-createsetiterator][CreateSetIterator]](=S=,
   value).

* 23.2.3.11Set.prototype [ @@iterator ] ( )
  :PROPERTIES:
  :CUSTOM_ID: set.prototype-iterator
  :END:

The initial value of the @@iterator property is the same
[[https://tc39.es/ecma262/#function-object][function object]] as the
initial value of the "values" property.

* 23.2.3.12Set.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: set.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Set".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 23.2.4Properties of Set Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-set-instances
  :END:

Set instances are ordinary objects that inherit properties from the Set
prototype. Set instances also have a [[SetData]] internal slot.

* 23.2.5Set Iterator Objects
  :PROPERTIES:
  :CUSTOM_ID: set-iterator-objects
  :END:

A Set Iterator is an ordinary object, with the structure defined below,
that represents a specific iteration over some specific Set instance
object. There is not a named
[[https://tc39.es/ecma262/#constructor][constructor]] for Set Iterator
objects. Instead, set iterator objects are created by calling certain
methods of Set instance objects.

* 23.2.5.1CreateSetIterator ( =set=, =kind= )
  :PROPERTIES:
  :CUSTOM_ID: createsetiterator-set-kind
  :END:

Several methods of Set objects return Iterator objects. The abstract
operation CreateSetIterator with arguments =set= and =kind= is used to
create such iterator objects. It performs the following steps:

1. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=set=,
   [[SetData]]).
2. Let =iterator= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]]([[https://tc39.es/ecma262/#sec-%setiteratorprototype%-object][%SetIteratorPrototype%]],
   « [[IteratedSet]], [[SetNextIndex]], [[SetIterationKind]] »).
3. Set =iterator=.[[IteratedSet]] to =set=.
4. Set =iterator=.[[SetNextIndex]] to 0.
5. Set =iterator=.[[SetIterationKind]] to =kind=.
6. Return =iterator=.

* 23.2.5.2The %SetIteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-setiteratorprototype-object
  :END:

The %SetIteratorPrototype% object:

- has properties that are inherited by all Set Iterator Objects.
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]].
- has the following properties:

* 23.2.5.2.1%SetIteratorPrototype%.next ( )
  :PROPERTIES:
  :CUSTOM_ID: setiteratorprototype.next
  :END:

1.  Let =O= be the this value.
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
    is not Object, throw a TypeError exception.
3.  If =O= does not have all of the internal slots of a Set Iterator
    Instance
    ([[https://tc39.es/ecma262/#sec-properties-of-set-iterator-instances][23.2.5.3]]),
    throw a TypeError exception.
4.  Let =s= be =O=.[[IteratedSet]].
5.  Let =index= be =O=.[[SetNextIndex]].
6.  Let =itemKind= be =O=.[[SetIterationKind]].
7.  If =s= is undefined, return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
    true).
8.  [[https://tc39.es/ecma262/#assert][Assert]]: =s= has a [[SetData]]
    internal slot.
9.  Let =entries= be the
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    that is =s=.[[SetData]].
10. Let =numEntries= be the number of elements of =entries=.
11. NOTE: =numEntries= must be redetermined each time this method is
    evaluated.
12. Repeat, while =index= is less than =numEntries=,

    1. Let =e= be =entries=[=index=].
    2. Set =index= to =index= + 1.
    3. Set =O=.[[SetNextIndex]] to =index=.
    4. If =e= is not empty, then

       1. If =itemKind= is key+value, then

          1. Return
             [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]]([[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](«
             =e=, =e= »), false).

       2. [[https://tc39.es/ecma262/#assert][Assert]]: =itemKind= is
          value.
       3. Return
          [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=e=,
          false).

13. Set =O=.[[IteratedSet]] to undefined.
14. Return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
    true).

* 23.2.5.2.2%SetIteratorPrototype% [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: setiteratorprototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value "Set
Iterator".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 23.2.5.3Properties of Set Iterator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-set-iterator-instances
  :END:

Set Iterator instances are ordinary objects that inherit properties from
the
[[https://tc39.es/ecma262/#sec-%setiteratorprototype%-object][%SetIteratorPrototype%]]
intrinsic object. Set Iterator instances are initially created with the
internal slots specified in [[https://tc39.es/ecma262/#table-51][Table
64]].

Table 64: Internal Slots of Set Iterator Instances

| Internal Slot          | Description                                                                                                                       |
|------------------------+-----------------------------------------------------------------------------------------------------------------------------------|
| [[IteratedSet]]        | The Set object that is being iterated.                                                                                            |
| [[SetNextIndex]]       | The [[https://tc39.es/ecma262/#integer-index][integer index]] of the next [[SetData]] element to be examined by this iterator.    |
| [[SetIterationKind]]   | A String value that identifies what is returned for each element of the iteration. The possible values are value and key+value.   |

* 23.3WeakMap Objects
  :PROPERTIES:
  :CUSTOM_ID: weakmap-objects
  :END:

WeakMap objects are collections of key/value pairs where the keys are
objects and values may be arbitrary ECMAScript language values. A
WeakMap may be queried to see if it contains a key/value pair with a
specific key, but no mechanism is provided for enumerating the objects
it holds as keys. If an object that is being used as the key of a
WeakMap key/value pair is only reachable by following a chain of
references that start within that WeakMap, then that key/value pair is
inaccessible and is automatically removed from the WeakMap. WeakMap
implementations must detect and remove such key/value pairs and any
associated resources.

An implementation may impose an arbitrarily determined latency between
the time a key/value pair of a WeakMap becomes inaccessible and the time
when the key/value pair is removed from the WeakMap. If this latency was
observable to ECMAScript program, it would be a source of indeterminacy
that could impact program execution. For that reason, an ECMAScript
implementation must not provide any means to observe a key of a WeakMap
that does not require the observer to present the observed key.

WeakMap objects must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of key/value pairs in the collection. The data structure used
in this WeakMap objects specification are only intended to describe the
required observable semantics of WeakMap objects. It is not intended to
be a viable implementation model.

Note

WeakMap and WeakSets are intended to provide mechanisms for dynamically
associating state with an object in a manner that does not “leak” memory
resources if, in the absence of the WeakMap or WeakSet, the object
otherwise became inaccessible and subject to resource reclamation by the
implementation's garbage collection mechanisms. This characteristic can
be achieved by using an inverted per-object mapping of weak map
instances to keys. Alternatively each weak map may internally store its
key to value mappings but this approach requires coordination between
the WeakMap or WeakSet implementation and the garbage collector. The
following references describe mechanism that may be useful to
implementations of WeakMap and WeakSets:

Barry Hayes. 1997. Ephemerons: a new finalization mechanism. In
/Proceedings of the 12th ACM SIGPLAN conference on Object-oriented
programming, systems, languages, and applications (OOPSLA '97)/, A.
Michael Berman (Ed.). ACM, New York, NY, USA, 176-183,
[[http://doi.acm.org/10.1145/263698.263733]].

Alexandra Barros, Roberto Ierusalimschy, Eliminating Cycles in Weak
Tables. Journal of Universal Computer Science - J.UCS, vol. 14, no. 21,
pp. 3481-3497, 2008,
[[http://www.jucs.org/jucs_14_21/eliminating_cycles_in_weak]]

* 23.3.1The WeakMap Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-weakmap-constructor
  :END:

The WeakMap [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %WeakMap%.
- is the initial value of the "WeakMap" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new WeakMap object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value in an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =WeakMap= behaviour must include a
  =super= call to the =WeakMap=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with the internal state necessary to
  support the =WeakMap.prototype= built-in methods.

* 23.3.1.1WeakMap ( [ =iterable= ] )
  :PROPERTIES:
  :CUSTOM_ID: weakmap-iterable
  :END:

When the =WeakMap= function is called with optional argument =iterable=,
the following steps are taken:

1. If NewTarget is undefined, throw a TypeError exception.
2. Let =map= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
   "%WeakMap.prototype%", « [[WeakMapData]] »).
3. Set =map=.[[WeakMapData]] to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. If =iterable= is either undefined or null, return =map=.
5. Let =adder= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=map=,
   "set").
6. Return
   ? [[https://tc39.es/ecma262/#sec-add-entries-from-iterable][AddEntriesFromIterable]](=map=,
   =iterable=, =adder=).

Note

If the parameter =iterable= is present, it is expected to be an object
that implements an @@iterator method that returns an iterator object
that produces a two element
[[https://tc39.es/ecma262/#sec-lengthofarraylike][array-like object]]
whose first element is a value that will be used as a WeakMap key and
whose second element is the value to associate with that key.

* 23.3.2Properties of the WeakMap Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-weakmap-constructor
  :END:

The WeakMap [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 23.3.2.1WeakMap.prototype
  :PROPERTIES:
  :CUSTOM_ID: weakmap.prototype
  :END:

The initial value of =WeakMap.prototype= is %WeakMap.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 23.3.3Properties of the WeakMap Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-weakmap-prototype-object
  :END:

The WeakMap prototype object:

- is the intrinsic object %WeakMapPrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have a [[WeakMapData]] internal slot.

* 23.3.3.1WeakMap.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: weakmap.prototype.constructor
  :END:

The initial value of =WeakMap.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-weakmap-constructor][%WeakMap%]].

* 23.3.3.2WeakMap.prototype.delete ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: weakmap.prototype.delete-key
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[WeakMapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[WeakMapData]].
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=key=)
   is not Object, return false.
5. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=p=.[[Key]],
      =key=) is true, then

      1. Set =p=.[[Key]] to empty.
      2. Set =p=.[[Value]] to empty.
      3. Return true.

6. Return false.

Note

The value empty is used as a specification device to indicate that an
entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

* 23.3.3.3WeakMap.prototype.get ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: weakmap.prototype.get-key
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[WeakMapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[WeakMapData]].
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=key=)
   is not Object, return undefined.
5. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=p=.[[Key]],
      =key=) is true, return =p=.[[Value]].

6. Return undefined.

* 23.3.3.4WeakMap.prototype.has ( =key= )
  :PROPERTIES:
  :CUSTOM_ID: weakmap.prototype.has-key
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[WeakMapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[WeakMapData]].
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=key=)
   is not Object, return false.
5. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=p=.[[Key]],
      =key=) is true, return true.

6. Return false.

* 23.3.3.5WeakMap.prototype.set ( =key=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: weakmap.prototype.set-key-value
  :END:

The following steps are taken:

1. Let =M= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=M=,
   [[WeakMapData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =M=.[[WeakMapData]].
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=key=)
   is not Object, throw a TypeError exception.
5. For each
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]], [[Value]] } =p= that is an element of =entries=, do

   1. If =p=.[[Key]] is not empty and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=p=.[[Key]],
      =key=) is true, then

      1. Set =p=.[[Value]] to =value=.
      2. Return =M=.

6. Let =p= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Key]]: =key=, [[Value]]: =value= }.
7. Append =p= as the last element of =entries=.
8. Return =M=.

* 23.3.3.6WeakMap.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: weakmap.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"WeakMap".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 23.3.4Properties of WeakMap Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-weakmap-instances
  :END:

WeakMap instances are ordinary objects that inherit properties from the
WeakMap prototype. WeakMap instances also have a [[WeakMapData]]
internal slot.

* 23.4WeakSet Objects
  :PROPERTIES:
  :CUSTOM_ID: weakset-objects
  :END:

WeakSet objects are collections of objects. A distinct object may only
occur once as an element of a WeakSet's collection. A WeakSet may be
queried to see if it contains a specific object, but no mechanism is
provided for enumerating the objects it holds. If an object that is
contained by a WeakSet is only reachable by following a chain of
references that start within that WeakSet, then that object is
inaccessible and is automatically removed from the WeakSet. WeakSet
implementations must detect and remove such objects and any associated
resources.

An implementation may impose an arbitrarily determined latency between
the time an object contained in a WeakSet becomes inaccessible and the
time when the object is removed from the WeakSet. If this latency was
observable to ECMAScript program, it would be a source of indeterminacy
that could impact program execution. For that reason, an ECMAScript
implementation must not provide any means to determine if a WeakSet
contains a particular object that does not require the observer to
present the observed object.

WeakSet objects must be implemented using either hash tables or other
mechanisms that, on average, provide access times that are sublinear on
the number of elements in the collection. The data structure used in
this WeakSet objects specification is only intended to describe the
required observable semantics of WeakSet objects. It is not intended to
be a viable implementation model.

Note

See the NOTE in [[https://tc39.es/ecma262/#sec-weakmap-objects][23.3]].

* 23.4.1The WeakSet Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-weakset-constructor
  :END:

The WeakSet [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %WeakSet%.
- is the initial value of the "WeakSet" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new WeakSet object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value in an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =WeakSet= behaviour must include a
  =super= call to the =WeakSet=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with the internal state necessary to
  support the =WeakSet.prototype= built-in methods.

* 23.4.1.1WeakSet ( [ =iterable= ] )
  :PROPERTIES:
  :CUSTOM_ID: weakset-iterable
  :END:

When the =WeakSet= function is called with optional argument =iterable=,
the following steps are taken:

1. If NewTarget is undefined, throw a TypeError exception.
2. Let =set= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
   "%WeakSet.prototype%", « [[WeakSetData]] »).
3. Set =set=.[[WeakSetData]] to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. If =iterable= is either undefined or null, return =set=.
5. Let =adder= be ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=set=,
   "add").
6. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=adder=)
   is false, throw a TypeError exception.
7. Let =iteratorRecord= be
   ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=iterable=).
8. Repeat,

   1. Let =next= be
      ? [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
   2. If =next= is false, return =set=.
   3. Let =nextValue= be
      ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
   4. Let =status= be
      [[https://tc39.es/ecma262/#sec-call][Call]](=adder=, =set=, «
      =nextValue= »).
   5. If =status= is an
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
      completion]], return
      ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
      =status=).

* 23.4.2Properties of the WeakSet Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-weakset-constructor
  :END:

The WeakSet [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 23.4.2.1WeakSet.prototype
  :PROPERTIES:
  :CUSTOM_ID: weakset.prototype
  :END:

The initial value of =WeakSet.prototype= is the intrinsic
[[https://tc39.es/ecma262/#sec-properties-of-the-weakset-prototype-object][%WeakSetPrototype%]]
object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 23.4.3Properties of the WeakSet Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-weakset-prototype-object
  :END:

The WeakSet prototype object:

- is the intrinsic object %WeakSetPrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have a [[WeakSetData]] internal slot.

* 23.4.3.1WeakSet.prototype.add ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: weakset.prototype.add-value
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[WeakSetData]]).
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is not Object, throw a TypeError exception.
4. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[WeakSetData]].
5. For each =e= that is an element of =entries=, do

   1. If =e= is not empty and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=e=,
      =value=) is true, then

      1. Return =S=.

6. Append =value= as the last element of =entries=.
7. Return =S=.

* 23.4.3.2WeakSet.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: weakset.prototype.constructor
  :END:

The initial value of =WeakSet.prototype.constructor= is the
[[https://tc39.es/ecma262/#sec-weakset-constructor][%WeakSet%]]
intrinsic object.

* 23.4.3.3WeakSet.prototype.delete ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: weakset.prototype.delete-value
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[WeakSetData]]).
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is not Object, return false.
4. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[WeakSetData]].
5. For each =e= that is an element of =entries=, do

   1. If =e= is not empty and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=e=,
      =value=) is true, then

      1. Replace the element of =entries= whose value is =e= with an
         element whose value is empty.
      2. Return true.

6. Return false.

Note

The value empty is used as a specification device to indicate that an
entry has been deleted. Actual implementations may take other actions
such as physically removing the entry from internal data structures.

* 23.4.3.4WeakSet.prototype.has ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: weakset.prototype.has-value
  :END:

The following steps are taken:

1. Let =S= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=S=,
   [[WeakSetData]]).
3. Let =entries= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   that is =S=.[[WeakSetData]].
4. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
   is not Object, return false.
5. For each =e= that is an element of =entries=, do

   1. If =e= is not empty and
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=e=,
      =value=) is true, return true.

6. Return false.

* 23.4.3.5WeakSet.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: weakset.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"WeakSet".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 23.4.4Properties of WeakSet Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-weakset-instances
  :END:

WeakSet instances are ordinary objects that inherit properties from the
WeakSet prototype. WeakSet instances also have a [[WeakSetData]]
internal slot.

* 24Structured Data
  :PROPERTIES:
  :CUSTOM_ID: structured-data
  :END:

* 24.1ArrayBuffer Objects
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer-objects
  :END:

* 24.1.1Abstract Operations For ArrayBuffer Objects
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations-for-arraybuffer-objects
  :END:

* 24.1.1.1AllocateArrayBuffer ( =constructor=, =byteLength= )
  :PROPERTIES:
  :CUSTOM_ID: allocatearraybuffer-constructor-bytelength
  :END:

The abstract operation AllocateArrayBuffer with arguments =constructor=
and =byteLength= is used to create an ArrayBuffer object. It performs
the following steps:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=constructor=,
   "%ArrayBuffer.prototype%", « [[ArrayBufferData]],
   [[ArrayBufferByteLength]], [[ArrayBufferDetachKey]] »).
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=byteLength=)
   is true.
3. Let =block= be
   ? [[https://tc39.es/ecma262/#sec-createbytedatablock][CreateByteDataBlock]](=byteLength=).
4. Set =obj=.[[ArrayBufferData]] to =block=.
5. Set =obj=.[[ArrayBufferByteLength]] to =byteLength=.
6. Return =obj=.

* 24.1.1.2IsDetachedBuffer ( =arrayBuffer= )
  :PROPERTIES:
  :CUSTOM_ID: isdetachedbuffer-arraybuffer
  :END:

The abstract operation IsDetachedBuffer with argument =arrayBuffer=
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=arrayBuffer=)
   is Object and it has an [[ArrayBufferData]] internal slot.
2. If =arrayBuffer=.[[ArrayBufferData]] is null, return true.
3. Return false.

* 24.1.1.3DetachArrayBuffer ( =arrayBuffer= [ , =key= ] )
  :PROPERTIES:
  :CUSTOM_ID: detacharraybuffer-arraybuffer-key
  :END:

The abstract operation DetachArrayBuffer with argument =arrayBuffer= and
optional argument =key= performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=arrayBuffer=)
   is Object and it has [[ArrayBufferData]], [[ArrayBufferByteLength]],
   and [[ArrayBufferDetachKey]] internal slots.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=arrayBuffer=)
   is false.
3. If =key= is not present, set =key= to undefined.
4. If
   [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=arrayBuffer=.[[ArrayBufferDetachKey]],
   =key=) is false, throw a TypeError exception.
5. Set =arrayBuffer=.[[ArrayBufferData]] to null.
6. Set =arrayBuffer=.[[ArrayBufferByteLength]] to 0.
7. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](null).

Note

Detaching an ArrayBuffer instance disassociates the
[[https://tc39.es/ecma262/#sec-data-blocks][Data Block]] used as its
backing store from the instance and sets the byte length of the buffer
to 0. No operations defined by this specification use the
DetachArrayBuffer abstract operation. However, an ECMAScript
implementation or host environment may define such operations.

* 24.1.1.4CloneArrayBuffer ( =srcBuffer=, =srcByteOffset=, =srcLength=,
=cloneConstructor= )
  :PROPERTIES:
  :CUSTOM_ID: clonearraybuffer-srcbuffer-srcbyteoffset-srclength-cloneconstructor
  :END:

The abstract operation CloneArrayBuffer takes four parameters, an
ArrayBuffer =srcBuffer=, an
[[https://tc39.es/ecma262/#integer][integer]] offset =srcByteOffset=, an
[[https://tc39.es/ecma262/#integer][integer]] length =srcLength=, and a
[[https://tc39.es/ecma262/#constructor][constructor]] function
=cloneConstructor=. It creates a new ArrayBuffer whose data is a copy of
=srcBuffer='s data over the range starting at =srcByteOffset= and
continuing for =srcLength= bytes. This operation performs the following
steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=srcBuffer=)
   is Object and it has an [[ArrayBufferData]] internal slot.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=cloneConstructor=)
   is true.
3. Let =targetBuffer= be
   ? [[https://tc39.es/ecma262/#sec-allocatearraybuffer][AllocateArrayBuffer]](=cloneConstructor=,
   =srcLength=).
4. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=srcBuffer=)
   is true, throw a TypeError exception.
5. Let =srcBlock= be =srcBuffer=.[[ArrayBufferData]].
6. Let =targetBlock= be =targetBuffer=.[[ArrayBufferData]].
7. Perform
   [[https://tc39.es/ecma262/#sec-copydatablockbytes][CopyDataBlockBytes]](=targetBlock=,
   0, =srcBlock=, =srcByteOffset=, =srcLength=).
8. Return =targetBuffer=.

* 24.1.1.5IsUnsignedElementType ( =type= )
  :PROPERTIES:
  :CUSTOM_ID: isunsignedelementtype-type
  :END:

The abstract operation IsUnsignedElementType verifies if the argument
=type= is an unsigned TypedArray element type. This operation performs
the following steps:

1. If =type= is Uint8, Uint8C, Uint16, Uint32, or BigUint64, return
   true.
2. Return false.

* 24.1.1.6IsUnclampedIntegerElementType ( =type= )
  :PROPERTIES:
  :CUSTOM_ID: isunclampedintegerelementtype-type
  :END:

The abstract operation IsUnclampedIntegerElementType verifies if the
argument =type= is an [[https://tc39.es/ecma262/#integer][Integer]]
TypedArray element type not including Uint8C. This operation performs
the following steps:

1. If =type= is Int8, Uint8, Int16, Uint16, Int32, or Uint32, return
   true.
2. Return false.

* 24.1.1.7IsBigIntElementType ( =type= )
  :PROPERTIES:
  :CUSTOM_ID: isbigintelementtype-type
  :END:

The abstract operation IsBigIntElementType verifies if the argument
=type= is a BigInt TypedArray element type. This operation performs the
following steps:

1. If =type= is BigUint64 or BigInt64, return true.
2. Return false.

* 24.1.1.8IsNoTearConfiguration ( =type=, =order= )
  :PROPERTIES:
  :CUSTOM_ID: isnotearconfiguration-type-order
  :END:

The abstract operation IsNoTearConfiguration with arguments =type= and
=order= performs the following steps:

1. If
   ! [[https://tc39.es/ecma262/#sec-isunclampedintegerelementtype][IsUnclampedIntegerElementType]](=type=)
   is true, return true.
2. If
   ! [[https://tc39.es/ecma262/#sec-isbigintelementtype][IsBigIntElementType]](=type=)
   is true and =order= is not Init or Unordered, return true.
3. Return false.

<<sec-rawbytestonumber>>

* 24.1.1.9RawBytesToNumeric ( =type=, =rawBytes=, =isLittleEndian= )
  :PROPERTIES:
  :CUSTOM_ID: rawbytestonumeric-type-rawbytes-islittleendian
  :END:

The abstract operation RawBytesToNumeric takes three parameters, a
TypedArray element type =type=, a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
=rawBytes=, and a Boolean =isLittleEndian=. This operation performs the
following steps:

1. Let =elementSize= be the Element Size value specified in
   [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
   62]] for Element Type =type=.
2. If =isLittleEndian= is false, reverse the order of the elements of
   =rawBytes=.
3. If =type= is Float32, then

   1. Let =value= be the byte elements of =rawBytes= concatenated and
      interpreted as a little-endian bit string encoding of an IEEE
      754-2008 binary32 value.
   2. If =value= is an IEEE 754-2008 binary32 NaN value, return the NaN
      [[https://tc39.es/ecma262/#number-value][Number value]].
   3. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
      that corresponds to =value=.

4. If =type= is Float64, then

   1. Let =value= be the byte elements of =rawBytes= concatenated and
      interpreted as a little-endian bit string encoding of an IEEE
      754-2008 binary64 value.
   2. If =value= is an IEEE 754-2008 binary64 NaN value, return the NaN
      [[https://tc39.es/ecma262/#number-value][Number value]].
   3. Return the [[https://tc39.es/ecma262/#number-value][Number value]]
      that corresponds to =value=.

5. If
   ! [[https://tc39.es/ecma262/#sec-isunsignedelementtype][IsUnsignedElementType]](=type=)
   is true, then

   1. Let =intValue= be the byte elements of =rawBytes= concatenated and
      interpreted as a bit string encoding of an unsigned little-endian
      binary number.

6. Else,

   1. Let =intValue= be the byte elements of =rawBytes= concatenated and
      interpreted as a bit string encoding of a binary little-endian 2's
      complement number of bit length =elementSize= × 8.

7. If
   ! [[https://tc39.es/ecma262/#sec-isbigintelementtype][IsBigIntElementType]](=type=)
   is true, return the BigInt value that corresponds to =intValue=.
8. Otherwise, return the [[https://tc39.es/ecma262/#number-value][Number
   value]] that corresponds to =intValue=.

* 24.1.1.10GetValueFromBuffer ( =arrayBuffer=, =byteIndex=, =type=,
=isTypedArray=, =order= [ , =isLittleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: getvaluefrombuffer-arraybuffer-byteindex-type-istypedarray-order-islittleendian
  :END:

The abstract operation GetValueFromBuffer takes six parameters, an
ArrayBuffer or SharedArrayBuffer =arrayBuffer=, an
[[https://tc39.es/ecma262/#integer][integer]] =byteIndex=, a TypedArray
element type =type=, a Boolean =isTypedArray=, =order= which is one of
(SeqCst, Unordered), and optionally a Boolean =isLittleEndian=. This
operation performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=arrayBuffer=)
   is false.
2. [[https://tc39.es/ecma262/#assert][Assert]]: There are sufficient
   bytes in =arrayBuffer= starting at =byteIndex= to represent a value
   of =type=.
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=byteIndex=)
   is true.
4. Let =block= be =arrayBuffer=.[[ArrayBufferData]].
5. Let =elementSize= be the Element Size value specified in
   [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
   62]] for Element Type =type=.
6. If
   [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=arrayBuffer=)
   is true, then

   1. Let =execution= be the [[CandidateExecution]] field of the
      [[https://tc39.es/ecma262/#surrounding-agent][surrounding
      agent]]'s [[https://tc39.es/ecma262/#agent-record][Agent Record]].
   2. Let =eventList= be the [[EventList]] field of the element in
      =execution=.[[EventsRecords]] whose [[AgentSignifier]] is
      [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
   3. If =isTypedArray= is true and
      [[https://tc39.es/ecma262/#sec-isnotearconfiguration][IsNoTearConfiguration]](=type=,
      =order=) is true, let =noTear= be true; otherwise let =noTear= be
      false.
   4. Let =rawValue= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      of length =elementSize= of nondeterministically chosen byte
      values.
   5. NOTE: In implementations, =rawValue= is the result of a non-atomic
      or atomic read instruction on the underlying hardware. The
      nondeterminism is a semantic prescription of the
      [[https://tc39.es/ecma262/#sec-memory-model][memory model]] to
      describe observable behaviour of hardware with weak consistency.
   6. Let =readEvent= be
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
      { [[Order]]: =order=, [[NoTear]]: =noTear=, [[Block]]: =block=,
      [[ByteIndex]]: =byteIndex=, [[ElementSize]]: =elementSize= }.
   7. Append =readEvent= to =eventList=.
   8. Append [[https://tc39.es/ecma262/#sec-chosen-value-records][Chosen
      Value Record]] { [[Event]]: =readEvent=, [[ChosenValue]]:
      =rawValue= } to =execution=.[[ChosenValues]].

7. Else, let =rawValue= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of =elementSize= containing, in order, the =elementSize= sequence of
   bytes starting with =block=[=byteIndex=].
8. If =isLittleEndian= is not present, set =isLittleEndian= to the value
   of the [[LittleEndian]] field of the
   [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]]'s
   [[https://tc39.es/ecma262/#agent-record][Agent Record]].
9. Return
   [[https://tc39.es/ecma262/#sec-rawbytestonumeric][RawBytesToNumeric]](=type=,
   =rawValue=, =isLittleEndian=).

<<sec-numbertorawbytes>>

* 24.1.1.11NumericToRawBytes ( =type=, =value=, =isLittleEndian= )
  :PROPERTIES:
  :CUSTOM_ID: numerictorawbytes-type-value-islittleendian
  :END:

The abstract operation NumericToRawBytes takes three parameters, a
TypedArray element type =type=, a BigInt or a Number =value=, and a
Boolean =isLittleEndian=. This operation performs the following steps:

1. If =type= is Float32, then

   1. Let =rawBytes= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing the 4 bytes that are the result of converting =value=
      to IEEE 754-2008 binary32 format using roundTiesToEven mode. If
      =isLittleEndian= is false, the bytes are arranged in big endian
      order. Otherwise, the bytes are arranged in little endian order.
      If =value= is NaN, =rawBytes= may be set to any implementation
      chosen IEEE 754-2008 binary32 format Not-a-Number encoding. An
      implementation must always choose the same encoding for each
      implementation distinguishable NaN value.

2. Else if =type= is Float64, then

   1. Let =rawBytes= be a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      containing the 8 bytes that are the IEEE 754-2008 binary64 format
      encoding of =value=. If =isLittleEndian= is false, the bytes are
      arranged in big endian order. Otherwise, the bytes are arranged in
      little endian order. If =value= is NaN, =rawBytes= may be set to
      any implementation chosen IEEE 754-2008 binary64 format
      Not-a-Number encoding. An implementation must always choose the
      same encoding for each implementation distinguishable NaN value.

3. Else,

   1. Let =n= be the Element Size value specified in
      [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
      62]] for Element Type =type=.
   2. Let =convOp= be the abstract operation named in the Conversion
      Operation column in
      [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
      62]] for Element Type =type=.
   3. Let =intValue= be =convOp=(=value=) treated as a
      [[https://tc39.es/ecma262/#mathematical-value][mathematical
      value]], whether the result is a BigInt or Number.
   4. If =intValue= ≥ 0_{[[https://tc39.es/ecma262/#%E2%84%9D][ℝ]]},
      then

      1. Let =rawBytes= be a
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         containing the =n=-byte binary encoding of =intValue=. If
         =isLittleEndian= is false, the bytes are ordered in big endian
         order. Otherwise, the bytes are ordered in little endian order.

   5. Else,

      1. Let =rawBytes= be a
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
         containing the =n=-byte binary 2's complement encoding of
         =intValue=. If =isLittleEndian= is false, the bytes are ordered
         in big endian order. Otherwise, the bytes are ordered in little
         endian order.

4. Return =rawBytes=.

* 24.1.1.12SetValueInBuffer ( =arrayBuffer=, =byteIndex=, =type=,
=value=, =isTypedArray=, =order= [ , =isLittleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: setvalueinbuffer-arraybuffer-byteindex-type-value-istypedarray-order-islittleendian
  :END:

The abstract operation SetValueInBuffer takes seven parameters, an
ArrayBuffer or SharedArrayBuffer =arrayBuffer=, an
[[https://tc39.es/ecma262/#integer][integer]] =byteIndex=, a TypedArray
element type =type=, a Number or BigInt =value=, a Boolean
=isTypedArray=, =order= which is one of (SeqCst, Unordered, Init), and
optionally a Boolean =isLittleEndian=. This operation performs the
following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=arrayBuffer=)
    is false.
2.  [[https://tc39.es/ecma262/#assert][Assert]]: There are sufficient
    bytes in =arrayBuffer= starting at =byteIndex= to represent a value
    of =type=.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=byteIndex=)
    is true.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is BigInt if
    ! [[https://tc39.es/ecma262/#sec-isbigintelementtype][IsBigIntElementType]](=type=)
    is true; otherwise,
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is Number.
5.  Let =block= be =arrayBuffer=.[[ArrayBufferData]].
6.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for Element Type =type=.
7.  If =isLittleEndian= is not present, set =isLittleEndian= to the
    value of the [[LittleEndian]] field of the
    [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]]'s
    [[https://tc39.es/ecma262/#agent-record][Agent Record]].
8.  Let =rawBytes= be
    [[https://tc39.es/ecma262/#sec-numerictorawbytes][NumericToRawBytes]](=type=,
    =value=, =isLittleEndian=).
9.  If
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=arrayBuffer=)
    is true, then

    1. Let =execution= be the [[CandidateExecution]] field of the
       [[https://tc39.es/ecma262/#surrounding-agent][surrounding
       agent]]'s [[https://tc39.es/ecma262/#agent-record][Agent
       Record]].
    2. Let =eventList= be the [[EventList]] field of the element in
       =execution=.[[EventsRecords]] whose [[AgentSignifier]] is
       [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
    3. If =isTypedArray= is true and
       [[https://tc39.es/ecma262/#sec-isnotearconfiguration][IsNoTearConfiguration]](=type=,
       =order=) is true, let =noTear= be true; otherwise let =noTear= be
       false.
    4. Append
       [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
       { [[Order]]: =order=, [[NoTear]]: =noTear=, [[Block]]: =block=,
       [[ByteIndex]]: =byteIndex=, [[ElementSize]]: =elementSize=,
       [[Payload]]: =rawBytes= } to =eventList=.

10. Else, store the individual bytes of =rawBytes= into =block=, in
    order, starting at =block=[=byteIndex=].
11. Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

* 24.1.1.13GetModifySetValueInBuffer ( =arrayBuffer=, =byteIndex=,
=type=, =value=, =op= [ , =isLittleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: getmodifysetvalueinbuffer-arraybuffer-byteindex-type-value-op-islittleendian
  :END:

The abstract operation GetModifySetValueInBuffer takes six parameters, a
SharedArrayBuffer =arrayBuffer=, a nonnegative
[[https://tc39.es/ecma262/#integer][integer]] =byteIndex=, a TypedArray
element type =type=, a Number or BigInt =value=, a semantic function
=op=, and optionally a Boolean =isLittleEndian=. This operation performs
the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=arrayBuffer=)
    is true.
2.  [[https://tc39.es/ecma262/#assert][Assert]]: There are sufficient
    bytes in =arrayBuffer= starting at =byteIndex= to represent a value
    of =type=.
3.  [[https://tc39.es/ecma262/#assert][Assert]]:
    ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=byteIndex=)
    is true.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is BigInt if
    ! [[https://tc39.es/ecma262/#sec-isbigintelementtype][IsBigIntElementType]](=type=)
    is true; otherwise,
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is Number.
5.  Let =block= be =arrayBuffer=.[[ArrayBufferData]].
6.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for Element Type =type=.
7.  If =isLittleEndian= is not present, set =isLittleEndian= to the
    value of the [[LittleEndian]] field of the
    [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]]'s
    [[https://tc39.es/ecma262/#agent-record][Agent Record]].
8.  Let =rawBytes= be
    [[https://tc39.es/ecma262/#sec-numerictorawbytes][NumericToRawBytes]](=type=,
    =value=, =isLittleEndian=).
9.  Let =execution= be the [[CandidateExecution]] field of the
    [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]]'s
    [[https://tc39.es/ecma262/#agent-record][Agent Record]].
10. Let =eventList= be the [[EventList]] field of the element in
    =execution=.[[EventsRecords]] whose [[AgentSignifier]] is
    [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
11. Let =rawBytesRead= be a
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    of length =elementSize= of nondeterministically chosen byte values.
12. NOTE: In implementations, =rawBytesRead= is the result of a
    load-link, of a load-exclusive, or of an operand of a
    read-modify-write instruction on the underlying hardware. The
    nondeterminism is a semantic prescription of the
    [[https://tc39.es/ecma262/#sec-memory-model][memory model]] to
    describe observable behaviour of hardware with weak consistency.
13. Let =rmwEvent= be
    [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
    { [[Order]]: SeqCst, [[NoTear]]: true, [[Block]]: =block=,
    [[ByteIndex]]: =byteIndex=, [[ElementSize]]: =elementSize=,
    [[Payload]]: =rawBytes=, [[ModifyOp]]: =op= }.
14. Append =rmwEvent= to =eventList=.
15. Append [[https://tc39.es/ecma262/#sec-chosen-value-records][Chosen
    Value Record]] { [[Event]]: =rmwEvent=, [[ChosenValue]]:
    =rawBytesRead= } to =execution=.[[ChosenValues]].
16. Return
    [[https://tc39.es/ecma262/#sec-rawbytestonumeric][RawBytesToNumeric]](=type=,
    =rawBytesRead=, =isLittleEndian=).

* 24.1.2The ArrayBuffer Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-arraybuffer-constructor
  :END:

The ArrayBuffer [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %ArrayBuffer%.
- is the initial value of the "ArrayBuffer" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new ArrayBuffer object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =ArrayBuffer= behaviour must include a
  =super= call to the =ArrayBuffer=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with the internal state necessary to
  support the =ArrayBuffer.prototype= built-in methods.

* 24.1.2.1ArrayBuffer ( =length= )
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer-length
  :END:

When the =ArrayBuffer= function is called with argument =length=, the
following steps are taken:

1. If NewTarget is undefined, throw a TypeError exception.
2. Let =byteLength= be
   ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=length=).
3. Return
   ? [[https://tc39.es/ecma262/#sec-allocatearraybuffer][AllocateArrayBuffer]](NewTarget,
   =byteLength=).

* 24.1.3Properties of the ArrayBuffer Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-arraybuffer-constructor
  :END:

The ArrayBuffer [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 24.1.3.1ArrayBuffer.isView ( =arg= )
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer.isview-arg
  :END:

The =isView= function takes one argument =arg=, and performs the
following steps:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=arg=)
   is not Object, return false.
2. If =arg= has a [[ViewedArrayBuffer]] internal slot, return true.
3. Return false.

* 24.1.3.2ArrayBuffer.prototype
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer.prototype
  :END:

The initial value of =ArrayBuffer.prototype= is %ArrayBuffer.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 24.1.3.3get ArrayBuffer [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-arraybuffer-species
  :END:

=ArrayBuffer[@@species]= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

Note

ArrayBuffer prototype methods normally use their this object's
[[https://tc39.es/ecma262/#constructor][constructor]] to create a
derived object. However, a subclass
[[https://tc39.es/ecma262/#constructor][constructor]] may over-ride that
default behaviour by redefining its @@species property.

* 24.1.4Properties of the ArrayBuffer Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-arraybuffer-prototype-object
  :END:

The ArrayBuffer prototype object:

- is the intrinsic object %ArrayBufferPrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have an [[ArrayBufferData]] or [[ArrayBufferByteLength]]
  internal slot.

* 24.1.4.1get ArrayBuffer.prototype.byteLength
  :PROPERTIES:
  :CUSTOM_ID: get-arraybuffer.prototype.bytelength
  :END:

=ArrayBuffer.prototype.byteLength= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[ArrayBufferData]]).
3. If
   [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=O=)
   is true, throw a TypeError exception.
4. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=O=)
   is true, throw a TypeError exception.
5. Let =length= be =O=.[[ArrayBufferByteLength]].
6. Return =length=.

* 24.1.4.2ArrayBuffer.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer.prototype.constructor
  :END:

The initial value of =ArrayBuffer.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]].

* 24.1.4.3ArrayBuffer.prototype.slice ( =start=, =end= )
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer.prototype.slice-start-end
  :END:

The following steps are taken:

1.  Let =O= be the this value.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
    [[ArrayBufferData]]).
3.  If
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=O=)
    is true, throw a TypeError exception.
4.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=O=)
    is true, throw a TypeError exception.
5.  Let =len= be =O=.[[ArrayBufferByteLength]].
6.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
7.  If =relativeStart= < 0, let =first= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =first= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
8.  If =end= is undefined, let =relativeEnd= be =len=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
9.  If =relativeEnd= < 0, let =final= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
    0); else let =final= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
10. Let =newLen= be [[https://tc39.es/ecma262/#eqn-max][max]](=final= -
    =first=, 0).
11. Let =ctor= be
    ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=O=,
    [[https://tc39.es/ecma262/#sec-arraybuffer-constructor][%ArrayBuffer%]]).
12. Let =new= be
    ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=ctor=, «
    =newLen= »).
13. Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=new=,
    [[ArrayBufferData]]).
14. If
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=new=)
    is true, throw a TypeError exception.
15. If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=new=)
    is true, throw a TypeError exception.
16. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=new=, =O=)
    is true, throw a TypeError exception.
17. If =new=.[[ArrayBufferByteLength]] < =newLen=, throw a TypeError
    exception.
18. NOTE: Side-effects of the above steps may have detached =O=.
19. If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=O=)
    is true, throw a TypeError exception.
20. Let =fromBuf= be =O=.[[ArrayBufferData]].
21. Let =toBuf= be =new=.[[ArrayBufferData]].
22. Perform
    [[https://tc39.es/ecma262/#sec-copydatablockbytes][CopyDataBlockBytes]](=toBuf=,
    0, =fromBuf=, =first=, =newLen=).
23. Return =new=.

* 24.1.4.4ArrayBuffer.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: arraybuffer.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"ArrayBuffer".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 24.1.5Properties of ArrayBuffer Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-arraybuffer-instances
  :END:

ArrayBuffer instances inherit properties from the ArrayBuffer prototype
object. ArrayBuffer instances each have an [[ArrayBufferData]] internal
slot, an [[ArrayBufferByteLength]] internal slot, and an
[[ArrayBufferDetachKey]] internal slot.

ArrayBuffer instances whose [[ArrayBufferData]] is null are considered
to be detached and all operators to access or modify data contained in
the ArrayBuffer instance will fail.

ArrayBuffer instances whose [[ArrayBufferDetachKey]] is set to a value
other than undefined need to have all
[[https://tc39.es/ecma262/#sec-detacharraybuffer][DetachArrayBuffer]]
calls passing that same "detach key" as an argument, otherwise a
TypeError will result. This internal slot is only ever set by certain
embedding environments, not by algorithms in this specification.

* 24.2SharedArrayBuffer Objects
  :PROPERTIES:
  :CUSTOM_ID: sharedarraybuffer-objects
  :END:

* 24.2.1Abstract Operations for SharedArrayBuffer Objects
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations-for-sharedarraybuffer-objects
  :END:

* 24.2.1.1AllocateSharedArrayBuffer ( =constructor=, =byteLength= )
  :PROPERTIES:
  :CUSTOM_ID: allocatesharedarraybuffer-constructor-bytelength
  :END:

The abstract operation AllocateSharedArrayBuffer with arguments
=constructor= and =byteLength= is used to create a SharedArrayBuffer
object. It performs the following steps:

1. Let =obj= be
   ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=constructor=,
   "%SharedArrayBuffer.prototype%", « [[ArrayBufferData]],
   [[ArrayBufferByteLength]] »).
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   ! [[https://tc39.es/ecma262/#sec-isnonnegativeinteger][IsNonNegativeInteger]](=byteLength=)
   is true.
3. Let =block= be
   ? [[https://tc39.es/ecma262/#sec-createsharedbytedatablock][CreateSharedByteDataBlock]](=byteLength=).
4. Set =obj=.[[ArrayBufferData]] to =block=.
5. Set =obj=.[[ArrayBufferByteLength]] to =byteLength=.
6. Return =obj=.

* 24.2.1.2IsSharedArrayBuffer ( =obj= )
  :PROPERTIES:
  :CUSTOM_ID: issharedarraybuffer-obj
  :END:

IsSharedArrayBuffer tests whether an object is an ArrayBuffer, a
SharedArrayBuffer, or a subtype of either. It performs the following
steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=obj=)
   is Object and it has an [[ArrayBufferData]] internal slot.
2. Let =bufferData= be =obj=.[[ArrayBufferData]].
3. If =bufferData= is null, return false.
4. If =bufferData= is a [[https://tc39.es/ecma262/#sec-data-blocks][Data
   Block]], return false.
5. [[https://tc39.es/ecma262/#assert][Assert]]: =bufferData= is a
   [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]].
6. Return true.

* 24.2.2The SharedArrayBuffer Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-sharedarraybuffer-constructor
  :END:

The SharedArrayBuffer
[[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %SharedArrayBuffer%.
- is the initial value of the "SharedArrayBuffer" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new SharedArrayBuffer object when called as
  a [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =SharedArrayBuffer= behaviour must
  include a =super= call to the =SharedArrayBuffer=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with the internal state necessary to
  support the =SharedArrayBuffer.prototype= built-in methods.

Note

Unlike an =ArrayBuffer=, a =SharedArrayBuffer= cannot become detached,
and its internal [[ArrayBufferData]] slot is never null.

* 24.2.2.1SharedArrayBuffer ( [ =length= ] )
  :PROPERTIES:
  :CUSTOM_ID: sharedarraybuffer-length
  :END:

When the =SharedArrayBuffer= function is called with optional argument
=length=, the following steps are taken:

1. If NewTarget is undefined, throw a TypeError exception.
2. Let =byteLength= be
   ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=length=).
3. Return
   ? [[https://tc39.es/ecma262/#sec-allocatesharedarraybuffer][AllocateSharedArrayBuffer]](NewTarget,
   =byteLength=).

* 24.2.3Properties of the SharedArrayBuffer Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-sharedarraybuffer-constructor
  :END:

The SharedArrayBuffer
[[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 24.2.3.1SharedArrayBuffer.prototype
  :PROPERTIES:
  :CUSTOM_ID: sharedarraybuffer.prototype
  :END:

The initial value of =SharedArrayBuffer.prototype= is
%SharedArrayBuffer.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 24.2.3.2get SharedArrayBuffer [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-sharedarraybuffer-species
  :END:

=SharedArrayBuffer[@@species]= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

* 24.2.4Properties of the SharedArrayBuffer Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-sharedarraybuffer-prototype-object
  :END:

The SharedArrayBuffer prototype object:

- is the intrinsic object %SharedArrayBufferPrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have an [[ArrayBufferData]] or [[ArrayBufferByteLength]]
  internal slot.

* 24.2.4.1get SharedArrayBuffer.prototype.byteLength
  :PROPERTIES:
  :CUSTOM_ID: get-sharedarraybuffer.prototype.bytelength
  :END:

=SharedArrayBuffer.prototype.byteLength= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[ArrayBufferData]]).
3. If
   [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=O=)
   is false, throw a TypeError exception.
4. Let =length= be =O=.[[ArrayBufferByteLength]].
5. Return =length=.

* 24.2.4.2SharedArrayBuffer.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: sharedarraybuffer.prototype.constructor
  :END:

The initial value of =SharedArrayBuffer.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-sharedarraybuffer-constructor][%SharedArrayBuffer%]].

* 24.2.4.3SharedArrayBuffer.prototype.slice ( =start=, =end= )
  :PROPERTIES:
  :CUSTOM_ID: sharedarraybuffer.prototype.slice-start-end
  :END:

The following steps are taken:

1.  Let =O= be the this value.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
    [[ArrayBufferData]]).
3.  If
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=O=)
    is false, throw a TypeError exception.
4.  Let =len= be =O=.[[ArrayBufferByteLength]].
5.  Let =relativeStart= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
6.  If =relativeStart= < 0, let =first= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeStart=),
    0); else let =first= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeStart=, =len=).
7.  If =end= is undefined, let =relativeEnd= be =len=; else let
    =relativeEnd= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=end=).
8.  If =relativeEnd= < 0, let =final= be
    [[https://tc39.es/ecma262/#eqn-max][max]]((=len= + =relativeEnd=),
    0); else let =final= be
    [[https://tc39.es/ecma262/#eqn-min][min]](=relativeEnd=, =len=).
9.  Let =newLen= be [[https://tc39.es/ecma262/#eqn-max][max]](=final= -
    =first=, 0).
10. Let =ctor= be
    ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=O=,
    [[https://tc39.es/ecma262/#sec-sharedarraybuffer-constructor][%SharedArrayBuffer%]]).
11. Let =new= be
    ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=ctor=, «
    =newLen= »).
12. Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=new=,
    [[ArrayBufferData]]).
13. If
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=new=)
    is false, throw a TypeError exception.
14. If =new=.[[ArrayBufferData]] and =O=.[[ArrayBufferData]] are the
    same [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]]
    values, throw a TypeError exception.
15. If =new=.[[ArrayBufferByteLength]] < =newLen=, throw a TypeError
    exception.
16. Let =fromBuf= be =O=.[[ArrayBufferData]].
17. Let =toBuf= be =new=.[[ArrayBufferData]].
18. Perform
    [[https://tc39.es/ecma262/#sec-copydatablockbytes][CopyDataBlockBytes]](=toBuf=,
    0, =fromBuf=, =first=, =newLen=).
19. Return =new=.

* 24.2.4.4SharedArrayBuffer.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: sharedarraybuffer.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"SharedArrayBuffer".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 24.2.5Properties of SharedArrayBuffer Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-sharedarraybuffer-instances
  :END:

SharedArrayBuffer instances inherit properties from the
SharedArrayBuffer prototype object. SharedArrayBuffer instances each
have an [[ArrayBufferData]] internal slot and an
[[ArrayBufferByteLength]] internal slot.

Note

SharedArrayBuffer instances, unlike ArrayBuffer instances, are never
detached.

* 24.3DataView Objects
  :PROPERTIES:
  :CUSTOM_ID: dataview-objects
  :END:

* 24.3.1Abstract Operations For DataView Objects
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations-for-dataview-objects
  :END:

* 24.3.1.1GetViewValue ( =view=, =requestIndex=, =isLittleEndian=,
=type= )
  :PROPERTIES:
  :CUSTOM_ID: getviewvalue-view-requestindex-islittleendian-type
  :END:

The abstract operation GetViewValue with arguments =view=,
=requestIndex=, =isLittleEndian=, and =type= is used by functions on
DataView instances to retrieve values from the view's buffer. It
performs the following steps:

1.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=view=,
    [[DataView]]).
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =view= has a
    [[ViewedArrayBuffer]] internal slot.
3.  Let =getIndex= be
    ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=requestIndex=).
4.  Set =isLittleEndian= to
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=isLittleEndian=).
5.  Let =buffer= be =view=.[[ViewedArrayBuffer]].
6.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
    is true, throw a TypeError exception.
7.  Let =viewOffset= be =view=.[[ByteOffset]].
8.  Let =viewSize= be =view=.[[ByteLength]].
9.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for Element Type =type=.
10. If =getIndex= + =elementSize= > =viewSize=, throw a RangeError
    exception.
11. Let =bufferIndex= be =getIndex= + =viewOffset=.
12. Return
    [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=buffer=,
    =bufferIndex=, =type=, false, Unordered, =isLittleEndian=).

* 24.3.1.2SetViewValue ( =view=, =requestIndex=, =isLittleEndian=,
=type=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: setviewvalue-view-requestindex-islittleendian-type-value
  :END:

The abstract operation SetViewValue with arguments =view=,
=requestIndex=, =isLittleEndian=, =type=, and =value= is used by
functions on DataView instances to store values into the view's buffer.
It performs the following steps:

1.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=view=,
    [[DataView]]).
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =view= has a
    [[ViewedArrayBuffer]] internal slot.
3.  Let =getIndex= be
    ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=requestIndex=).
4.  If
    ! [[https://tc39.es/ecma262/#sec-isbigintelementtype][IsBigIntElementType]](=type=)
    is true, let =numberValue= be
    ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=value=).
5.  Otherwise, let =numberValue= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=value=).
6.  Set =isLittleEndian= to
    ! [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]](=isLittleEndian=).
7.  Let =buffer= be =view=.[[ViewedArrayBuffer]].
8.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
    is true, throw a TypeError exception.
9.  Let =viewOffset= be =view=.[[ByteOffset]].
10. Let =viewSize= be =view=.[[ByteLength]].
11. Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for Element Type =type=.
12. If =getIndex= + =elementSize= > =viewSize=, throw a RangeError
    exception.
13. Let =bufferIndex= be =getIndex= + =viewOffset=.
14. Return
    [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=buffer=,
    =bufferIndex=, =type=, =numberValue=, false, Unordered,
    =isLittleEndian=).

* 24.3.2The DataView Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-dataview-constructor
  :END:

The DataView [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %DataView%.
- is the initial value of the "DataView" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new DataView object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =DataView= behaviour must include a
  =super= call to the =DataView=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with the internal state necessary to
  support the =DataView.prototype= built-in methods.

* 24.3.2.1DataView ( =buffer= [ , =byteOffset= [ , =byteLength= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview-buffer-byteoffset-bytelength
  :END:

When the =DataView= function is called with at least one argument
=buffer=, the following steps are taken:

1.  If NewTarget is undefined, throw a TypeError exception.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=buffer=,
    [[ArrayBufferData]]).
3.  Let =offset= be
    ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=byteOffset=).
4.  If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
    is true, throw a TypeError exception.
5.  Let =bufferByteLength= be =buffer=.[[ArrayBufferByteLength]].
6.  If =offset= > =bufferByteLength=, throw a RangeError exception.
7.  If =byteLength= is undefined, then

    1. Let =viewByteLength= be =bufferByteLength= - =offset=.

8.  Else,

    1. Let =viewByteLength= be
       ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=byteLength=).
    2. If =offset= + =viewByteLength= > =bufferByteLength=, throw a
       RangeError exception.

9.  Let =O= be
    ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
    "%DataView.prototype%", « [[DataView]], [[ViewedArrayBuffer]],
    [[ByteLength]], [[ByteOffset]] »).
10. If
    [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
    is true, throw a TypeError exception.
11. Set =O=.[[ViewedArrayBuffer]] to =buffer=.
12. Set =O=.[[ByteLength]] to =viewByteLength=.
13. Set =O=.[[ByteOffset]] to =offset=.
14. Return =O=.

* 24.3.3Properties of the DataView Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-dataview-constructor
  :END:

The DataView [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 24.3.3.1DataView.prototype
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype
  :END:

The initial value of =DataView.prototype= is %DataView.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 24.3.4Properties of the DataView Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-dataview-prototype-object
  :END:

The DataView prototype object:

- is the intrinsic object %DataViewPrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have a [[DataView]], [[ViewedArrayBuffer]], [[ByteLength]],
  or [[ByteOffset]] internal slot.

* 24.3.4.1get DataView.prototype.buffer
  :PROPERTIES:
  :CUSTOM_ID: get-dataview.prototype.buffer
  :END:

=DataView.prototype.buffer= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[DataView]]).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
   [[ViewedArrayBuffer]] internal slot.
4. Let =buffer= be =O=.[[ViewedArrayBuffer]].
5. Return =buffer=.

* 24.3.4.2get DataView.prototype.byteLength
  :PROPERTIES:
  :CUSTOM_ID: get-dataview.prototype.bytelength
  :END:

=DataView.prototype.byteLength= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[DataView]]).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
   [[ViewedArrayBuffer]] internal slot.
4. Let =buffer= be =O=.[[ViewedArrayBuffer]].
5. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
   is true, throw a TypeError exception.
6. Let =size= be =O=.[[ByteLength]].
7. Return =size=.

* 24.3.4.3get DataView.prototype.byteOffset
  :PROPERTIES:
  :CUSTOM_ID: get-dataview.prototype.byteoffset
  :END:

=DataView.prototype.byteOffset= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Let =O= be the this value.
2. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=O=,
   [[DataView]]).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =O= has a
   [[ViewedArrayBuffer]] internal slot.
4. Let =buffer= be =O=.[[ViewedArrayBuffer]].
5. If
   [[https://tc39.es/ecma262/#sec-isdetachedbuffer][IsDetachedBuffer]](=buffer=)
   is true, throw a TypeError exception.
6. Let =offset= be =O=.[[ByteOffset]].
7. Return =offset=.

* 24.3.4.4DataView.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.constructor
  :END:

The initial value of =DataView.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-dataview-constructor][%DataView%]].

* 24.3.4.5DataView.prototype.getBigInt64 ( =byteOffset= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getbigint64-byteoffset-littleendian
  :END:

When the =getBigInt64= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to undefined.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, BigInt64).

* 24.3.4.6DataView.prototype.getBigUint64 ( =byteOffset= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getbiguint64-byteoffset-littleendian
  :END:

When the =getBigUint64= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to undefined.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, BigUint64).

* 24.3.4.7DataView.prototype.getFloat32 ( =byteOffset= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getfloat32-byteoffset-littleendian
  :END:

When the =getFloat32= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Float32).

* 24.3.4.8DataView.prototype.getFloat64 ( =byteOffset= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getfloat64-byteoffset-littleendian
  :END:

When the =getFloat64= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Float64).

* 24.3.4.9DataView.prototype.getInt8 ( =byteOffset= )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getint8-byteoffset
  :END:

When the =getInt8= method is called with argument =byteOffset=, the
following steps are taken:

1. Let =v= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, true, Int8).

* 24.3.4.10DataView.prototype.getInt16 ( =byteOffset= [ , =littleEndian=
] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getint16-byteoffset-littleendian
  :END:

When the =getInt16= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Int16).

* 24.3.4.11DataView.prototype.getInt32 ( =byteOffset= [ , =littleEndian=
] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getint32-byteoffset-littleendian
  :END:

When the =getInt32= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Int32).

* 24.3.4.12DataView.prototype.getUint8 ( =byteOffset= )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getuint8-byteoffset
  :END:

When the =getUint8= method is called with argument =byteOffset=, the
following steps are taken:

1. Let =v= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, true, Uint8).

* 24.3.4.13DataView.prototype.getUint16 ( =byteOffset= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getuint16-byteoffset-littleendian
  :END:

When the =getUint16= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Uint16).

* 24.3.4.14DataView.prototype.getUint32 ( =byteOffset= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.getuint32-byteoffset-littleendian
  :END:

When the =getUint32= method is called with argument =byteOffset= and
optional argument =littleEndian=, the following steps are taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-getviewvalue][GetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Uint32).

* 24.3.4.15DataView.prototype.setBigInt64 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setbigint64-byteoffset-value-littleendian
  :END:

When the =setBigInt64= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to undefined.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, BigInt64, =value=).

* 24.3.4.16DataView.prototype.setBigUint64 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setbiguint64-byteoffset-value-littleendian
  :END:

When the =setBigUint64= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to undefined.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, BigUint64, =value=).

* 24.3.4.17DataView.prototype.setFloat32 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setfloat32-byteoffset-value-littleendian
  :END:

When the =setFloat32= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Float32, =value=).

* 24.3.4.18DataView.prototype.setFloat64 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setfloat64-byteoffset-value-littleendian
  :END:

When the =setFloat64= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Float64, =value=).

* 24.3.4.19DataView.prototype.setInt8 ( =byteOffset=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setint8-byteoffset-value
  :END:

When the =setInt8= method is called with arguments =byteOffset= and
=value=, the following steps are taken:

1. Let =v= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, true, Int8, =value=).

* 24.3.4.20DataView.prototype.setInt16 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setint16-byteoffset-value-littleendian
  :END:

When the =setInt16= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Int16, =value=).

* 24.3.4.21DataView.prototype.setInt32 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setint32-byteoffset-value-littleendian
  :END:

When the =setInt32= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Int32, =value=).

* 24.3.4.22DataView.prototype.setUint8 ( =byteOffset=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setuint8-byteoffset-value
  :END:

When the =setUint8= method is called with arguments =byteOffset= and
=value=, the following steps are taken:

1. Let =v= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, true, Uint8, =value=).

* 24.3.4.23DataView.prototype.setUint16 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setuint16-byteoffset-value-littleendian
  :END:

When the =setUint16= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Uint16, =value=).

* 24.3.4.24DataView.prototype.setUint32 ( =byteOffset=, =value= [ ,
=littleEndian= ] )
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype.setuint32-byteoffset-value-littleendian
  :END:

When the =setUint32= method is called with arguments =byteOffset= and
=value= and optional argument =littleEndian=, the following steps are
taken:

1. Let =v= be the this value.
2. If =littleEndian= is not present, set =littleEndian= to false.
3. Return
   ? [[https://tc39.es/ecma262/#sec-setviewvalue][SetViewValue]](=v=,
   =byteOffset=, =littleEndian=, Uint32, =value=).

* 24.3.4.25DataView.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: dataview.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"DataView".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 24.3.5Properties of DataView Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-dataview-instances
  :END:

DataView instances are ordinary objects that inherit properties from the
DataView prototype object. DataView instances each have [[DataView]],
[[ViewedArrayBuffer]], [[ByteLength]], and [[ByteOffset]] internal
slots.

Note

The value of the [[DataView]] internal slot is not used within this
specification. The simple presence of that internal slot is used within
the specification to identify objects created using the =DataView=
[[https://tc39.es/ecma262/#constructor][constructor]].

* 24.4The Atomics Object
  :PROPERTIES:
  :CUSTOM_ID: the-atomics-object
  :END:

The Atomics object:

- is the intrinsic object %Atomics%.
- is the initial value of the "Atomics" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- does not have a [[Construct]] internal method; it cannot be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]] with the =new=
  operator.
- does not have a [[Call]] internal method; it cannot be invoked as a
  function.

The Atomics object provides functions that operate indivisibly
(atomically) on shared memory array cells as well as functions that let
agents wait for and dispatch primitive events. When used with
discipline, the Atomics functions allow
multi-[[https://tc39.es/ecma262/#agent][agent]] programs that
communicate through shared memory to execute in a well-understood order
even on parallel CPUs. The rules that govern shared-memory communication
are provided by the [[https://tc39.es/ecma262/#sec-memory-model][memory
model]], defined below.

Note

For informative guidelines for programming and implementing shared
memory in ECMAScript, please see the notes at the end of the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]] section.

* 24.4.1Abstract Operations for Atomics
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations-for-atomics
  :END:

* 24.4.1.1ValidateSharedIntegerTypedArray ( =typedArray= [ , =waitable=
] )
  :PROPERTIES:
  :CUSTOM_ID: validatesharedintegertypedarray-typedarray-waitable
  :END:

The abstract operation ValidateSharedIntegerTypedArray takes one
argument =typedArray= and an optional Boolean =waitable=. It performs
the following steps:

1.  If =waitable= is not present, set =waitable= to false.
2.  Perform
    ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=typedArray=,
    [[TypedArrayName]]).
3.  Let =typeName= be =typedArray=.[[TypedArrayName]].
4.  Let =type= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =typeName=.
5.  If =waitable= is true, then

    1. If =typeName= is not "Int32Array" or "BigInt64Array", throw a
       TypeError exception.

6.  Else,

    1. If
       ! [[https://tc39.es/ecma262/#sec-isunclampedintegerelementtype][IsUnclampedIntegerElementType]](=type=)
       is false and
       ! [[https://tc39.es/ecma262/#sec-isbigintelementtype][IsBigIntElementType]](=type=)
       is false, throw a TypeError exception.

7.  [[https://tc39.es/ecma262/#assert][Assert]]: =typedArray= has a
    [[ViewedArrayBuffer]] internal slot.
8.  Let =buffer= be =typedArray=.[[ViewedArrayBuffer]].
9.  If
    [[https://tc39.es/ecma262/#sec-issharedarraybuffer][IsSharedArrayBuffer]](=buffer=)
    is false, throw a TypeError exception.
10. Return =buffer=.

* 24.4.1.2ValidateAtomicAccess ( =typedArray=, =requestIndex= )
  :PROPERTIES:
  :CUSTOM_ID: validateatomicaccess-typedarray-requestindex
  :END:

The abstract operation ValidateAtomicAccess takes two arguments,
=typedArray= and =requestIndex=. It performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =typedArray= is an
   Object that has a [[ViewedArrayBuffer]] internal slot.
2. Let =accessIndex= be
   ? [[https://tc39.es/ecma262/#sec-toindex][ToIndex]](=requestIndex=).
3. Let =length= be =typedArray=.[[ArrayLength]].
4. [[https://tc39.es/ecma262/#assert][Assert]]: =accessIndex= ≥ 0.
5. If =accessIndex= ≥ =length=, throw a RangeError exception.
6. Return =accessIndex=.

* 24.4.1.3GetWaiterList ( =block=, =i= )
  :PROPERTIES:
  :CUSTOM_ID: getwaiterlist-block-i
  :END:

A WaiterList is a semantic object that contains an ordered list of those
agents that are waiting on a location (=block=, =i=) in shared memory;
=block= is a [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data
Block]] and =i= a byte offset into the memory of =block=. A WaiterList
object also optionally contains a
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
event]] denoting the previous leaving of its critical section.

Initially a WaiterList object has an empty list and no
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
event]].

The [[https://tc39.es/ecma262/#sec-agent-clusters][agent cluster]] has a
store of WaiterList objects; the store is indexed by (=block=, =i=).
WaiterLists are [[https://tc39.es/ecma262/#agent][agent]]-independent: a
lookup in the store of WaiterLists by (=block=, =i=) will result in the
same WaiterList object in any [[https://tc39.es/ecma262/#agent][agent]]
in the [[https://tc39.es/ecma262/#sec-agent-clusters][agent cluster]].

Each WaiterList has a critical section that controls exclusive access to
that WaiterList during evaluation. Only a single
[[https://tc39.es/ecma262/#agent][agent]] may enter a WaiterList's
critical section at one time. Entering and leaving a WaiterList's
critical section is controlled by the
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]]
[[https://tc39.es/ecma262/#sec-entercriticalsection][EnterCriticalSection]]
and
[[https://tc39.es/ecma262/#sec-leavecriticalsection][LeaveCriticalSection]].
Operations on a WaiterList---adding and removing waiting agents,
traversing the list of agents, suspending and notifying agents on the
list, setting and retrieving the
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
event]]---may only be performed by agents that have entered the
WaiterList's critical section.

The abstract operation GetWaiterList takes two arguments, a
[[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]] =block=
and a nonnegative [[https://tc39.es/ecma262/#integer][integer]] =i=. It
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =block= is a
   [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]].
2. [[https://tc39.es/ecma262/#assert][Assert]]: =i= and =i= + 3 are
   valid byte offsets within the memory of =block=.
3. [[https://tc39.es/ecma262/#assert][Assert]]: =i= is divisible by 4.
4. Return the [[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]]
   that is referenced by the pair (=block=, =i=).

* 24.4.1.4EnterCriticalSection ( =WL= )
  :PROPERTIES:
  :CUSTOM_ID: entercriticalsection-wl
  :END:

The abstract operation EnterCriticalSection takes one argument, a
[[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]] =WL=. It
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The calling
   [[https://tc39.es/ecma262/#agent][agent]] is not in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   any [[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]].
2. Wait until no [[https://tc39.es/ecma262/#agent][agent]] is in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL=, then enter the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL= (without allowing any other
   [[https://tc39.es/ecma262/#agent][agent]] to enter).
3. If =WL= has a
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
   event]], then

   1. NOTE: A =WL= whose
      [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]]
      has been entered at least once has a
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
      event]] set by
      [[https://tc39.es/ecma262/#sec-leavecriticalsection][LeaveCriticalSection]].
   2. Let =execution= be the [[CandidateExecution]] field of the
      [[https://tc39.es/ecma262/#surrounding-agent][surrounding
      agent]]'s [[https://tc39.es/ecma262/#agent-record][Agent Record]].
   3. Let =eventsRecord= be the
      [[https://tc39.es/ecma262/#sec-agent-event-records][Agent Events
      Record]] in =execution=.[[EventsRecords]] whose [[AgentSignifier]]
      is
      [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
   4. Let =entererEventList= be =eventsRecord=.[[EventList]].
   5. Let =enterEvent= be a new
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
      event]].
   6. Append =enterEvent= to =entererEventList=.
   7. Let =leaveEvent= be the
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
      event]] in =WL=.
   8. Append (=leaveEvent=, =enterEvent=) to
      =eventsRecord=.[[AgentSynchronizesWith]].

EnterCriticalSection has contention when an
[[https://tc39.es/ecma262/#agent][agent]] attempting to enter the
[[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] must
wait for another [[https://tc39.es/ecma262/#agent][agent]] to leave it.
When there is no contention, FIFO order of EnterCriticalSection calls is
observable. When there is contention, an implementation may choose an
arbitrary order but may not cause an
[[https://tc39.es/ecma262/#agent][agent]] to wait indefinitely.

* 24.4.1.5LeaveCriticalSection ( =WL= )
  :PROPERTIES:
  :CUSTOM_ID: leavecriticalsection-wl
  :END:

The abstract operation LeaveCriticalSection takes one argument, a
[[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]] =WL=. It
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The calling
   [[https://tc39.es/ecma262/#agent][agent]] is in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL=.
2. Let =execution= be the [[CandidateExecution]] field of the calling
   surrounding's [[https://tc39.es/ecma262/#agent-record][Agent
   Record]].
3. Let =eventsRecord= be the
   [[https://tc39.es/ecma262/#sec-agent-event-records][Agent Events
   Record]] in =execution=.[[EventsRecords]] whose [[AgentSignifier]] is
   [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
4. Let =leaverEventList= be =eventsRecord=.[[EventList]].
5. Let =leaveEvent= be a new
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
   event]].
6. Append =leaveEvent= to =leaverEventList=.
7. Set the
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize
   event]] in =WL= to =leaveEvent=.
8. Leave the [[https://tc39.es/ecma262/#sec-getwaiterlist][critical
   section]] for =WL=.

* 24.4.1.6AddWaiter ( =WL=, =W= )
  :PROPERTIES:
  :CUSTOM_ID: addwaiter-wl-w
  :END:

The abstract operation AddWaiter takes two arguments, a
[[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]] =WL= and an
[[https://tc39.es/ecma262/#agent][agent]] signifier =W=. It performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The calling
   [[https://tc39.es/ecma262/#agent][agent]] is in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL=.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =W= is not on the list
   of waiters in any
   [[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]].
3. Add =W= to the end of the list of waiters in =WL=.

* 24.4.1.7RemoveWaiter ( =WL=, =W= )
  :PROPERTIES:
  :CUSTOM_ID: removewaiter-wl-w
  :END:

The abstract operation RemoveWaiter takes two arguments, a
[[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]] =WL= and an
[[https://tc39.es/ecma262/#agent][agent]] signifier =W=. It performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The calling
   [[https://tc39.es/ecma262/#agent][agent]] is in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL=.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =W= is on the list of
   waiters in =WL=.
3. Remove =W= from the list of waiters in =WL=.

* 24.4.1.8RemoveWaiters ( =WL=, =c= )
  :PROPERTIES:
  :CUSTOM_ID: removewaiters-wl-c
  :END:

The abstract operation RemoveWaiters takes two arguments, a
[[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]] =WL= and
nonnegative [[https://tc39.es/ecma262/#integer][integer]] =c=. It
performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The calling
   [[https://tc39.es/ecma262/#agent][agent]] is in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL=.
2. Let =L= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
3. Let =S= be a reference to the list of waiters in =WL=.
4. Repeat, while =c= > 0 and =S= is not an empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]],

   1. Let =W= be the first waiter in =S=.
   2. Add =W= to the end of =L=.
   3. Remove =W= from =S=.
   4. Set =c= to =c= - 1.

5. Return =L=.

* 24.4.1.9Suspend ( =WL=, =W=, =timeout= )
  :PROPERTIES:
  :CUSTOM_ID: suspend-wl-w-timeout
  :END:

The abstract operation Suspend takes three arguments, a
[[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]] =WL=, an
[[https://tc39.es/ecma262/#agent][agent]] signifier =W=, and a
nonnegative, non-NaN Number =timeout=. It performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The calling
   [[https://tc39.es/ecma262/#agent][agent]] is in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL=.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =W= is equal to
   [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
3. [[https://tc39.es/ecma262/#assert][Assert]]: =W= is on the list of
   waiters in =WL=.
4. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-agentcansuspend][AgentCanSuspend]]()
   is true.
5. Perform
   [[https://tc39.es/ecma262/#sec-leavecriticalsection][LeaveCriticalSection]](=WL=)
   and suspend =W= for up to =timeout= milliseconds, performing the
   combined operation in such a way that a notification that arrives
   after the [[https://tc39.es/ecma262/#sec-getwaiterlist][critical
   section]] is exited but before the suspension takes effect is not
   lost. =W= can notify either because the timeout expired or because it
   was notified explicitly by another
   [[https://tc39.es/ecma262/#agent][agent]] calling
   [[https://tc39.es/ecma262/#sec-notifywaiter][NotifyWaiter]](=WL=,
   =W=), and not for any other reasons at all.
6. Perform
   [[https://tc39.es/ecma262/#sec-entercriticalsection][EnterCriticalSection]](=WL=).
7. If =W= was notified explicitly by another
   [[https://tc39.es/ecma262/#agent][agent]] calling
   [[https://tc39.es/ecma262/#sec-notifywaiter][NotifyWaiter]](=WL=,
   =W=), return true.
8. Return false.

* 24.4.1.10NotifyWaiter ( =WL=, =W= )
  :PROPERTIES:
  :CUSTOM_ID: notifywaiter-wl-w
  :END:

The abstract operation NotifyWaiter takes two arguments, a
[[https://tc39.es/ecma262/#sec-getwaiterlist][WaiterList]] =WL= and an
[[https://tc39.es/ecma262/#agent][agent]] signifier =W=. It performs the
following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The calling
   [[https://tc39.es/ecma262/#agent][agent]] is in the
   [[https://tc39.es/ecma262/#sec-getwaiterlist][critical section]] for
   =WL=.
2. Notify the [[https://tc39.es/ecma262/#agent][agent]] =W=.

Note

The embedding may delay notifying =W=, e.g. for resource management
reasons, but =W= must eventually be notified in order to guarantee
forward progress.

* 24.4.1.11AtomicReadModifyWrite ( =typedArray=, =index=, =value=, =op=
)
  :PROPERTIES:
  :CUSTOM_ID: atomicreadmodifywrite-typedarray-index-value-op
  :END:

The abstract operation AtomicReadModifyWrite takes four arguments,
=typedArray=, =index=, =value=, and a pure combining operation =op=. The
pure combining operation =op= takes two
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments and returns a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values. The operation atomically loads a value, combines it with
another value, and stores the result of the combination. It returns the
loaded value. It performs the following steps:

1.  Let =buffer= be
    ? [[https://tc39.es/ecma262/#sec-validatesharedintegertypedarray][ValidateSharedIntegerTypedArray]](=typedArray=).
2.  Let =i= be
    ? [[https://tc39.es/ecma262/#sec-validateatomicaccess][ValidateAtomicAccess]](=typedArray=,
    =index=).
3.  Let =arrayTypeName= be =typedArray=.[[TypedArrayName]].
4.  If =typedArray=.[[ContentType]] is BigInt, let =v= be
    ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=value=).
5.  Otherwise, let =v= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=value=).
6.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
7.  Let =elementType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
8.  Let =offset= be =typedArray=.[[ByteOffset]].
9.  Let =indexedPosition= be (=i= × =elementSize=) + =offset=.
10. Return
    [[https://tc39.es/ecma262/#sec-getmodifysetvalueinbuffer][GetModifySetValueInBuffer]](=buffer=,
    =indexedPosition=, =elementType=, =v=, =op=).

* 24.4.1.12AtomicLoad ( =typedArray=, =index= )
  :PROPERTIES:
  :CUSTOM_ID: atomicload-typedarray-index
  :END:

The abstract operation AtomicLoad takes two arguments, =typedArray=,
=index=. The operation atomically loads a value and returns the loaded
value. It performs the following steps:

1. Let =buffer= be
   ? [[https://tc39.es/ecma262/#sec-validatesharedintegertypedarray][ValidateSharedIntegerTypedArray]](=typedArray=).
2. Let =i= be
   ? [[https://tc39.es/ecma262/#sec-validateatomicaccess][ValidateAtomicAccess]](=typedArray=,
   =index=).
3. Let =arrayTypeName= be =typedArray=.[[TypedArrayName]].
4. Let =elementSize= be the Element Size value specified in
   [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
   62]] for =arrayTypeName=.
5. Let =elementType= be the Element Type value in
   [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
   62]] for =arrayTypeName=.
6. Let =offset= be =typedArray=.[[ByteOffset]].
7. Let =indexedPosition= be (=i= × =elementSize=) + =offset=.
8. Return
   [[https://tc39.es/ecma262/#sec-getvaluefrombuffer][GetValueFromBuffer]](=buffer=,
   =indexedPosition=, =elementType=, true, SeqCst).

* 24.4.2Atomics.add ( =typedArray=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.add-typedarray-index-value
  :END:

Let =add= denote a semantic function of two
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments that applies the addition operation to the
Number values corresponding to the
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments and returns a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values corresponding to the result of that operation.

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-atomicreadmodifywrite][AtomicReadModifyWrite]](=typedArray=,
   =index=, =value=, =add=).

* 24.4.3Atomics.and ( =typedArray=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.and-typedarray-index-value
  :END:

Let =and= denote a semantic function of two
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments that applies the bitwise-and operation
element-wise to the two arguments and returns a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values corresponding to the result of that operation.

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-atomicreadmodifywrite][AtomicReadModifyWrite]](=typedArray=,
   =index=, =value=, =and=).

* 24.4.4Atomics.compareExchange ( =typedArray=, =index=,
=expectedValue=, =replacementValue= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.compareexchange-typedarray-index-expectedvalue-replacementvalue
  :END:

The following steps are taken:

1.  Let =buffer= be
    ? [[https://tc39.es/ecma262/#sec-validatesharedintegertypedarray][ValidateSharedIntegerTypedArray]](=typedArray=).
2.  Let =i= be
    ? [[https://tc39.es/ecma262/#sec-validateatomicaccess][ValidateAtomicAccess]](=typedArray=,
    =index=).
3.  Let =arrayTypeName= be =typedArray=.[[TypedArrayName]].
4.  If =typedArray=.[[ContentType]] is BigInt, then

    1. Let =expected= be
       ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=expectedValue=).
    2. Let =replacement= be
       ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=replacementValue=).

5.  Else,

    1. Let =expected= be
       ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=expectedValue=).
    2. Let =replacement= be
       ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=replacementValue=).

6.  Let =elementType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
7.  Let =isLittleEndian= be the value of the [[LittleEndian]] field of
    the [[https://tc39.es/ecma262/#surrounding-agent][surrounding
    agent]]'s [[https://tc39.es/ecma262/#agent-record][Agent Record]].
8.  Let =expectedBytes= be
    [[https://tc39.es/ecma262/#sec-numerictorawbytes][NumericToRawBytes]](=elementType=,
    =expected=, =isLittleEndian=).
9.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
10. Let =offset= be =typedArray=.[[ByteOffset]].
11. Let =indexedPosition= be (=i= × =elementSize=) + =offset=.
12. Let =compareExchange= denote a semantic function of two
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
    of byte values arguments that returns the second argument if the
    first argument is element-wise equal to =expectedBytes=.
13. Return
    [[https://tc39.es/ecma262/#sec-getmodifysetvalueinbuffer][GetModifySetValueInBuffer]](=buffer=,
    =indexedPosition=, =elementType=, =replacement=, =compareExchange=).

* 24.4.5Atomics.exchange ( =typedArray=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.exchange-typedarray-index-value
  :END:

Let =second= denote a semantic function of two
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments that returns its second argument.

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-atomicreadmodifywrite][AtomicReadModifyWrite]](=typedArray=,
   =index=, =value=, =second=).

* 24.4.6Atomics.isLockFree ( =size= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.islockfree-size
  :END:

The following steps are taken:

1. Let =n= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=size=).
2. Let =AR= be the [[https://tc39.es/ecma262/#agent-record][Agent
   Record]] of the
   [[https://tc39.es/ecma262/#surrounding-agent][surrounding agent]].
3. If =n= equals 1, return =AR=.[[IsLockFree1]].
4. If =n= equals 2, return =AR=.[[IsLockFree2]].
5. If =n= equals 4, return true.
6. If =n= equals 8, return =AR=.[[IsLockFree8]].
7. Return false.

Note

=Atomics.isLockFree=() is an optimization primitive. The intuition is
that if the atomic step of an atomic primitive (=compareExchange=,
=load=, =store=, =add=, =sub=, =and=, =or=, =xor=, or =exchange=) on a
datum of size =n= bytes will be performed without the calling
[[https://tc39.es/ecma262/#agent][agent]] acquiring a lock outside the
=n= bytes comprising the datum, then =Atomics.isLockFree=(=n=) will
return true. High-performance algorithms will use =Atomics.isLockFree=
to determine whether to use locks or atomic operations in critical
sections. If an atomic primitive is not lock-free then it is often more
efficient for an algorithm to provide its own locking.

=Atomics.isLockFree=(4) always returns true as that can be supported on
all known relevant hardware. Being able to assume this will generally
simplify programs.

Regardless of the value of =Atomics.isLockFree=, all atomic operations
are guaranteed to be atomic. For example, they will never have a visible
operation take place in the middle of the operation (e.g., "tearing").

* 24.4.7Atomics.load ( =typedArray=, =index= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.load-typedarray-index
  :END:

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-atomicload][AtomicLoad]](=typedArray=,
   =index=).

* 24.4.8Atomics.or ( =typedArray=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.or-typedarray-index-value
  :END:

Let =or= denote a semantic function of two
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments that applies the bitwise-or operation
element-wise to the two arguments and returns a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values corresponding to the result of that operation.

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-atomicreadmodifywrite][AtomicReadModifyWrite]](=typedArray=,
   =index=, =value=, =or=).

* 24.4.9Atomics.store ( =typedArray=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.store-typedarray-index-value
  :END:

The following steps are taken:

1.  Let =buffer= be
    ? [[https://tc39.es/ecma262/#sec-validatesharedintegertypedarray][ValidateSharedIntegerTypedArray]](=typedArray=).
2.  Let =i= be
    ? [[https://tc39.es/ecma262/#sec-validateatomicaccess][ValidateAtomicAccess]](=typedArray=,
    =index=).
3.  Let =arrayTypeName= be =typedArray=.[[TypedArrayName]].
4.  If =arrayTypeName= is "BigUint64Array" or "BigInt64Array", let =v=
    be ? [[https://tc39.es/ecma262/#sec-tobigint][ToBigInt]](=value=).
5.  Otherwise, let =v= be
    ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=value=).
6.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
7.  Let =elementType= be the Element Type value in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
8.  Let =offset= be =typedArray=.[[ByteOffset]].
9.  Let =indexedPosition= be (=i= × =elementSize=) + =offset=.
10. Perform
    [[https://tc39.es/ecma262/#sec-setvalueinbuffer][SetValueInBuffer]](=buffer=,
    =indexedPosition=, =elementType=, =v=, true, SeqCst).
11. Return =v=.

* 24.4.10Atomics.sub ( =typedArray=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.sub-typedarray-index-value
  :END:

Let =subtract= denote a semantic function of two
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments that applies the subtraction operation to the
Number values corresponding to the
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments and returns a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values corresponding to the result of that operation.

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-atomicreadmodifywrite][AtomicReadModifyWrite]](=typedArray=,
   =index=, =value=, =subtract=).

* 24.4.11Atomics.wait ( =typedArray=, =index=, =value=, =timeout= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.wait-typedarray-index-value-timeout
  :END:

=Atomics.wait= puts the calling
[[https://tc39.es/ecma262/#agent][agent]] in a wait queue and puts it to
sleep until it is notified or the sleep times out. The following steps
are taken:

1.  Let =buffer= be
    ? [[https://tc39.es/ecma262/#sec-validatesharedintegertypedarray][ValidateSharedIntegerTypedArray]](=typedArray=,
    true).
2.  Let =i= be
    ? [[https://tc39.es/ecma262/#sec-validateatomicaccess][ValidateAtomicAccess]](=typedArray=,
    =index=).
3.  Let =arrayTypeName= be =typedArray=.[[TypedArrayName]].
4.  If =arrayTypeName= is "BigInt64Array", let =v= be
    ? [[https://tc39.es/ecma262/#sec-tobigint64][ToBigInt64]](=value=).
5.  Otherwise, let =v= be
    ? [[https://tc39.es/ecma262/#sec-toint32][ToInt32]](=value=).
6.  Let =q= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=timeout=).
7.  If =q= is NaN, let =t= be +∞; else let =t= be
    [[https://tc39.es/ecma262/#eqn-max][max]](=q=, 0).
8.  Let =B= be
    [[https://tc39.es/ecma262/#sec-agentcansuspend][AgentCanSuspend]]().
9.  If =B= is false, throw a TypeError exception.
10. Let =block= be =buffer=.[[ArrayBufferData]].
11. Let =offset= be =typedArray=.[[ByteOffset]].
12. Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
13. Let =indexedPosition= be (=i= × =elementSize=) + =offset=.
14. Let =WL= be
    [[https://tc39.es/ecma262/#sec-getwaiterlist][GetWaiterList]](=block=,
    =indexedPosition=).
15. Perform
    [[https://tc39.es/ecma262/#sec-entercriticalsection][EnterCriticalSection]](=WL=).
16. Let =w= be
    ! [[https://tc39.es/ecma262/#sec-atomicload][AtomicLoad]](=typedArray=,
    =i=).
17. If =v= is not equal to =w=, then

    1. Perform
       [[https://tc39.es/ecma262/#sec-leavecriticalsection][LeaveCriticalSection]](=WL=).
    2. Return the String "not-equal".

18. Let =W= be
    [[https://tc39.es/ecma262/#sec-agentsignifier][AgentSignifier]]().
19. Perform [[https://tc39.es/ecma262/#sec-addwaiter][AddWaiter]](=WL=,
    =W=).
20. Let =notified= be
    [[https://tc39.es/ecma262/#sec-suspend][Suspend]](=WL=, =W=, =t=).
21. If =notified= is true, then

    1. [[https://tc39.es/ecma262/#assert][Assert]]: =W= is not on the
       list of waiters in =WL=.

22. Else,

    1. Perform
       [[https://tc39.es/ecma262/#sec-removewaiter][RemoveWaiter]](=WL=,
       =W=).

23. Perform
    [[https://tc39.es/ecma262/#sec-leavecriticalsection][LeaveCriticalSection]](=WL=).
24. If =notified= is true, return the String "ok".
25. Return the String "timed-out".

* 24.4.12Atomics.notify ( =typedArray=, =index=, =count= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.notify-typedarray-index-count
  :END:

=Atomics.notify= notifies some agents that are sleeping in the wait
queue. The following steps are taken:

1.  Let =buffer= be
    ? [[https://tc39.es/ecma262/#sec-validatesharedintegertypedarray][ValidateSharedIntegerTypedArray]](=typedArray=,
    true).
2.  Let =i= be
    ? [[https://tc39.es/ecma262/#sec-validateatomicaccess][ValidateAtomicAccess]](=typedArray=,
    =index=).
3.  If =count= is undefined, let =c= be +∞.
4.  Else,

    1. Let =intCount= be
       ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=count=).
    2. Let =c= be [[https://tc39.es/ecma262/#eqn-max][max]](=intCount=,
       0).

5.  Let =block= be =buffer=.[[ArrayBufferData]].
6.  Let =offset= be =typedArray=.[[ByteOffset]].
7.  Let =arrayTypeName= be =typedArray=.[[TypedArrayName]].
8.  Let =elementSize= be the Element Size value specified in
    [[https://tc39.es/ecma262/#table-the-typedarray-constructors][Table
    62]] for =arrayTypeName=.
9.  Let =indexedPosition= be (=i= × =elementSize=) + =offset=.
10. Let =WL= be
    [[https://tc39.es/ecma262/#sec-getwaiterlist][GetWaiterList]](=block=,
    =indexedPosition=).
11. Let =n= be 0.
12. Perform
    [[https://tc39.es/ecma262/#sec-entercriticalsection][EnterCriticalSection]](=WL=).
13. Let =S= be
    [[https://tc39.es/ecma262/#sec-removewaiters][RemoveWaiters]](=WL=,
    =c=).
14. Repeat, while =S= is not an empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]],

    1. Let =W= be the first [[https://tc39.es/ecma262/#agent][agent]] in
       =S=.
    2. Remove =W= from the front of =S=.
    3. Perform
       [[https://tc39.es/ecma262/#sec-notifywaiter][NotifyWaiter]](=WL=,
       =W=).
    4. Set =n= to =n= + 1.

15. Perform
    [[https://tc39.es/ecma262/#sec-leavecriticalsection][LeaveCriticalSection]](=WL=).
16. Return =n=.

* 24.4.13Atomics.xor ( =typedArray=, =index=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: atomics.xor-typedarray-index-value
  :END:

Let =xor= denote a semantic function of two
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values arguments that applies the bitwise-xor operation
element-wise to the two arguments and returns a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values corresponding to the result of that operation.

The following steps are taken:

1. Return
   ? [[https://tc39.es/ecma262/#sec-atomicreadmodifywrite][AtomicReadModifyWrite]](=typedArray=,
   =index=, =value=, =xor=).

* 24.4.14Atomics [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: atomics-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Atomics".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 24.5The JSON Object
  :PROPERTIES:
  :CUSTOM_ID: the-json-object
  :END:

The JSON object:

- is the intrinsic object %JSON%.
- is the initial value of the "JSON" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- is an ordinary object.
- contains two functions, =parse= and =stringify=, that are used to
  parse and construct JSON texts.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- does not have a [[Construct]] internal method; it cannot be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]] with the =new=
  operator.
- does not have a [[Call]] internal method; it cannot be invoked as a
  function.

The JSON Data Interchange Format is defined in ECMA-404. The JSON
interchange format used in this specification is exactly that described
by ECMA-404. Conforming implementations of =JSON.parse= and
=JSON.stringify= must support the exact interchange format described in
the ECMA-404 specification without any deletions or extensions to the
format.

* 24.5.1JSON.parse ( =text= [ , =reviver= ] )
  :PROPERTIES:
  :CUSTOM_ID: json.parse-text-reviver
  :END:

The =parse= function parses a JSON text (a JSON-formatted String) and
produces an ECMAScript value. The JSON format represents literals,
arrays, and objects with a syntax similar to the syntax for ECMAScript
literals, Array Initializers, and Object Initializers. After parsing,
JSON objects are realized as ECMAScript objects. JSON arrays are
realized as ECMAScript Array instances. JSON strings, numbers, booleans,
and null are realized as ECMAScript Strings, Numbers, Booleans, and
null.

The optional =reviver= parameter is a function that takes two
parameters, =key= and =value=. It can filter and transform the results.
It is called with each of the =key=/=value= pairs produced by the parse,
and its return value is used instead of the original value. If it
returns what it received, the structure is not modified. If it returns
undefined then the property is deleted from the result.

1. Let =JText= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=text=).
2. Parse =JText= interpreted as UTF-16 encoded Unicode points
   ([[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]])
   as a JSON text as specified in ECMA-404. Throw a SyntaxError
   exception if =JText= is not a valid JSON text as defined in that
   specification.
3. Let =scriptText= be the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of "(", =JText=, and ");".
4. Let =completion= be the result of parsing and evaluating =scriptText=
   as if it was the source text of an ECMAScript
   [[https://tc39.es/ecma262/#prod-Script][Script]]. The extended
   PropertyDefinitionEvaluation semantics defined in
   [[https://tc39.es/ecma262/#sec-__proto__-property-names-in-object-initializers][B.3.1]]
   must not be used during the evaluation.
5. Let =unfiltered= be =completion=.[[Value]].
6. [[https://tc39.es/ecma262/#assert][Assert]]: =unfiltered= is either a
   String, Number, Boolean, Null, or an Object that is defined by either
   an [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]] or an
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]].
7. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=reviver=)
   is true, then

   1. Let =root= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
   2. Let =rootName= be the empty String.
   3. Perform
      ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=root=,
      =rootName=, =unfiltered=).
   4. Return
      ? [[https://tc39.es/ecma262/#sec-internalizejsonproperty][InternalizeJSONProperty]](=root=,
      =rootName=).

8. Else,

   1. Return =unfiltered=.

This function is the %JSONParse% intrinsic object.

The "length" property of the =parse= function is 2.

Note

Valid JSON text is a subset of the ECMAScript
[[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]
syntax as modified by Step 4 above. Step 2 verifies that =JText=
conforms to that subset, and step 6 verifies that that parsing and
evaluation returns a value of an appropriate type.

* 24.5.1.1Runtime Semantics: InternalizeJSONProperty ( =holder=, =name=
)
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-internalizejsonproperty-holder-name
  :END:

The abstract operation InternalizeJSONProperty is a recursive abstract
operation that takes two parameters: a =holder= object and the String
=name= of a property in that object. InternalizeJSONProperty uses the
value of =reviver= that was originally passed to the above parse
function.

Note 1

This algorithm intentionally does not throw an exception if either
[[Delete]] or
[[https://tc39.es/ecma262/#sec-createdataproperty][CreateDataProperty]]
return false.

1. Let =val= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=holder=, =name=).
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=val=)
   is Object, then

   1. Let =isArray= be
      ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=val=).
   2. If =isArray= is true, then

      1. Let =I= be 0.
      2. Let =len= be
         ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=val=).
      3. Repeat, while =I= < =len=,

         1. Let =newElement= be
            ? [[https://tc39.es/ecma262/#sec-internalizejsonproperty][InternalizeJSONProperty]](=val=,
            ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=I=)).
         2. If =newElement= is undefined, then

            1. Perform ? =val=.[[Delete]](!
               [[https://tc39.es/ecma262/#sec-tostring][ToString]](=I=)).

         3. Else,

            1. Perform
               ? [[https://tc39.es/ecma262/#sec-createdataproperty][CreateDataProperty]](=val=,
               ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=I=),
               =newElement=).
            2. NOTE: This algorithm intentionally does not throw an
               exception if
               [[https://tc39.es/ecma262/#sec-createdataproperty][CreateDataProperty]]
               returns false.

         4. Set =I= to =I= + 1.

   3. Else,

      1. Let =keys= be
         ? [[https://tc39.es/ecma262/#sec-enumerableownpropertynames][EnumerableOwnPropertyNames]](=val=,
         key).
      2. For each String =P= in =keys=, do

         1. Let =newElement= be
            ? [[https://tc39.es/ecma262/#sec-internalizejsonproperty][InternalizeJSONProperty]](=val=,
            =P=).
         2. If =newElement= is undefined, then

            1. Perform ? =val=.[[Delete]](=P=).

         3. Else,

            1. Perform
               ? [[https://tc39.es/ecma262/#sec-createdataproperty][CreateDataProperty]](=val=,
               =P=, =newElement=).

3. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=reviver=,
   =holder=, « =name=, =val= »).

It is not permitted for a conforming implementation of =JSON.parse= to
extend the JSON grammars. If an implementation wishes to support a
modified or extended JSON interchange format it must do so by defining a
different parse function.

Note 2

In the case where there are duplicate name Strings within an object,
lexically preceding values for the same key shall be overwritten.

* 24.5.2JSON.stringify ( =value= [ , =replacer= [ , =space= ] ] )
  :PROPERTIES:
  :CUSTOM_ID: json.stringify-value-replacer-space
  :END:

The =stringify= function returns a String in UTF-16 encoded JSON format
representing an ECMAScript value, or undefined. It can take three
parameters. The =value= parameter is an ECMAScript value, which is
usually an object or array, although it can also be a String, Boolean,
Number or null. The optional =replacer= parameter is either a function
that alters the way objects and arrays are stringified, or an array of
Strings and Numbers that acts as an inclusion list for selecting the
object properties that will be stringified. The optional =space=
parameter is a String or Number that allows the result to have white
space injected into it to improve human readability.

These are the steps in stringifying an object:

1.  Let =stack= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
2.  Let =indent= be the empty String.
3.  Let =PropertyList= and =ReplacerFunction= be undefined.
4.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=replacer=)
    is Object, then

    1. If
       [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=replacer=)
       is true, then

       1. Set =ReplacerFunction= to =replacer=.

    2. Else,

       1. Let =isArray= be
          ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=replacer=).
       2. If =isArray= is true, then

          1. Set =PropertyList= to a new empty
             [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
          2. Let =len= be
             ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=replacer=).
          3. Let =k= be 0.
          4. Repeat, while =k= < =len=,

             1. Let =v= be
                ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=replacer=,
                ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=k=)).
             2. Let =item= be undefined.
             3. If
                [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=v=)
                is String, set =item= to =v=.
             4. Else if
                [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=v=)
                is Number, set =item= to
                ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=v=).
             5. Else if
                [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=v=)
                is Object, then

                1. If =v= has a [[StringData]] or [[NumberData]]
                   internal slot, set =item= to
                   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=v=).

             6. If =item= is not undefined and =item= is not currently
                an element of =PropertyList=, then

                1. Append =item= to the end of =PropertyList=.

             7. Set =k= to =k= + 1.

5.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=space=)
    is Object, then

    1. If =space= has a [[NumberData]] internal slot, then

       1. Set =space= to
          ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=space=).

    2. Else if =space= has a [[StringData]] internal slot, then

       1. Set =space= to
          ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=space=).

6.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=space=)
    is Number, then

    1. Set =space= to [[https://tc39.es/ecma262/#eqn-min][min]](10,
       ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=space=)).
    2. If =space= < 1, let =gap= be the empty String; otherwise let
       =gap= be the String value containing =space= occurrences of the
       code unit 0x0020 (SPACE).

7.  Else if
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=space=)
    is String, then

    1. If the length of =space= is 10 or less, let =gap= be =space=;
       otherwise let =gap= be the String value consisting of the first
       10 code units of =space=.

8.  Else,

    1. Let =gap= be the empty String.

9.  Let =wrapper= be
    [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
10. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=wrapper=,
    the empty String, =value=).
11. Return
    ? [[https://tc39.es/ecma262/#sec-serializejsonproperty][SerializeJSONProperty]](the
    empty String, =wrapper=).

This function is the %JSONStringify% intrinsic object.

The "length" property of the =stringify= function is 3.

Note 1

JSON structures are allowed to be nested to any depth, but they must be
acyclic. If =value= is or contains a cyclic structure, then the
stringify function must throw a TypeError exception. This is an example
of a value that cannot be stringified:

#+BEGIN_EXAMPLE
  a = [];
  a[0] = a;
  my_text = JSON.stringify(a); // This must throw a TypeError.
#+END_EXAMPLE

Note 2

Symbolic primitive values are rendered as follows:

- The null value is rendered in JSON text as the String "null".
- The undefined value is not rendered.
- The true value is rendered in JSON text as the String "true".
- The false value is rendered in JSON text as the String "false".

Note 3

String values are wrapped in QUOTATION MARK (="=) code units. The code
units ="= and =\= are escaped with =\= prefixes. Control characters code
units are replaced with escape sequences =\u=HHHH, or with the shorter
forms, =\b= (BACKSPACE), =\f= (FORM FEED), =\n= (LINE FEED), =\r=
(CARRIAGE RETURN), =\t= (CHARACTER TABULATION).

Note 4

Finite numbers are stringified as if by calling
[[https://tc39.es/ecma262/#sec-tostring][ToString]](=number=). NaN and
Infinity regardless of sign are represented as the String "null".

Note 5

Values that do not have a JSON representation (such as undefined and
functions) do not produce a String. Instead they produce the undefined
value. In arrays these values are represented as the String "null". In
objects an unrepresentable value causes the property to be excluded from
stringification.

Note 6

An object is rendered as U+007B (LEFT CURLY BRACKET) followed by zero or
more properties, separated with a U+002C (COMMA), closed with a U+007D
(RIGHT CURLY BRACKET). A property is a quoted String representing the
key or [[https://tc39.es/ecma262/#property-name][property name]], a
U+003A (COLON), and then the stringified property value. An array is
rendered as an opening U+005B (LEFT SQUARE BRACKET followed by zero or
more values, separated with a U+002C (COMMA), closed with a U+005D
(RIGHT SQUARE BRACKET).

* 24.5.2.1Runtime Semantics: SerializeJSONProperty ( =key=, =holder= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-serializejsonproperty-key-holder
  :END:

The abstract operation SerializeJSONProperty with arguments =key=, and
=holder= has access to =ReplacerFunction= from the invocation of the
=stringify= method. Its algorithm is as follows:

1.  Let =value= be
    ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=holder=, =key=).
2.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is Object or BigInt, then

    1. Let =toJSON= be
       ? [[https://tc39.es/ecma262/#sec-getv][GetV]](=value=, "toJSON").
    2. If
       [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=toJSON=)
       is true, then

       1. Set =value= to
          ? [[https://tc39.es/ecma262/#sec-call][Call]](=toJSON=,
          =value=, « =key= »).

3.  If =ReplacerFunction= is not undefined, then

    1. Set =value= to
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=ReplacerFunction=,
       =holder=, « =key=, =value= »).

4.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is Object, then

    1. If =value= has a [[NumberData]] internal slot, then

       1. Set =value= to
          ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=value=).

    2. Else if =value= has a [[StringData]] internal slot, then

       1. Set =value= to
          ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=value=).

    3. Else if =value= has a [[BooleanData]] internal slot, then

       1. Set =value= to =value=.[[BooleanData]].

    4. Else if =value= has a [[BigIntData]] internal slot, then

       1. Set =value= to =value=.[[BigIntData]].

5.  If =value= is null, return "null".
6.  If =value= is true, return "true".
7.  If =value= is false, return "false".
8.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is String, return
    [[https://tc39.es/ecma262/#sec-quotejsonstring][QuoteJSONString]](=value=).
9.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is Number, then

    1. If =value= is finite, return
       ! [[https://tc39.es/ecma262/#sec-tostring][ToString]](=value=).
    2. Return "null".

10. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is BigInt, throw a TypeError exception.
11. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=value=)
    is Object and
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=value=) is
    false, then

    1. Let =isArray= be
       ? [[https://tc39.es/ecma262/#sec-isarray][IsArray]](=value=).
    2. If =isArray= is true, return
       ? [[https://tc39.es/ecma262/#sec-serializejsonarray][SerializeJSONArray]](=value=).
    3. Return
       ? [[https://tc39.es/ecma262/#sec-serializejsonobject][SerializeJSONObject]](=value=).

12. Return undefined.

* 24.5.2.2Runtime Semantics: QuoteJSONString ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-quotejsonstring-value
  :END:

The abstract operation QuoteJSONString with argument =value= wraps a
String value in QUOTATION MARK code units and escapes certain other code
units within it.

This operation interprets a String value as a sequence of UTF-16 encoded
code points, as described in
[[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].

1. Let =product= be the String value consisting solely of the code unit
   0x0022 (QUOTATION MARK).
2. Let =cpList= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   containing in order the code points of =value= when interpreted as a
   sequence of UTF-16 encoded code points as described in
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][6.1.4]].
3. For each code point =C= in =cpList=, do

   1. If =C= is listed in the “Code Point” column of
      [[https://tc39.es/ecma262/#table-json-single-character-escapes][Table
      65]], then

      1. Set =product= to the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of =product= and the escape sequence for =C= as specified in
         the “Escape Sequence” column of the corresponding row.

   2. Else if =C= has a numeric value less than 0x0020 (SPACE), or if
      =C= has the same numeric value as a
      [[https://tc39.es/ecma262/#leading-surrogate][leading surrogate]]
      or [[https://tc39.es/ecma262/#trailing-surrogate][trailing
      surrogate]], then

      1. Let =unit= be the code unit whose numeric value is that of =C=.
      2. Set =product= to the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of =product= and
         [[https://tc39.es/ecma262/#sec-unicodeescape][UnicodeEscape]](=unit=).

   3. Else,

      1. Set =product= to the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of =product= and the
         [[https://tc39.es/ecma262/#sec-utf16encoding][UTF16Encoding]]
         of =C=.

4. Set =product= to the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =product= and the code unit 0x0022 (QUOTATION MARK).
5. Return =product=.

Table 65: JSON Single Character Escape Sequences

| Code Point   | Unicode Character Name   | Escape Sequence   |
|--------------+--------------------------+-------------------|
| U+0008       | BACKSPACE                | =\b=              |
| U+0009       | CHARACTER TABULATION     | =\t=              |
| U+000A       | LINE FEED (LF)           | =\n=              |
| U+000C       | FORM FEED (FF)           | =\f=              |
| U+000D       | CARRIAGE RETURN (CR)     | =\r=              |
| U+0022       | QUOTATION MARK           | =\"=              |
| U+005C       | REVERSE SOLIDUS          | =\\=              |

* 24.5.2.3Runtime Semantics: UnicodeEscape ( =C= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-unicodeescape-c
  :END:

The abstract operation UnicodeEscape takes a code unit argument =C= and
represents it as a Unicode escape sequence.

1. Let =n= be the numeric value of =C=.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =n= ≤ 0xFFFF.
3. Return the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of:

   - the code unit 0x005C (REVERSE SOLIDUS)
   - "u"
   - the String representation of =n=, formatted as a four-digit
     lowercase hexadecimal number, padded to the left with zeroes if
     necessary

* 24.5.2.4Runtime Semantics: SerializeJSONObject ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-serializejsonobject-value
  :END:

The abstract operation SerializeJSONObject with argument =value=
serializes an object. It has access to the =stack=, =indent=, =gap=, and
=PropertyList= values of the current invocation of the =stringify=
method.

1.  If =stack= contains =value=, throw a TypeError exception because the
    structure is cyclical.
2.  Append =value= to =stack=.
3.  Let =stepback= be =indent=.
4.  Set =indent= to the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =indent= and =gap=.
5.  If =PropertyList= is not undefined, then

    1. Let =K= be =PropertyList=.

6.  Else,

    1. Let =K= be
       ? [[https://tc39.es/ecma262/#sec-enumerableownpropertynames][EnumerableOwnPropertyNames]](=value=,
       key).

7.  Let =partial= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
8.  For each element =P= of =K=, do

    1. Let =strP= be
       ? [[https://tc39.es/ecma262/#sec-serializejsonproperty][SerializeJSONProperty]](=P=,
       =value=).
    2. If =strP= is not undefined, then

       1. Let =member= be
          [[https://tc39.es/ecma262/#sec-quotejsonstring][QuoteJSONString]](=P=).
       2. Set =member= to the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of =member= and ":".
       3. If =gap= is not the empty String, then

          1. Set =member= to the
             [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
             of =member= and the code unit 0x0020 (SPACE).

       4. Set =member= to the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of =member= and =strP=.
       5. Append =member= to =partial=.

9.  If =partial= is empty, then

    1. Let =final= be "{}".

10. Else,

    1. If =gap= is the empty String, then

       1. Let =properties= be the String value formed by concatenating
          all the element Strings of =partial= with each adjacent pair
          of Strings separated with the code unit 0x002C (COMMA). A
          comma is not inserted either before the first String or after
          the last String.
       2. Let =final= be the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of "{", =properties=, and "}".

    2. Else,

       1. Let =separator= be the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of the code unit 0x002C (COMMA), the code unit 0x000A (LINE
          FEED), and =indent=.
       2. Let =properties= be the String value formed by concatenating
          all the element Strings of =partial= with each adjacent pair
          of Strings separated with =separator=. The =separator= String
          is not inserted either before the first String or after the
          last String.
       3. Let =final= be the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of "{", the code unit 0x000A (LINE FEED), =indent=,
          =properties=, the code unit 0x000A (LINE FEED), =stepback=,
          and "}".

11. Remove the last element of =stack=.
12. Set =indent= to =stepback=.
13. Return =final=.

* 24.5.2.5Runtime Semantics: SerializeJSONArray ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-serializejsonarray-value
  :END:

The abstract operation SerializeJSONArray with argument =value=
serializes an array. It has access to the =stack=, =indent=, and =gap=
values of the current invocation of the =stringify= method.

1.  If =stack= contains =value=, throw a TypeError exception because the
    structure is cyclical.
2.  Append =value= to =stack=.
3.  Let =stepback= be =indent=.
4.  Set =indent= to the
    [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
    of =indent= and =gap=.
5.  Let =partial= be a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
6.  Let =len= be
    ? [[https://tc39.es/ecma262/#sec-lengthofarraylike][LengthOfArrayLike]](=value=).
7.  Let =index= be 0.
8.  Repeat, while =index= < =len=

    1. Let =strP= be
       ? [[https://tc39.es/ecma262/#sec-serializejsonproperty][SerializeJSONProperty]](!
       [[https://tc39.es/ecma262/#sec-tostring][ToString]](=index=),
       =value=).
    2. If =strP= is undefined, then

       1. Append "null" to =partial=.

    3. Else,

       1. Append =strP= to =partial=.

    4. Set =index= to =index= + 1.

9.  If =partial= is empty, then

    1. Let =final= be "[]".

10. Else,

    1. If =gap= is the empty String, then

       1. Let =properties= be the String value formed by concatenating
          all the element Strings of =partial= with each adjacent pair
          of Strings separated with the code unit 0x002C (COMMA). A
          comma is not inserted either before the first String or after
          the last String.
       2. Let =final= be the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of "[", =properties=, and "]".

    2. Else,

       1. Let =separator= be the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of the code unit 0x002C (COMMA), the code unit 0x000A (LINE
          FEED), and =indent=.
       2. Let =properties= be the String value formed by concatenating
          all the element Strings of =partial= with each adjacent pair
          of Strings separated with =separator=. The =separator= String
          is not inserted either before the first String or after the
          last String.
       3. Let =final= be the
          [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
          of "[", the code unit 0x000A (LINE FEED), =indent=,
          =properties=, the code unit 0x000A (LINE FEED), =stepback=,
          and "]".

11. Remove the last element of =stack=.
12. Set =indent= to =stepback=.
13. Return =final=.

Note

The representation of arrays includes only the elements between zero and
=array.length= - 1 inclusive. Properties whose keys are not
[[https://tc39.es/ecma262/#array-index][array indexes]] are excluded
from the stringification. An array is stringified as an opening LEFT
SQUARE BRACKET, elements separated by COMMA, and a closing RIGHT SQUARE
BRACKET.

* 24.5.3JSON [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: json-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"JSON".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25Control Abstraction Objects
  :PROPERTIES:
  :CUSTOM_ID: control-abstraction-objects
  :END:

* 25.1Iteration
  :PROPERTIES:
  :CUSTOM_ID: iteration
  :END:

* 25.1.1Common Iteration Interfaces
  :PROPERTIES:
  :CUSTOM_ID: common-iteration-interfaces
  :END:

An interface is a set of property keys whose associated values match a
specific specification. Any object that provides all the properties as
described by an interface's specification /conforms/ to that interface.
An interface is not represented by a distinct object. There may be many
separately implemented objects that conform to any interface. An
individual object may conform to multiple interfaces.

* 25.1.1.1The /Iterable/ Interface
  :PROPERTIES:
  :CUSTOM_ID: the-iterable-interface
  :END:

The /Iterable/ interface includes the property described in
[[https://tc39.es/ecma262/#table-52][Table 66]]:

Table 66: /Iterable/ Interface Required Properties

| Property       | Value                                           | Requirements                                                    |
|----------------+-------------------------------------------------+-----------------------------------------------------------------|
| =@@iterator=   | A function that returns an /Iterator/ object.   | The returned object must conform to the /Iterator/ interface.   |

* 25.1.1.2The /Iterator/ Interface
  :PROPERTIES:
  :CUSTOM_ID: the-iterator-interface
  :END:

An object that implements the /Iterator/ interface must include the
property in [[https://tc39.es/ecma262/#table-53][Table 67]]. Such
objects may also implement the properties in
[[https://tc39.es/ecma262/#table-54][Table 68]].

Table 67: /Iterator/ Interface Required Properties

| Property   | Value                                                 | Requirements                                                                                                                                                                                                                                                                                                                                                                                |
|------------+-------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| "next"     | A function that returns an /IteratorResult/ object.   | The returned object must conform to the /IteratorResult/ interface. If a previous call to the =next= method of an /Iterator/ has returned an /IteratorResult/ object whose "done" property is true, then all subsequent calls to the =next= method of that object should also return an /IteratorResult/ object whose "done" property is true. However, this requirement is not enforced.   |

Note 1

Arguments may be passed to the next function but their interpretation
and validity is dependent upon the target /Iterator/. The for-of
statement and other common users of /Iterators/ do not pass any
arguments, so /Iterator/ objects that expect to be used in such a manner
must be prepared to deal with being called with no arguments.

Table 68: /Iterator/ Interface Optional Properties

| Property   | Value                                                 | Requirements                                                                                                                                                                                                                                                                                                                                                                                                                                                                      |
||
| "return"   | A function that returns an /IteratorResult/ object.   | The returned object must conform to the /IteratorResult/ interface. Invoking this method notifies the /Iterator/ object that the caller does not intend to make any more =next= method calls to the /Iterator/. The returned /IteratorResult/ object will typically have a "done" property whose value is true, and a "value" property with the value passed as the argument of the =return= method. However, this requirement is not enforced.                                   |
| "throw"    | A function that returns an /IteratorResult/ object.   | The returned object must conform to the /IteratorResult/ interface. Invoking this method notifies the /Iterator/ object that the caller has detected an error condition. The argument may be used to identify the error condition and typically will be an exception object. A typical response is to =throw= the value passed as the argument. If the method does not =throw=, the returned /IteratorResult/ object will typically have a "done" property whose value is true.   |

Note 2

Typically callers of these methods should check for their existence
before invoking them. Certain ECMAScript language features including
=for=-=of=, =yield*=, and array destructuring call these methods after
performing an existence check. Most ECMAScript library functions that
accept /Iterable/ objects as arguments also conditionally call them.

* 25.1.1.3The /AsyncIterable/ Interface
  :PROPERTIES:
  :CUSTOM_ID: the-asynciterable-interface
  :END:

The /AsyncIterable/ interface includes the properties described in
[[https://tc39.es/ecma262/#table-async-iterable][Table 69]]:

Table 69: /AsyncIterable/ Interface Required Properties

| Property            | Value                                                | Requirements                                                         |
|---------------------+------------------------------------------------------+----------------------------------------------------------------------|
| =@@asyncIterator=   | A function that returns an /AsyncIterator/ object.   | The returned object must conform to the /AsyncIterator/ interface.   |

* 25.1.1.4The /AsyncIterator/ Interface
  :PROPERTIES:
  :CUSTOM_ID: the-asynciterator-interface
  :END:

An object that implements the /AsyncIterator/ interface must include the
properties in
[[https://tc39.es/ecma262/#table-async-iterator-required][Table 70]].
Such objects may also implement the properties in
[[https://tc39.es/ecma262/#table-async-iterator-optional][Table 71]].

Table 70: /AsyncIterator/ Interface Required Properties

| Property   | Value                                                               | Requirements                                                                                                                                                                                                                                                                                                                                                                                                                                                                 |
||
| "next"     | A function that returns a promise for an /IteratorResult/ object.   | The returned promise, when fulfilled, must fulfill with an object which conforms to the /IteratorResult/ interface. If a previous call to the =next= method of an /AsyncIterator/ has returned a promise for an /IteratorResult/ object whose "done" property is true, then all subsequent calls to the =next= method of that object should also return a promise for an /IteratorResult/ object whose "done" property is true. However, this requirement is not enforced.   |
|            |                                                                     |                                                                                                                                                                                                                                                                                                                                                                                                                                                                              |
|            |                                                                     | Additionally, the /IteratorResult/ object that serves as a fulfillment value should have a "value" property whose value is not a promise (or "thenable"). However, this requirement is also not enforced.                                                                                                                                                                                                                                                                    |

Note 1

Arguments may be passed to the next function but their interpretation
and validity is dependent upon the target /AsyncIterator/. The
=for=-=await=-=of= statement and other common users of /AsyncIterators/
do not pass any arguments, so /AsyncIterator/ objects that expect to be
used in such a manner must be prepared to deal with being called with no
arguments.

Table 71: /AsyncIterator/ Interface Optional Properties

| Property   | Value                                                               | Requirements|
||
| "return"   | A function that returns a promise for an /IteratorResult/ object.   | The returned promise, when fulfilled, must fulfill with an object which conforms to the /IteratorResult/ interface. Invoking this method notifies the /AsyncIterator/ object that the caller does not intend to make any more =next= method calls to the /AsyncIterator/. The returned promise will fulfill with an /IteratorResult/ object which will typically have a "done" property whose value is true, and a "value" property with the value passed as the argument of the =return= method. However, this requirement is not enforced.   |
|            |                                                                     ||
|            |                                                                     | Additionally, the /IteratorResult/ object that serves as a fulfillment value should have a "value" property whose value is not a promise (or "thenable"). If the argument value is used in the typical manner, then if it is a rejected promise, a promise rejected with the same reason should be returned; if it is a fulfilled promise, then its fulfillment value should be used as the "value" property of the returned promise's /IteratorResult/ object fulfillment value. However, these requirements are also not enforced.           |
| "throw"    | A function that returns a promise for an /IteratorResult/ object.   | The returned promise, when fulfilled, must fulfill with an object which conforms to the /IteratorResult/ interface. Invoking this method notifies the /AsyncIterator/ object that the caller has detected an error condition. The argument may be used to identify the error condition and typically will be an exception object. A typical response is to return a rejected promise which rejects with the value passed as the argument.                                                                                                      |
|            |                                                                     ||
|            |                                                                     | If the returned promise is fulfilled, the /IteratorResult/ fulfillment value will typically have a "done" property whose value is true. Additionally, it should have a "value" property whose value is not a promise (or "thenable"), but this requirement is not enforced.                                                                                                                                                                                                                                                                    |

Note 2

Typically callers of these methods should check for their existence
before invoking them. Certain ECMAScript language features including
=for=-=await=-=of= and =yield*= call these methods after performing an
existence check.

* 25.1.1.5The /IteratorResult/ Interface
  :PROPERTIES:
  :CUSTOM_ID: the-iteratorresult-interface
  :END:

The /IteratorResult/ interface includes the properties listed in
[[https://tc39.es/ecma262/#table-55][Table 72]]:

Table 72: /IteratorResult/ Interface Properties

| Property   | Value                                                                                        | Requirements                                                                                                                                                                                                                                                                                                                                         |
|------------+----------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| "done"     | Either true or false.                                                                        | This is the result status of an /iterator/ =next= method call. If the end of the iterator was reached "done" is true. If the end was not reached "done" is false and a value is available. If a "done" property (either own or inherited) does not exist, it is consider to have the value false.                                                    |
| "value"    | Any [[https://tc39.es/ecma262/#sec-ecmascript-language-types][ECMAScript language value]].   | If done is false, this is the current iteration element value. If done is true, this is the return value of the iterator, if it supplied one. If the iterator does not have a return value, "value" is undefined. In that case, the "value" property may be absent from the conforming object if it does not inherit an explicit "value" property.   |

* 25.1.2The %IteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-iteratorprototype-object
  :END:

The %IteratorPrototype% object:

- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.

Note

All objects defined in this specification that implement the Iterator
interface also inherit from %IteratorPrototype%. ECMAScript code may
also define objects that inherit from %IteratorPrototype%. The
%IteratorPrototype% object provides a place where additional methods
that are applicable to all iterator objects may be added.

The following expression is one way that ECMAScript code can access the
%IteratorPrototype% object:

#+BEGIN_EXAMPLE
  Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]()))
#+END_EXAMPLE

* 25.1.2.1%IteratorPrototype% [ @@iterator ] ( )
  :PROPERTIES:
  :CUSTOM_ID: iteratorprototype-iterator
  :END:

The following steps are taken:

1. Return the this value.

The value of the "name" property of this function is
"[Symbol.iterator]".

* 25.1.3The %AsyncIteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-asynciteratorprototype-object
  :END:

The %AsyncIteratorPrototype% object:

- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.

Note

All objects defined in this specification that implement the
AsyncIterator interface also inherit from %AsyncIteratorPrototype%.
ECMAScript code may also define objects that inherit from
%AsyncIteratorPrototype%. The %AsyncIteratorPrototype% object provides a
place where additional methods that are applicable to all async iterator
objects may be added.

* 25.1.3.1%AsyncIteratorPrototype% [ @@asyncIterator ] ( )
  :PROPERTIES:
  :CUSTOM_ID: asynciteratorprototype-asynciterator
  :END:

The following steps are taken:

1. Return the this value.

The value of the "name" property of this function is
"[Symbol.asyncIterator]".

* 25.1.4Async-from-Sync Iterator Objects
  :PROPERTIES:
  :CUSTOM_ID: async-from-sync-iterator-objects
  :END:

An Async-from-Sync Iterator object is an async iterator that adapts a
specific synchronous iterator. There is not a named
[[https://tc39.es/ecma262/#constructor][constructor]] for
Async-from-Sync Iterator objects. Instead, Async-from-Sync iterator
objects are created by the
[[https://tc39.es/ecma262/#sec-createasyncfromsynciterator][CreateAsyncFromSyncIterator]]
abstract operation as needed.

* 25.1.4.1CreateAsyncFromSyncIterator ( =syncIteratorRecord= )
  :PROPERTIES:
  :CUSTOM_ID: createasyncfromsynciterator-synciteratorrecord
  :END:

The abstract operation CreateAsyncFromSyncIterator is used to create an
async iterator
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
from a synchronous iterator
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
It performs the following steps:

1. Let =asyncIterator= be
   ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]]([[https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%-object][%AsyncFromSyncIteratorPrototype%]],
   « [[SyncIteratorRecord]] »).
2. Set =asyncIterator=.[[SyncIteratorRecord]] to =syncIteratorRecord=.
3. Let =nextMethod= be
   ! [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=asyncIterator=,
   "next").
4. Let =iteratorRecord= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Iterator]]: =asyncIterator=, [[NextMethod]]: =nextMethod=,
   [[Done]]: false }.
5. Return =iteratorRecord=.

* 25.1.4.2The %AsyncFromSyncIteratorPrototype% Object
  :PROPERTIES:
  :CUSTOM_ID: the-asyncfromsynciteratorprototype-object
  :END:

The %AsyncFromSyncIteratorPrototype% object:

- has properties that are inherited by all Async-from-Sync Iterator
  Objects.
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-asynciteratorprototype][%AsyncIteratorPrototype%]].
- has the following properties:

* 25.1.4.2.1%AsyncFromSyncIteratorPrototype%.next ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: asyncfromsynciteratorprototype.next-value
  :END:

1. Let =O= be the this value.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object and =O= has a [[SyncIteratorRecord]] internal slot.
3. Let =promiseCapability= be
   ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
4. Let =syncIteratorRecord= be =O=.[[SyncIteratorRecord]].
5. Let =result= be
   [[https://tc39.es/ecma262/#sec-iteratornext][IteratorNext]](=syncIteratorRecord=,
   =value=).
6. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=result=,
   =promiseCapability=).
7. Return
   ! [[https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation][AsyncFromSyncIteratorContinuation]](=result=,
   =promiseCapability=).

* 25.1.4.2.2%AsyncFromSyncIteratorPrototype%.return ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: asyncfromsynciteratorprototype.return-value
  :END:

1.  Let =O= be the this value.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
    is Object and =O= has a [[SyncIteratorRecord]] internal slot.
3.  Let =promiseCapability= be
    ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
4.  Let =syncIterator= be =O=.[[SyncIteratorRecord]].[[Iterator]].
5.  Let =return= be
    [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=syncIterator=,
    "return").
6.  [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=return=,
    =promiseCapability=).
7.  If =return= is undefined, then

    1. Let =iterResult= be
       ! [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=value=,
       true).
    2. Perform
       ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
       undefined, « =iterResult= »).
    3. Return =promiseCapability=.[[Promise]].

8.  Let =result= be
    [[https://tc39.es/ecma262/#sec-call][Call]](=return=,
    =syncIterator=, « =value= »).
9.  [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=result=,
    =promiseCapability=).
10. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=)
    is not Object, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
       undefined, « a newly created TypeError object »).
    2. Return =promiseCapability=.[[Promise]].

11. Return
    ! [[https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation][AsyncFromSyncIteratorContinuation]](=result=,
    =promiseCapability=).

* 25.1.4.2.3%AsyncFromSyncIteratorPrototype%.throw ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: asyncfromsynciteratorprototype.throw-value
  :END:

1.  Let =O= be the this value.
2.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
    is Object and =O= has a [[SyncIteratorRecord]] internal slot.
3.  Let =promiseCapability= be
    ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
4.  Let =syncIterator= be =O=.[[SyncIteratorRecord]].[[Iterator]].
5.  Let =throw= be
    [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=syncIterator=,
    "throw").
6.  [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=throw=,
    =promiseCapability=).
7.  If =throw= is undefined, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
       undefined, « =value= »).
    2. Return =promiseCapability=.[[Promise]].

8.  Let =result= be [[https://tc39.es/ecma262/#sec-call][Call]](=throw=,
    =syncIterator=, « =value= »).
9.  [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=result=,
    =promiseCapability=).
10. If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=result=)
    is not Object, then

    1. Perform
       ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
       undefined, « a newly created TypeError object »).
    2. Return =promiseCapability=.[[Promise]].

11. Return
    ! [[https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation][AsyncFromSyncIteratorContinuation]](=result=,
    =promiseCapability=).

* 25.1.4.2.4Async-from-Sync Iterator Value Unwrap Functions
  :PROPERTIES:
  :CUSTOM_ID: async-from-sync-iterator-value-unwrap-functions
  :END:

An async-from-sync iterator value unwrap function is an anonymous
built-in function that is used by
[[https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation][AsyncFromSyncIteratorContinuation]]
when processing the "value" property of an /IteratorResult/ object, in
order to wait for its value if it is a promise and re-package the result
in a new "unwrapped" /IteratorResult/ object. Each async-from-sync
iterator value unwrap function has a [[Done]] internal slot.

When an async-from-sync iterator value unwrap function is called with
argument =value=, the following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Return
   ! [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=value=,
   =F=.[[Done]]).

* 25.1.4.3Properties of Async-from-Sync Iterator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-async-from-sync-iterator-instances
  :END:

Async-from-Sync Iterator instances are ordinary objects that inherit
properties from the
[[https://tc39.es/ecma262/#sec-%asyncfromsynciteratorprototype%-object][%AsyncFromSyncIteratorPrototype%]]
intrinsic object. Async-from-Sync Iterator instances are initially
created with the internal slots listed in
[[https://tc39.es/ecma262/#table-async-from-sync-iterator-internal-slots][Table
73]]. Async-from-Sync Iterator instances are not directly observable
from ECMAScript code.

Table 73: Internal Slots of Async-from-Sync Iterator Instances

| Internal Slot            | Description                                                                                                                                                                                                                                |
|--------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[SyncIteratorRecord]]   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]], of the type returned by [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]], representing the original synchronous iterator which is being adapted.   |

* 25.1.4.4AsyncFromSyncIteratorContinuation ( =result=,
=promiseCapability= )
  :PROPERTIES:
  :CUSTOM_ID: asyncfromsynciteratorcontinuation-result-promisecapability
  :END:

1.  Let =done= be
    [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=result=).
2.  [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=done=,
    =promiseCapability=).
3.  Let =value= be
    [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=result=).
4.  [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=value=,
    =promiseCapability=).
5.  Let =valueWrapper= be
    [[https://tc39.es/ecma262/#sec-promise-resolve][PromiseResolve]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]],
    =value=).
6.  [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=valueWrapper=,
    =promiseCapability=).
7.  Let =steps= be the algorithm steps defined in
    [[https://tc39.es/ecma262/#sec-async-from-sync-iterator-value-unwrap-functions][Async-from-Sync
    Iterator Value Unwrap Functions]].
8.  Let =onFulfilled= be
    ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
    « [[Done]] »).
9.  Set =onFulfilled=.[[Done]] to =done=.
10. Perform
    ! [[https://tc39.es/ecma262/#sec-performpromisethen][PerformPromiseThen]](=valueWrapper=,
    =onFulfilled=, undefined, =promiseCapability=).
11. Return =promiseCapability=.[[Promise]].

* 25.2GeneratorFunction Objects
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction-objects
  :END:

GeneratorFunction objects are functions that are usually created by
evaluating
[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]s,
[[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]s,
and [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]s.
They may also be created by calling the
[[https://tc39.es/ecma262/#sec-generatorfunction-constructor][%GeneratorFunction%]]
intrinsic.

#+CAPTION: Figure 5 (Informative): Generator Objects Relationships
[[./ECMAScript®%202020%20Language%C2%A0Specification_files/figure-2.png]]

* 25.2.1The GeneratorFunction Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-generatorfunction-constructor
  :END:

The GeneratorFunction
[[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %GeneratorFunction%.
- creates and initializes a new GeneratorFunction object when called as
  a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. Thus the
  function call =GeneratorFunction (…)= is equivalent to the object
  creation expression =new GeneratorFunction (…)= with the same
  arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =GeneratorFunction= behaviour must
  include a =super= call to the =GeneratorFunction=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with the internal slots necessary for
  built-in GeneratorFunction behaviour. All ECMAScript syntactic forms
  for defining generator function objects create direct instances of
  =GeneratorFunction=. There is no syntactic means to create instances
  of =GeneratorFunction= subclasses.

* 25.2.1.1GeneratorFunction ( =p1=, =p2=, ... , =pn=, =body= )
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction-p1-p2-pn-body
  :END:

The last argument specifies the body (executable code) of a generator
function; any preceding arguments specify formal parameters.

When the =GeneratorFunction= function is called with some arguments
=p1=, =p2=, ... , =pn=, =body= (where =n= might be 0, that is, there are
no “=p=” arguments, and where =body= might also not be provided), the
following steps are taken:

1. Let =C= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =args= be the =argumentsList= that was passed to this function by
   [[Call]] or [[Construct]].
3. Return
   ? [[https://tc39.es/ecma262/#sec-createdynamicfunction][CreateDynamicFunction]](=C=,
   NewTarget, generator, =args=).

Note

See NOTE for
[[https://tc39.es/ecma262/#sec-function-p1-p2-pn-body][19.2.1.1]].

* 25.2.2Properties of the GeneratorFunction Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-generatorfunction-constructor
  :END:

The GeneratorFunction
[[https://tc39.es/ecma262/#constructor][constructor]]:

- is a standard built-in
  [[https://tc39.es/ecma262/#function-object][function object]] that
  inherits from the =Function=
  [[https://tc39.es/ecma262/#constructor][constructor]].
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-function-constructor][%Function%]].
- has a "name" property whose value is "GeneratorFunction".
- has the following properties:

* 25.2.2.1GeneratorFunction.length
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction.length
  :END:

This is a [[https://tc39.es/ecma262/#sec-object-type][data property]]
with a value of 1. This property has the attributes { [[Writable]]:
false, [[Enumerable]]: false, [[Configurable]]: true }.

* 25.2.2.2GeneratorFunction.prototype
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction.prototype
  :END:

The initial value of =GeneratorFunction.prototype= is
[[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]].

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 25.2.3Properties of the GeneratorFunction Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-generatorfunction-prototype-object
  :END:

The GeneratorFunction prototype object:

- is an ordinary object.
- is not a [[https://tc39.es/ecma262/#function-object][function object]]
  and does not have an [[ECMAScriptCode]] internal slot or any other of
  the internal slots listed in
  [[https://tc39.es/ecma262/#table-27][Table 29]] or
  [[https://tc39.es/ecma262/#table-56][Table 74]].
- is the value of the "prototype" property of
  [[https://tc39.es/ecma262/#sec-generatorfunction-constructor][%GeneratorFunction%]].
- is the intrinsic object %Generator% (see Figure 2).
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

* 25.2.3.1GeneratorFunction.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction.prototype.constructor
  :END:

The initial value of =GeneratorFunction.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-generatorfunction-constructor][%GeneratorFunction%]].

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.2.3.2GeneratorFunction.prototype.prototype
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction.prototype.prototype
  :END:

The value of =GeneratorFunction.prototype.prototype= is the
%Generator.prototype% intrinsic object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.2.3.3GeneratorFunction.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"GeneratorFunction".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.2.4GeneratorFunction Instances
  :PROPERTIES:
  :CUSTOM_ID: generatorfunction-instances
  :END:

Every GeneratorFunction instance is an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] and has
the internal slots listed in [[https://tc39.es/ecma262/#table-27][Table
29]]. The value of the [[IsClassConstructor]] internal slot for all such
instances is false.

Each GeneratorFunction instance has the following own properties:

* 25.2.4.1length
  :PROPERTIES:
  :CUSTOM_ID: length-3
  :END:

The specification for the "length" property of Function instances given
in [[https://tc39.es/ecma262/#sec-function-instances-length][19.2.4.1]]
also applies to GeneratorFunction instances.

* 25.2.4.2name
  :PROPERTIES:
  :CUSTOM_ID: name-1
  :END:

The specification for the "name" property of Function instances given in
[[https://tc39.es/ecma262/#sec-function-instances-name][19.2.4.2]] also
applies to GeneratorFunction instances.

* 25.2.4.3prototype
  :PROPERTIES:
  :CUSTOM_ID: prototype-2
  :END:

Whenever a GeneratorFunction instance is created another ordinary object
is also created and is the initial value of the generator function's
"prototype" property. The value of the prototype property is used to
initialize the [[Prototype]] internal slot of a newly created Generator
object when the generator
[[https://tc39.es/ecma262/#function-object][function object]] is invoked
using [[Call]].

This property has the attributes { [[Writable]]: true, [[Enumerable]]:
false, [[Configurable]]: false }.

Note

Unlike Function instances, the object that is the value of the a
GeneratorFunction's "prototype" property does not have a "constructor"
property whose value is the GeneratorFunction instance.

* 25.3AsyncGeneratorFunction Objects
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction-objects
  :END:

AsyncGeneratorFunction objects are functions that are usually created by
evaluating
[[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
[[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]],
and
[[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]
syntactic productions. They may also be created by calling the
[[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-constructor][%AsyncGeneratorFunction%]]
intrinsic.

* 25.3.1The AsyncGeneratorFunction Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-asyncgeneratorfunction-constructor
  :END:

The AsyncGeneratorFunction
[[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %AsyncGeneratorFunction%.
- creates and initializes a new AsyncGeneratorFunction object when
  called as a function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. Thus the
  function call =AsyncGeneratorFunction (...)= is equivalent to the
  object creation expression =new AsyncGeneratorFunction (...)= with the
  same arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =AsyncGeneratorFunction= behaviour
  must include a =super= call to the =AsyncGeneratorFunction=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize subclass instances with the internal slots necessary for
  built-in AsyncGeneratorFunction behaviour. All ECMAScript syntactic
  forms for defining async generator function objects create direct
  instances of =AsyncGeneratorFunction=. There is no syntactic means to
  create instances of =AsyncGeneratorFunction= subclasses.

* 25.3.1.1AsyncGeneratorFunction ( =p1=, =p2=, ... , =pn=, =body= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction-p1-p2-pn-body
  :END:

The last argument specifies the body (executable code) of an async
generator function; any preceding arguments specify formal parameters.

When the =AsyncGeneratorFunction= function is called with some arguments
=p1=, =p2=, ... , =pn=, =body= (where =n= might be 0, that is, there are
no "=p=" arguments, and where =body= might also not be provided), the
following steps are taken:

1. Let =C= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =args= be the =argumentsList= that was passed to this function by
   [[Call]] or [[Construct]].
3. Return
   ? [[https://tc39.es/ecma262/#sec-createdynamicfunction][CreateDynamicFunction]](=C=,
   NewTarget, asyncGenerator, =args=).

Note

See NOTE for
[[https://tc39.es/ecma262/#sec-function-p1-p2-pn-body][19.2.1.1]].

* 25.3.2Properties of the AsyncGeneratorFunction Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-asyncgeneratorfunction-constructor
  :END:

The AsyncGeneratorFunction
[[https://tc39.es/ecma262/#constructor][constructor]]:

- is a standard built-in
  [[https://tc39.es/ecma262/#function-object][function object]] that
  inherits from the =Function=
  [[https://tc39.es/ecma262/#constructor][constructor]].
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-function-constructor][%Function%]].
- has a "name" property whose value is "AsyncGeneratorFunction".
- has the following properties:

* 25.3.2.1AsyncGeneratorFunction.length
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction.length
  :END:

This is a [[https://tc39.es/ecma262/#sec-object-type][data property]]
with a value of 1. This property has the attributes { [[Writable]]:
false, [[Enumerable]]: false, [[Configurable]]: true }.

* 25.3.2.2AsyncGeneratorFunction.prototype
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction.prototype
  :END:

The initial value of =AsyncGeneratorFunction.prototype= is the intrinsic
object %AsyncGenerator%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 25.3.3Properties of the AsyncGeneratorFunction Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-asyncgeneratorfunction-prototype-object
  :END:

The AsyncGeneratorFunction prototype object:

- is an ordinary object.
- is not a [[https://tc39.es/ecma262/#function-object][function object]]
  and does not have an [[ECMAScriptCode]] internal slot or any other of
  the internal slots listed in
  [[https://tc39.es/ecma262/#table-27][Table 29]] or
  [[https://tc39.es/ecma262/#table-internal-slots-of-asyncgenerator-instances][Table
  75]].
- is the value of the "prototype" property of
  [[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-constructor][%AsyncGeneratorFunction%]].
- is
  [[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]].
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

* 25.3.3.1AsyncGeneratorFunction.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction.prototype.constructor
  :END:

The initial value of =AsyncGeneratorFunction.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-constructor][%AsyncGeneratorFunction%]].

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.3.3.2AsyncGeneratorFunction.prototype.prototype
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction.prototype.prototype
  :END:

The value of =AsyncGeneratorFunction.prototype.prototype= is the
%AsyncGenerator.prototype% intrinsic object.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.3.3.3AsyncGeneratorFunction.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"AsyncGeneratorFunction".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.3.4AsyncGeneratorFunction Instances
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorfunction-instances
  :END:

Every AsyncGeneratorFunction instance is an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] and has
the internal slots listed in [[https://tc39.es/ecma262/#table-27][Table
29]]. The value of the [[IsClassConstructor]] internal slot for all such
instances is false.

Each AsyncGeneratorFunction instance has the following own properties:

* 25.3.4.1length
  :PROPERTIES:
  :CUSTOM_ID: length-4
  :END:

The value of the "length" property is an
[[https://tc39.es/ecma262/#integer][integer]] that indicates the typical
number of arguments expected by the AsyncGeneratorFunction. However, the
language permits the function to be invoked with some other number of
arguments. The behaviour of an AsyncGeneratorFunction when invoked on a
number of arguments other than the number specified by its "length"
property depends on the function.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.3.4.2name
  :PROPERTIES:
  :CUSTOM_ID: name-2
  :END:

The specification for the "name" property of Function instances given in
[[https://tc39.es/ecma262/#sec-function-instances-name][19.2.4.2]] also
applies to AsyncGeneratorFunction instances.

* 25.3.4.3prototype
  :PROPERTIES:
  :CUSTOM_ID: prototype-3
  :END:

Whenever an AsyncGeneratorFunction instance is created another ordinary
object is also created and is the initial value of the async generator
function's "prototype" property. The value of the prototype property is
used to initialize the [[Prototype]] internal slot of a newly created
AsyncGenerator object when the generator
[[https://tc39.es/ecma262/#function-object][function object]] is invoked
using [[Call]].

This property has the attributes { [[Writable]]: true, [[Enumerable]]:
false, [[Configurable]]: false }.

Note

Unlike function instances, the object that is the value of the an
AsyncGeneratorFunction's "prototype" property does not have a
"constructor" property whose value is the AsyncGeneratorFunction
instance.

* 25.4Generator Objects
  :PROPERTIES:
  :CUSTOM_ID: generator-objects
  :END:

A Generator object is an instance of a generator function and conforms
to both the /Iterator/ and /Iterable/ interfaces.

Generator instances directly inherit properties from the object that is
the value of the "prototype" property of the Generator function that
created the instance. Generator instances indirectly inherit properties
from the Generator Prototype intrinsic, %Generator.prototype%.

* 25.4.1Properties of the Generator Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-generator-prototype-object
  :END:

The Generator prototype object:

- is the intrinsic object %GeneratorPrototype%.
- is the initial value of the "prototype" property of
  [[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]]
  (the =GeneratorFunction.prototype=).
- is an ordinary object.
- is not a Generator instance and does not have a [[GeneratorState]]
  internal slot.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-%iteratorprototype%-object][%IteratorPrototype%]].
- has properties that are indirectly inherited by all Generator
  instances.

* 25.4.1.1Generator.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: generator.prototype.constructor
  :END:

The initial value of =Generator.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]].

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.4.1.2Generator.prototype.next ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: generator.prototype.next-value
  :END:

The =next= method performs the following steps:

1. Let =g= be the this value.
2. Return
   ? [[https://tc39.es/ecma262/#sec-generatorresume][GeneratorResume]](=g=,
   =value=).

* 25.4.1.3Generator.prototype.return ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: generator.prototype.return-value
  :END:

The =return= method performs the following steps:

1. Let =g= be the this value.
2. Let =C= be
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
   { [[Type]]: return, [[Value]]: =value=, [[Target]]: empty }.
3. Return
   ? [[https://tc39.es/ecma262/#sec-generatorresumeabrupt][GeneratorResumeAbrupt]](=g=,
   =C=).

* 25.4.1.4Generator.prototype.throw ( =exception= )
  :PROPERTIES:
  :CUSTOM_ID: generator.prototype.throw-exception
  :END:

The =throw= method performs the following steps:

1. Let =g= be the this value.
2. Let =C= be
   [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](=exception=).
3. Return
   ? [[https://tc39.es/ecma262/#sec-generatorresumeabrupt][GeneratorResumeAbrupt]](=g=,
   =C=).

* 25.4.1.5Generator.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: generator.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Generator".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.4.2Properties of Generator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-generator-instances
  :END:

Generator instances are initially created with the internal slots
described in [[https://tc39.es/ecma262/#table-56][Table 74]].

Table 74: Internal Slots of Generator Instances

| Internal Slot          | Description                                                                                                                                   |
|------------------------+-----------------------------------------------------------------------------------------------------------------------------------------------|
| [[GeneratorState]]     | The current execution state of the generator. The possible values are: undefined, suspendedStart, suspendedYield, executing, and completed.   |
| [[GeneratorContext]]   | The [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] that is used when executing the code of this generator.            |

* 25.4.3Generator Abstract Operations
  :PROPERTIES:
  :CUSTOM_ID: generator-abstract-operations
  :END:

* 25.4.3.1GeneratorStart ( =generator=, =generatorBody= )
  :PROPERTIES:
  :CUSTOM_ID: generatorstart-generator-generatorbody
  :END:

The abstract operation GeneratorStart with arguments =generator= and
=generatorBody= performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The value of
   =generator=.[[GeneratorState]] is undefined.
2. Let =genContext= be the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
3. Set the Generator component of =genContext= to =generator=.
4. Set the code evaluation state of =genContext= such that when
   evaluation is resumed for that
   [[https://tc39.es/ecma262/#sec-execution-contexts][execution
   context]] the following steps will be performed:

   1. Let =result= be the result of evaluating =generatorBody=.
   2. [[https://tc39.es/ecma262/#assert][Assert]]: If we return here,
      the generator either threw an exception or performed either an
      implicit or explicit return.
   3. Remove =genContext= from the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] and restore the
      [[https://tc39.es/ecma262/#sec-execution-contexts][execution
      context]] that is at the top of the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] as the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
   4. Set =generator=.[[GeneratorState]] to completed.
   5. Once a generator enters the completed state it never leaves it and
      its associated
      [[https://tc39.es/ecma262/#sec-execution-contexts][execution
      context]] is never resumed. Any execution state associated with
      =generator= can be discarded at this point.
   6. If =result=.[[Type]] is normal, let =resultValue= be undefined.
   7. Else if =result=.[[Type]] is return, let =resultValue= be
      =result=.[[Value]].
   8. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =result=.[[Type]]
         is throw.
      2. Return
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

   9. Return
      [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=resultValue=,
      true).

5. Set =generator=.[[GeneratorContext]] to =genContext=.
6. Set =generator=.[[GeneratorState]] to suspendedStart.
7. Return
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

* 25.4.3.2GeneratorValidate ( =generator= )
  :PROPERTIES:
  :CUSTOM_ID: generatorvalidate-generator
  :END:

The abstract operation GeneratorValidate with argument =generator=
performs the following steps:

1. Perform
   ? [[https://tc39.es/ecma262/#sec-requireinternalslot][RequireInternalSlot]](=generator=,
   [[GeneratorState]]).
2. [[https://tc39.es/ecma262/#assert][Assert]]: =generator= also has a
   [[GeneratorContext]] internal slot.
3. Let =state= be =generator=.[[GeneratorState]].
4. If =state= is executing, throw a TypeError exception.
5. Return =state=.

* 25.4.3.3GeneratorResume ( =generator=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: generatorresume-generator-value
  :END:

The abstract operation GeneratorResume with arguments =generator= and
=value= performs the following steps:

1.  Let =state= be
    ? [[https://tc39.es/ecma262/#sec-generatorvalidate][GeneratorValidate]](=generator=).
2.  If =state= is completed, return
    [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
    true).
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =state= is either
    suspendedStart or suspendedYield.
4.  Let =genContext= be =generator=.[[GeneratorContext]].
5.  Let =methodContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
6.  [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =methodContext=.
7.  Set =generator=.[[GeneratorState]] to executing.
8.  Push =genContext= onto the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]]; =genContext= is now the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
9.  Resume the suspended evaluation of =genContext= using
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=value=)
    as the result of the operation that suspended it. Let =result= be
    the value returned by the resumed computation.
10. [[https://tc39.es/ecma262/#assert][Assert]]: When we return here,
    =genContext= has already been removed from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and =methodContext= is the currently
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
11. Return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

* 25.4.3.4GeneratorResumeAbrupt ( =generator=, =abruptCompletion= )
  :PROPERTIES:
  :CUSTOM_ID: generatorresumeabrupt-generator-abruptcompletion
  :END:

The abstract operation GeneratorResumeAbrupt with arguments =generator=
and =abruptCompletion= performs the following steps:

1.  Let =state= be
    ? [[https://tc39.es/ecma262/#sec-generatorvalidate][GeneratorValidate]](=generator=).
2.  If =state= is suspendedStart, then

    1. Set =generator=.[[GeneratorState]] to completed.
    2. Once a generator enters the completed state it never leaves it
       and its associated
       [[https://tc39.es/ecma262/#sec-execution-contexts][execution
       context]] is never resumed. Any execution state associated with
       =generator= can be discarded at this point.
    3. Set =state= to completed.

3.  If =state= is completed, then

    1. If =abruptCompletion=.[[Type]] is return, then

       1. Return
          [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=abruptCompletion=.[[Value]],
          true).

    2. Return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=abruptCompletion=).

4.  [[https://tc39.es/ecma262/#assert][Assert]]: =state= is
    suspendedYield.
5.  Let =genContext= be =generator=.[[GeneratorContext]].
6.  Let =methodContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
7.  [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =methodContext=.
8.  Set =generator=.[[GeneratorState]] to executing.
9.  Push =genContext= onto the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]]; =genContext= is now the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
10. Resume the suspended evaluation of =genContext= using
    =abruptCompletion= as the result of the operation that suspended it.
    Let =result= be the completion record returned by the resumed
    computation.
11. [[https://tc39.es/ecma262/#assert][Assert]]: When we return here,
    =genContext= has already been removed from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and =methodContext= is the currently
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
12. Return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

* 25.4.3.5GetGeneratorKind ( )
  :PROPERTIES:
  :CUSTOM_ID: getgeneratorkind
  :END:

1. Let =genContext= be the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
2. If =genContext= does not have a Generator component, return
   non-generator.
3. Let =generator= be the Generator component of =genContext=.
4. If =generator= has an [[AsyncGeneratorState]] internal slot, return
   async.
5. Else, return sync.

* 25.4.3.6GeneratorYield ( =iterNextObj= )
  :PROPERTIES:
  :CUSTOM_ID: generatoryield-iternextobj
  :END:

The abstract operation GeneratorYield with argument =iterNextObj=
performs the following steps:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =iterNextObj= is an
    Object that implements the /IteratorResult/ interface.
2.  Let =genContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =genContext= is the
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]] of a generator.
4.  Let =generator= be the value of the Generator component of
    =genContext=.
5.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]()
    is sync.
6.  Set =generator=.[[GeneratorState]] to suspendedYield.
7.  Remove =genContext= from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and restore the
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]] that is at the top of the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] as the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
8.  Set the code evaluation state of =genContext= such that when
    evaluation is resumed with a
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
    =resumptionValue= the following steps will be performed:

    1. Return =resumptionValue=.
    2. NOTE: This returns to the evaluation of the
       [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
       that originally called this abstract operation.

9.  Return
    [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=iterNextObj=).
10. NOTE: This returns to the evaluation of the operation that had most
    previously resumed evaluation of =genContext=.

* 25.5AsyncGenerator Objects
  :PROPERTIES:
  :CUSTOM_ID: asyncgenerator-objects
  :END:

An AsyncGenerator object is an instance of an async generator function
and conforms to both the AsyncIterator and AsyncIterable interfaces.

AsyncGenerator instances directly inherit properties from the object
that is the value of the "prototype" property of the AsyncGenerator
function that created the instance. AsyncGenerator instances indirectly
inherit properties from the AsyncGenerator Prototype intrinsic,
%AsyncGenerator.prototype%.

* 25.5.1Properties of the AsyncGenerator Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-asyncgenerator-prototype-object
  :END:

The AsyncGenerator prototype object:

- is the intrinsic object %AsyncGeneratorPrototype%.
- is the initial value of the "prototype" property of
  [[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]]
  (the =AsyncGeneratorFunction.prototype=).
- is an ordinary object.
- is not an AsyncGenerator instance and does not have an
  [[AsyncGeneratorState]] internal slot.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-asynciteratorprototype][%AsyncIteratorPrototype%]].
- has properties that are indirectly inherited by all AsyncGenerator
  instances.

* 25.5.1.1AsyncGenerator.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: asyncgenerator.prototype.constructor
  :END:

The initial value of =AsyncGenerator.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]].

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.5.1.2AsyncGenerator.prototype.next ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgenerator.prototype.next-value
  :END:

1. Let =generator= be the this value.
2. Let =completion= be
   [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=value=).
3. Return
   ! [[https://tc39.es/ecma262/#sec-asyncgeneratorenqueue][AsyncGeneratorEnqueue]](=generator=,
   =completion=).

* 25.5.1.3AsyncGenerator.prototype.return ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgenerator.prototype.return-value
  :END:

1. Let =generator= be the this value.
2. Let =completion= be
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
   { [[Type]]: return, [[Value]]: =value=, [[Target]]: empty }.
3. Return
   ! [[https://tc39.es/ecma262/#sec-asyncgeneratorenqueue][AsyncGeneratorEnqueue]](=generator=,
   =completion=).

* 25.5.1.4AsyncGenerator.prototype.throw ( =exception= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgenerator.prototype.throw-exception
  :END:

1. Let =generator= be the this value.
2. Let =completion= be
   [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](=exception=).
3. Return
   ! [[https://tc39.es/ecma262/#sec-asyncgeneratorenqueue][AsyncGeneratorEnqueue]](=generator=,
   =completion=).

* 25.5.1.5AsyncGenerator.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: asyncgenerator.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"AsyncGenerator".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.5.2Properties of AsyncGenerator Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-asyncgenerator-instances
  :END:

AsyncGenerator instances are initially created with the internal slots
described below:

Table 75: Internal Slots of AsyncGenerator Instances

| Internal Slot               | Description                                                                                                                                                            |
|-----------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[AsyncGeneratorState]]     | The current execution state of the async generator. The possible values are: undefined, suspendedStart, suspendedYield, executing, awaiting-return, and completed.     |
| [[AsyncGeneratorContext]]   | The [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] that is used when executing the code of this async generator.                               |
| [[AsyncGeneratorQueue]]     | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of AsyncGeneratorRequest records which represent requests to resume the async generator.   |

* 25.5.3AsyncGenerator Abstract Operations
  :PROPERTIES:
  :CUSTOM_ID: asyncgenerator-abstract-operations
  :END:

* 25.5.3.1AsyncGeneratorRequest Records
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorrequest-records
  :END:

The AsyncGeneratorRequest is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
value used to store information about how an async generator should be
resumed and contains capabilities for fulfilling or rejecting the
corresponding promise.

They have the following fields:

Table 76: AsyncGeneratorRequest
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
Fields

| Field Name       | Value                                                                                        | Meaning                                                              |
|------------------+----------------------------------------------------------------------------------------------+----------------------------------------------------------------------|
| [[Completion]]   | A [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]] record   | The completion which should be used to resume the async generator.   |
| [[Capability]]   | A PromiseCapability record                                                                   | The promise capabilities associated with this request.               |

* 25.5.3.2AsyncGeneratorStart ( =generator=, =generatorBody= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorstart-generator-generatorbody
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =generator= is an
   AsyncGenerator instance.
2. [[https://tc39.es/ecma262/#assert][Assert]]:
   =generator=.[[AsyncGeneratorState]] is undefined.
3. Let =genContext= be the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
4. Set the Generator component of =genContext= to =generator=.
5. Set the code evaluation state of =genContext= such that when
   evaluation is resumed for that
   [[https://tc39.es/ecma262/#sec-execution-contexts][execution
   context]] the following steps will be performed:

   1. Let =result= be the result of evaluating =generatorBody=.
   2. [[https://tc39.es/ecma262/#assert][Assert]]: If we return here,
      the async generator either threw an exception or performed either
      an implicit or explicit return.
   3. Remove =genContext= from the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] and restore the
      [[https://tc39.es/ecma262/#sec-execution-contexts][execution
      context]] that is at the top of the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] as the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
   4. Set =generator=.[[AsyncGeneratorState]] to completed.
   5. If =result= is a normal completion, let =resultValue= be
      undefined.
   6. Else,

      1. Let =resultValue= be =result=.[[Value]].
      2. If =result=.[[Type]] is not return, then

         1. Return
            ! [[https://tc39.es/ecma262/#sec-asyncgeneratorreject][AsyncGeneratorReject]](=generator=,
            =resultValue=).

   7. Return
      ! [[https://tc39.es/ecma262/#sec-asyncgeneratorresolve][AsyncGeneratorResolve]](=generator=,
      =resultValue=, true).

6. Set =generator=.[[AsyncGeneratorContext]] to =genContext=.
7. Set =generator=.[[AsyncGeneratorState]] to suspendedStart.
8. Set =generator=.[[AsyncGeneratorQueue]] to a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
9. Return undefined.

* 25.5.3.3AsyncGeneratorResolve ( =generator=, =value=, =done= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorresolve-generator-value-done
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =generator= is an
   AsyncGenerator instance.
2. Let =queue= be =generator=.[[AsyncGeneratorQueue]].
3. [[https://tc39.es/ecma262/#assert][Assert]]: =queue= is not an empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. Remove the first element from =queue= and let =next= be the value of
   that element.
5. Let =promiseCapability= be =next=.[[Capability]].
6. Let =iteratorResult= be
   ! [[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=value=,
   =done=).
7. Perform
   ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
   undefined, « =iteratorResult= »).
8. Perform
   ! [[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]](=generator=).
9. Return undefined.

* 25.5.3.4AsyncGeneratorReject ( =generator=, =exception= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorreject-generator-exception
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =generator= is an
   AsyncGenerator instance.
2. Let =queue= be =generator=.[[AsyncGeneratorQueue]].
3. [[https://tc39.es/ecma262/#assert][Assert]]: =queue= is not an empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. Remove the first element from =queue= and let =next= be the value of
   that element.
5. Let =promiseCapability= be =next=.[[Capability]].
6. Perform
   ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
   undefined, « =exception= »).
7. Perform
   ! [[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]](=generator=).
8. Return undefined.

* 25.5.3.5AsyncGeneratorResumeNext ( =generator= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorresumenext-generator
  :END:

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =generator= is an
    AsyncGenerator instance.
2.  Let =state= be =generator=.[[AsyncGeneratorState]].
3.  [[https://tc39.es/ecma262/#assert][Assert]]: =state= is not
    executing.
4.  If =state= is awaiting-return, return undefined.
5.  Let =queue= be =generator=.[[AsyncGeneratorQueue]].
6.  If =queue= is an empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]],
    return undefined.
7.  Let =next= be the value of the first element of =queue=.
8.  [[https://tc39.es/ecma262/#assert][Assert]]: =next= is an
    AsyncGeneratorRequest record.
9.  Let =completion= be =next=.[[Completion]].
10. If =completion= is an
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
    completion]], then

    1. If =state= is suspendedStart, then

       1. Set =generator=.[[AsyncGeneratorState]] to completed.
       2. Set =state= to completed.

    2. If =state= is completed, then

       1. If =completion=.[[Type]] is return, then

          1.  Set =generator=.[[AsyncGeneratorState]] to
              awaiting-return.
          2.  Let =promise= be
              ? [[https://tc39.es/ecma262/#sec-promise-resolve][PromiseResolve]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]],
              =completion=.[[Value]]).
          3.  Let =stepsFulfilled= be the algorithm steps defined in
              [[https://tc39.es/ecma262/#async-generator-resume-next-return-processor-fulfilled][AsyncGeneratorResumeNext
              Return Processor Fulfilled Functions]].
          4.  Let =onFulfilled= be
              ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsFulfilled=,
              « [[Generator]] »).
          5.  Set =onFulfilled=.[[Generator]] to =generator=.
          6.  Let =stepsRejected= be the algorithm steps defined in
              [[https://tc39.es/ecma262/#async-generator-resume-next-return-processor-rejected][AsyncGeneratorResumeNext
              Return Processor Rejected Functions]].
          7.  Let =onRejected= be
              ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsRejected=,
              « [[Generator]] »).
          8.  Set =onRejected=.[[Generator]] to =generator=.
          9.  Perform
              ! [[https://tc39.es/ecma262/#sec-performpromisethen][PerformPromiseThen]](=promise=,
              =onFulfilled=, =onRejected=).
          10. Return undefined.

       2. Else,

          1. [[https://tc39.es/ecma262/#assert][Assert]]:
             =completion=.[[Type]] is throw.
          2. Perform
             ! [[https://tc39.es/ecma262/#sec-asyncgeneratorreject][AsyncGeneratorReject]](=generator=,
             =completion=.[[Value]]).
          3. Return undefined.

11. Else if =state= is completed, return
    ! [[https://tc39.es/ecma262/#sec-asyncgeneratorresolve][AsyncGeneratorResolve]](=generator=,
    undefined, true).
12. [[https://tc39.es/ecma262/#assert][Assert]]: =state= is either
    suspendedStart or suspendedYield.
13. Let =genContext= be =generator=.[[AsyncGeneratorContext]].
14. Let =callerContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
15. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =callerContext=.
16. Set =generator=.[[AsyncGeneratorState]] to executing.
17. Push =genContext= onto the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]]; =genContext= is now the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
18. Resume the suspended evaluation of =genContext= using =completion=
    as the result of the operation that suspended it. Let =result= be
    the completion record returned by the resumed computation.
19. [[https://tc39.es/ecma262/#assert][Assert]]: =result= is never an
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
    completion]].
20. [[https://tc39.es/ecma262/#assert][Assert]]: When we return here,
    =genContext= has already been removed from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and =callerContext= is the currently
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
21. Return undefined.

* 25.5.3.5.1AsyncGeneratorResumeNext Return Processor Fulfilled
Functions
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorresumenext-return-processor-fulfilled-functions
  :END:

An
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor fulfilled function is an anonymous built-in function
that is used as part of the
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
specification device to unwrap promises passed in to the
[[https://tc39.es/ecma262/#sec-asyncgenerator-prototype-return][AsyncGenerator.prototype.return
( =value= )]] method. Each
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor fulfilled function has a [[Generator]] internal slot.

When an
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor fulfilled function is called with argument =value=, the
following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Set =F=.[[Generator]].[[AsyncGeneratorState]] to completed.
3. Return
   ! [[https://tc39.es/ecma262/#sec-asyncgeneratorresolve][AsyncGeneratorResolve]](=F=.[[Generator]],
   =value=, true).

The "length" property of an
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor fulfilled function is 1.

* 25.5.3.5.2AsyncGeneratorResumeNext Return Processor Rejected Functions
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorresumenext-return-processor-rejected-functions
  :END:

An
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor rejected function is an anonymous built-in function
that is used as part of the
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
specification device to unwrap promises passed in to the
[[https://tc39.es/ecma262/#sec-asyncgenerator-prototype-return][AsyncGenerator.prototype.return
( =value= )]] method. Each
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor rejected function has a [[Generator]] internal slot.

When an
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor rejected function is called with argument =reason=, the
following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Set =F=.[[Generator]].[[AsyncGeneratorState]] to completed.
3. Return
   ! [[https://tc39.es/ecma262/#sec-asyncgeneratorreject][AsyncGeneratorReject]](=F=.[[Generator]],
   =reason=).

The "length" property of an
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]]
return processor rejected function is 1.

* 25.5.3.6AsyncGeneratorEnqueue ( =generator=, =completion= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratorenqueue-generator-completion
  :END:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =completion= is a
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]].
2. Let =promiseCapability= be
   ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=generator=)
   is not Object, or if =generator= does not have an
   [[AsyncGeneratorState]] internal slot, then

   1. Let =badGeneratorError= be a newly created TypeError object.
   2. Perform
      ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
      undefined, « =badGeneratorError= »).
   3. Return =promiseCapability=.[[Promise]].

4. Let =queue= be =generator=.[[AsyncGeneratorQueue]].
5. Let =request= be AsyncGeneratorRequest { [[Completion]]:
   =completion=, [[Capability]]: =promiseCapability= }.
6. Append =request= to the end of =queue=.
7. Let =state= be =generator=.[[AsyncGeneratorState]].
8. If =state= is not executing, then

   1. Perform
      ! [[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][AsyncGeneratorResumeNext]](=generator=).

9. Return =promiseCapability=.[[Promise]].

* 25.5.3.7AsyncGeneratorYield ( =value= )
  :PROPERTIES:
  :CUSTOM_ID: asyncgeneratoryield-value
  :END:

The abstract operation AsyncGeneratorYield with argument =value=
performs the following steps:

1.  Let =genContext= be the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =genContext= is the
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]] of a generator.
3.  Let =generator= be the value of the Generator component of
    =genContext=.
4.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]()
    is async.
5.  Set =value= to ? [[https://tc39.es/ecma262/#await][Await]](=value=).
6.  Set =generator=.[[AsyncGeneratorState]] to suspendedYield.
7.  Remove =genContext= from the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] and restore the
    [[https://tc39.es/ecma262/#sec-execution-contexts][execution
    context]] that is at the top of the
    [[https://tc39.es/ecma262/#execution-context-stack][execution
    context stack]] as the
    [[https://tc39.es/ecma262/#running-execution-context][running
    execution context]].
8.  Set the code evaluation state of =genContext= such that when
    evaluation is resumed with a
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
    =resumptionValue= the following steps will be performed:

    1. If =resumptionValue=.[[Type]] is not return, return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=resumptionValue=).
    2. Let =awaited= be
       [[https://tc39.es/ecma262/#await][Await]](=resumptionValue=.[[Value]]).
    3. If =awaited=.[[Type]] is throw, return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=awaited=).
    4. [[https://tc39.es/ecma262/#assert][Assert]]: =awaited=.[[Type]]
       is normal.
    5. Return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
       { [[Type]]: return, [[Value]]: =awaited=.[[Value]], [[Target]]:
       empty }.
    6. NOTE: When one of the above steps returns, it returns to the
       evaluation of the
       [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
       production that originally called this abstract operation.

9.  Return
    ! [[https://tc39.es/ecma262/#sec-asyncgeneratorresolve][AsyncGeneratorResolve]](=generator=,
    =value=, false).
10. NOTE: This returns to the evaluation of the operation that had most
    previously resumed evaluation of =genContext=.

* 25.6Promise Objects
  :PROPERTIES:
  :CUSTOM_ID: promise-objects
  :END:

A Promise is an object that is used as a placeholder for the eventual
results of a deferred (and possibly asynchronous) computation.

Any Promise object is in one of three mutually exclusive states:
/fulfilled/, /rejected/, and /pending/:

- A promise =p= is fulfilled if =p.then(f, r)= will immediately enqueue
  a [[https://tc39.es/ecma262/#job][Job]] to call the function =f=.
- A promise =p= is rejected if =p.then(f, r)= will immediately enqueue a
  [[https://tc39.es/ecma262/#job][Job]] to call the function =r=.
- A promise is pending if it is neither fulfilled nor rejected.

A promise is said to be /settled/ if it is not pending, i.e. if it is
either fulfilled or rejected.

A promise is /resolved/ if it is settled or if it has been “locked in”
to match the state of another promise. Attempting to resolve or reject a
resolved promise has no effect. A promise is /unresolved/ if it is not
resolved. An unresolved promise is always in the pending state. A
resolved promise may be pending, fulfilled or rejected.

* 25.6.1Promise Abstract Operations
  :PROPERTIES:
  :CUSTOM_ID: promise-abstract-operations
  :END:

* 25.6.1.1PromiseCapability Records
  :PROPERTIES:
  :CUSTOM_ID: promisecapability-records
  :END:

A PromiseCapability is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
value used to encapsulate a promise object along with the functions that
are capable of resolving or rejecting that promise object.
PromiseCapability Records are produced by the
[[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]
abstract operation.

PromiseCapability Records have the fields listed in
[[https://tc39.es/ecma262/#table-57][Table 77]].

Table 77: PromiseCapability
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
Fields

| Field Name    | Value                                                             | Meaning                                                          |
|---------------+-------------------------------------------------------------------+------------------------------------------------------------------|
| [[Promise]]   | An object                                                         | An object that is usable as a promise.                           |
| [[Resolve]]   | A [[https://tc39.es/ecma262/#function-object][function object]]   | The function that is used to resolve the given promise object.   |
| [[Reject]]    | A [[https://tc39.es/ecma262/#function-object][function object]]   | The function that is used to reject the given promise object.    |

* 25.6.1.1.1IfAbruptRejectPromise ( =value=, =capability= )
  :PROPERTIES:
  :CUSTOM_ID: ifabruptrejectpromise-value-capability
  :END:

IfAbruptRejectPromise is a shorthand for a sequence of algorithm steps
that use a PromiseCapability
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
An algorithm step of the form:

1. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=value=,
   =capability=).

means the same thing as:

1. If =value= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], then

   1. Perform
      ? [[https://tc39.es/ecma262/#sec-call][Call]](=capability=.[[Reject]],
      undefined, « =value=.[[Value]] »).
   2. Return =capability=.[[Promise]].

2. Else if =value= is a
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion
   Record]], set =value= to =value=.[[Value]].

* 25.6.1.2PromiseReaction Records
  :PROPERTIES:
  :CUSTOM_ID: promisereaction-records
  :END:

The PromiseReaction is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
value used to store information about how a promise should react when it
becomes resolved or rejected with a given value. PromiseReaction records
are created by the
[[https://tc39.es/ecma262/#sec-performpromisethen][PerformPromiseThen]]
abstract operation, and are used by a
[[https://tc39.es/ecma262/#sec-promisereactionjob][PromiseReactionJob]].

PromiseReaction records have the fields listed in
[[https://tc39.es/ecma262/#table-58][Table 78]].

Table 78: PromiseReaction
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
Fields

| Field Name       | Value                                                                                                           | Meaning                                                                                                                                                                                                                                  |
|------------------+-----------------------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[Capability]]   | A PromiseCapability [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]], or undefined   | The capabilities of the promise for which this record provides a reaction handler.                                                                                                                                                       |
| [[Type]]         | Fulfill | Reject                                                                                                | The [[Type]] is used when [[Handler]] is undefined to allow for behaviour specific to the settlement type.                                                                                                                               |
| [[Handler]]      | A [[https://tc39.es/ecma262/#function-object][function object]] or undefined.                                   | The function that should be applied to the incoming value, and whose return value will govern what happens to the derived promise. If [[Handler]] is undefined, a function that depends on the value of [[Type]] will be used instead.   |

* 25.6.1.3CreateResolvingFunctions ( =promise= )
  :PROPERTIES:
  :CUSTOM_ID: createresolvingfunctions-promise
  :END:

When CreateResolvingFunctions is performed with argument =promise=, the
following steps are taken:

1.  Let =alreadyResolved= be the
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
    { [[Value]]: false }.
2.  Let =stepsResolve= be the algorithm steps defined in
    [[https://tc39.es/ecma262/#sec-promise-resolve-functions][Promise
    Resolve Functions]].
3.  Let =resolve= be
    ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsResolve=,
    « [[Promise]], [[AlreadyResolved]] »).
4.  Set =resolve=.[[Promise]] to =promise=.
5.  Set =resolve=.[[AlreadyResolved]] to =alreadyResolved=.
6.  Let =stepsReject= be the algorithm steps defined in
    [[https://tc39.es/ecma262/#sec-promise-reject-functions][Promise
    Reject Functions]].
7.  Let =reject= be
    ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsReject=,
    « [[Promise]], [[AlreadyResolved]] »).
8.  Set =reject=.[[Promise]] to =promise=.
9.  Set =reject=.[[AlreadyResolved]] to =alreadyResolved=.
10. Return the
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
    { [[Resolve]]: =resolve=, [[Reject]]: =reject= }.

* 25.6.1.3.1Promise Reject Functions
  :PROPERTIES:
  :CUSTOM_ID: promise-reject-functions
  :END:

A promise reject function is an anonymous built-in function that has
[[Promise]] and [[AlreadyResolved]] internal slots.

When a promise reject function is called with argument =reason=, the
following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. [[https://tc39.es/ecma262/#assert][Assert]]: =F= has a [[Promise]]
   internal slot whose value is an Object.
3. Let =promise= be =F=.[[Promise]].
4. Let =alreadyResolved= be =F=.[[AlreadyResolved]].
5. If =alreadyResolved=.[[Value]] is true, return undefined.
6. Set =alreadyResolved=.[[Value]] to true.
7. Return
   [[https://tc39.es/ecma262/#sec-rejectpromise][RejectPromise]](=promise=,
   =reason=).

The "length" property of a promise reject function is 1.

* 25.6.1.3.2Promise Resolve Functions
  :PROPERTIES:
  :CUSTOM_ID: promise-resolve-functions
  :END:

A promise resolve function is an anonymous built-in function that has
[[Promise]] and [[AlreadyResolved]] internal slots.

When a promise resolve function is called with argument =resolution=,
the following steps are taken:

1.  Let =F= be the
    [[https://tc39.es/ecma262/#active-function-object][active function
    object]].
2.  [[https://tc39.es/ecma262/#assert][Assert]]: =F= has a [[Promise]]
    internal slot whose value is an Object.
3.  Let =promise= be =F=.[[Promise]].
4.  Let =alreadyResolved= be =F=.[[AlreadyResolved]].
5.  If =alreadyResolved=.[[Value]] is true, return undefined.
6.  Set =alreadyResolved=.[[Value]] to true.
7.  If
    [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=resolution=,
    =promise=) is true, then

    1. Let =selfResolutionError= be a newly created TypeError object.
    2. Return
       [[https://tc39.es/ecma262/#sec-rejectpromise][RejectPromise]](=promise=,
       =selfResolutionError=).

8.  If
    [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=resolution=)
    is not Object, then

    1. Return
       [[https://tc39.es/ecma262/#sec-fulfillpromise][FulfillPromise]](=promise=,
       =resolution=).

9.  Let =then= be
    [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=resolution=, "then").
10. If =then= is an
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
    completion]], then

    1. Return
       [[https://tc39.es/ecma262/#sec-rejectpromise][RejectPromise]](=promise=,
       =then=.[[Value]]).

11. Let =thenAction= be =then=.[[Value]].
12. If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=thenAction=)
    is false, then

    1. Return
       [[https://tc39.es/ecma262/#sec-fulfillpromise][FulfillPromise]](=promise=,
       =resolution=).

13. Perform
    [[https://tc39.es/ecma262/#sec-enqueuejob][EnqueueJob]]("PromiseJobs",
    [[https://tc39.es/ecma262/#sec-promiseresolvethenablejob][PromiseResolveThenableJob]],
    « =promise=, =resolution=, =thenAction= »).
14. Return undefined.

The "length" property of a promise resolve function is 1.

* 25.6.1.4FulfillPromise ( =promise=, =value= )
  :PROPERTIES:
  :CUSTOM_ID: fulfillpromise-promise-value
  :END:

When the FulfillPromise abstract operation is called with arguments
=promise= and =value=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The value of
   =promise=.[[PromiseState]] is pending.
2. Let =reactions= be =promise=.[[PromiseFulfillReactions]].
3. Set =promise=.[[PromiseResult]] to =value=.
4. Set =promise=.[[PromiseFulfillReactions]] to undefined.
5. Set =promise=.[[PromiseRejectReactions]] to undefined.
6. Set =promise=.[[PromiseState]] to fulfilled.
7. Return
   [[https://tc39.es/ecma262/#sec-triggerpromisereactions][TriggerPromiseReactions]](=reactions=,
   =value=).

* 25.6.1.5NewPromiseCapability ( =C= )
  :PROPERTIES:
  :CUSTOM_ID: newpromisecapability-c
  :END:

The abstract operation NewPromiseCapability takes a
[[https://tc39.es/ecma262/#constructor][constructor]] function, and
attempts to use that
[[https://tc39.es/ecma262/#constructor][constructor]] function in the
fashion of the built-in =Promise=
[[https://tc39.es/ecma262/#constructor][constructor]] to create a
Promise object and extract its resolve and reject functions. The promise
plus the resolve and reject functions are used to initialize a new
PromiseCapability
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
which is returned as the value of this abstract operation.

1.  If
    [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=)
    is false, throw a TypeError exception.
2.  NOTE: =C= is assumed to be a
    [[https://tc39.es/ecma262/#constructor][constructor]] function that
    supports the parameter conventions of the =Promise=
    [[https://tc39.es/ecma262/#constructor][constructor]] (see
    [[https://tc39.es/ecma262/#sec-promise-executor][25.6.3.1]]).
3.  Let =promiseCapability= be the PromiseCapability { [[Promise]]:
    undefined, [[Resolve]]: undefined, [[Reject]]: undefined }.
4.  Let =steps= be the algorithm steps defined in
    [[https://tc39.es/ecma262/#sec-getcapabilitiesexecutor-functions][GetCapabilitiesExecutor
    Functions]].
5.  Let =executor= be
    ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
    « [[Capability]] »).
6.  Set =executor=.[[Capability]] to =promiseCapability=.
7.  Let =promise= be
    ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=C=, «
    =executor= »).
8.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=promiseCapability=.[[Resolve]])
    is false, throw a TypeError exception.
9.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=promiseCapability=.[[Reject]])
    is false, throw a TypeError exception.
10. Set =promiseCapability=.[[Promise]] to =promise=.
11. Return =promiseCapability=.

Note

This abstract operation supports Promise subclassing, as it is generic
on any [[https://tc39.es/ecma262/#constructor][constructor]] that calls
a passed executor function argument in the same way as the Promise
[[https://tc39.es/ecma262/#constructor][constructor]]. It is used to
generalize static methods of the Promise
[[https://tc39.es/ecma262/#constructor][constructor]] to any subclass.

* 25.6.1.5.1GetCapabilitiesExecutor Functions
  :PROPERTIES:
  :CUSTOM_ID: getcapabilitiesexecutor-functions
  :END:

A GetCapabilitiesExecutor function is an anonymous built-in function
that has a [[Capability]] internal slot.

When a GetCapabilitiesExecutor function is called with arguments
=resolve= and =reject=, the following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. [[https://tc39.es/ecma262/#assert][Assert]]: =F= has a [[Capability]]
   internal slot whose value is a PromiseCapability
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
3. Let =promiseCapability= be =F=.[[Capability]].
4. If =promiseCapability=.[[Resolve]] is not undefined, throw a
   TypeError exception.
5. If =promiseCapability=.[[Reject]] is not undefined, throw a TypeError
   exception.
6. Set =promiseCapability=.[[Resolve]] to =resolve=.
7. Set =promiseCapability=.[[Reject]] to =reject=.
8. Return undefined.

The "length" property of a GetCapabilitiesExecutor function is 2.

* 25.6.1.6IsPromise ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: ispromise-x
  :END:

The abstract operation IsPromise checks for the promise brand on an
object.

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is not Object, return false.
2. If =x= does not have a [[PromiseState]] internal slot, return false.
3. Return true.

* 25.6.1.7RejectPromise ( =promise=, =reason= )
  :PROPERTIES:
  :CUSTOM_ID: rejectpromise-promise-reason
  :END:

When the RejectPromise abstract operation is called with arguments
=promise= and =reason=, the following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]: The value of
   =promise=.[[PromiseState]] is pending.
2. Let =reactions= be =promise=.[[PromiseRejectReactions]].
3. Set =promise=.[[PromiseResult]] to =reason=.
4. Set =promise=.[[PromiseFulfillReactions]] to undefined.
5. Set =promise=.[[PromiseRejectReactions]] to undefined.
6. Set =promise=.[[PromiseState]] to rejected.
7. If =promise=.[[PromiseIsHandled]] is false, perform
   [[https://tc39.es/ecma262/#sec-host-promise-rejection-tracker][HostPromiseRejectionTracker]](=promise=,
   "reject").
8. Return
   [[https://tc39.es/ecma262/#sec-triggerpromisereactions][TriggerPromiseReactions]](=reactions=,
   =reason=).

* 25.6.1.8TriggerPromiseReactions ( =reactions=, =argument= )
  :PROPERTIES:
  :CUSTOM_ID: triggerpromisereactions-reactions-argument
  :END:

The abstract operation TriggerPromiseReactions takes a collection of
PromiseReactionRecords and enqueues a new
[[https://tc39.es/ecma262/#job][Job]] for each record. Each such
[[https://tc39.es/ecma262/#job][Job]] processes the [[Type]] and
[[Handler]] of the PromiseReactionRecord, and if the [[Handler]] is a
function, calls it passing the given argument. If the [[Handler]] is
undefined, the behaviour is determined by the [[Type]].

1. For each =reaction= in =reactions=, in original insertion order, do

   1. Perform
      [[https://tc39.es/ecma262/#sec-enqueuejob][EnqueueJob]]("PromiseJobs",
      [[https://tc39.es/ecma262/#sec-promisereactionjob][PromiseReactionJob]],
      « =reaction=, =argument= »).

2. Return undefined.

* 25.6.1.9HostPromiseRejectionTracker ( =promise=, =operation= )
  :PROPERTIES:
  :CUSTOM_ID: hostpromiserejectiontracker-promise-operation
  :END:

HostPromiseRejectionTracker is an implementation-defined abstract
operation that allows host environments to track promise rejections.

An implementation of HostPromiseRejectionTracker must complete normally
in all cases. The default implementation of HostPromiseRejectionTracker
is to unconditionally return an empty normal completion.

Note 1

HostPromiseRejectionTracker is called in two scenarios:

- When a promise is rejected without any handlers, it is called with its
  =operation= argument set to "reject".
- When a handler is added to a rejected promise for the first time, it
  is called with its =operation= argument set to "handle".

A typical implementation of HostPromiseRejectionTracker might try to
notify developers of unhandled rejections, while also being careful to
notify them if such previous notifications are later invalidated by new
handlers being attached.

Note 2

If =operation= is "handle", an implementation should not hold a
reference to =promise= in a way that would interfere with garbage
collection. An implementation may hold a reference to =promise= if
=operation= is "reject", since it is expected that rejections will be
rare and not on hot code paths.

* 25.6.2Promise Jobs
  :PROPERTIES:
  :CUSTOM_ID: promise-jobs
  :END:

* 25.6.2.1PromiseReactionJob ( =reaction=, =argument= )
  :PROPERTIES:
  :CUSTOM_ID: promisereactionjob-reaction-argument
  :END:

The job PromiseReactionJob with parameters =reaction= and =argument=
applies the appropriate handler to the incoming value, and uses the
handler's return value to resolve or reject the derived promise
associated with that handler.

1.  [[https://tc39.es/ecma262/#assert][Assert]]: =reaction= is a
    PromiseReaction
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
2.  Let =promiseCapability= be =reaction=.[[Capability]].
3.  Let =type= be =reaction=.[[Type]].
4.  Let =handler= be =reaction=.[[Handler]].
5.  If =handler= is undefined, then

    1. If =type= is Fulfill, let =handlerResult= be
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](=argument=).
    2. Else,

       1. [[https://tc39.es/ecma262/#assert][Assert]]: =type= is Reject.
       2. Let =handlerResult= be
          [[https://tc39.es/ecma262/#sec-throwcompletion][ThrowCompletion]](=argument=).

6.  Else, let =handlerResult= be
    [[https://tc39.es/ecma262/#sec-call][Call]](=handler=, undefined, «
    =argument= »).
7.  If =promiseCapability= is undefined, then

    1. [[https://tc39.es/ecma262/#assert][Assert]]: =handlerResult= is
       not an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]].
    2. Return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

8.  If =handlerResult= is an
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
    completion]], then

    1. Let =status= be
       [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
       undefined, « =handlerResult=.[[Value]] »).

9.  Else,

    1. Let =status= be
       [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
       undefined, « =handlerResult=.[[Value]] »).

10. Return
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

* 25.6.2.2PromiseResolveThenableJob ( =promiseToResolve=, =thenable=,
=then= )
  :PROPERTIES:
  :CUSTOM_ID: promiseresolvethenablejob-promisetoresolve-thenable-then
  :END:

The job PromiseResolveThenableJob with parameters =promiseToResolve=,
=thenable=, and =then= performs the following steps:

1. Let =resolvingFunctions= be
   [[https://tc39.es/ecma262/#sec-createresolvingfunctions][CreateResolvingFunctions]](=promiseToResolve=).
2. Let =thenCallResult= be
   [[https://tc39.es/ecma262/#sec-call][Call]](=then=, =thenable=, «
   =resolvingFunctions=.[[Resolve]], =resolvingFunctions=.[[Reject]] »).
3. If =thenCallResult= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], then

   1. Let =status= be
      [[https://tc39.es/ecma262/#sec-call][Call]](=resolvingFunctions=.[[Reject]],
      undefined, « =thenCallResult=.[[Value]] »).
   2. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

4. Return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=thenCallResult=).

Note

This [[https://tc39.es/ecma262/#job][Job]] uses the supplied thenable
and its =then= method to resolve the given promise. This process must
take place as a [[https://tc39.es/ecma262/#job][Job]] to ensure that the
evaluation of the =then= method occurs after evaluation of any
surrounding code has completed.

* 25.6.3The Promise Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-promise-constructor
  :END:

The Promise [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Promise%.
- is the initial value of the "Promise" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new Promise object when called as a
  [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.
- is designed to be subclassable. It may be used as the value in an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified =Promise= behaviour must include a
  =super= call to the =Promise=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize the subclass instance with the internal state necessary to
  support the =Promise= and =Promise.prototype= built-in methods.

* 25.6.3.1Promise ( =executor= )
  :PROPERTIES:
  :CUSTOM_ID: promise-executor
  :END:

When the =Promise= function is called with argument =executor=, the
following steps are taken:

1.  If NewTarget is undefined, throw a TypeError exception.
2.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=executor=)
    is false, throw a TypeError exception.
3.  Let =promise= be
    ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](NewTarget,
    "%Promise.prototype%", « [[PromiseState]], [[PromiseResult]],
    [[PromiseFulfillReactions]], [[PromiseRejectReactions]],
    [[PromiseIsHandled]] »).
4.  Set =promise=.[[PromiseState]] to pending.
5.  Set =promise=.[[PromiseFulfillReactions]] to a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
6.  Set =promise=.[[PromiseRejectReactions]] to a new empty
    [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
7.  Set =promise=.[[PromiseIsHandled]] to false.
8.  Let =resolvingFunctions= be
    [[https://tc39.es/ecma262/#sec-createresolvingfunctions][CreateResolvingFunctions]](=promise=).
9.  Let =completion= be
    [[https://tc39.es/ecma262/#sec-call][Call]](=executor=, undefined, «
    =resolvingFunctions=.[[Resolve]], =resolvingFunctions=.[[Reject]]
    »).
10. If =completion= is an
    [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
    completion]], then

    1. Perform
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=resolvingFunctions=.[[Reject]],
       undefined, « =completion=.[[Value]] »).

11. Return =promise=.

Note

The =executor= argument must be a
[[https://tc39.es/ecma262/#function-object][function object]]. It is
called for initiating and reporting completion of the possibly deferred
action represented by this Promise object. The executor is called with
two arguments: =resolve= and =reject=. These are functions that may be
used by the =executor= function to report eventual completion or failure
of the deferred computation. Returning from the executor function does
not mean that the deferred action has been completed but only that the
request to eventually perform the deferred action has been accepted.

The =resolve= function that is passed to an =executor= function accepts
a single argument. The =executor= code may eventually call the =resolve=
function to indicate that it wishes to resolve the associated Promise
object. The argument passed to the =resolve= function represents the
eventual value of the deferred action and can be either the actual
fulfillment value or another Promise object which will provide the value
if it is fulfilled.

The =reject= function that is passed to an =executor= function accepts a
single argument. The =executor= code may eventually call the =reject=
function to indicate that the associated Promise is rejected and will
never be fulfilled. The argument passed to the =reject= function is used
as the rejection value of the promise. Typically it will be an =Error=
object.

The resolve and reject functions passed to an =executor= function by the
Promise [[https://tc39.es/ecma262/#constructor][constructor]] have the
capability to actually resolve and reject the associated promise.
Subclasses may have different
[[https://tc39.es/ecma262/#constructor][constructor]] behaviour that
passes in customized values for resolve and reject.

* 25.6.4Properties of the Promise Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-promise-constructor
  :END:

The Promise [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- has the following properties:

* 25.6.4.1Promise.all ( =iterable= )
  :PROPERTIES:
  :CUSTOM_ID: promise.all-iterable
  :END:

The =all= function returns a new promise which is fulfilled with an
array of fulfillment values for the passed promises, or rejects with the
reason of the first passed promise that rejects. It resolves all
elements of the passed iterable to promises as it runs this algorithm.

1. Let =C= be the this value.
2. Let =promiseCapability= be
   ? [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]](=C=).
3. Let =iteratorRecord= be
   [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=iterable=).
4. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=iteratorRecord=,
   =promiseCapability=).
5. Let =result= be
   [[https://tc39.es/ecma262/#sec-performpromiseall][PerformPromiseAll]](=iteratorRecord=,
   =C=, =promiseCapability=).
6. If =result= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], then

   1. If =iteratorRecord=.[[Done]] is false, set =result= to
      [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
      =result=).
   2. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=result=,
      =promiseCapability=).

7. Return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

This function is the %Promise_all% intrinsic object.

Note

The =all= function requires its this value to be a
[[https://tc39.es/ecma262/#constructor][constructor]] function that
supports the parameter conventions of the =Promise=
[[https://tc39.es/ecma262/#constructor][constructor]].

* 25.6.4.1.1Runtime Semantics: PerformPromiseAll ( =iteratorRecord=,
=constructor=, =resultCapability= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-performpromiseall-iteratorrecord-constructor-resultcapability
  :END:

When the PerformPromiseAll abstract operation is called with arguments
=iteratorRecord=, =constructor=, and =resultCapability=, the following
steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=constructor=)
   is true.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =resultCapability= is a
   PromiseCapability
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
3. Let =values= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. Let =remainingElementsCount= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Value]]: 1 }.
5. Let =promiseResolve= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=constructor=,
   "resolve").
6. If
   ! [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=promiseResolve=)
   is false, throw a TypeError exception.
7. Let =index= be 0.
8. Repeat,

   1.  Let =next= be
       [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
   2.  If =next= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], set =iteratorRecord=.[[Done]] to true.
   3.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
   4.  If =next= is false, then

       1. Set =iteratorRecord=.[[Done]] to true.
       2. Set =remainingElementsCount=.[[Value]] to
          =remainingElementsCount=.[[Value]] - 1.
       3. If =remainingElementsCount=.[[Value]] is 0, then

          1. Let =valuesArray= be
             ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=values=).
          2. Perform
             ? [[https://tc39.es/ecma262/#sec-call][Call]](=resultCapability=.[[Resolve]],
             undefined, « =valuesArray= »).

       4. Return =resultCapability=.[[Promise]].

   5.  Let =nextValue= be
       [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
   6.  If =nextValue= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], set =iteratorRecord=.[[Done]] to true.
   7.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextValue=).
   8.  Append undefined to =values=.
   9.  Let =nextPromise= be
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseResolve=,
       =constructor=, « =nextValue= »).
   10. Let =steps= be the algorithm steps defined in
       [[https://tc39.es/ecma262/#sec-promise.all-resolve-element-functions][=Promise.all=
       Resolve Element Functions]].
   11. Let =resolveElement= be
       ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
       « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]],
       [[RemainingElements]] »).
   12. Set =resolveElement=.[[AlreadyCalled]] to the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
       { [[Value]]: false }.
   13. Set =resolveElement=.[[Index]] to =index=.
   14. Set =resolveElement=.[[Values]] to =values=.
   15. Set =resolveElement=.[[Capability]] to =resultCapability=.
   16. Set =resolveElement=.[[RemainingElements]] to
       =remainingElementsCount=.
   17. Set =remainingElementsCount=.[[Value]] to
       =remainingElementsCount=.[[Value]] + 1.
   18. Perform
       ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=nextPromise=,
       "then", « =resolveElement=, =resultCapability=.[[Reject]] »).
   19. Set =index= to =index= + 1.

* 25.6.4.1.2=Promise.all= Resolve Element Functions
  :PROPERTIES:
  :CUSTOM_ID: promise.all-resolve-element-functions
  :END:

A =Promise.all= resolve element function is an anonymous built-in
function that is used to resolve a specific =Promise.all= element. Each
=Promise.all= resolve element function has [[Index]], [[Values]],
[[Capability]], [[RemainingElements]], and [[AlreadyCalled]] internal
slots.

When a =Promise.all= resolve element function is called with argument
=x=, the following steps are taken:

1.  Let =F= be the
    [[https://tc39.es/ecma262/#active-function-object][active function
    object]].
2.  Let =alreadyCalled= be =F=.[[AlreadyCalled]].
3.  If =alreadyCalled=.[[Value]] is true, return undefined.
4.  Set =alreadyCalled=.[[Value]] to true.
5.  Let =index= be =F=.[[Index]].
6.  Let =values= be =F=.[[Values]].
7.  Let =promiseCapability= be =F=.[[Capability]].
8.  Let =remainingElementsCount= be =F=.[[RemainingElements]].
9.  Set =values=[=index=] to =x=.
10. Set =remainingElementsCount=.[[Value]] to
    =remainingElementsCount=.[[Value]] - 1.
11. If =remainingElementsCount=.[[Value]] is 0, then

    1. Let =valuesArray= be
       ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=values=).
    2. Return
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
       undefined, « =valuesArray= »).

12. Return undefined.

The "length" property of a =Promise.all= resolve element function is 1.

* 25.6.4.2Promise.allSettled ( =iterable= )
  :PROPERTIES:
  :CUSTOM_ID: promise.allsettled-iterable
  :END:

The =allSettled= function returns a promise that is fulfilled with an
array of promise state snapshots, but only after all the original
promises have settled, i.e. become either fulfilled or rejected. It
resolves all elements of the passed iterable to promises as it runs this
algorithm.

1. Let =C= be the this value.
2. Let =promiseCapability= be
   ? [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]](=C=).
3. Let =iteratorRecord= be
   [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=iterable=).
4. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=iteratorRecord=,
   =promiseCapability=).
5. Let =result= be
   [[https://tc39.es/ecma262/#sec-performpromiseallsettled][PerformPromiseAllSettled]](=iteratorRecord=,
   =C=, =promiseCapability=).
6. If =result= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], then

   1. If =iteratorRecord=.[[Done]] is false, set =result= to
      [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
      =result=).
   2. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=result=,
      =promiseCapability=).

7. Return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

Note

The =allSettled= function requires its this value to be a
[[https://tc39.es/ecma262/#constructor][constructor]] function that
supports the parameter conventions of the =Promise=
[[https://tc39.es/ecma262/#constructor][constructor]].

* 25.6.4.2.1Runtime Semantics: PerformPromiseAllSettled (
=iteratorRecord=, =constructor=, =resultCapability= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-performpromiseallsettled-iteratorrecord-constructor-resultcapability
  :END:

When the PerformPromiseAllSettled abstract operation is called with
arguments =iteratorRecord=, =constructor=, and =resultCapability=, the
following steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   ! [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=constructor=)
   is true.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =resultCapability= is a
   PromiseCapability
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
3. Let =values= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
4. Let =remainingElementsCount= be the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   { [[Value]]: 1 }.
5. Let =index= be 0.
6. Let =promiseResolve= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=constructor=,
   "resolve").
7. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=promiseResolve=)
   is false, throw a TypeError exception.
8. Repeat,

   1.  Let =next= be
       [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
   2.  If =next= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], set =iteratorRecord=.[[Done]] to true.
   3.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
   4.  If =next= is false, then

       1. Set =iteratorRecord=.[[Done]] to true.
       2. Set =remainingElementsCount=.[[Value]] to
          =remainingElementsCount=.[[Value]] - 1.
       3. If =remainingElementsCount=.[[Value]] is 0, then

          1. Let =valuesArray= be
             ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=values=).
          2. Perform
             ? [[https://tc39.es/ecma262/#sec-call][Call]](=resultCapability=.[[Resolve]],
             undefined, « =valuesArray= »).

       4. Return =resultCapability=.[[Promise]].

   5.  Let =nextValue= be
       [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
   6.  If =nextValue= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], set =iteratorRecord=.[[Done]] to true.
   7.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextValue=).
   8.  Append undefined to =values=.
   9.  Let =nextPromise= be
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseResolve=,
       =constructor=, « =nextValue= »).
   10. Let =steps= be the algorithm steps defined in
       [[https://tc39.es/ecma262/#sec-promise.allsettled-resolve-element-functions][=Promise.allSettled=
       Resolve Element Functions]].
   11. Let =resolveElement= be
       ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
       « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]],
       [[RemainingElements]] »).
   12. Let =alreadyCalled= be the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
       { [[Value]]: false }.
   13. Set =resolveElement=.[[AlreadyCalled]] to =alreadyCalled=.
   14. Set =resolveElement=.[[Index]] to =index=.
   15. Set =resolveElement=.[[Values]] to =values=.
   16. Set =resolveElement=.[[Capability]] to =resultCapability=.
   17. Set =resolveElement=.[[RemainingElements]] to
       =remainingElementsCount=.
   18. Let =rejectSteps= be the algorithm steps defined in
       [[https://tc39.es/ecma262/#sec-promise.allsettled-reject-element-functions][=Promise.allSettled=
       Reject Element Functions]].
   19. Let =rejectElement= be
       ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=rejectSteps=,
       « [[AlreadyCalled]], [[Index]], [[Values]], [[Capability]],
       [[RemainingElements]] »).
   20. Set =rejectElement=.[[AlreadyCalled]] to =alreadyCalled=.
   21. Set =rejectElement=.[[Index]] to =index=.
   22. Set =rejectElement=.[[Values]] to =values=.
   23. Set =rejectElement=.[[Capability]] to =resultCapability=.
   24. Set =rejectElement=.[[RemainingElements]] to
       =remainingElementsCount=.
   25. Set =remainingElementsCount=.[[Value]] to
       =remainingElementsCount=.[[Value]] + 1.
   26. Perform
       ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=nextPromise=,
       "then", « =resolveElement=, =rejectElement= »).
   27. Set =index= to =index= + 1.

* 25.6.4.2.2=Promise.allSettled= Resolve Element Functions
  :PROPERTIES:
  :CUSTOM_ID: promise.allsettled-resolve-element-functions
  :END:

A =Promise.allSettled= resolve element function is an anonymous built-in
function that is used to resolve a specific =Promise.allSettled=
element. Each =Promise.allSettled= resolve element function has
[[Index]], [[Values]], [[Capability]], [[RemainingElements]], and
[[AlreadyCalled]] internal slots.

When a =Promise.allSettled= resolve element function is called with
argument =x=, the following steps are taken:

1.  Let =F= be the
    [[https://tc39.es/ecma262/#active-function-object][active function
    object]].
2.  Let =alreadyCalled= be =F=.[[AlreadyCalled]].
3.  If =alreadyCalled=.[[Value]] is true, return undefined.
4.  Set =alreadyCalled=.[[Value]] to true.
5.  Let =index= be =F=.[[Index]].
6.  Let =values= be =F=.[[Values]].
7.  Let =promiseCapability= be =F=.[[Capability]].
8.  Let =remainingElementsCount= be =F=.[[RemainingElements]].
9.  Let =obj= be
    ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
10. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
    "status", "fulfilled").
11. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
    "value", =x=).
12. Set =values=[=index=] to =obj=.
13. Set =remainingElementsCount=.[[Value]] to
    =remainingElementsCount=.[[Value]] - 1.
14. If =remainingElementsCount=.[[Value]] is 0, then

    1. Let =valuesArray= be
       ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=values=).
    2. Return
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
       undefined, « =valuesArray= »).

15. Return undefined.

The "length" property of a =Promise.allSettled= resolve element function
is 1.

* 25.6.4.2.3=Promise.allSettled= Reject Element Functions
  :PROPERTIES:
  :CUSTOM_ID: promise.allsettled-reject-element-functions
  :END:

A =Promise.allSettled= reject element function is an anonymous built-in
function that is used to reject a specific =Promise.allSettled= element.
Each =Promise.allSettled= reject element function has [[Index]],
[[Values]], [[Capability]], [[RemainingElements]], and [[AlreadyCalled]]
internal slots.

When a =Promise.allSettled= reject element function is called with
argument =x=, the following steps are taken:

1.  Let =F= be the
    [[https://tc39.es/ecma262/#active-function-object][active function
    object]].
2.  Let =alreadyCalled= be =F=.[[AlreadyCalled]].
3.  If =alreadyCalled=.[[Value]] is true, return undefined.
4.  Set =alreadyCalled=.[[Value]] to true.
5.  Let =index= be =F=.[[Index]].
6.  Let =values= be =F=.[[Values]].
7.  Let =promiseCapability= be =F=.[[Capability]].
8.  Let =remainingElementsCount= be =F=.[[RemainingElements]].
9.  Let =obj= be
    ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
10. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
    "status", "rejected").
11. Perform
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=obj=,
    "reason", =x=).
12. Set =values=[=index=] to =obj=.
13. Set =remainingElementsCount=.[[Value]] to
    =remainingElementsCount=.[[Value]] - 1.
14. If =remainingElementsCount=.[[Value]] is 0, then

    1. Let =valuesArray= be
       ! [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=values=).
    2. Return
       ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
       undefined, « =valuesArray= »).

15. Return undefined.

The "length" property of a =Promise.allSettled= reject element function
is 1.

* 25.6.4.3Promise.prototype
  :PROPERTIES:
  :CUSTOM_ID: promise.prototype
  :END:

The initial value of =Promise.prototype= is %Promise.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 25.6.4.4Promise.race ( =iterable= )
  :PROPERTIES:
  :CUSTOM_ID: promise.race-iterable
  :END:

The =race= function returns a new promise which is settled in the same
way as the first passed promise to settle. It resolves all elements of
the passed =iterable= to promises as it runs this algorithm.

1. Let =C= be the this value.
2. Let =promiseCapability= be
   ? [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]](=C=).
3. Let =iteratorRecord= be
   [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=iterable=).
4. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=iteratorRecord=,
   =promiseCapability=).
5. Let =result= be
   [[https://tc39.es/ecma262/#sec-performpromiserace][PerformPromiseRace]](=iteratorRecord=,
   =C=, =promiseCapability=).
6. If =result= is an
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
   completion]], then

   1. If =iteratorRecord=.[[Done]] is false, set =result= to
      [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
      =result=).
   2. [[https://tc39.es/ecma262/#sec-ifabruptrejectpromise][IfAbruptRejectPromise]](=result=,
      =promiseCapability=).

7. Return
   [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

Note 1

If the =iterable= argument is empty or if none of the promises in
=iterable= ever settle then the pending promise returned by this method
will never be settled.

Note 2

The =race= function expects its this value to be a
[[https://tc39.es/ecma262/#constructor][constructor]] function that
supports the parameter conventions of the =Promise=
[[https://tc39.es/ecma262/#constructor][constructor]]. It also expects
that its this value provides a =resolve= method.

* 25.6.4.4.1Runtime Semantics: PerformPromiseRace ( =iteratorRecord=,
=constructor=, =resultCapability= )
  :PROPERTIES:
  :CUSTOM_ID: runtime-semantics-performpromiserace-iteratorrecord-constructor-resultcapability
  :END:

When the PerformPromiseRace abstract operation is called with arguments
=iteratorRecord=, =constructor=, and =resultCapability=, the following
steps are taken:

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=constructor=)
   is true.
2. [[https://tc39.es/ecma262/#assert][Assert]]: =resultCapability= is a
   PromiseCapability
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].
3. Let =promiseResolve= be
   ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=constructor=,
   "resolve").
4. If
   ! [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=promiseResolve=)
   is false, throw a TypeError exception.
5. Repeat,

   1. Let =next= be
      [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
   2. If =next= is an
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
      completion]], set =iteratorRecord=.[[Done]] to true.
   3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
   4. If =next= is false, then

      1. Set =iteratorRecord=.[[Done]] to true.
      2. Return =resultCapability=.[[Promise]].

   5. Let =nextValue= be
      [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
   6. If =nextValue= is an
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
      completion]], set =iteratorRecord=.[[Done]] to true.
   7. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=nextValue=).
   8. Let =nextPromise= be
      ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseResolve=,
      =constructor=, « =nextValue= »).
   9. Perform
      ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=nextPromise=,
      "then", « =resultCapability=.[[Resolve]],
      =resultCapability=.[[Reject]] »).

* 25.6.4.5Promise.reject ( =r= )
  :PROPERTIES:
  :CUSTOM_ID: promise.reject-r
  :END:

The =reject= function returns a new promise rejected with the passed
argument.

1. Let =C= be the this value.
2. Let =promiseCapability= be
   ? [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]](=C=).
3. Perform
   ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
   undefined, « =r= »).
4. Return =promiseCapability=.[[Promise]].

This function is the %Promise_reject% intrinsic object.

Note

The =reject= function expects its this value to be a
[[https://tc39.es/ecma262/#constructor][constructor]] function that
supports the parameter conventions of the =Promise=
[[https://tc39.es/ecma262/#constructor][constructor]].

* 25.6.4.6Promise.resolve ( =x= )
  :PROPERTIES:
  :CUSTOM_ID: promise.resolve-x
  :END:

The =resolve= function returns either a new promise resolved with the
passed argument, or the argument itself if the argument is a promise
produced by this [[https://tc39.es/ecma262/#constructor][constructor]].

1. Let =C= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=C=)
   is not Object, throw a TypeError exception.
3. Return
   ? [[https://tc39.es/ecma262/#sec-promise-resolve][PromiseResolve]](=C=,
   =x=).

This function is the %Promise_resolve% intrinsic object.

Note

The =resolve= function expects its this value to be a
[[https://tc39.es/ecma262/#constructor][constructor]] function that
supports the parameter conventions of the =Promise=
[[https://tc39.es/ecma262/#constructor][constructor]].

* 25.6.4.6.1PromiseResolve ( =C=, =x= )
  :PROPERTIES:
  :CUSTOM_ID: promiseresolve-c-x
  :END:

The abstract operation PromiseResolve, given a
[[https://tc39.es/ecma262/#constructor][constructor]] and a value,
returns a new promise resolved with that value.

1. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=C=)
   is Object.
2. If [[https://tc39.es/ecma262/#sec-ispromise][IsPromise]](=x=) is
   true, then

   1. Let =xConstructor= be
      ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=x=,
      "constructor").
   2. If
      [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=xConstructor=,
      =C=) is true, return =x=.

3. Let =promiseCapability= be
   ? [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]](=C=).
4. Perform
   ? [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
   undefined, « =x= »).
5. Return =promiseCapability=.[[Promise]].

* 25.6.4.7get Promise [ @@species ]
  :PROPERTIES:
  :CUSTOM_ID: get-promise-species
  :END:

=Promise[@@species]= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] whose
set accessor function is undefined. Its get accessor function performs
the following steps:

1. Return the this value.

The value of the "name" property of this function is "get
[Symbol.species]".

Note

Promise prototype methods normally use their this object's
[[https://tc39.es/ecma262/#constructor][constructor]] to create a
derived object. However, a subclass
[[https://tc39.es/ecma262/#constructor][constructor]] may over-ride that
default behaviour by redefining its @@species property.

* 25.6.5Properties of the Promise Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-promise-prototype-object
  :END:

The Promise prototype object:

- is the intrinsic object %PromisePrototype%.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is an ordinary object.
- does not have a [[PromiseState]] internal slot or any of the other
  internal slots of Promise instances.

* 25.6.5.1Promise.prototype.catch ( =onRejected= )
  :PROPERTIES:
  :CUSTOM_ID: promise.prototype.catch-onrejected
  :END:

When the =catch= method is called with argument =onRejected=, the
following steps are taken:

1. Let =promise= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=promise=,
   "then", « undefined, =onRejected= »).

* 25.6.5.2Promise.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: promise.prototype.constructor
  :END:

The initial value of =Promise.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]].

* 25.6.5.3Promise.prototype.finally ( =onFinally= )
  :PROPERTIES:
  :CUSTOM_ID: promise.prototype.finally-onfinally
  :END:

When the =finally= method is called with argument =onFinally=, the
following steps are taken:

1. Let =promise= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=promise=)
   is not Object, throw a TypeError exception.
3. Let =C= be
   ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=promise=,
   [[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
4. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=) is
   true.
5. If
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=onFinally=)
   is false, then

   1. Let =thenFinally= be =onFinally=.
   2. Let =catchFinally= be =onFinally=.

6. Else,

   1. Let =stepsThenFinally= be the algorithm steps defined in
      [[https://tc39.es/ecma262/#sec-thenfinallyfunctions][Then Finally
      Functions]].
   2. Let =thenFinally= be
      ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsThenFinally=,
      « [[Constructor]], [[OnFinally]] »).
   3. Set =thenFinally=.[[Constructor]] to =C=.
   4. Set =thenFinally=.[[OnFinally]] to =onFinally=.
   5. Let =stepsCatchFinally= be the algorithm steps defined in
      [[https://tc39.es/ecma262/#sec-catchfinallyfunctions][Catch
      Finally Functions]].
   6. Let =catchFinally= be
      ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=stepsCatchFinally=,
      « [[Constructor]], [[OnFinally]] »).
   7. Set =catchFinally=.[[Constructor]] to =C=.
   8. Set =catchFinally=.[[OnFinally]] to =onFinally=.

7. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=promise=,
   "then", « =thenFinally=, =catchFinally= »).

* 25.6.5.3.1Then Finally Functions
  :PROPERTIES:
  :CUSTOM_ID: then-finally-functions
  :END:

A Then Finally function is an anonymous built-in function that has a
[[Constructor]] and an [[OnFinally]] internal slot. The value of the
[[Constructor]] internal slot is a =Promise=-like
[[https://tc39.es/ecma262/#constructor][constructor]]
[[https://tc39.es/ecma262/#function-object][function object]], and the
value of the [[OnFinally]] internal slot is a
[[https://tc39.es/ecma262/#function-object][function object]].

When a Then Finally function is called with argument =value=, the
following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =onFinally= be =F=.[[OnFinally]].
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=onFinally=)
   is true.
4. Let =result= be
   ? [[https://tc39.es/ecma262/#sec-call][Call]](=onFinally=,
   undefined).
5. Let =C= be =F=.[[Constructor]].
6. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=) is
   true.
7. Let =promise= be
   ? [[https://tc39.es/ecma262/#sec-promise-resolve][PromiseResolve]](=C=,
   =result=).
8. Let =valueThunk= be equivalent to a function that returns =value=.
9. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=promise=,
   "then", « =valueThunk= »).

The "length" property of a Then Finally function is 1.

* 25.6.5.3.2Catch Finally Functions
  :PROPERTIES:
  :CUSTOM_ID: catch-finally-functions
  :END:

A Catch Finally function is an anonymous built-in function that has a
[[Constructor]] and an [[OnFinally]] internal slot. The value of the
[[Constructor]] internal slot is a =Promise=-like
[[https://tc39.es/ecma262/#constructor][constructor]]
[[https://tc39.es/ecma262/#function-object][function object]], and the
value of the [[OnFinally]] internal slot is a
[[https://tc39.es/ecma262/#function-object][function object]].

When a Catch Finally function is called with argument =reason=, the
following steps are taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =onFinally= be =F=.[[OnFinally]].
3. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=onFinally=)
   is true.
4. Let =result= be
   ? [[https://tc39.es/ecma262/#sec-call][Call]](=onFinally=,
   undefined).
5. Let =C= be =F=.[[Constructor]].
6. [[https://tc39.es/ecma262/#assert][Assert]]:
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=C=) is
   true.
7. Let =promise= be
   ? [[https://tc39.es/ecma262/#sec-promise-resolve][PromiseResolve]](=C=,
   =result=).
8. Let =thrower= be equivalent to a function that throws =reason=.
9. Return ? [[https://tc39.es/ecma262/#sec-invoke][Invoke]](=promise=,
   "then", « =thrower= »).

The "length" property of a Catch Finally function is 1.

* 25.6.5.4Promise.prototype.then ( =onFulfilled=, =onRejected= )
  :PROPERTIES:
  :CUSTOM_ID: promise.prototype.then-onfulfilled-onrejected
  :END:

When the =then= method is called with arguments =onFulfilled= and
=onRejected=, the following steps are taken:

1. Let =promise= be the this value.
2. If [[https://tc39.es/ecma262/#sec-ispromise][IsPromise]](=promise=)
   is false, throw a TypeError exception.
3. Let =C= be
   ? [[https://tc39.es/ecma262/#sec-speciesconstructor][SpeciesConstructor]](=promise=,
   [[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
4. Let =resultCapability= be
   ? [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]](=C=).
5. Return
   [[https://tc39.es/ecma262/#sec-performpromisethen][PerformPromiseThen]](=promise=,
   =onFulfilled=, =onRejected=, =resultCapability=).

This function is the %PromiseProto_then% intrinsic object.

* 25.6.5.4.1PerformPromiseThen ( =promise=, =onFulfilled=, =onRejected=
[ , =resultCapability= ] )
  :PROPERTIES:
  :CUSTOM_ID: performpromisethen-promise-onfulfilled-onrejected-resultcapability
  :END:

The abstract operation PerformPromiseThen performs the “then” operation
on =promise= using =onFulfilled= and =onRejected= as its settlement
actions. If =resultCapability= is passed, the result is stored by
updating =resultCapability='s promise. (If it is not passed, then
PerformPromiseThen is being called by a specification-internal operation
where the result does not matter.)

1.  [[https://tc39.es/ecma262/#assert][Assert]]:
    [[https://tc39.es/ecma262/#sec-ispromise][IsPromise]](=promise=) is
    true.
2.  If =resultCapability= is present, then

    1. [[https://tc39.es/ecma262/#assert][Assert]]: =resultCapability=
       is a PromiseCapability
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].

3.  Else,

    1. Set =resultCapability= to undefined.

4.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=onFulfilled=)
    is false, then

    1. Set =onFulfilled= to undefined.

5.  If
    [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=onRejected=)
    is false, then

    1. Set =onRejected= to undefined.

6.  Let =fulfillReaction= be the PromiseReaction { [[Capability]]:
    =resultCapability=, [[Type]]: Fulfill, [[Handler]]: =onFulfilled= }.
7.  Let =rejectReaction= be the PromiseReaction { [[Capability]]:
    =resultCapability=, [[Type]]: Reject, [[Handler]]: =onRejected= }.
8.  If =promise=.[[PromiseState]] is pending, then

    1. Append =fulfillReaction= as the last element of the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       that is =promise=.[[PromiseFulfillReactions]].
    2. Append =rejectReaction= as the last element of the
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
       that is =promise=.[[PromiseRejectReactions]].

9.  Else if =promise=.[[PromiseState]] is fulfilled, then

    1. Let =value= be =promise=.[[PromiseResult]].
    2. Perform
       [[https://tc39.es/ecma262/#sec-enqueuejob][EnqueueJob]]("PromiseJobs",
       [[https://tc39.es/ecma262/#sec-promisereactionjob][PromiseReactionJob]],
       « =fulfillReaction=, =value= »).

10. Else,

    1. [[https://tc39.es/ecma262/#assert][Assert]]: The value of
       =promise=.[[PromiseState]] is rejected.
    2. Let =reason= be =promise=.[[PromiseResult]].
    3. If =promise=.[[PromiseIsHandled]] is false, perform
       [[https://tc39.es/ecma262/#sec-host-promise-rejection-tracker][HostPromiseRejectionTracker]](=promise=,
       "handle").
    4. Perform
       [[https://tc39.es/ecma262/#sec-enqueuejob][EnqueueJob]]("PromiseJobs",
       [[https://tc39.es/ecma262/#sec-promisereactionjob][PromiseReactionJob]],
       « =rejectReaction=, =reason= »).

11. Set =promise=.[[PromiseIsHandled]] to true.
12. If =resultCapability= is undefined, then

    1. Return undefined.

13. Else,

    1. Return =resultCapability=.[[Promise]].

* 25.6.5.5Promise.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: promise.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Promise".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.6.6Properties of Promise Instances
  :PROPERTIES:
  :CUSTOM_ID: properties-of-promise-instances
  :END:

Promise instances are ordinary objects that inherit properties from the
Promise prototype object (the intrinsic, %Promise.prototype%). Promise
instances are initially created with the internal slots described in
[[https://tc39.es/ecma262/#table-59][Table 79]].

Table 79: Internal Slots of Promise Instances

| Internal Slot                 | Description                                                                                                                                                                                             |
|-------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[PromiseState]]              | One of pending, fulfilled, or rejected. Governs how a promise will react to incoming calls to its =then= method.                                                                                        |
| [[PromiseResult]]             | The value with which the promise has been fulfilled or rejected, if any. Only meaningful if [[PromiseState]] is not pending.                                                                            |
| [[PromiseFulfillReactions]]   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of PromiseReaction records to be processed when/if the promise transitions from the pending state to the fulfilled state.   |
| [[PromiseRejectReactions]]    | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of PromiseReaction records to be processed when/if the promise transitions from the pending state to the rejected state.    |
| [[PromiseIsHandled]]          | A boolean indicating whether the promise has ever had a fulfillment or rejection handler; used in unhandled rejection tracking.                                                                         |

* 25.7AsyncFunction Objects
  :PROPERTIES:
  :CUSTOM_ID: asyncfunction-objects
  :END:

AsyncFunction objects are functions that are usually created by
evaluating
[[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]s,
[[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]s,
[[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]s, and
[[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]s.
They may also be created by calling the
[[https://tc39.es/ecma262/#sec-async-function-constructor][%AsyncFunction%]]
intrinsic.

* 25.7.1The AsyncFunction Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-asyncfunction-constructor
  :END:

The AsyncFunction [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %AsyncFunction%.
- is a subclass of =Function=.
- creates and initializes a new AsyncFunction object when called as a
  function rather than as a
  [[https://tc39.es/ecma262/#constructor][constructor]]. Thus the
  function call =AsyncFunction(…)= is equivalent to the object creation
  expression =new AsyncFunction(…)= with the same arguments.
- is designed to be subclassable. It may be used as the value of an
  =extends= clause of a class definition. Subclass constructors that
  intend to inherit the specified AsyncFunction behaviour must include a
  =super= call to the =AsyncFunction=
  [[https://tc39.es/ecma262/#constructor][constructor]] to create and
  initialize a subclass instance with the internal slots necessary for
  built-in async function behaviour.

* 25.7.1.1AsyncFunction ( =p1=, =p2=, ... , =pn=, =body= )
  :PROPERTIES:
  :CUSTOM_ID: asyncfunction-p1-p2-pn-body
  :END:

The last argument specifies the body (executable code) of an async
function. Any preceding arguments specify formal parameters.

When the =AsyncFunction= function is called with some arguments =p1=,
=p2=, ... , =pn=, =body= (where =n= might be 0, that is, there are no
=p= arguments, and where =body= might also not be provided), the
following steps are taken:

1. Let =C= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =args= be the =argumentsList= that was passed to this function by
   [[Call]] or [[Construct]].
3. Return
   [[https://tc39.es/ecma262/#sec-createdynamicfunction][CreateDynamicFunction]](=C=,
   NewTarget, async, =args=).

Note

See NOTE for
[[https://tc39.es/ecma262/#sec-function-p1-p2-pn-body][19.2.1.1]].

* 25.7.2Properties of the AsyncFunction Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-asyncfunction-constructor
  :END:

The AsyncFunction [[https://tc39.es/ecma262/#constructor][constructor]]:

- is a standard built-in
  [[https://tc39.es/ecma262/#function-object][function object]] that
  inherits from the =Function=
  [[https://tc39.es/ecma262/#constructor][constructor]].
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-function-constructor][%Function%]].
- has a "name" property whose value is "AsyncFunction".
- has the following properties:

* 25.7.2.1AsyncFunction.length
  :PROPERTIES:
  :CUSTOM_ID: asyncfunction.length
  :END:

This is a [[https://tc39.es/ecma262/#sec-object-type][data property]]
with a value of 1. This property has the attributes { [[Writable]]:
false, [[Enumerable]]: false, [[Configurable]]: true }.

* 25.7.2.2AsyncFunction.prototype
  :PROPERTIES:
  :CUSTOM_ID: asyncfunction.prototype
  :END:

The initial value of =AsyncFunction.prototype= is
%AsyncFunction.prototype%.

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 25.7.3Properties of the AsyncFunction Prototype Object
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-asyncfunction-prototype-object
  :END:

The AsyncFunction prototype object:

- is an ordinary object.
- is not a [[https://tc39.es/ecma262/#function-object][function object]]
  and does not have an [[ECMAScriptCode]] internal slot or any other of
  the internal slots listed in
  [[https://tc39.es/ecma262/#table-27][Table 29]].
- is the value of the "prototype" property of
  [[https://tc39.es/ecma262/#sec-async-function-constructor][%AsyncFunction%]].
- is the intrinsic object %AsyncFunctionPrototype%.
- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

* 25.7.3.1AsyncFunction.prototype.constructor
  :PROPERTIES:
  :CUSTOM_ID: asyncfunction.prototype.constructor
  :END:

The initial value of =AsyncFunction.prototype.constructor= is
[[https://tc39.es/ecma262/#sec-async-function-constructor][%AsyncFunction%]]

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.7.3.2AsyncFunction.prototype [ @@toStringTag ]
  :PROPERTIES:
  :CUSTOM_ID: asyncfunction.prototype-tostringtag
  :END:

The initial value of the @@toStringTag property is the string value
"AsyncFunction".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: true }.

* 25.7.4AsyncFunction Instances
  :PROPERTIES:
  :CUSTOM_ID: asyncfunction-instances
  :END:

Every AsyncFunction instance is an ECMAScript
[[https://tc39.es/ecma262/#function-object][function object]] and has
the internal slots listed in [[https://tc39.es/ecma262/#table-27][Table
29]]. The value of the [[IsClassConstructor]] internal slot for all such
instances is false. AsyncFunction instances are not constructors and do
not have a [[Construct]] internal method. AsyncFunction instances do not
have a prototype property as they are not constructable.

Each AsyncFunction instance has the following own properties:

* 25.7.4.1length
  :PROPERTIES:
  :CUSTOM_ID: length-5
  :END:

The specification for the "length" property of Function instances given
in [[https://tc39.es/ecma262/#sec-function-instances-length][19.2.4.1]]
also applies to AsyncFunction instances.

* 25.7.4.2name
  :PROPERTIES:
  :CUSTOM_ID: name-3
  :END:

The specification for the "name" property of Function instances given in
[[https://tc39.es/ecma262/#sec-function-instances-name][19.2.4.2]] also
applies to AsyncFunction instances.

* 25.7.5Async Functions Abstract Operations
  :PROPERTIES:
  :CUSTOM_ID: async-functions-abstract-operations
  :END:

* 25.7.5.1AsyncFunctionStart ( =promiseCapability=, =asyncFunctionBody=
)
  :PROPERTIES:
  :CUSTOM_ID: asyncfunctionstart-promisecapability-asyncfunctionbody
  :END:

1. Let =runningContext= be the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
2. Let =asyncContext= be a copy of =runningContext=.
3. NOTE: Copying the execution state is required for the step below to
   resume its execution. It is ill-defined to resume a currently
   executing context.
4. Set the code evaluation state of =asyncContext= such that when
   evaluation is resumed for that
   [[https://tc39.es/ecma262/#sec-execution-contexts][execution
   context]] the following steps will be performed:

   1. Let =result= be the result of evaluating =asyncFunctionBody=.
   2. [[https://tc39.es/ecma262/#assert][Assert]]: If we return here,
      the async function either threw an exception or performed an
      implicit or explicit return; all awaiting is done.
   3. Remove =asyncContext= from the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] and restore the
      [[https://tc39.es/ecma262/#sec-execution-contexts][execution
      context]] that is at the top of the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] as the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
   4. If =result=.[[Type]] is normal, then

      1. Perform
         ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
         undefined, « undefined »).

   5. Else if =result=.[[Type]] is return, then

      1. Perform
         ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
         undefined, « =result=.[[Value]] »).

   6. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =result=.[[Type]]
         is throw.
      2. Perform
         ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
         undefined, « =result=.[[Value]] »).

   7. Return.

5. Push =asyncContext= onto the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]]; =asyncContext= is now the
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
6. Resume the suspended evaluation of =asyncContext=. Let =result= be
   the value returned by the resumed computation.
7. [[https://tc39.es/ecma262/#assert][Assert]]: When we return here,
   =asyncContext= has already been removed from the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]] and =runningContext= is the currently
   [[https://tc39.es/ecma262/#running-execution-context][running
   execution context]].
8. [[https://tc39.es/ecma262/#assert][Assert]]: =result= is a normal
   completion with a value of undefined. The possible sources of
   completion values are [[https://tc39.es/ecma262/#await][Await]] or,
   if the async function doesn't await anything, the step 3.g above.
9. Return.

* 26Reflection
  :PROPERTIES:
  :CUSTOM_ID: reflection
  :END:

* 26.1The Reflect Object
  :PROPERTIES:
  :CUSTOM_ID: the-reflect-object
  :END:

The Reflect object:

- is the intrinsic object %Reflect%.
- is the initial value of the "Reflect" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- is an ordinary object.
- has a [[Prototype]] internal slot whose value is %Object.prototype%.
- is not a [[https://tc39.es/ecma262/#function-object][function
  object]].
- does not have a [[Construct]] internal method; it cannot be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]] with the =new=
  operator.
- does not have a [[Call]] internal method; it cannot be invoked as a
  function.

* 26.1.1Reflect.apply ( =target=, =thisArgument=, =argumentsList= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.apply-target-thisargument-argumentslist
  :END:

When the =apply= function is called with arguments =target=,
=thisArgument=, and =argumentsList=, the following steps are taken:

1. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=target=)
   is false, throw a TypeError exception.
2. Let =args= be
   ? [[https://tc39.es/ecma262/#sec-createlistfromarraylike][CreateListFromArrayLike]](=argumentsList=).
3. Perform
   [[https://tc39.es/ecma262/#sec-preparefortailcall][PrepareForTailCall]]().
4. Return ? [[https://tc39.es/ecma262/#sec-call][Call]](=target=,
   =thisArgument=, =args=).

* 26.1.2Reflect.construct ( =target=, =argumentsList= [ , =newTarget= ]
)
  :PROPERTIES:
  :CUSTOM_ID: reflect.construct-target-argumentslist-newtarget
  :END:

When the =construct= function is called with arguments =target=,
=argumentsList=, and =newTarget=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=target=)
   is false, throw a TypeError exception.
2. If =newTarget= is not present, set =newTarget= to =target=.
3. Else if
   [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=newTarget=)
   is false, throw a TypeError exception.
4. Let =args= be
   ? [[https://tc39.es/ecma262/#sec-createlistfromarraylike][CreateListFromArrayLike]](=argumentsList=).
5. Return
   ? [[https://tc39.es/ecma262/#sec-construct][Construct]](=target=,
   =args=, =newTarget=).

* 26.1.3Reflect.defineProperty ( =target=, =propertyKey=, =attributes= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.defineproperty-target-propertykey-attributes
  :END:

When the =defineProperty= function is called with arguments =target=,
=propertyKey=, and =attributes=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyKey=).
3. Let =desc= be
   ? [[https://tc39.es/ecma262/#sec-topropertydescriptor][ToPropertyDescriptor]](=attributes=).
4. Return ? =target=.[[DefineOwnProperty]](=key=, =desc=).

* 26.1.4Reflect.deleteProperty ( =target=, =propertyKey= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.deleteproperty-target-propertykey
  :END:

When the =deleteProperty= function is called with arguments =target= and
=propertyKey=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyKey=).
3. Return ? =target=.[[Delete]](=key=).

* 26.1.5Reflect.get ( =target=, =propertyKey= [ , =receiver= ] )
  :PROPERTIES:
  :CUSTOM_ID: reflect.get-target-propertykey-receiver
  :END:

When the =get= function is called with arguments =target=,
=propertyKey=, and =receiver=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyKey=).
3. If =receiver= is not present, then

   1. Set =receiver= to =target=.

4. Return ? =target=.[[Get]](=key=, =receiver=).

* 26.1.6Reflect.getOwnPropertyDescriptor ( =target=, =propertyKey= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.getownpropertydescriptor-target-propertykey
  :END:

When the =getOwnPropertyDescriptor= function is called with arguments
=target= and =propertyKey=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyKey=).
3. Let =desc= be ? =target=.[[GetOwnProperty]](=key=).
4. Return
   [[https://tc39.es/ecma262/#sec-frompropertydescriptor][FromPropertyDescriptor]](=desc=).

* 26.1.7Reflect.getPrototypeOf ( =target= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.getprototypeof-target
  :END:

When the =getPrototypeOf= function is called with argument =target=, the
following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Return ? =target=.[[GetPrototypeOf]]().

* 26.1.8Reflect.has ( =target=, =propertyKey= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.has-target-propertykey
  :END:

When the =has= function is called with arguments =target= and
=propertyKey=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyKey=).
3. Return ? =target=.[[HasProperty]](=key=).

* 26.1.9Reflect.isExtensible ( =target= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.isextensible-target
  :END:

When the =isExtensible= function is called with argument =target=, the
following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Return ? =target=.[[IsExtensible]]().

* 26.1.10Reflect.ownKeys ( =target= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.ownkeys-target
  :END:

When the =ownKeys= function is called with argument =target=, the
following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Let =keys= be ? =target=.[[OwnPropertyKeys]]().
3. Return
   [[https://tc39.es/ecma262/#sec-createarrayfromlist][CreateArrayFromList]](=keys=).

* 26.1.11Reflect.preventExtensions ( =target= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.preventextensions-target
  :END:

When the =preventExtensions= function is called with argument =target=,
the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Return ? =target=.[[PreventExtensions]]().

* 26.1.12Reflect.set ( =target=, =propertyKey=, =V= [ , =receiver= ] )
  :PROPERTIES:
  :CUSTOM_ID: reflect.set-target-propertykey-v-receiver
  :END:

When the =set= function is called with arguments =target=, =V=,
=propertyKey=, and =receiver=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=propertyKey=).
3. If =receiver= is not present, then

   1. Set =receiver= to =target=.

4. Return ? =target=.[[Set]](=key=, =V=, =receiver=).

* 26.1.13Reflect.setPrototypeOf ( =target=, =proto= )
  :PROPERTIES:
  :CUSTOM_ID: reflect.setprototypeof-target-proto
  :END:

When the =setPrototypeOf= function is called with arguments =target= and
=proto=, the following steps are taken:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=target=)
   is not Object, throw a TypeError exception.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=proto=)
   is not Object and =proto= is not null, throw a TypeError exception.
3. Return ? =target=.[[SetPrototypeOf]](=proto=).

* 26.2Proxy Objects
  :PROPERTIES:
  :CUSTOM_ID: proxy-objects
  :END:

* 26.2.1The Proxy Constructor
  :PROPERTIES:
  :CUSTOM_ID: the-proxy-constructor
  :END:

The Proxy [[https://tc39.es/ecma262/#constructor][constructor]]:

- is the intrinsic object %Proxy%.
- is the initial value of the "Proxy" property of the
  [[https://tc39.es/ecma262/#sec-global-object][global object]].
- creates and initializes a new proxy
  [[https://tc39.es/ecma262/#exotic-object][exotic object]] when called
  as a [[https://tc39.es/ecma262/#constructor][constructor]].
- is not intended to be called as a function and will throw an exception
  when called in that manner.

* 26.2.1.1Proxy ( =target=, =handler= )
  :PROPERTIES:
  :CUSTOM_ID: proxy-target-handler
  :END:

When =Proxy= is called with arguments =target= and =handler=, it
performs the following steps:

1. If NewTarget is undefined, throw a TypeError exception.
2. Return
   ? [[https://tc39.es/ecma262/#sec-proxycreate][ProxyCreate]](=target=,
   =handler=).

* 26.2.2Properties of the Proxy Constructor
  :PROPERTIES:
  :CUSTOM_ID: properties-of-the-proxy-constructor
  :END:

The Proxy [[https://tc39.es/ecma262/#constructor][constructor]]:

- has a [[Prototype]] internal slot whose value is
  [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].
- does not have a "prototype" property because proxy exotic objects do
  not have a [[Prototype]] internal slot that requires initialization.
- has the following properties:

* 26.2.2.1Proxy.revocable ( =target=, =handler= )
  :PROPERTIES:
  :CUSTOM_ID: proxy.revocable-target-handler
  :END:

The =Proxy.revocable= function is used to create a revocable Proxy
object. When =Proxy.revocable= is called with arguments =target= and
=handler=, the following steps are taken:

1. Let =p= be
   ? [[https://tc39.es/ecma262/#sec-proxycreate][ProxyCreate]](=target=,
   =handler=).
2. Let =steps= be the algorithm steps defined in
   [[https://tc39.es/ecma262/#sec-proxy-revocation-functions][Proxy
   Revocation Functions]].
3. Let =revoker= be
   ! [[https://tc39.es/ecma262/#sec-createbuiltinfunction][CreateBuiltinFunction]](=steps=,
   « [[RevocableProxy]] »).
4. Set =revoker=.[[RevocableProxy]] to =p=.
5. Let =result= be
   [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Object.prototype%).
6. Perform
   ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=result=,
   "proxy", =p=).
7. Perform
   ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=result=,
   "revoke", =revoker=).
8. Return =result=.

* 26.2.2.1.1Proxy Revocation Functions
  :PROPERTIES:
  :CUSTOM_ID: proxy-revocation-functions
  :END:

A Proxy revocation function is an anonymous function that has the
ability to invalidate a specific Proxy object.

Each Proxy revocation function has a [[RevocableProxy]] internal slot.

When a Proxy revocation function is called, the following steps are
taken:

1. Let =F= be the
   [[https://tc39.es/ecma262/#active-function-object][active function
   object]].
2. Let =p= be =F=.[[RevocableProxy]].
3. If =p= is null, return undefined.
4. Set =F=.[[RevocableProxy]] to null.
5. [[https://tc39.es/ecma262/#assert][Assert]]: =p= is a Proxy object.
6. Set =p=.[[ProxyTarget]] to null.
7. Set =p=.[[ProxyHandler]] to null.
8. Return undefined.

The "length" property of a Proxy revocation function is 0.

* 26.3Module Namespace Objects
  :PROPERTIES:
  :CUSTOM_ID: module-namespace-objects
  :END:

A Module Namespace Object is a module namespace
[[https://tc39.es/ecma262/#exotic-object][exotic object]] that provides
runtime property-based access to a module's exported bindings. There is
no [[https://tc39.es/ecma262/#constructor][constructor]] function for
Module Namespace Objects. Instead, such an object is created for each
module that is imported by an
[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
that includes a
[[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]].

In addition to the properties specified in
[[https://tc39.es/ecma262/#sec-module-namespace-exotic-objects][9.4.6]]
each Module Namespace Object has the following own property:

* 26.3.1@@toStringTag
  :PROPERTIES:
  :CUSTOM_ID: tostringtag
  :END:

The initial value of the @@toStringTag property is the String value
"Module".

This property has the attributes { [[Writable]]: false, [[Enumerable]]:
false, [[Configurable]]: false }.

* 27Memory Model
  :PROPERTIES:
  :CUSTOM_ID: memory-model
  :END:

The memory consistency model, or memory model, specifies the possible
orderings of [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data
Block]] events, arising via accessing TypedArray instances backed by a
SharedArrayBuffer and via methods on the Atomics object. When the
program has no data races (defined below), the ordering of events
appears as sequentially consistent, i.e., as an interleaving of actions
from each [[https://tc39.es/ecma262/#agent][agent]]. When the program
has data races, shared memory operations may appear sequentially
inconsistent. For example, programs may exhibit causality-violating
behaviour and other astonishments. These astonishments arise from
compiler transforms and the design of CPUs (e.g., out-of-order execution
and speculation). The memory model defines both the precise conditions
under which a program exhibits sequentially consistent behaviour as well
as the possible values read from data races. To wit, there is no
undefined behaviour.

The memory model is defined as relational constraints on events
introduced by
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] on SharedArrayBuffer or by methods on the Atomics object
during an evaluation.

Note

This section provides an axiomatic model on events introduced by the
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] on SharedArrayBuffers. It bears stressing that the model is
not expressible algorithmically, unlike the rest of this specification.
The nondeterministic introduction of events by
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] is the interface between the operational semantics of
ECMAScript evaluation and the axiomatic semantics of the memory model.
The semantics of these events is defined by considering graphs of all
events in an evaluation. These are neither Static Semantics nor Runtime
Semantics. There is no demonstrated algorithmic implementation, but
instead a set of constraints that determine if a particular event graph
is allowed or disallowed.

* 27.1Memory Model Fundamentals
  :PROPERTIES:
  :CUSTOM_ID: memory-model-fundamentals
  :END:

Shared memory accesses (reads and writes) are divided into two groups,
atomic accesses and data accesses, defined below. Atomic accesses are
sequentially consistent, i.e., there is a strict total ordering of
events agreed upon by all agents in an
[[https://tc39.es/ecma262/#sec-agent-clusters][agent cluster]].
Non-atomic accesses do not have a strict total ordering agreed upon by
all agents, i.e., unordered.

Note 1

No orderings weaker than sequentially consistent and stronger than
unordered, such as release-acquire, are supported.

A Shared Data Block event is either a ReadSharedMemory,
WriteSharedMemory, or ReadModifyWriteSharedMemory
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]].

Table 80:
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
Event Fields

| Field Name        | Value                                                               | Meaning                                                                                                             |
|-------------------+---------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------|
| [[Order]]         | SeqCst | Unordered                                                  | The weakest ordering guaranteed by the [[https://tc39.es/ecma262/#sec-memory-model][memory model]] for the event.   |
| [[NoTear]]        | A Boolean                                                           | Whether this event is allowed to read from multiple write events on equal range as this event.                      |
| [[Block]]         | A [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]]   | The block the event operates on.                                                                                    |
| [[ByteIndex]]     | A nonnegative [[https://tc39.es/ecma262/#integer][integer]]         | The byte address of the read in [[Block]].                                                                          |
| [[ElementSize]]   | A nonnegative [[https://tc39.es/ecma262/#integer][integer]]         | The size of the read.                                                                                               |

Table 81:
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
Event Fields

| Field Name        | Value                                                                         | Meaning                                                                                                                    |
|-------------------+-------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------|
| [[Order]]         | SeqCst | Unordered | Init                                                     | The weakest ordering guaranteed by the [[https://tc39.es/ecma262/#sec-memory-model][memory model]] for the event.          |
| [[NoTear]]        | A Boolean                                                                     | Whether this event is allowed to be read from multiple read events with equal range as this event.                         |
| [[Block]]         | A [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]]             | The block the event operates on.                                                                                           |
| [[ByteIndex]]     | A nonnegative [[https://tc39.es/ecma262/#integer][integer]]                   | The byte address of the write in [[Block]].                                                                                |
| [[ElementSize]]   | A nonnegative [[https://tc39.es/ecma262/#integer][integer]]                   | The size of the write.                                                                                                     |
| [[Payload]]       | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]   | The [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of byte values to be read by other events.   |

Table 82:
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
Event Fields

| Field Name        | Value                                                                         | Meaning                                                                                                                                                                                                                                                           |
|-------------------+-------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[Order]]         | SeqCst                                                                        | Read-modify-write events are always sequentially consistent.                                                                                                                                                                                                      |
| [[NoTear]]        | true                                                                          | Read-modify-write events cannot tear.                                                                                                                                                                                                                             |
| [[Block]]         | A [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]]             | The block the event operates on.                                                                                                                                                                                                                                  |
| [[ByteIndex]]     | A nonnegative [[https://tc39.es/ecma262/#integer][integer]]                   | The byte address of the read-modify-write in [[Block]].                                                                                                                                                                                                           |
| [[ElementSize]]   | A nonnegative [[https://tc39.es/ecma262/#integer][integer]]                   | The size of the read-modify-write.                                                                                                                                                                                                                                |
| [[Payload]]       | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]   | The [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of byte values to be passed to [[ModifyOp]].                                                                                                                                        |
| [[ModifyOp]]      | A semantic function                                                           | A pure semantic function that returns a modified [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of byte values from a read [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of byte values and [[Payload]].   |

These events are introduced by
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] or by methods on the Atomics object.

Some operations may also introduce Synchronize events. A Synchronize
event has no fields, and exists purely to directly constrain the
permitted orderings of other events.

In addition to [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data
Block]] and Synchronize events, there are host-specific events.

Let the range of a ReadSharedMemory, WriteSharedMemory, or
ReadModifyWriteSharedMemory event be the Set of contiguous integers from
its [[ByteIndex]] to [[ByteIndex]] + [[ElementSize]] - 1. Two events'
ranges are equal when the events have the same [[Block]], and the ranges
are element-wise equal. Two events' ranges are overlapping when the
events have the same [[Block]], the ranges are not equal and their
intersection is non-empty. Two events' ranges are disjoint when the
events do not have the same [[Block]] or their ranges are neither equal
nor overlapping.

Note 2

Examples of host-specific synchronizing events that should be accounted
for are: sending a SharedArrayBuffer from one
[[https://tc39.es/ecma262/#agent][agent]] to another (e.g., by
=postMessage= in a browser), starting and stopping agents, and
communicating within the
[[https://tc39.es/ecma262/#sec-agent-clusters][agent cluster]] via
channels other than shared memory. It is assumed those events are
appended to [[https://tc39.es/ecma262/#sec-agent-order][agent-order]]
during evaluation like the other SharedArrayBuffer events.

Events are ordered within candidate executions by the relations defined
below.

* 27.2Agent Events Records
  :PROPERTIES:
  :CUSTOM_ID: agent-events-records
  :END:

An Agent Events Record is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
with the following fields.

Table 83: [[https://tc39.es/ecma262/#sec-agent-event-records][Agent
Events Record]] Fields

| Field Name                  | Value                                                                                                                                                                    | Meaning                                                                                                                          |
|-----------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------|
| [[AgentSignifier]]          | A value that admits equality testing                                                                                                                                     | The [[https://tc39.es/ecma262/#agent][agent]] whose evaluation resulted in this ordering.                                        |
| [[EventList]]               | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of events                                                                                    | Events are appended to the list during evaluation.                                                                               |
| [[AgentSynchronizesWith]]   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of pairs of [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize]] events   | [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Synchronize]] relationships introduced by the operational semantics.   |

* 27.3Chosen Value Records
  :PROPERTIES:
  :CUSTOM_ID: chosen-value-records
  :END:

A Chosen Value Record is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
with the following fields.

Table 84: [[https://tc39.es/ecma262/#sec-chosen-value-records][Chosen
Value Record]] Fields

| Field Name        | Value                                                                                        | Meaning                                                                                                                                                                                                                        |
|-------------------+----------------------------------------------------------------------------------------------+--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[Event]]         | A [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][Shared Data Block event]]        | The [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]] or [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]] event that was introduced for this chosen value.   |
| [[ChosenValue]]   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of byte values   | The bytes that were nondeterministically chosen during evaluation.                                                                                                                                                             |

* 27.4Candidate Executions
  :PROPERTIES:
  :CUSTOM_ID: candidate-executions
  :END:

A candidate execution of the evaluation of an
[[https://tc39.es/ecma262/#sec-agent-clusters][agent cluster]] is a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
with the following fields.

Table 85: Candidate Execution
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
Fields

| Field Name                 | Value                                                                                                                                                               | Meaning                                                                                                                                                                                                                                                                                                             |
|----------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
| [[EventsRecords]]          | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of [[https://tc39.es/ecma262/#agent][Agent]] Events Records.                            | Maps an [[https://tc39.es/ecma262/#agent][agent]] to Lists of events appended during the evaluation.                                                                                                                                                                                                                |
| [[ChosenValues]]           | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of Chosen Value Records.                                                                | Maps [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]] or [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]] events to the [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of byte values chosen during the evaluation.   |
| [[AgentOrder]]             | An [[https://tc39.es/ecma262/#sec-agent-order][agent-order]] [[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]].                        | Defined below.                                                                                                                                                                                                                                                                                                      |
| [[ReadsBytesFrom]]         | A [[https://tc39.es/ecma262/#sec-reads-bytes-from][reads-bytes-from]] semantic function.                                                                            | Defined below.                                                                                                                                                                                                                                                                                                      |
| [[ReadsFrom]]              | A [[https://tc39.es/ecma262/#sec-reads-from][reads-from]] [[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]].                           | Defined below.                                                                                                                                                                                                                                                                                                      |
| [[HostSynchronizesWith]]   | A [[https://tc39.es/ecma262/#sec-host-synchronizes-with][host-synchronizes-with]] [[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]].   | Defined below.                                                                                                                                                                                                                                                                                                      |
| [[SynchronizesWith]]       | A [[https://tc39.es/ecma262/#sec-synchronizes-with][synchronizes-with]] [[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]].             | Defined below.                                                                                                                                                                                                                                                                                                      |
| [[HappensBefore]]          | A [[https://tc39.es/ecma262/#sec-happens-before][happens-before]] [[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]].                   | Defined below.                                                                                                                                                                                                                                                                                                      |

An empty candidate execution is a candidate execution
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
whose fields are empty Lists and Relations.

<<sec-synchronizeeventset>>

* 27.5Abstract Operations for the Memory Model
  :PROPERTIES:
  :CUSTOM_ID: abstract-operations-for-the-memory-model
  :END:

* 27.5.1EventSet ( =execution= )
  :PROPERTIES:
  :CUSTOM_ID: eventset-execution
  :END:

The abstract operation EventSet takes one argument, a
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=. It performs the following steps:

1. Let =events= be an empty Set.
2. For each [[https://tc39.es/ecma262/#sec-agent-event-records][Agent
   Events Record]] =aer= in =execution=.[[EventsRecords]], do

   1. For each event =E= in =aer=.[[EventList]], do

      1. Add =E= to =events=.

3. Return =events=.

* 27.5.2SharedDataBlockEventSet ( =execution= )
  :PROPERTIES:
  :CUSTOM_ID: shareddatablockeventset-execution
  :END:

The abstract operation SharedDataBlockEventSet takes one argument, a
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=. It performs the following steps:

1. Let =events= be an empty Set.
2. For each event =E= in
   [[https://tc39.es/ecma262/#sec-event-set][EventSet]](=execution=), do

   1. If =E= is a
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]],
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]],
      or
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
      event, add =E= to =events=.

3. Return =events=.

* 27.5.3HostEventSet ( =execution= )
  :PROPERTIES:
  :CUSTOM_ID: hosteventset-execution
  :END:

The abstract operation HostEventSet takes one argument, a
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=. It performs the following steps:

1. Let =events= be an empty Set.
2. For each event =E= in
   [[https://tc39.es/ecma262/#sec-event-set][EventSet]](=execution=), do

   1. If =E= is not in
      [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
      add =E= to =events=.

3. Return =events=.

* 27.5.4ComposeWriteEventBytes ( =execution=, =byteIndex=, =Ws= )
  :PROPERTIES:
  :CUSTOM_ID: composewriteeventbytes-execution-byteindex-ws
  :END:

The abstract operation ComposeWriteEventBytes takes four arguments, a
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, a nonnegative
[[https://tc39.es/ecma262/#integer][integer]] =byteIndex=, and a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
=Ws= of
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
or
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
events. It performs the following steps:

1. Let =byteLocation= be =byteIndex=.
2. Let =bytesRead= be a new empty
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
3. For each element =W= of =Ws= in
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   order, do

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =W= has
      =byteLocation= in its range.
   2. Let =payloadIndex= be =byteLocation= - =W=.[[ByteIndex]].
   3. If =W= is a
      [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
      event, then

      1. Let =byte= be =W=.[[Payload]][=payloadIndex=].

   4. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =W= is a
         [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
         event.
      2. Let =bytes= be
         [[https://tc39.es/ecma262/#sec-valueofreadevent][ValueOfReadEvent]](=execution=,
         =W=).
      3. Let =bytesModified= be =W=.[[ModifyOp]](=bytes=,
         =W=.[[Payload]]).
      4. Let =byte= be =bytesModified=[=payloadIndex=].

   5. Append =byte= to =bytesRead=.
   6. Set =byteLocation= to =byteLocation= + 1.

4. Return =bytesRead=.

Note 1

The semantic function [[ModifyOp]] is given by the function properties
on the Atomics object that introduce
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
events.

Note 2

This abstract operation composes a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of write events into a
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
of byte values. It is used in the event semantics of
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
and
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
events.

* 27.5.5ValueOfReadEvent ( =execution=, =R= )
  :PROPERTIES:
  :CUSTOM_ID: valueofreadevent-execution-r
  :END:

The abstract operation ValueOfReadEvent takes two arguments, a
[[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution= and a
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
or
[[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
event =R=. It performs the following steps:

1. [[https://tc39.es/ecma262/#assert][Assert]]: =R= is a
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
   or
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
   event.
2. Let =Ws= be =execution=.[[ReadsBytesFrom]](=R=).
3. [[https://tc39.es/ecma262/#assert][Assert]]: =Ws= is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
   or
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
   events with length equal to =R=.[[ElementSize]].
4. Return
   [[https://tc39.es/ecma262/#sec-composewriteeventbytes][ComposeWriteEventBytes]](=execution=,
   =R=.[[ByteIndex]], =Ws=).

* 27.6Relations of Candidate Executions
  :PROPERTIES:
  :CUSTOM_ID: relations-of-candidate-executions
  :END:

* 27.6.1agent-order
  :PROPERTIES:
  :CUSTOM_ID: agent-order
  :END:

For a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, =execution=.[[AgentOrder]] is a
[[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]]
on events that satisfies the following.

- For each pair (=E=, =D=) in
  [[https://tc39.es/ecma262/#sec-event-set][EventSet]](=execution=),
  (=E=, =D=) is in =execution=.[[AgentOrder]] if there is some
  [[https://tc39.es/ecma262/#sec-agent-event-records][Agent Events
  Record]] =aer= in =execution=.[[EventsRecords]] such that =E= and =D=
  are in =aer=.[[EventList]] and =E= is before =D= in
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  order of =aer=.[[EventList]].

Note

Each [[https://tc39.es/ecma262/#agent][agent]] introduces events in a
per-[[https://tc39.es/ecma262/#agent][agent]]
[[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][strict
total order]] during the evaluation. This is the union of those strict
total orders.

* 27.6.2reads-bytes-from
  :PROPERTIES:
  :CUSTOM_ID: reads-bytes-from
  :END:

For a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, =execution=.[[ReadsBytesFrom]] is a semantic
function from events in
[[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=)
to Lists of events in
[[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=)
that satisfies the following conditions.

- For each
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
  or
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
  event =R= in
  [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
  =execution=.[[ReadsBytesFrom]](=R=) is a
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  of length equal to =R=.[[ElementSize]] of
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
  or
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
  events =Ws= such that all of the following are true.

  - Each event =W= with index =i= in =Ws= has =R=.[[ByteIndex]] + =i= in
    its range.
  - =R= is not in =Ws=.

* 27.6.3reads-from
  :PROPERTIES:
  :CUSTOM_ID: reads-from
  :END:

For a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, =execution=.[[ReadsFrom]] is the least
[[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]]
on events that satisfies the following.

- For each pair (=R=, =W=) in
  [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
  (=R=, =W=) is in =execution=.[[ReadsFrom]] if =W= is in
  =execution=.[[ReadsBytesFrom]](=R=).

* 27.6.4host-synchronizes-with
  :PROPERTIES:
  :CUSTOM_ID: host-synchronizes-with
  :END:

For a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, =execution=.[[HostSynchronizesWith]] is a
host-provided
[[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][strict
partial order]] on host-specific events that satisfies at least the
following.

- If (=E=, =D=) is in =execution=.[[HostSynchronizesWith]], =E= and =D=
  are in
  [[https://tc39.es/ecma262/#sec-hosteventset][HostEventSet]](=execution=).
- There is no cycle in the union of =execution=.[[HostSynchronizesWith]]
  and =execution=.[[AgentOrder]].

Note 1

For two host-specific events =E= and =D=, =E= host-synchronizes-with =D=
implies =E=
[[https://tc39.es/ecma262/#sec-happens-before][happens-before]] =D=.

Note 2

The host-synchronizes-with relation allows the host to provide
additional synchronization mechanisms, such as =postMessage= between
HTML workers.

* 27.6.5synchronizes-with
  :PROPERTIES:
  :CUSTOM_ID: synchronizes-with
  :END:

For a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, =execution=.[[SynchronizesWith]] is the least
[[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]]
on events that satisfies the following.

- For each pair (=R=, =W=) in =execution=.[[ReadsFrom]], (=W=, =R=) is
  in =execution=.[[SynchronizesWith]] if =R=.[[Order]] is SeqCst,
  =W=.[[Order]] is SeqCst, and =R= and =W= have equal ranges.
- For each element =eventsRecord= of =execution=.[[EventsRecords]], the
  following is true.

  - For each pair (=S=, =Sw=) in
    =eventsRecord=.[[AgentSynchronizesWith]], (=S=, =Sw=) is in
    =execution=.[[SynchronizesWith]].

- For each pair (=E=, =D=) in =execution=.[[HostSynchronizesWith]],
  (=E=, =D=) is in =execution=.[[SynchronizesWith]].

Note 1

Owing to convention, write events synchronizes-with read events, instead
of read events synchronizes-with write events.

Note 2

Init events do not participate in synchronizes-with, and are instead
constrained directly by
[[https://tc39.es/ecma262/#sec-happens-before][happens-before]].

Note 3

Not all SeqCst events related by
[[https://tc39.es/ecma262/#sec-reads-from][reads-from]] are related by
synchronizes-with. Only events that also have equal ranges are related
by synchronizes-with.

Note 4

For [[https://tc39.es/ecma262/#sec-data-blocks][Shared Data Block]]
events =R= and =W= such that =W= synchronizes-with =R=, =R= may
[[https://tc39.es/ecma262/#sec-reads-from][reads-from]] other writes
than =W=.

* 27.6.6happens-before
  :PROPERTIES:
  :CUSTOM_ID: happens-before
  :END:

For a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, =execution=.[[HappensBefore]] is the least
[[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]]
on events that satisfies the following.

- For each pair (=E=, =D=) in =execution=.[[AgentOrder]], (=E=, =D=) is
  in =execution=.[[HappensBefore]].
- For each pair (=E=, =D=) in =execution=.[[SynchronizesWith]], (=E=,
  =D=) is in =execution=.[[HappensBefore]].
- For each pair (=E=, =D=) in
  [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
  (=E=, =D=) is in =execution=.[[HappensBefore]] if =E=.[[Order]] is
  Init and =E= and =D= have overlapping ranges.
- For each pair (=E=, =D=) in
  [[https://tc39.es/ecma262/#sec-event-set][EventSet]](=execution=),
  (=E=, =D=) is in =execution=.[[HappensBefore]] if there is an event
  =F= such that the pairs (=E=, =F=) and (=F=, =D=) are in
  =execution=.[[HappensBefore]].

Note

Because happens-before is a superset of
[[https://tc39.es/ecma262/#sec-agent-order][agent-order]], candidate
executions are consistent with the single-thread evaluation semantics of
ECMAScript.

* 27.7Properties of Valid Executions
  :PROPERTIES:
  :CUSTOM_ID: properties-of-valid-executions
  :END:

* 27.7.1Valid Chosen Reads
  :PROPERTIES:
  :CUSTOM_ID: valid-chosen-reads
  :END:

A [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution= has valid chosen reads if the following abstract
operation returns true.

1. For each
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
   or
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
   event =R= in
   [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
   do

   1. Let =chosenValueRecord= be the element of
      =execution=.[[ChosenValues]] whose [[Event]] field is =R=.
   2. Let =chosenValue= be =chosenValueRecord=.[[ChosenValue]].
   3. Let =readValue= be
      [[https://tc39.es/ecma262/#sec-valueofreadevent][ValueOfReadEvent]](=execution=,
      =R=).
   4. Let =chosenLen= be the number of elements of =chosenValue=.
   5. Let =readLen= be the number of elements of =readValue=.
   6. If =chosenLen= is not equal to =readLen=, then

      1. Return false.

   7. If =chosenValue=[=i=] is not equal to =readValue=[=i=] for any
      [[https://tc39.es/ecma262/#integer][integer]] value =i= in the
      range 0 through =chosenLen=, exclusive, then

      1. Return false.

2. Return true.

* 27.7.2Coherent Reads
  :PROPERTIES:
  :CUSTOM_ID: coherent-reads
  :END:

A [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution= has coherent reads if the following abstract
operation returns true.

1. For each
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
   or
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
   event =R= in
   [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
   do

   1. Let =Ws= be =execution=.[[ReadsBytesFrom]](=R=).
   2. Let =byteLocation= be =R=.[[ByteIndex]].
   3. For each element =W= of =Ws= in
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      order, do

      1. If (=R=, =W=) is in =execution=.[[HappensBefore]], then

         1. Return false.

      2. If there is a
         [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
         or
         [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
         event =V= that has =byteLocation= in its range such that the
         pairs (=W=, =V=) and (=V=, =R=) are in
         =execution=.[[HappensBefore]], then

         1. Return false.

      3. Set =byteLocation= to =byteLocation= + 1.

2. Return true.

* 27.7.3Tear Free Reads
  :PROPERTIES:
  :CUSTOM_ID: tear-free-reads
  :END:

A [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution= has tear free reads if the following abstract
operation returns true.

1. For each
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
   or
   [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
   event =R= in
   [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
   do

   1. If =R=.[[NoTear]] is true, then

      1. [[https://tc39.es/ecma262/#assert][Assert]]: The remainder of
         dividing =R=.[[ByteIndex]] by =R=.[[ElementSize]] is 0.
      2. For each event =W= such that (=R=, =W=) is in
         =execution=.[[ReadsFrom]] and =W=.[[NoTear]] is true, do

         1. If =R= and =W= have equal ranges, and there is an event =V=
            such that =V= and =W= have equal ranges, =V=.[[NoTear]] is
            true, =W= is not =V=, and (=R=, =V=) is in
            =execution=.[[ReadsFrom]], then

            1. Return false.

2. Return true.

Note

An event's [[NoTear]] field is true when that event was introduced via
accessing an [[https://tc39.es/ecma262/#integer][integer]] TypedArray,
and false when introduced via accessing a floating point TypedArray or
DataView.

Intuitively, this requirement says when a memory range is accessed in an
aligned fashion via an [[https://tc39.es/ecma262/#integer][integer]]
TypedArray, a single write event on that range must "win" when in a data
race with other write events with equal ranges. More precisely, this
requirement says an aligned read event cannot read a value composed of
bytes from multiple, different write events all with equal ranges. It is
possible, however, for an aligned read event to read from multiple write
events with overlapping ranges.

* 27.7.4Sequentially Consistent Atomics
  :PROPERTIES:
  :CUSTOM_ID: sequentially-consistent-atomics
  :END:

For a [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution=, memory-order is a
[[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][strict
total order]] of all events in
[[https://tc39.es/ecma262/#sec-event-set][EventSet]](=execution=) that
satisfies the following.

- For each pair (=E=, =D=) in =execution=.[[HappensBefore]], (=E=, =D=)
  is in memory-order.

- For each pair (=R=, =W=) in =execution=.[[ReadsFrom]], there is no
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
  or
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
  event =V= in
  [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=)
  such that =V=.[[Order]] is SeqCst, the pairs (=W=, =V=) and (=V=, =R=)
  are in memory-order, and any of the following conditions are true.

  - The pair (=W=, =R=) is in =execution=.[[SynchronizesWith]], and =V=
    and =R= have equal ranges.
  - The pairs (=W=, =R=) and (=V=, =R=) are in
    =execution=.[[HappensBefore]], =W=.[[Order]] is SeqCst, and =W= and
    =V= have equal ranges.
  - The pairs (=W=, =R=) and (=W=, =V=) are in
    =execution=.[[HappensBefore]], =R=.[[Order]] is SeqCst, and =V= and
    =R= have equal ranges.

  Note 1

  This clause additionally constrains SeqCst events on equal ranges.

- For each
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
  or
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
  event =W= in
  [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=),
  if =W=.[[Order]] is SeqCst, then it is not the case that there is an
  infinite number of
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadSharedMemory]]
  or
  [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
  events in
  [[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=)
  with equal range that is memory-order before =W=.

  Note 2

  This clause together with the forward progress guarantee on agents
  ensure the liveness condition that SeqCst writes become visible to
  SeqCst reads with equal range in finite time.

A [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] has sequentially consistent atomics if a memory-order
exists.

Note 3

While memory-order includes all events in
[[https://tc39.es/ecma262/#sec-event-set][EventSet]](=execution=), those
that are not constrained by
[[https://tc39.es/ecma262/#sec-happens-before][happens-before]] or
[[https://tc39.es/ecma262/#sec-synchronizes-with][synchronizes-with]]
are allowed to occur anywhere in the order.

* 27.7.5Valid Executions
  :PROPERTIES:
  :CUSTOM_ID: valid-executions
  :END:

A [[https://tc39.es/ecma262/#sec-candidate-executions][candidate
execution]] =execution= is a valid execution (or simply an execution) if
all of the following are true.

- The host provides a
  [[https://tc39.es/ecma262/#sec-host-synchronizes-with][host-synchronizes-with]]
  [[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][Relation]]
  for =execution=.[[HostSynchronizesWith]].
- =execution=.[[HappensBefore]] is a
  [[https://tc39.es/ecma262/#sec-set-and-relation-specification-type][strict
  partial order]].
- =execution= has valid chosen reads.
- =execution= has coherent reads.
- =execution= has tear free reads.
- =execution= has sequentially consistent atomics.

All programs have at least one valid execution.

* 27.8Races
  :PROPERTIES:
  :CUSTOM_ID: races
  :END:

For an execution =execution=, two events =E= and =D= in
[[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=)
are in a race if the following abstract operation returns true.

1. If =E= is not =D=, then

   1. If the pairs (=E=, =D=) and (=D=, =E=) are not in
      =execution=.[[HappensBefore]], then

      1. If =E= and =D= are both
         [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][WriteSharedMemory]]
         or
         [[https://tc39.es/ecma262/#sec-memory-model-fundamentals][ReadModifyWriteSharedMemory]]
         events and =E= and =D= do not have disjoint ranges, then

         1. Return true.

      2. If either (=E=, =D=) or (=D=, =E=) is in
         =execution=.[[ReadsFrom]], then

         1. Return true.

2. Return false.

* 27.9Data Races
  :PROPERTIES:
  :CUSTOM_ID: data-races
  :END:

For an execution =execution=, two events =E= and =D= in
[[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=)
are in a data race if the following abstract operation returns true.

1. If =E= and =D= are in a race in =execution=, then

   1. If =E=.[[Order]] is not SeqCst or =D=.[[Order]] is not SeqCst,
      then

      1. Return true.

   2. If =E= and =D= have overlapping ranges, then

      1. Return true.

2. Return false.

* 27.10Data Race Freedom
  :PROPERTIES:
  :CUSTOM_ID: data-race-freedom
  :END:

An execution =execution= is data race free if there are no two events in
[[https://tc39.es/ecma262/#sec-sharedatablockeventset][SharedDataBlockEventSet]](=execution=)
that are in a data race.

A program is data race free if all its executions are data race free.

The [[https://tc39.es/ecma262/#sec-memory-model][memory model]]
guarantees sequential consistency of all events for data race free
programs.

* 27.11Shared Memory Guidelines
  :PROPERTIES:
  :CUSTOM_ID: shared-memory-guidelines
  :END:

Note 1

The following are guidelines for ECMAScript programmers working with
shared memory.

We recommend programs be kept data race free, i.e., make it so that it
is impossible for there to be concurrent non-atomic operations on the
same memory location. Data race free programs have interleaving
semantics where each step in the evaluation semantics of each
[[https://tc39.es/ecma262/#agent][agent]] are interleaved with each
other. For data race free programs, it is not necessary to understand
the details of the [[https://tc39.es/ecma262/#sec-memory-model][memory
model]]. The details are unlikely to build intuition that will help one
to better write ECMAScript.

More generally, even if a program is not data race free it may have
predictable behaviour, so long as atomic operations are not involved in
any data races and the operations that race all have the same access
size. The simplest way to arrange for atomics not to be involved in
races is to ensure that different memory cells are used by atomic and
non-atomic operations and that atomic accesses of different sizes are
not used to access the same cells at the same time. Effectively, the
program should treat shared memory as strongly typed as much as
possible. One still cannot depend on the ordering and timing of
non-atomic accesses that race, but if memory is treated as strongly
typed the racing accesses will not "tear" (bits of their values will not
be mixed).

Note 2

The following are guidelines for ECMAScript implementers writing
compiler transformations for programs using shared memory.

It is desirable to allow most program transformations that are valid in
a single-[[https://tc39.es/ecma262/#agent][agent]] setting in a
multi-[[https://tc39.es/ecma262/#agent][agent]] setting, to ensure that
the performance of each [[https://tc39.es/ecma262/#agent][agent]] in a
multi-[[https://tc39.es/ecma262/#agent][agent]] program is as good as it
would be in a single-[[https://tc39.es/ecma262/#agent][agent]] setting.
Frequently these transformations are hard to judge. We outline some
rules about program transformations that are intended to be taken as
normative (in that they are implied by the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]] or stronger
than what the [[https://tc39.es/ecma262/#sec-memory-model][memory
model]] implies) but which are likely not exhaustive. These rules are
intended to apply to program transformations that precede the
introductions of the events that make up the
[[https://tc39.es/ecma262/#sec-agent-order][agent-order]].

Let an agent-order slice be the subset of the
[[https://tc39.es/ecma262/#sec-agent-order][agent-order]] pertaining to
a single [[https://tc39.es/ecma262/#agent][agent]].

Let possible read values of a read event be the set of all values of
[[https://tc39.es/ecma262/#sec-valueofreadevent][ValueOfReadEvent]] for
that event across all valid executions.

Any transformation of an agent-order slice that is valid in the absence
of shared memory is valid in the presence of shared memory, with the
following exceptions.

- /Atomics are carved in stone/: Program transformations must not cause
  the SeqCst events in an agent-order slice to be reordered with its
  Unordered operations, nor its SeqCst operations to be reordered with
  each other, nor may a program transformation remove a SeqCst operation
  from the [[https://tc39.es/ecma262/#sec-agent-order][agent-order]].

  (In practice, the prohibition on reorderings forces a compiler to
  assume that every SeqCst operation is a synchronization and included
  in the final
  [[https://tc39.es/ecma262/#sec-memory-order][memory-order]], which it
  would usually have to assume anyway in the absence of
  inter-[[https://tc39.es/ecma262/#agent][agent]] program analysis. It
  also forces the compiler to assume that every call where the callee's
  effects on the
  [[https://tc39.es/ecma262/#sec-memory-order][memory-order]] are
  unknown may contain SeqCst operations.)

- /Reads must be stable/: Any given shared memory read must only observe
  a single value in an execution.

  (For example, if what is semantically a single read in the program is
  executed multiple times then the program is subsequently allowed to
  observe only one of the values read. A transformation known as
  rematerialization can violate this rule.)

- /Writes must be stable/: All observable writes to shared memory must
  follow from program semantics in an execution.

  (For example, a transformation may not introduce certain observable
  writes, such as by using read-modify-write operations on a larger
  location to write a smaller datum, writing a value to memory that the
  program could not have written, or writing a just-read value back to
  the location it was read from, if that location could have been
  overwritten by another [[https://tc39.es/ecma262/#agent][agent]] after
  the read.)

- /Possible read values must be nonempty/: Program transformations
  cannot cause the possible read values of a shared memory read to
  become empty.

  (Counterintuitively, this rule in effect restricts transformations on
  writes, because writes have force in
  [[https://tc39.es/ecma262/#sec-memory-model][memory model]] insofar as
  to be read by read events. For example, writes may be moved and
  coalesced and sometimes reordered between two SeqCst operations, but
  the transformation may not remove every write that updates a location;
  some write must be preserved.)

Examples of transformations that remain valid are: merging multiple
non-atomic reads from the same location, reordering non-atomic reads,
introducing speculative non-atomic reads, merging multiple non-atomic
writes to the same location, reordering non-atomic writes to different
locations, and hoisting non-atomic reads out of loops even if that
affects termination. Note in general that aliased TypedArrays make it
hard to prove that locations are different.

Note 3

The following are guidelines for ECMAScript implementers generating
machine code for shared memory accesses.

For architectures with memory models no weaker than those of ARM or
Power, non-atomic stores and loads may be compiled to bare stores and
loads on the target architecture. Atomic stores and loads may be
compiled down to instructions that guarantee sequential consistency. If
no such instructions exist, memory barriers are to be employed, such as
placing barriers on both sides of a bare store or load.
Read-modify-write operations may be compiled to read-modify-write
instructions on the target architecture, such as =LOCK=-prefixed
instructions on x86, load-exclusive/store-exclusive instructions on ARM,
and load-link/store-conditional instructions on Power.

Specifically, the [[https://tc39.es/ecma262/#sec-memory-model][memory
model]] is intended to allow code generation as follows.

- Every atomic operation in the program is assumed to be necessary.
- Atomic operations are never rearranged with each other or with
  non-atomic operations.
- Functions are always assumed to perform atomic operations.
- Atomic operations are never implemented as read-modify-write
  operations on larger data, but as non-lock-free atomics if the
  platform does not have atomic operations of the appropriate size. (We
  already assume that every platform has normal memory access operations
  of every interesting size.)

Naive code generation uses these patterns:

- Regular loads and stores compile to single load and store
  instructions.
- Lock-free atomic loads and stores compile to a full (sequentially
  consistent) fence, a regular load or store, and a full fence.
- Lock-free atomic read-modify-write accesses compile to a full fence,
  an atomic read-modify-write instruction sequence, and a full fence.
- Non-lock-free atomics compile to a spinlock acquire, a full fence, a
  series of non-atomic load and store instructions, a full fence, and a
  spinlock release.

That mapping is correct so long as an atomic operation on an address
range does not race with a non-atomic write or with an atomic operation
of different size. However, that is all we need: the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]] effectively
demotes the atomic operations involved in a race to non-atomic status.
On the other hand, the naive mapping is quite strong: it allows atomic
operations to be used as sequentially consistent fences, which the
[[https://tc39.es/ecma262/#sec-memory-model][memory model]] does not
actually guarantee.

A number of local improvements to those basic patterns are also intended
to be legal:

- There are obvious platform-dependent improvements that remove
  redundant fences. For example, on x86 the fences around lock-free
  atomic loads and stores can always be omitted except for the fence
  following a store, and no fence is needed for lock-free
  read-modify-write instructions, as these all use LOCK-prefixed
  instructions. On many platforms there are fences of several strengths,
  and weaker fences can be used in certain contexts without destroying
  sequential consistency.
- Most modern platforms support lock-free atomics for all the data sizes
  required by ECMAScript atomics. Should non-lock-free atomics be
  needed, the fences surrounding the body of the atomic operation can
  usually be folded into the lock and unlock steps. The simplest
  solution for non-lock-free atomics is to have a single lock word per
  SharedArrayBuffer.
- There are also more complicated platform-dependent local improvements,
  requiring some code analysis. For example, two back-to-back fences
  often have the same effect as a single fence, so if code is generated
  for two atomic operations in sequence, only a single fence need
  separate them. On x86, even a single fence separating atomic stores
  can be omitted, as the fence following a store is only needed to
  separate the store from a subsequent load.

* AGrammar Summary
  :PROPERTIES:
  :CUSTOM_ID: agrammar-summary
  :END:

* A.1Lexical Grammar
  :PROPERTIES:
  :CUSTOM_ID: a.1lexical-grammar
  :END:

[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]::any
Unicode code point
[[https://tc39.es/ecma262/#prod-InputElementDiv][InputElementDiv]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-DivPunctuator][DivPunctuator]]
[[https://tc39.es/ecma262/#prod-RightBracePunctuator][RightBracePunctuator]]
[[https://tc39.es/ecma262/#prod-InputElementRegExp][InputElementRegExp]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-RightBracePunctuator][RightBracePunctuator]]
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
[[https://tc39.es/ecma262/#prod-InputElementRegExpOrTemplateTail][InputElementRegExpOrTemplateTail]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
[[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]
[[https://tc39.es/ecma262/#prod-InputElementTemplateTail][InputElementTemplateTail]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-Comment][Comment]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]
[[https://tc39.es/ecma262/#prod-DivPunctuator][DivPunctuator]]
[[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]
[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]::<TAB> <VT>
<FF> <SP> <NBSP> <ZWNBSP> <USP>
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]::<LF>
<CR> <LS> <PS>
[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]::<LF>
<CR>[lookahead ≠ <LF>] <LS> <PS> <CR><LF>
[[https://tc39.es/ecma262/#prod-Comment][Comment]]::[[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]]
[[https://tc39.es/ecma262/#prod-SingleLineComment][SingleLineComment]]
[[https://tc39.es/ecma262/#prod-MultiLineComment][MultiLineComment]]::/*[[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]opt*/
[[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]::[[https://tc39.es/ecma262/#prod-MultiLineNotAsteriskChar][MultiLineNotAsteriskChar]][[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]opt
*[[https://tc39.es/ecma262/#prod-PostAsteriskCommentChars][PostAsteriskCommentChars]]opt
[[https://tc39.es/ecma262/#prod-PostAsteriskCommentChars][PostAsteriskCommentChars]]::[[https://tc39.es/ecma262/#prod-MultiLineNotForwardSlashOrAsteriskChar][MultiLineNotForwardSlashOrAsteriskChar]][[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]opt
*[[https://tc39.es/ecma262/#prod-PostAsteriskCommentChars][PostAsteriskCommentChars]]opt
[[https://tc39.es/ecma262/#prod-MultiLineNotAsteriskChar][MultiLineNotAsteriskChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not *
[[https://tc39.es/ecma262/#prod-MultiLineNotForwardSlashOrAsteriskChar][MultiLineNotForwardSlashOrAsteriskChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of / or *
[[https://tc39.es/ecma262/#prod-SingleLineComment][SingleLineComment]]:://[[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]opt
[[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]::[[https://tc39.es/ecma262/#prod-SingleLineCommentChar][SingleLineCommentChar]][[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]opt
[[https://tc39.es/ecma262/#prod-SingleLineCommentChar][SingleLineCommentChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-CommonToken][CommonToken]]::[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
[[https://tc39.es/ecma262/#prod-Punctuator][Punctuator]]
[[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]
[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
[[https://tc39.es/ecma262/#prod-Template][Template]]
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]::[[https://tc39.es/ecma262/#prod-IdentifierStart][IdentifierStart]]
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]][[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]
[[https://tc39.es/ecma262/#prod-IdentifierStart][IdentifierStart]]::[[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]
$ _
\[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
[[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]::[[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
$
\[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
<ZWNJ> <ZWJ>
[[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]::any
Unicode code point with the Unicode property “ID_Start”
[[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]::any
Unicode code point with the Unicode property “ID_Continue”
[[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]::one
ofawaitbreakcasecatchclassconstcontinuedebuggerdefaultdeletedoelseenumexportextendsfalsefinallyforfunctionifimportininstanceofnewnullreturnsuperswitchthisthrowtruetrytypeofvarvoidwhilewithyield
[[https://tc39.es/ecma262/#prod-Punctuator][Punctuator]]::one
of{()[]....;,<><=>===!====!==+-*%**++--<<>>>>>&|^!~&&||?:=+=-=*=%=**=<<=>>=>>>=&=|=^==>
[[https://tc39.es/ecma262/#prod-DivPunctuator][DivPunctuator]]::/ /=
[[https://tc39.es/ecma262/#prod-RightBracePunctuator][RightBracePunctuator]]::}
[[https://tc39.es/ecma262/#prod-NullLiteral][NullLiteral]]::null
[[https://tc39.es/ecma262/#prod-BooleanLiteral][BooleanLiteral]]::true
false
[[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]
[[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]
[[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]
[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]
[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]::n
[[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
.[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
[[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]::0
[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]::[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::one
of0123456789
[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]]::one
of123456789
[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]::[[https://tc39.es/ecma262/#prod-ExponentIndicator][ExponentIndicator]][[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]
[[https://tc39.es/ecma262/#prod-ExponentIndicator][ExponentIndicator]]::one
ofeE
[[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
+[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] -[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
[[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]::0b[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]
0B[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]
[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]]::[[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]
[[https://tc39.es/ecma262/#prod-BinaryDigits][BinaryDigits]][[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]
[[https://tc39.es/ecma262/#prod-BinaryDigit][BinaryDigit]]::one of01
[[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]::0o[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]
0O[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]
[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]]::[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-OctalDigits][OctalDigits]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]::one of01234567
[[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]::0x[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
0X[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::one
of0123456789abcdefABCDEF
[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]::"[[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]opt"
'[[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]opt'
[[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]::[[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]][[https://tc39.es/ecma262/#prod-DoubleStringCharacters][DoubleStringCharacters]]opt
[[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]::[[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]][[https://tc39.es/ecma262/#prod-SingleStringCharacters][SingleStringCharacters]]opt
[[https://tc39.es/ecma262/#prod-DoubleStringCharacter][DoubleStringCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of " or \ or
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] <LS>
<PS> \[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
[[https://tc39.es/ecma262/#prod-SingleStringCharacter][SingleStringCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of ' or \ or
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] <LS>
<PS> \[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]::\[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]
0[lookahead ∉
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
[[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]::[[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]
[[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]]
[[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]::one
of'"\bfnrtv
[[https://tc39.es/ecma262/#prod-NonEscapeCharacter][NonEscapeCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of
[[https://tc39.es/ecma262/#prod-EscapeCharacter][EscapeCharacter]] or
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-EscapeCharacter][EscapeCharacter]]::[[https://tc39.es/ecma262/#prod-SingleEscapeCharacter][SingleEscapeCharacter]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]] x u
[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]::x[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]::u[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]}
[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]::[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]::/[[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]/[[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]
[[https://tc39.es/ecma262/#prod-RegularExpressionBody][RegularExpressionBody]]::[[https://tc39.es/ecma262/#prod-RegularExpressionFirstChar][RegularExpressionFirstChar]][[https://tc39.es/ecma262/#prod-RegularExpressionChars][RegularExpressionChars]]
[[https://tc39.es/ecma262/#prod-RegularExpressionChars][RegularExpressionChars]]::[empty]
[[https://tc39.es/ecma262/#prod-RegularExpressionChars][RegularExpressionChars]][[https://tc39.es/ecma262/#prod-RegularExpressionChar][RegularExpressionChar]]
[[https://tc39.es/ecma262/#prod-RegularExpressionFirstChar][RegularExpressionFirstChar]]::[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]but
not one of * or \ or / or [
[[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]
[[https://tc39.es/ecma262/#prod-RegularExpressionClass][RegularExpressionClass]]
[[https://tc39.es/ecma262/#prod-RegularExpressionChar][RegularExpressionChar]]::[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]but
not one of \ or / or [
[[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]
[[https://tc39.es/ecma262/#prod-RegularExpressionClass][RegularExpressionClass]]
[[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]::\[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]
[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-RegularExpressionClass][RegularExpressionClass]]::[[[https://tc39.es/ecma262/#prod-RegularExpressionClassChars][RegularExpressionClassChars]]]
[[https://tc39.es/ecma262/#prod-RegularExpressionClassChars][RegularExpressionClassChars]]::[empty]
[[https://tc39.es/ecma262/#prod-RegularExpressionClassChars][RegularExpressionClassChars]][[https://tc39.es/ecma262/#prod-RegularExpressionClassChar][RegularExpressionClassChar]]
[[https://tc39.es/ecma262/#prod-RegularExpressionClassChar][RegularExpressionClassChar]]::[[https://tc39.es/ecma262/#prod-RegularExpressionNonTerminator][RegularExpressionNonTerminator]]but
not one of ] or \
[[https://tc39.es/ecma262/#prod-RegularExpressionBackslashSequence][RegularExpressionBackslashSequence]]
[[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]]::[empty]
[[https://tc39.es/ecma262/#prod-RegularExpressionFlags][RegularExpressionFlags]][[https://tc39.es/ecma262/#prod-IdentifierPart][IdentifierPart]]
[[https://tc39.es/ecma262/#prod-Template][Template]]::[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]
[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]]
[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt`
[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]]::`[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt${
[[https://tc39.es/ecma262/#prod-TemplateSubstitutionTail][TemplateSubstitutionTail]]::[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]
[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]
[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt${
[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]::}[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt`
[[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]::[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]][[https://tc39.es/ecma262/#prod-TemplateCharacters][TemplateCharacters]]opt
[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]]::$[lookahead
≠ {] \[[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]]
\[[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]
[[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]]
[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]]
[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of ` or \ or $ or
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-NotEscapeSequence][NotEscapeSequence]]::0[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]but not 0
x[lookahead ∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
x[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead ∉
[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] u[lookahead ∉
[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]][lookahead ≠ {]
u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead ∉
[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
u[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][lookahead
∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]] u{[lookahead ∉
[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
u{[[https://tc39.es/ecma262/#prod-NotCodePoint][NotCodePoint]][lookahead
∉ [[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]]
u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]][lookahead ∉
[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]][lookahead ≠ }]
[[https://tc39.es/ecma262/#prod-NotCodePoint][NotCodePoint]]::[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]but
only if MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]] >
0x10FFFF
[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]::[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]but
only if MV of [[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]] ≤
0x10FFFF

* A.2Expressions
  :PROPERTIES:
  :CUSTOM_ID: a.2expressions
  :END:

[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]
[~Yield]yield [~Await]await
[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]] yield
await
[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]but
not [[https://tc39.es/ecma262/#prod-ReservedWord][ReservedWord]]
[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][Yield]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
+Await]
[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]
[~Yield]yield [~Await]await
[[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]][Yield,
Await]:this
[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-Literal][Literal]]
[[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
[[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
[[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]
[[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
[[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
[[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][?Yield,
?Await, ~Tagged]
[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][Yield,
Await]:([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await])
([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
?Await],) ()
(...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await])
(...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await]) ([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await],...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]) ([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await],...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await])

When processing an instance of the production
[[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
?Await] the interpretation of
[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
is refined using the following grammar:

[[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]][Yield,
Await]:([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await])

 

[[https://tc39.es/ecma262/#prod-Literal][Literal]]:[[https://tc39.es/ecma262/#prod-NullLiteral][NullLiteral]]
[[https://tc39.es/ecma262/#prod-BooleanLiteral][BooleanLiteral]]
[[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]
[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
[[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]][Yield,
Await]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]
[[[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
?Await]]
[[[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt]
[[https://tc39.es/ecma262/#prod-ElementList][ElementList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-ElementList][ElementList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-Elision][Elision]]:,
[[https://tc39.es/ecma262/#prod-Elision][Elision]],
[[https://tc39.es/ecma262/#prod-SpreadElement][SpreadElement]][Yield,
Await]:...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]][Yield,
Await]:{}
{[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][?Yield,
?Await]}
{[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][?Yield,
?Await],}
[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-PropertyDefinition][PropertyDefinition]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-CoverInitializedName][CoverInitializedName]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
?Await]
...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]
[[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-LiteralPropertyName][LiteralPropertyName]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
[[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]]
[[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]][Yield,
Await]:[[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]]
[[https://tc39.es/ecma262/#prod-CoverInitializedName][CoverInitializedName]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-Initializer][Initializer]][In, Yield,
Await]:=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][Yield,
Await,
Tagged]:[[https://tc39.es/ecma262/#prod-NoSubstitutionTemplate][NoSubstitutionTemplate]]
[[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]][?Yield,
?Await, ?Tagged]
[[https://tc39.es/ecma262/#prod-SubstitutionTemplate][SubstitutionTemplate]][Yield,
Await,
Tagged]:[[https://tc39.es/ecma262/#prod-TemplateHead][TemplateHead]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await][[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]][?Yield,
?Await, ?Tagged]
[[https://tc39.es/ecma262/#prod-TemplateSpans][TemplateSpans]][Yield,
Await,
Tagged]:[[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]
[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][?Yield,
?Await,
?Tagged][[https://tc39.es/ecma262/#prod-TemplateTail][TemplateTail]]
[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][Yield,
Await,
Tagged]:[[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-TemplateMiddleList][TemplateMiddleList]][?Yield,
?Await,
?Tagged][[https://tc39.es/ecma262/#prod-TemplateMiddle][TemplateMiddle]][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
?Await][[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await]]
[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
?Await].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][?Yield,
?Await, +Tagged]
[[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]
new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]][Yield,
Await]:super[[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await]]
super.[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
[[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]:[[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]]
[[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]]:new.target
[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
?Await]
new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-ImportCall][ImportCall]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
?Await][[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await]]
[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
?Await].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]][?Yield,
?Await, +Tagged]
[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
?Await]

When processing an instance of the production
[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][?Yield,
?Await] the interpretation of
[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
is refined using the following grammar:

[[https://tc39.es/ecma262/#prod-CallMemberExpression][CallMemberExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
?Await]

 

[[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]][Yield,
Await]:super[[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-ImportCall][ImportCall]][Yield,
Await]:import([[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await])
[[https://tc39.es/ecma262/#prod-Arguments][Arguments]][Yield, Await]:()
([[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
?Await])
([[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
?Await],)
[[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-ArgumentList][ArgumentList]][?Yield,
?Await],...[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await][no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]++
[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await][no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]--
++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
--[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]][?Yield,
?Await]
delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
void[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
typeof[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
+[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await] -[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
~[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
![[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
[+Await][[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]][?Yield]
[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]][?Yield,
?Await]**[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]][[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]]:one
of*/%
[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
?Await]+[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
?Await]-[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]<<[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]>>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield,
?Await]<[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield,
?Await]>[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield,
?Await]<=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield,
?Await]>=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield,
?Await]instanceof[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]
[+In][[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][+In,
?Yield,
?Await]in[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
?Yield,
?Await]==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
?Yield,
?Await]!=[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
?Yield,
?Await]===[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
?Yield,
?Await]!==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][?In,
?Yield,
?Await]&[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][?In,
?Yield,
?Await]^[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][?In,
?Yield,
?Await]|[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][?In,
?Yield,
?Await]&&[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][?In,
?Yield,
?Await]||[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]][?In,
?Yield,
?Await]?[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield,
?Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]][?In,
?Yield, ?Await]
[+Yield][[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]][?In,
?Await]
[[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
?Yield, ?Await]

In certain circumstances when processing an instance of the production
[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
?Yield, ?Await] the following grammar is used to refine the
interpretation of
[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]:

[[https://tc39.es/ecma262/#prod-AssignmentPattern][AssignmentPattern]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]][Yield,
Await]:{}
{[[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]][?Yield,
?Await]}
{[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][?Yield,
?Await]}
{[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]][?Yield,
?Await]opt}
[[https://tc39.es/ecma262/#prod-ArrayAssignmentPattern][ArrayAssignmentPattern]][Yield,
Await]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]][?Yield,
?Await]opt]
[[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][?Yield,
?Await]]
[[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]][?Yield,
?Await]opt]
[[https://tc39.es/ecma262/#prod-AssignmentRestProperty][AssignmentRestProperty]][Yield,
Await]:...[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AssignmentPropertyList][AssignmentPropertyList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AssignmentElementList][AssignmentElementList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AssignmentElisionElement][AssignmentElisionElement]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AssignmentProperty][AssignmentProperty]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
?Yield, ?Await]opt
[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]:[[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AssignmentElement][AssignmentElement]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
?Yield, ?Await]opt
[[https://tc39.es/ecma262/#prod-AssignmentRestElement][AssignmentRestElement]][Yield,
Await]:...[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-DestructuringAssignmentTarget][DestructuringAssignmentTarget]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await]

 

[[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]]:one
of*=/=%=+=-=<<=>>=>>>=&=^=|=**=
[[https://tc39.es/ecma262/#prod-Expression][Expression]][In, Yield,
Await]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-Expression][Expression]][?In, ?Yield,
?Await],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
?Yield, ?Await]

* A.3Statements
  :PROPERTIES:
  :CUSTOM_ID: a.3statements
  :END:

[[https://tc39.es/ecma262/#prod-Statement][Statement]][Yield, Await,
Return]:[[https://tc39.es/ecma262/#prod-BlockStatement][BlockStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]][?Yield,
?Await]
[+Return][[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]
[[https://tc39.es/ecma262/#prod-Declaration][Declaration]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]][?Yield,
?Await, ~Default]
[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]][?Yield,
?Await, ~Default]
[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][+In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]][Yield,
Await,
Default]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]][?Yield,
?Await, ?Default]
[[https://tc39.es/ecma262/#prod-BreakableStatement][BreakableStatement]][Yield,
Await,
Return]:[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-BlockStatement][BlockStatement]][Yield,
Await, Return]:[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
?Await, ?Return] [[https://tc39.es/ecma262/#prod-Block][Block]][Yield,
Await,
Return]:{[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
?Await, ?Return]opt}
[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][Yield,
Await,
Return]:[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
?Await,
?Return][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][Yield,
Await,
Return]:[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-Declaration][Declaration]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-BindingList][BindingList]][?In,
?Yield, ?Await];
[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]]:let const
[[https://tc39.es/ecma262/#prod-BindingList][BindingList]][In, Yield,
Await]:[[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BindingList][BindingList]][?In, ?Yield,
?Await],[[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-LexicalBinding][LexicalBinding]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
?Yield, ?Await]opt
[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]][Yield,
Await]:var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][+In,
?Yield, ?Await];
[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][?In,
?Yield,
?Await],[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
?Yield, ?Await]opt
[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][?In,
?Yield, ?Await]
[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ObjectBindingPattern][ObjectBindingPattern]][Yield,
Await]:{}
{[[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]][?Yield,
?Await]}
{[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][?Yield,
?Await]}
{[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]][?Yield,
?Await]opt}
[[https://tc39.es/ecma262/#prod-ArrayBindingPattern][ArrayBindingPattern]][Yield,
Await]:[[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][?Yield,
?Await]opt]
[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][?Yield,
?Await]]
[[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][?Yield,
?Await]opt]
[[https://tc39.es/ecma262/#prod-BindingRestProperty][BindingRestProperty]][Yield,
Await]:...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingPropertyList][BindingPropertyList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingElementList][BindingElementList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingElisionElement][BindingElisionElement]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-Elision][Elision]]opt[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingProperty][BindingProperty]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
?Yield, ?Await]opt
[[https://tc39.es/ecma262/#prod-SingleNameBinding][SingleNameBinding]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][+In,
?Yield, ?Await]opt
[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][Yield,
Await]:...[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]
...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]:;
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]][Yield,
Await]:[lookahead ∉ { {, function, async [no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]
function, class, let [
}][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
?Await];
[[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]][Yield, Await,
Return]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await,
?Return]else[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]][Yield,
Await,
Return]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await,
?Return]while([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await]);
while([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return] for([lookahead ≠ let
[][[https://tc39.es/ecma262/#prod-Expression][Expression]][~In, ?Yield,
?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]][~In,
?Yield,
?Await];[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][~In,
?Yield,
?Await][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return] for([lookahead ≠ let
[][[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await]in[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
?Await]in[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][?Yield,
?Await]in[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return] for([lookahead ≠
let][[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][?Yield,
?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return] [+Await]forawait([lookahead ≠
let][[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
[+Await]forawait(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
[+Await]forawait([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][?Yield,
?Await]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-LetOrConst][LetOrConst]][[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]][Yield,
Await]:continue; continue[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
?Await];
[[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]][Yield,
Await]:break; break[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
?Await];
[[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]][Yield,
Await]:return; return[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await];
[[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]][Yield,
Await,
Return]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]][Yield,
Await,
Return]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]][Yield, Await,
Return]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
?Await, ?Return]opt}
{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
?Await,
?Return]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][?Yield,
?Await,
?Return][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
?Await, ?Return]opt}
[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][Yield, Await,
Return]:[[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][?Yield,
?Await,
?Return][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]][Yield, Await,
Return]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
?Await, ?Return]opt
[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][Yield,
Await,
Return]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
?Await, ?Return]opt
[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]][Yield,
Await,
Return]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]][?Yield,
?Await]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]][Yield,
Await,
Return]:[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await, ~Default]
[[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]][Yield,
Await]:throw[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield, ?Await];
[[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]][Yield,
Await, Return]:try[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
?Await, ?Return][[https://tc39.es/ecma262/#prod-Catch][Catch]][?Yield,
?Await, ?Return]
try[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield, ?Await,
?Return][[https://tc39.es/ecma262/#prod-Finally][Finally]][?Yield,
?Await, ?Return]
try[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield, ?Await,
?Return][[https://tc39.es/ecma262/#prod-Catch][Catch]][?Yield, ?Await,
?Return][[https://tc39.es/ecma262/#prod-Finally][Finally]][?Yield,
?Await, ?Return] [[https://tc39.es/ecma262/#prod-Catch][Catch]][Yield,
Await,
Return]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]][?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield, ?Await,
?Return] catch[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-Finally][Finally]][Yield, Await,
Return]:finally[[https://tc39.es/ecma262/#prod-Block][Block]][?Yield,
?Await, ?Return]
[[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]:debugger;

* A.4Functions and Classes
  :PROPERTIES:
  :CUSTOM_ID: a.4functions-and-classes
  :END:

[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][Yield,
Await,
Default]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
~Await]}
[+Default]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
~Await]}
[[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][~Yield,
~Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
~Await]}
[[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][Yield,
Await]:[empty]
[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
?Await],
[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield,
?Await],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingElement][BindingElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield,
?Await, +Return]opt
[[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][?Yield,
?Await][no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]][?In]
[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]][In]:[lookahead
≠
{][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
~Yield, ~Await]
{[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
~Await]}

When the production
[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
?Await] is recognized the following grammar is used to refine the
interpretation of
[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:

[[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]][Yield,
Await]:([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][?Yield,
?Await])

 

[[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]][In,
Yield, Await]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][?Yield][no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][?In]
[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][?Yield,
?Await][no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][?In]
[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][In]:[lookahead
≠
{][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
~Yield, +Await]
{[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

When the production
[[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]][In,
Yield,
Await]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][?Yield,
?Await][no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][?In]
is recognized the following grammar is used to refine the interpretation
of
[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:

[[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]][~Yield,
+Await]

 

[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][~Yield,
~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
~Await]}
[[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]][?Yield,
?Await]
get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
~Await]}
set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
~Await]}
[[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][~Yield,
~Await]
[[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]][Yield,
Await]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][+Yield,
~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
[[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]][Yield,
Await,
Default]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
[+Default]function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
[[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][+Yield,
~Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][+Yield,
~Await]
[[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]][In,
Await]:yield yield[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
+Yield, ?Await] yield[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]*[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
+Yield, ?Await]
[[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]][Yield,
Await]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][+Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
[[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]][Yield,
Await, Default]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
[+Default]async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
[[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]function*[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][+Yield,
+Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][+Yield,
+Await]
[[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]][Yield,
Await]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here][[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][~Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
[[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]][Yield,
Await, Default]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
[+Default]async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
[[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
async[no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
here]function[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][~Yield,
+Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
+Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
+Await]
[[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]][Yield]:await[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
+Await]
[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]][Yield,
Await,
Default]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
?Await]
[+Default]class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]][Yield,
Await]:class[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][?Yield,
?Await]opt[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]][?Yield,
?Await]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]][?Yield,
?Await]opt}
[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]][Yield,
Await]:extends[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
?Await] [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][?Yield,
?Await]
[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][Yield,
Await]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
?Await]
static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
?Await] ;

* A.5Scripts and Modules
  :PROPERTIES:
  :CUSTOM_ID: a.5scripts-and-modules
  :END:

[[https://tc39.es/ecma262/#prod-Script][Script]]:[[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]opt
[[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][~Yield,
~Await, ~Return]
[[https://tc39.es/ecma262/#prod-Module][Module]]:[[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]opt
[[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]]:[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]
[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]]:[[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]
[[https://tc39.es/ecma262/#prod-ModuleItemList][ModuleItemList]][[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]
[[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]:[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]
[[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]][~Yield,
~Await, ~Return]
[[https://tc39.es/ecma262/#prod-ImportDeclaration][ImportDeclaration]]:import[[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
import[[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]];
[[https://tc39.es/ecma262/#prod-ImportClause][ImportClause]]:[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]]
[[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]
[[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]
[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]
[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]],[[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]
[[https://tc39.es/ecma262/#prod-ImportedDefaultBinding][ImportedDefaultBinding]]:[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
[[https://tc39.es/ecma262/#prod-NameSpaceImport][NameSpaceImport]]:*as[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
[[https://tc39.es/ecma262/#prod-NamedImports][NamedImports]]:{}
{[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]]}
{[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]],}
[[https://tc39.es/ecma262/#prod-FromClause][FromClause]]:from[[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]
[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]]:[[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]
[[https://tc39.es/ecma262/#prod-ImportsList][ImportsList]],[[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]
[[https://tc39.es/ecma262/#prod-ImportSpecifier][ImportSpecifier]]:[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]
[[https://tc39.es/ecma262/#prod-ModuleSpecifier][ModuleSpecifier]]:[[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]]
[[https://tc39.es/ecma262/#prod-ImportedBinding][ImportedBinding]]:[[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]][~Yield,
~Await]
[[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]:export[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]][[https://tc39.es/ecma262/#prod-FromClause][FromClause]];
export[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]];
export[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]][~Yield,
~Await]
export[[https://tc39.es/ecma262/#prod-Declaration][Declaration]][~Yield,
~Await]
exportdefault[[https://tc39.es/ecma262/#prod-HoistableDeclaration][HoistableDeclaration]][~Yield,
~Await, +Default]
exportdefault[[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]][~Yield,
~Await, +Default] exportdefault[lookahead ∉ { function, async [no
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] here]
function, class
}][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][+In,
~Yield, ~Await];
[[https://tc39.es/ecma262/#prod-ExportFromClause][ExportFromClause]]:*
*as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]
[[https://tc39.es/ecma262/#prod-NamedExports][NamedExports]]:{}
{[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]}
{[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],}
[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]]:[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]
[[https://tc39.es/ecma262/#prod-ExportsList][ExportsList]],[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]
[[https://tc39.es/ecma262/#prod-ExportSpecifier][ExportSpecifier]]:[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]as[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]

* A.6Number Conversions
  :PROPERTIES:
  :CUSTOM_ID: a.6number-conversions
  :END:

[[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt
[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt[[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]][[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt
[[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]:::[[https://tc39.es/ecma262/#prod-StrWhiteSpaceChar][StrWhiteSpaceChar]][[https://tc39.es/ecma262/#prod-StrWhiteSpace][StrWhiteSpace]]opt
[[https://tc39.es/ecma262/#prod-StrWhiteSpaceChar][StrWhiteSpaceChar]]:::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]]
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-StrNumericLiteral][StrNumericLiteral]]:::[[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]
[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-StrDecimalLiteral][StrDecimalLiteral]]:::[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
+[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]] -[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]
[[https://tc39.es/ecma262/#prod-StrUnsignedDecimalLiteral][StrUnsignedDecimalLiteral]]:::Infinity
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]].[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
.[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]opt
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]::[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]][[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]::one
of0123456789
[[https://tc39.es/ecma262/#prod-ExponentPart][ExponentPart]]::[[https://tc39.es/ecma262/#prod-ExponentIndicator][ExponentIndicator]][[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]
[[https://tc39.es/ecma262/#prod-ExponentIndicator][ExponentIndicator]]::one
ofeE
[[https://tc39.es/ecma262/#prod-SignedInteger][SignedInteger]]::[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
+[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]] -[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]
[[https://tc39.es/ecma262/#prod-HexIntegerLiteral][HexIntegerLiteral]]::0x[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
0X[[https://tc39.es/ecma262/#prod-HexDigits][HexDigits]]
[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]::one
of0123456789abcdefABCDEF

All grammar symbols not explicitly defined by the
[[https://tc39.es/ecma262/#prod-StringNumericLiteral][StringNumericLiteral]]
grammar have the definitions used in the
[[https://tc39.es/ecma262/#sec-literals-numeric-literals][Lexical
Grammar for numeric literals]].

* A.7Universal Resource Identifier Character Classes
  :PROPERTIES:
  :CUSTOM_ID: a.7universal-resource-identifier-character-classes
  :END:

[[https://tc39.es/ecma262/#prod-uri][uri]]:::[[https://tc39.es/ecma262/#prod-uriCharacters][uriCharacters]]opt
[[https://tc39.es/ecma262/#prod-uriCharacters][uriCharacters]]:::[[https://tc39.es/ecma262/#prod-uriCharacter][uriCharacter]][[https://tc39.es/ecma262/#prod-uriCharacters][uriCharacters]]opt
[[https://tc39.es/ecma262/#prod-uriCharacter][uriCharacter]]:::[[https://tc39.es/ecma262/#prod-uriReserved][uriReserved]]
[[https://tc39.es/ecma262/#prod-uriUnescaped][uriUnescaped]]
[[https://tc39.es/ecma262/#prod-uriEscaped][uriEscaped]]
[[https://tc39.es/ecma262/#prod-uriReserved][uriReserved]]:::one
of;/?:@&=+$,
[[https://tc39.es/ecma262/#prod-uriUnescaped][uriUnescaped]]:::[[https://tc39.es/ecma262/#prod-uriAlpha][uriAlpha]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-uriMark][uriMark]]
[[https://tc39.es/ecma262/#prod-uriEscaped][uriEscaped]]:::%[[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]][[https://tc39.es/ecma262/#prod-HexDigit][HexDigit]]
[[https://tc39.es/ecma262/#prod-uriAlpha][uriAlpha]]:::one
ofabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
[[https://tc39.es/ecma262/#prod-uriMark][uriMark]]:::one of-_.!~*'()

* A.8Regular Expressions
  :PROPERTIES:
  :CUSTOM_ID: a.8regular-expressions
  :END:

[[https://tc39.es/ecma262/#prod-Pattern][Pattern]][U,
N]::[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][U,
N]::[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][?U,
?N]|[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][U,
N]::[empty]
[[https://tc39.es/ecma262/#prod-Alternative][Alternative]][?U,
?N][[https://tc39.es/ecma262/#prod-Term][Term]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Term][Term]][U,
N]::[[https://tc39.es/ecma262/#prod-Assertion][Assertion]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Atom][Atom]][?U, ?N]
[[https://tc39.es/ecma262/#prod-Atom][Atom]][?U,
?N][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
[[https://tc39.es/ecma262/#prod-Assertion][Assertion]][U, N]::^ $ \b \B
(?=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
(?![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
(?<=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
(?<![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
[[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]::[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]?
[[https://tc39.es/ecma262/#prod-QuantifierPrefix][QuantifierPrefix]]::*
+ ? {[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],}
{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
[[https://tc39.es/ecma262/#prod-Atom][Atom]][U,
N]::[[https://tc39.es/ecma262/#prod-PatternCharacter][PatternCharacter]]
. \[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]][?U, ?N]
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]][?U]
([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][?U][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U,
?N]) (?:[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U,
?N])
[[https://tc39.es/ecma262/#prod-SyntaxCharacter][SyntaxCharacter]]::one
of^$\.*+?()[]{}|
[[https://tc39.es/ecma262/#prod-PatternCharacter][PatternCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not [[https://tc39.es/ecma262/#prod-SyntaxCharacter][SyntaxCharacter]]
[[https://tc39.es/ecma262/#prod-AtomEscape][AtomEscape]][U,
N]::[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]][?U]
[+N]k[[https://tc39.es/ecma262/#prod-GroupName][GroupName]][?U]
[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]][U]::[[https://tc39.es/ecma262/#prod-ControlEscape][ControlEscape]]
c[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]
0[lookahead ∉
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]
[[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]][?U]
[[https://tc39.es/ecma262/#prod-ControlEscape][ControlEscape]]::one
offnrtv
[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]::one
ofabcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ
[[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][U]::[empty]
?[[https://tc39.es/ecma262/#prod-GroupName][GroupName]][?U]
[[https://tc39.es/ecma262/#prod-GroupName][GroupName]][U]::<[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][?U]>
[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][U]::[[https://tc39.es/ecma262/#prod-RegExpIdentifierStart][RegExpIdentifierStart]][?U]
[[https://tc39.es/ecma262/#prod-RegExpIdentifierName][RegExpIdentifierName]][?U][[https://tc39.es/ecma262/#prod-RegExpIdentifierPart][RegExpIdentifierPart]][?U]
[[https://tc39.es/ecma262/#prod-RegExpIdentifierStart][RegExpIdentifierStart]][U]::[[https://tc39.es/ecma262/#prod-UnicodeIDStart][UnicodeIDStart]]
$ _
\[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]
[[https://tc39.es/ecma262/#prod-RegExpIdentifierPart][RegExpIdentifierPart]][U]::[[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
$
\[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]
<ZWNJ> <ZWJ>
[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][U]::[+U]u[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]\u[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]
[+U]u[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]
[+U]u[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]
[+U]u[[https://tc39.es/ecma262/#prod-NonSurrogate][NonSurrogate]]
[~U]u[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]
[+U]u{[[https://tc39.es/ecma262/#prod-CodePoint][CodePoint]]}

Each =\u=
[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]] for
which the choice of associated =u=
[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]] is
ambiguous shall be associated with the nearest possible =u=
[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]] that
would otherwise have no corresponding =\u=
[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]].

 

[[https://tc39.es/ecma262/#prod-LeadSurrogate][LeadSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]but
only if the SV of
[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]] is in the
inclusive range 0xD800 to 0xDBFF
[[https://tc39.es/ecma262/#prod-TrailSurrogate][TrailSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]but
only if the SV of
[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]] is in the
inclusive range 0xDC00 to 0xDFFF
[[https://tc39.es/ecma262/#prod-NonSurrogate][NonSurrogate]]::[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]]but
only if the SV of
[[https://tc39.es/ecma262/#prod-Hex4Digits][Hex4Digits]] is not in the
inclusive range 0xD800 to 0xDFFF
[[https://tc39.es/ecma262/#prod-IdentityEscape][IdentityEscape]][U]::[+U][[https://tc39.es/ecma262/#prod-SyntaxCharacter][SyntaxCharacter]]
[+U]/
[~U][[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not
[[https://tc39.es/ecma262/#prod-UnicodeIDContinue][UnicodeIDContinue]]
[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]::[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt[lookahead
∉ [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][U]::d
D s S w W
[+U]p{[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]}
[+U]P{[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]}
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueExpression][UnicodePropertyValueExpression]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]=[[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]]
[[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyName][UnicodePropertyName]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacter][UnicodePropertyNameCharacter]][[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacters][UnicodePropertyNameCharacters]]opt
[[https://tc39.es/ecma262/#prod-UnicodePropertyValue][UnicodePropertyValue]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]
[[https://tc39.es/ecma262/#prod-LoneUnicodePropertyNameOrValue][LoneUnicodePropertyNameOrValue]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacter][UnicodePropertyValueCharacter]][[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacters][UnicodePropertyValueCharacters]]opt
[[https://tc39.es/ecma262/#prod-UnicodePropertyValueCharacter][UnicodePropertyValueCharacter]]::[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacter][UnicodePropertyNameCharacter]]
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-UnicodePropertyNameCharacter][UnicodePropertyNameCharacter]]::[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]
_
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]][U]::[[lookahead
≠ ^][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]]
[^[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]]
[[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][U]::[empty]
[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]][?U]
[[https://tc39.es/ecma262/#prod-NonemptyClassRanges][NonemptyClassRanges]][U]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U][[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]
[[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]][U]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][?U][[https://tc39.es/ecma262/#prod-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][?U]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][?U][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][U]::-
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][?U]
[[https://tc39.es/ecma262/#prod-ClassAtomNoDash][ClassAtomNoDash]][U]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of \ or ] or -
\[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-ClassEscape][ClassEscape]][U]::b [+U]-
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-CharacterEscape][CharacterEscape]][?U]

* BAdditional ECMAScript Features for Web Browsers
  :PROPERTIES:
  :CUSTOM_ID: badditional-ecmascript-features-for-web-browsers
  :END:

The ECMAScript language syntax and semantics defined in this annex are
required when the ECMAScript host is a web browser. The content of this
annex is normative but optional if the ECMAScript host is not a web
browser.

Note

This annex describes various legacy features and other characteristics
of web browser based ECMAScript implementations. All of the language
features and behaviours specified in this annex have one or more
undesirable characteristics and in the absence of legacy usage would be
removed from this specification. However, the usage of these features by
large numbers of existing web pages means that web browsers must
continue to support them. The specifications in this annex define the
requirements for interoperable implementations of these legacy features.

These features are not considered part of the core ECMAScript language.
Programmers should not use or assume the existence of these features and
behaviours when writing new ECMAScript code. ECMAScript implementations
are discouraged from implementing these features unless the
implementation is part of a web browser or is required to run the same
legacy ECMAScript code that web browsers encounter.

* B.1Additional Syntax
  :PROPERTIES:
  :CUSTOM_ID: b.1additional-syntax
  :END:

* B.1.1Numeric Literals
  :PROPERTIES:
  :CUSTOM_ID: b.1.1numeric-literals
  :END:

The syntax and semantics of
[[https://tc39.es/ecma262/#sec-literals-numeric-literals][11.8.3]] is
extended as follows except that this extension is not allowed for
[[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]:

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-69
   :END:

[[https://tc39.es/ecma262/#prod-annexB-NumericLiteral][NumericLiteral]]::[[https://tc39.es/ecma262/#prod-DecimalLiteral][DecimalLiteral]]
[[https://tc39.es/ecma262/#prod-DecimalBigIntegerLiteral][DecimalBigIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-NonDecimalIntegerLiteral][NonDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-BigIntLiteralSuffix][BigIntLiteralSuffix]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-DecimalIntegerLiteral][DecimalIntegerLiteral]]::0
[[https://tc39.es/ecma262/#prod-NonZeroDigit][NonZeroDigit]][[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]opt
[[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]
[[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]]::one
of89

* B.1.1.1Static Semantics
  :PROPERTIES:
  :CUSTOM_ID: b.1.1.1static-semantics
  :END:

- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is the MV of [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is (the MV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalIntegerLiteral][LegacyOctalIntegerLiteral]]
  times 8) plus the MV of
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-DecimalIntegerLiteral][DecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]]
  is the MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]]
  is (the MV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]]
  times 10) plus the MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
  is (the MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDecimalIntegerLiteral][NonOctalDecimalIntegerLiteral]]
  times 10) plus the MV of
  [[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]]::0[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is the MV of [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]]::[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is (the MV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalLikeDecimalIntegerLiteral][LegacyOctalLikeDecimalIntegerLiteral]]
  times 10) plus the MV of
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]]::8
  is 8.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-NonOctalDigit][NonOctalDigit]]::9
  is 9.

* B.1.2String Literals
  :PROPERTIES:
  :CUSTOM_ID: b.1.2string-literals
  :END:

The syntax and semantics of
[[https://tc39.es/ecma262/#sec-literals-string-literals][11.8.4]] is
extended as follows except that this extension is not allowed for
[[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]:

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-70
   :END:

[[https://tc39.es/ecma262/#prod-annexB-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-CharacterEscapeSequence][CharacterEscapeSequence]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]
[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
[[https://tc39.es/ecma262/#prod-UnicodeEscapeSequence][UnicodeEscapeSequence]]
[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]::[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]][lookahead
∉ [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]]
[[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]][lookahead
∉ [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]]
[[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
[[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]]::one
of0123
[[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]]::one
of4567

This definition of
[[https://tc39.es/ecma262/#prod-annexB-EscapeSequence][EscapeSequence]]
is not used in strict mode or when parsing
[[https://tc39.es/ecma262/#prod-TemplateCharacter][TemplateCharacter]].

* B.1.2.1Static Semantics
  :PROPERTIES:
  :CUSTOM_ID: b.1.2.1static-semantics
  :END:

- The SV of
  [[https://tc39.es/ecma262/#prod-annexB-EscapeSequence][EscapeSequence]]::[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]
  is the SV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]].
- The SV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]::[[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is the code unit whose value is the MV of
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The SV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]::[[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is the code unit whose value is (8 times the MV of
  [[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]])
  plus the MV of
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The SV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]::[[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is the code unit whose value is (8 times the MV of
  [[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]])
  plus the MV of
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The SV of
  [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]::[[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]][[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]
  is the code unit whose value is (64 (that is, 8^{2}) times the MV of
  [[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]])
  plus (8 times the MV of the first
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]]) plus the MV
  of the second
  [[https://tc39.es/ecma262/#prod-OctalDigit][OctalDigit]].
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]]::0
  is 0.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]]::1
  is 1.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]]::2
  is 2.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-ZeroToThree][ZeroToThree]]::3
  is 3.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]]::4
  is 4.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]]::5
  is 5.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]]::6
  is 6.
- The MV of
  [[https://tc39.es/ecma262/#prod-annexB-FourToSeven][FourToSeven]]::7
  is 7.

* B.1.3HTML-like Comments
  :PROPERTIES:
  :CUSTOM_ID: b.1.3html-like-comments
  :END:

The syntax and semantics of
[[https://tc39.es/ecma262/#sec-comments][11.4]] is extended as follows
except that this extension is not allowed when parsing source code using
the [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
[[https://tc39.es/ecma262/#prod-Module][Module]]:

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-71
   :END:

[[https://tc39.es/ecma262/#prod-annexB-Comment][Comment]]::[[https://tc39.es/ecma262/#prod-annexB-MultiLineComment][MultiLineComment]]
[[https://tc39.es/ecma262/#prod-SingleLineComment][SingleLineComment]]
[[https://tc39.es/ecma262/#prod-annexB-SingleLineHTMLOpenComment][SingleLineHTMLOpenComment]]
[[https://tc39.es/ecma262/#prod-annexB-SingleLineHTMLCloseComment][SingleLineHTMLCloseComment]]
[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedComment][SingleLineDelimitedComment]]
[[https://tc39.es/ecma262/#prod-annexB-MultiLineComment][MultiLineComment]]::/*[[https://tc39.es/ecma262/#prod-annexB-FirstCommentLine][FirstCommentLine]]opt[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]][[https://tc39.es/ecma262/#prod-MultiLineCommentChars][MultiLineCommentChars]]opt*/[[https://tc39.es/ecma262/#prod-annexB-HTMLCloseComment][HTMLCloseComment]]opt
[[https://tc39.es/ecma262/#prod-annexB-FirstCommentLine][FirstCommentLine]]::[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentChars][SingleLineDelimitedCommentChars]]
[[https://tc39.es/ecma262/#prod-annexB-SingleLineHTMLOpenComment][SingleLineHTMLOpenComment]]::<!--[[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]opt
[[https://tc39.es/ecma262/#prod-annexB-SingleLineHTMLCloseComment][SingleLineHTMLCloseComment]]::[[https://tc39.es/ecma262/#prod-LineTerminatorSequence][LineTerminatorSequence]][[https://tc39.es/ecma262/#prod-annexB-HTMLCloseComment][HTMLCloseComment]]
[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedComment][SingleLineDelimitedComment]]::/*[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentChars][SingleLineDelimitedCommentChars]]opt*/
[[https://tc39.es/ecma262/#prod-annexB-HTMLCloseComment][HTMLCloseComment]]::[[https://tc39.es/ecma262/#prod-annexB-WhiteSpaceSequence][WhiteSpaceSequence]]opt[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentSequence][SingleLineDelimitedCommentSequence]]opt-->[[https://tc39.es/ecma262/#prod-SingleLineCommentChars][SingleLineCommentChars]]opt
[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentChars][SingleLineDelimitedCommentChars]]::[[https://tc39.es/ecma262/#prod-annexB-SingleLineNotAsteriskChar][SingleLineNotAsteriskChar]][[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentChars][SingleLineDelimitedCommentChars]]opt
*[[https://tc39.es/ecma262/#prod-annexB-SingleLinePostAsteriskCommentChars][SingleLinePostAsteriskCommentChars]]opt
[[https://tc39.es/ecma262/#prod-annexB-SingleLineNotAsteriskChar][SingleLineNotAsteriskChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of * or
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-annexB-SingleLinePostAsteriskCommentChars][SingleLinePostAsteriskCommentChars]]::[[https://tc39.es/ecma262/#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar][SingleLineNotForwardSlashOrAsteriskChar]][[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentChars][SingleLineDelimitedCommentChars]]opt
*[[https://tc39.es/ecma262/#prod-annexB-SingleLinePostAsteriskCommentChars][SingleLinePostAsteriskCommentChars]]opt
[[https://tc39.es/ecma262/#prod-annexB-SingleLineNotForwardSlashOrAsteriskChar][SingleLineNotForwardSlashOrAsteriskChar]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of / or * or
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
[[https://tc39.es/ecma262/#prod-annexB-WhiteSpaceSequence][WhiteSpaceSequence]]::[[https://tc39.es/ecma262/#prod-WhiteSpace][WhiteSpace]][[https://tc39.es/ecma262/#prod-annexB-WhiteSpaceSequence][WhiteSpaceSequence]]opt
[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentSequence][SingleLineDelimitedCommentSequence]]::[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedComment][SingleLineDelimitedComment]][[https://tc39.es/ecma262/#prod-annexB-WhiteSpaceSequence][WhiteSpaceSequence]]opt[[https://tc39.es/ecma262/#prod-annexB-SingleLineDelimitedCommentSequence][SingleLineDelimitedCommentSequence]]opt

Similar to a
[[https://tc39.es/ecma262/#prod-annexB-MultiLineComment][MultiLineComment]]
that contains a line terminator code point, a
[[https://tc39.es/ecma262/#prod-annexB-SingleLineHTMLCloseComment][SingleLineHTMLCloseComment]]
is considered to be a
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] for
purposes of parsing by the syntactic grammar.

* B.1.4Regular Expressions Patterns
  :PROPERTIES:
  :CUSTOM_ID: b.1.4regular-expressions-patterns
  :END:

The syntax of [[https://tc39.es/ecma262/#sec-patterns][21.2.1]] is
modified and extended as follows. These changes introduce ambiguities
that are broken by the ordering of grammar productions and by contextual
information. When parsing using the following grammar, each alternative
is considered only if previous production alternatives do not match.

This alternative pattern grammar and semantics only changes the syntax
and semantics of BMP patterns. The following grammar extensions include
productions parameterized with the [U] parameter. However, none of these
extensions change the syntax of Unicode patterns recognized when parsing
with the [U] parameter present on the
[[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]].

** Syntax
   :PROPERTIES:
   :CUSTOM_ID: syntax-72
   :END:

[[https://tc39.es/ecma262/#prod-annexB-Term][Term]][U,
N]::[+U][[https://tc39.es/ecma262/#prod-annexB-Assertion][Assertion]][+U,
?N] [+U][[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]][+U, ?N]
[+U][[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]][+U,
?N][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
[~U][[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]][?N][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
[~U][[https://tc39.es/ecma262/#prod-annexB-Assertion][Assertion]][~U,
?N]
[~U][[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]][?N][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
[~U][[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]][?N]
[[https://tc39.es/ecma262/#prod-annexB-Assertion][Assertion]][U, N]::^ $
\b \B
[+U](?=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][+U,
?N])
[+U](?![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][+U,
?N])
[~U][[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]][?N]
(?<=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
(?<![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][?U, ?N])
[[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]][N]::(?=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][~U,
?N]) (?![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][~U,
?N])
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]][N]::.
\[[https://tc39.es/ecma262/#prod-annexB-AtomEscape][AtomEscape]][~U, ?N]
\[lookahead = c]
[[https://tc39.es/ecma262/#prod-CharacterClass][CharacterClass]][~U]
([[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][~U, ?N])
(?:[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]][~U, ?N])
[[https://tc39.es/ecma262/#prod-annexB-InvalidBracedQuantifier][InvalidBracedQuantifier]]
[[https://tc39.es/ecma262/#prod-annexB-ExtendedPatternCharacter][ExtendedPatternCharacter]]
[[https://tc39.es/ecma262/#prod-annexB-InvalidBracedQuantifier][InvalidBracedQuantifier]]::{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],}
{[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]],[[https://tc39.es/ecma262/#prod-DecimalDigits][DecimalDigits]]}
[[https://tc39.es/ecma262/#prod-annexB-ExtendedPatternCharacter][ExtendedPatternCharacter]]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of ^$\.*+?()[|
[[https://tc39.es/ecma262/#prod-annexB-AtomEscape][AtomEscape]][U,
N]::[+U][[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]
[~U][[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]]but
only if the CapturingGroupNumber of
[[https://tc39.es/ecma262/#prod-DecimalEscape][DecimalEscape]] is <=
_NcapturingParens_
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-annexB-CharacterEscape][CharacterEscape]][~U,
?N] [+N]k[[https://tc39.es/ecma262/#prod-GroupName][GroupName]][?U]
[[https://tc39.es/ecma262/#prod-annexB-CharacterEscape][CharacterEscape]][U,
N]::[[https://tc39.es/ecma262/#prod-ControlEscape][ControlEscape]]
c[[https://tc39.es/ecma262/#prod-ControlLetter][ControlLetter]]
0[lookahead ∉
[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]]
[[https://tc39.es/ecma262/#prod-HexEscapeSequence][HexEscapeSequence]]
[[https://tc39.es/ecma262/#prod-RegExpUnicodeEscapeSequence][RegExpUnicodeEscapeSequence]][?U]
[~U][[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]
[[https://tc39.es/ecma262/#prod-annexB-IdentityEscape][IdentityEscape]][?U,
?N]
[[https://tc39.es/ecma262/#prod-annexB-IdentityEscape][IdentityEscape]][U,
N]::[+U][[https://tc39.es/ecma262/#prod-SyntaxCharacter][SyntaxCharacter]]
[+U]/
[~U][[https://tc39.es/ecma262/#prod-annexB-SourceCharacterIdentityEscape][SourceCharacterIdentityEscape]][?N]
[[https://tc39.es/ecma262/#prod-annexB-SourceCharacterIdentityEscape][SourceCharacterIdentityEscape]][N]::[~N][[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not c
[+N][[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of c or k
[[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]][U,
N]::[[https://tc39.es/ecma262/#prod-SourceCharacter][SourceCharacter]]but
not one of \ or ] or -
\[[https://tc39.es/ecma262/#prod-annexB-ClassEscape][ClassEscape]][?U,
?N] \[lookahead = c]
[[https://tc39.es/ecma262/#prod-annexB-ClassEscape][ClassEscape]][U,
N]::b [+U]-
[~U]c[[https://tc39.es/ecma262/#prod-annexB-ClassControlLetter][ClassControlLetter]]
[[https://tc39.es/ecma262/#prod-CharacterClassEscape][CharacterClassEscape]][?U]
[[https://tc39.es/ecma262/#prod-annexB-CharacterEscape][CharacterEscape]][?U,
?N]
[[https://tc39.es/ecma262/#prod-annexB-ClassControlLetter][ClassControlLetter]]::[[https://tc39.es/ecma262/#prod-DecimalDigit][DecimalDigit]]
_ Note

When the same left hand sides occurs with both [+U] and [~U] guards it
is to control the disambiguation priority.

* B.1.4.1Static Semantics: Early Errors
  :PROPERTIES:
  :CUSTOM_ID: b.1.4.1static-semantics-early-errors
  :END:

The semantics of
[[https://tc39.es/ecma262/#sec-patterns-static-semantics-early-errors][21.2.1.1]]
is extended as follows:

[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]::[[https://tc39.es/ecma262/#prod-annexB-InvalidBracedQuantifier][InvalidBracedQuantifier]]

- It is a Syntax Error if any source text matches this rule.

[[https://tc39.es/ecma262/#prod-annexB-NonemptyClassRanges][NonemptyClassRanges]]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]

- It is a Syntax Error if IsCharacterClass of the first
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is true or
  IsCharacterClass of the second
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is true and
  this production has a _{[U]} parameter.

[[https://tc39.es/ecma262/#prod-annexB-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]::[[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]

- It is a Syntax Error if IsCharacterClass of
  [[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]]
  is true or IsCharacterClass of
  [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] is true and
  this production has a _{[U]} parameter.

* B.1.4.2Static Semantics: IsCharacterClass
  :PROPERTIES:
  :CUSTOM_ID: b.1.4.2static-semantics-ischaracterclass
  :END:

The semantics of
[[https://tc39.es/ecma262/#sec-patterns-static-semantics-is-character-class][21.2.1.3]]
is extended as follows:

[[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]]::\[lookahead
= c]

1. Return false.

* B.1.4.3Static Semantics: CharacterValue
  :PROPERTIES:
  :CUSTOM_ID: b.1.4.3static-semantics-charactervalue
  :END:

The semantics of
[[https://tc39.es/ecma262/#sec-patterns-static-semantics-character-value][21.2.1.4]]
is extended as follows:

[[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]]::\[lookahead
= c]

1. Return the code point value of U+005C (REVERSE SOLIDUS).

[[https://tc39.es/ecma262/#prod-annexB-ClassEscape][ClassEscape]]::c[[https://tc39.es/ecma262/#prod-annexB-ClassControlLetter][ClassControlLetter]]

1. Let =ch= be the code point matched by
   [[https://tc39.es/ecma262/#prod-annexB-ClassControlLetter][ClassControlLetter]].
2. Let =i= be =ch='s code point value.
3. Return the remainder of dividing =i= by 32.

[[https://tc39.es/ecma262/#prod-annexB-CharacterEscape][CharacterEscape]]::[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]

1. Evaluate the SV of
   [[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]
   (see
   [[https://tc39.es/ecma262/#sec-additional-syntax-string-literals][B.1.2]])
   to obtain a code unit =cu=.
2. Return the numeric value of =cu=.

* B.1.4.4Pattern Semantics
  :PROPERTIES:
  :CUSTOM_ID: b.1.4.4pattern-semantics
  :END:

The semantics of
[[https://tc39.es/ecma262/#sec-pattern-semantics][21.2.2]] is extended
as follows:

Within [[https://tc39.es/ecma262/#sec-term][21.2.2.5]] reference to “
[[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
” are to be interpreted as meaning “
[[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]]::([[https://tc39.es/ecma262/#prod-GroupSpecifier][GroupSpecifier]][[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
” or “
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]::([[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
”.

Term ([[https://tc39.es/ecma262/#sec-term][21.2.2.5]]) includes the
following additional evaluation rules:

The production
[[https://tc39.es/ecma262/#prod-annexB-Term][Term]]::[[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
evaluates the same as the production
[[https://tc39.es/ecma262/#prod-annexB-Term][Term]]::[[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
but with
[[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]]
substituted for [[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]].

The production
[[https://tc39.es/ecma262/#prod-annexB-Term][Term]]::[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
evaluates the same as the production
[[https://tc39.es/ecma262/#prod-annexB-Term][Term]]::[[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]][[https://tc39.es/ecma262/#prod-Quantifier][Quantifier]]
but with
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]
substituted for [[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]].

The production
[[https://tc39.es/ecma262/#prod-annexB-Term][Term]]::[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]
evaluates the same as the production
[[https://tc39.es/ecma262/#prod-annexB-Term][Term]]::[[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]]
but with
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]
substituted for [[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]].

Assertion ([[https://tc39.es/ecma262/#sec-assertion][21.2.2.6]])
includes the following additional evaluation rule:

The production
[[https://tc39.es/ecma262/#prod-annexB-Assertion][Assertion]]::[[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]]
   to obtain a Matcher =m=.
2. Return =m=.

Assertion ([[https://tc39.es/ecma262/#sec-assertion][21.2.2.6]])
evaluation rules for the
[[https://tc39.es/ecma262/#prod-annexB-Assertion][Assertion]]::(?=[[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
and
[[https://tc39.es/ecma262/#prod-annexB-Assertion][Assertion]]::(?![[https://tc39.es/ecma262/#prod-Disjunction][Disjunction]])
productions are also used for the
[[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]]
productions, but with
[[https://tc39.es/ecma262/#prod-annexB-QuantifiableAssertion][QuantifiableAssertion]]
substituted for
[[https://tc39.es/ecma262/#prod-annexB-Assertion][Assertion]].

Atom ([[https://tc39.es/ecma262/#sec-atom][21.2.2.8]]) evaluation rules
for the [[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]] productions
except for
[[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]]::[[https://tc39.es/ecma262/#prod-PatternCharacter][PatternCharacter]]
are also used for the
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]
productions, but with
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]
substituted for [[https://tc39.es/ecma262/#prod-annexB-Atom][Atom]]. The
following evaluation rules are also added:

The production
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]::\[lookahead
= c] evaluates as follows:

1. Let =A= be the CharSet containing the single character =\= U+005C
   (REVERSE SOLIDUS).
2. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-charactersetmatcher-abstract-operation][CharacterSetMatcher]](=A=,
   false) and return its Matcher result.

The production
[[https://tc39.es/ecma262/#prod-annexB-ExtendedAtom][ExtendedAtom]]::[[https://tc39.es/ecma262/#prod-annexB-ExtendedPatternCharacter][ExtendedPatternCharacter]]
evaluates as follows:

1. Let =ch= be the character represented by
   [[https://tc39.es/ecma262/#prod-annexB-ExtendedPatternCharacter][ExtendedPatternCharacter]].
2. Let =A= be a one-element CharSet containing the character =ch=.
3. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-charactersetmatcher-abstract-operation][CharacterSetMatcher]](=A=,
   false) and return its Matcher result.

CharacterEscape
([[https://tc39.es/ecma262/#sec-characterescape][21.2.2.10]]) includes
the following additional evaluation rule:

The production
[[https://tc39.es/ecma262/#prod-annexB-CharacterEscape][CharacterEscape]]::[[https://tc39.es/ecma262/#prod-annexB-LegacyOctalEscapeSequence][LegacyOctalEscapeSequence]]
evaluates as follows:

1. Let =cv= be the CharacterValue of this
   [[https://tc39.es/ecma262/#prod-annexB-CharacterEscape][CharacterEscape]].
2. Return the character whose character value is =cv=.

NonemptyClassRanges
([[https://tc39.es/ecma262/#sec-nonemptyclassranges][21.2.2.15]])
modifies the following evaluation rule:

The production
[[https://tc39.es/ecma262/#prod-annexB-NonemptyClassRanges][NonemptyClassRanges]]::[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
evaluates as follows:

1. Evaluate the first
   [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] to obtain a
   CharSet =A=.
2. Evaluate the second
   [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] to obtain a
   CharSet =B=.
3. Evaluate [[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
   to obtain a CharSet =C=.
4. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-characterrangeorunion-abstract-operation][CharacterRangeOrUnion]](=A=,
   =B=) and let =D= be the resulting CharSet.
5. Return the union of CharSets =D= and =C=.

NonemptyClassRangesNoDash
([[https://tc39.es/ecma262/#sec-nonemptyclassrangesnodash][21.2.2.16]])
modifies the following evaluation rule:

The production
[[https://tc39.es/ecma262/#prod-annexB-NonemptyClassRangesNoDash][NonemptyClassRangesNoDash]]::[[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]]-[[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]][[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
evaluates as follows:

1. Evaluate
   [[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]]
   to obtain a CharSet =A=.
2. Evaluate [[https://tc39.es/ecma262/#prod-ClassAtom][ClassAtom]] to
   obtain a CharSet =B=.
3. Evaluate [[https://tc39.es/ecma262/#prod-ClassRanges][ClassRanges]]
   to obtain a CharSet =C=.
4. Call
   [[https://tc39.es/ecma262/#sec-runtime-semantics-characterrangeorunion-abstract-operation][CharacterRangeOrUnion]](=A=,
   =B=) and let =D= be the resulting CharSet.
5. Return the union of CharSets =D= and =C=.

ClassEscape ([[https://tc39.es/ecma262/#sec-classescape][21.2.2.19]])
includes the following additional evaluation rule:

The production
[[https://tc39.es/ecma262/#prod-annexB-ClassEscape][ClassEscape]]::c[[https://tc39.es/ecma262/#prod-annexB-ClassControlLetter][ClassControlLetter]]
evaluates as follows:

1. Let =cv= be the CharacterValue of this
   [[https://tc39.es/ecma262/#prod-annexB-ClassEscape][ClassEscape]].
2. Let =c= be the character whose character value is =cv=.
3. Return the CharSet containing the single character =c=.

ClassAtomNoDash
([[https://tc39.es/ecma262/#sec-classatomnodash][21.2.2.18]]) includes
the following additional evaluation rule:

The production
[[https://tc39.es/ecma262/#prod-annexB-ClassAtomNoDash][ClassAtomNoDash]]::\[lookahead
= c] evaluates as follows:

1. Return the CharSet containing the single character =\= U+005C
   (REVERSE SOLIDUS).

Note

This production can only be reached from the sequence =\c= within a
character class where it is not followed by an acceptable control
character.

* B.1.4.4.1Runtime Semantics: CharacterRangeOrUnion ( =A=, =B= )
  :PROPERTIES:
  :CUSTOM_ID: b.1.4.4.1runtime-semantics-characterrangeorunion-a-b
  :END:

The abstract operation CharacterRangeOrUnion takes two CharSet
parameters =A= and =B= and performs the following steps:

1. If =Unicode= is false, then

   1. If =A= does not contain exactly one character or =B= does not
      contain exactly one character, then

      1. Let =C= be the CharSet containing the single character =-=
         U+002D (HYPHEN-MINUS).
      2. Return the union of CharSets =A=, =B= and =C=.

2. Return
   [[https://tc39.es/ecma262/#sec-runtime-semantics-characterrange-abstract-operation][CharacterRange]](=A=,
   =B=).

* B.2Additional Built-in Properties
  :PROPERTIES:
  :CUSTOM_ID: b.2additional-built-in-properties
  :END:

When the ECMAScript host is a web browser the following additional
properties of the standard built-in objects are defined.

* B.2.1Additional Properties of the Global Object
  :PROPERTIES:
  :CUSTOM_ID: b.2.1additional-properties-of-the-global-object
  :END:

The entries in [[https://tc39.es/ecma262/#table-60][Table 86]] are added
to [[https://tc39.es/ecma262/#table-7][Table 8]].

Table 86: Additional Well-known Intrinsic Objects

| Intrinsic Name                                                 | Global Name   | ECMAScript Language Association                                                       |
|----------------------------------------------------------------+---------------+---------------------------------------------------------------------------------------|
| [[https://tc39.es/ecma262/#sec-escape-string][%escape%]]       | =escape=      | The =escape= function ([[https://tc39.es/ecma262/#sec-escape-string][B.2.1.1]])       |
| [[https://tc39.es/ecma262/#sec-unescape-string][%unescape%]]   | =unescape=    | The =unescape= function ([[https://tc39.es/ecma262/#sec-unescape-string][B.2.1.2]])   |

* B.2.1.1escape ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.1.1escape-string
  :END:

The =escape= function is a property of the
[[https://tc39.es/ecma262/#sec-global-object][global object]]. It
computes a new version of a String value in which certain code units
have been replaced by a hexadecimal escape sequence.

For those code units being replaced whose value is =0x00FF= or less, a
two-digit escape sequence of the form =%xx= is used. For those
characters being replaced whose code unit value is greater than
=0x00FF=, a four-digit escape sequence of the form =%uxxxx= is used.

The =escape= function is the %escape% intrinsic object. When the
=escape= function is called with one argument =string=, the following
steps are taken:

1. Set =string= to
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
2. Let =length= be the number of code units in =string=.
3. Let =R= be the empty string.
4. Let =k= be 0.
5. Repeat, while =k= < =length=,

   1. Let =char= be the code unit (represented as a 16-bit unsigned
      [[https://tc39.es/ecma262/#integer][integer]]) at index =k= within
      =string=.
   2. If =char= is one of the code units in
      "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789@*_+-./",
      then

      1. Let =S= be the String value containing the single code unit
         =char=.

   3. Else if =char= ≥ 256, then

      1. Let =n= be the numeric value of =char=.
      2. Let =S= be the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of:

         - "%u"
         - the String representation of =n=, formatted as a four-digit
           uppercase hexadecimal number, padded to the left with zeroes
           if necessary

   4. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =char= < 256.
      2. Let =n= be the numeric value of =char=.
      3. Let =S= be the
         [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
         of:

         - "%"
         - the String representation of =n=, formatted as a two-digit
           uppercase hexadecimal number, padded to the left with a zero
           if necessary

   5. Set =R= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of the previous value of =R= and =S=.
   6. Set =k= to =k= + 1.

6. Return =R=.

Note

The encoding is partly based on the encoding described in RFC 1738, but
the entire encoding specified in this standard is described above
without regard to the contents of RFC 1738. This encoding does not
reflect changes to RFC 1738 made by RFC 3986.

* B.2.1.2unescape ( =string= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.1.2unescape-string
  :END:

The =unescape= function is a property of the
[[https://tc39.es/ecma262/#sec-global-object][global object]]. It
computes a new version of a String value in which each escape sequence
of the sort that might be introduced by the =escape= function is
replaced with the code unit that it represents.

The =unescape= function is the %unescape% intrinsic object. When the
=unescape= function is called with one argument =string=, the following
steps are taken:

1. Set =string= to
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=string=).
2. Let =length= be the number of code units in =string=.
3. Let =R= be the empty String.
4. Let =k= be 0.
5. Repeat, while =k= ≠ =length=

   1. Let =c= be the code unit at index =k= within =string=.
   2. If =c= is the code unit 0x0025 (PERCENT SIGN), then

      1. If =k= ≤ =length= - 6 and the code unit at index =k= + 1 within
         =string= is the code unit 0x0075 (LATIN SMALL LETTER U) and the
         four code units at indices =k= + 2, =k= + 3, =k= + 4, and =k= +
         5 within =string= are all hexadecimal digits, then

         1. Set =c= to the code unit whose value is the
            [[https://tc39.es/ecma262/#integer][integer]] represented by
            the four hexadecimal digits at indices =k= + 2, =k= + 3, =k=
            + 4, and =k= + 5 within =string=.
         2. Set =k= to =k= + 5.

      2. Else if =k= ≤ =length= - 3 and the two code units at indices
         =k= + 1 and =k= + 2 within =string= are both hexadecimal
         digits, then

         1. Set =c= to the code unit whose value is the
            [[https://tc39.es/ecma262/#integer][integer]] represented by
            two zeroes plus the two hexadecimal digits at indices =k= +
            1 and =k= + 2 within =string=.
         2. Set =k= to =k= + 2.

   3. Set =R= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of the previous value of =R= and =c=.
   4. Set =k= to =k= + 1.

6. Return =R=.

* B.2.2Additional Properties of the Object.prototype Object
  :PROPERTIES:
  :CUSTOM_ID: b.2.2additional-properties-of-the-object.prototype-object
  :END:

* B.2.2.1Object.prototype.__proto__
  :PROPERTIES:
  :CUSTOM_ID: b.2.2.1object.prototype.__proto__
  :END:

=Object.prototype.__proto__= is an
[[https://tc39.es/ecma262/#sec-object-type][accessor property]] with
attributes { [[Enumerable]]: false, [[Configurable]]: true }. The
[[Get]] and [[Set]] attributes are defined as follows:

* B.2.2.1.1get Object.prototype.__proto__
  :PROPERTIES:
  :CUSTOM_ID: b.2.2.1.1get-object.prototype.__proto__
  :END:

The value of the [[Get]] attribute is a built-in function that requires
no arguments. It performs the following steps:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Return ? =O=.[[GetPrototypeOf]]().

* B.2.2.1.2set Object.prototype.__proto__
  :PROPERTIES:
  :CUSTOM_ID: b.2.2.1.2set-object.prototype.__proto__
  :END:

The value of the [[Set]] attribute is a built-in function that takes an
argument =proto=. It performs the following steps:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=proto=)
   is neither Object nor Null, return undefined.
3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object, return undefined.
4. Let =status= be ? =O=.[[SetPrototypeOf]](=proto=).
5. If =status= is false, throw a TypeError exception.
6. Return undefined.

* B.2.2.2Object.prototype.__defineGetter__ ( =P=, =getter= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.2.2object.prototype.__definegetter__-p-getter
  :END:

When the =__defineGetter__= method is called with arguments =P= and
=getter=, the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=getter=)
   is false, throw a TypeError exception.
3. Let =desc= be PropertyDescriptor { [[Get]]: =getter=, [[Enumerable]]:
   true, [[Configurable]]: true }.
4. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=P=).
5. Perform
   ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
   =key=, =desc=).
6. Return undefined.

* B.2.2.3Object.prototype.__defineSetter__ ( =P=, =setter= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.2.3object.prototype.__definesetter__-p-setter
  :END:

When the =__defineSetter__= method is called with arguments =P= and
=setter=, the following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. If [[https://tc39.es/ecma262/#sec-iscallable][IsCallable]](=setter=)
   is false, throw a TypeError exception.
3. Let =desc= be PropertyDescriptor { [[Set]]: =setter=, [[Enumerable]]:
   true, [[Configurable]]: true }.
4. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=P=).
5. Perform
   ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=O=,
   =key=, =desc=).
6. Return undefined.

* B.2.2.4Object.prototype.__lookupGetter__ ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.2.4object.prototype.__lookupgetter__-p
  :END:

When the =__lookupGetter__= method is called with argument =P=, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=P=).
3. Repeat,

   1. Let =desc= be ? =O=.[[GetOwnProperty]](=key=).
   2. If =desc= is not undefined, then

      1. If
         [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=desc=)
         is true, return =desc=.[[Get]].
      2. Return undefined.

   3. Set =O= to ? =O=.[[GetPrototypeOf]]().
   4. If =O= is null, return undefined.

* B.2.2.5Object.prototype.__lookupSetter__ ( =P= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.2.5object.prototype.__lookupsetter__-p
  :END:

When the =__lookupSetter__= method is called with argument =P=, the
following steps are taken:

1. Let =O= be ? [[https://tc39.es/ecma262/#sec-toobject][ToObject]](this
   value).
2. Let =key= be
   ? [[https://tc39.es/ecma262/#sec-topropertykey][ToPropertyKey]](=P=).
3. Repeat,

   1. Let =desc= be ? =O=.[[GetOwnProperty]](=key=).
   2. If =desc= is not undefined, then

      1. If
         [[https://tc39.es/ecma262/#sec-isaccessordescriptor][IsAccessorDescriptor]](=desc=)
         is true, return =desc=.[[Set]].
      2. Return undefined.

   3. Set =O= to ? =O=.[[GetPrototypeOf]]().
   4. If =O= is null, return undefined.

* B.2.3Additional Properties of the String.prototype Object
  :PROPERTIES:
  :CUSTOM_ID: b.2.3additional-properties-of-the-string.prototype-object
  :END:

* B.2.3.1String.prototype.substr ( =start=, =length= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.1string.prototype.substr-start-length
  :END:

The =substr= method takes two arguments, =start= and =length=, and
returns a substring of the result of converting the this object to a
String, starting from index =start= and running for =length= code units
(or through the end of the String if =length= is undefined). If =start=
is negative, it is treated as =sourceLength= + =start= where
=sourceLength= is the length of the String. The result is a String
value, not a String object. The following steps are taken:

1. Let =O= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](this
   value).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=O=).
3. Let =intStart= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=start=).
4. If =length= is undefined, let =end= be +∞; otherwise let =end= be
   ? [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=length=).
5. Let =size= be the number of code units in =S=.
6. If =intStart= < 0, set =intStart= to
   [[https://tc39.es/ecma262/#eqn-max][max]](=size= + =intStart=, 0).
7. Let =resultLength= be
   [[https://tc39.es/ecma262/#eqn-min][min]]([[https://tc39.es/ecma262/#eqn-max][max]](=end=,
   0), =size= - =intStart=).
8. If =resultLength= ≤ 0, return the empty String "".
9. Return the String value containing =resultLength= consecutive code
   units from =S= beginning with the code unit at index =intStart=.

Note

The =substr= function is intentionally generic; it does not require that
its this value be a String object. Therefore it can be transferred to
other kinds of objects for use as a method.

* B.2.3.2String.prototype.anchor ( =name= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.2string.prototype.anchor-name
  :END:

When the =anchor= method is called with argument =name=, the following
steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "a", "name", =name=).

* B.2.3.2.1Runtime Semantics: CreateHTML ( =string=, =tag=, =attribute=,
=value= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.2.1runtime-semantics-createhtml-string-tag-attribute-value
  :END:

The abstract operation CreateHTML is called with arguments =string=,
=tag=, =attribute=, and =value=. The arguments =tag= and =attribute=
must be String values. The following steps are taken:

1. Let =str= be
   ? [[https://tc39.es/ecma262/#sec-requireobjectcoercible][RequireObjectCoercible]](=string=).
2. Let =S= be
   ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=str=).
3. Let =p1= be the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of "<" and =tag=.
4. If =attribute= is not the empty String, then

   1. Let =V= be
      ? [[https://tc39.es/ecma262/#sec-tostring][ToString]](=value=).
   2. Let =escapedV= be the String value that is the same as =V= except
      that each occurrence of the code unit 0x0022 (QUOTATION MARK) in
      =V= has been replaced with the six code unit sequence "&quot;".
   3. Set =p1= to the
      [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
      of:

      - =p1=
      - the code unit 0x0020 (SPACE)
      - =attribute=
      - the code unit 0x003D (EQUALS SIGN)
      - the code unit 0x0022 (QUOTATION MARK)
      - =escapedV=
      - the code unit 0x0022 (QUOTATION MARK)

5. Let =p2= be the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =p1= and ">".
6. Let =p3= be the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =p2= and =S=.
7. Let =p4= be the
   [[https://tc39.es/ecma262/#sec-ecmascript-language-types-string-type][string-concatenation]]
   of =p3=, "</", =tag=, and ">".
8. Return =p4=.

* B.2.3.3String.prototype.big ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.3string.prototype.big
  :END:

When the =big= method is called with no arguments, the following steps
are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "big", "", "").

* B.2.3.4String.prototype.blink ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.4string.prototype.blink
  :END:

When the =blink= method is called with no arguments, the following steps
are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "blink", "", "").

* B.2.3.5String.prototype.bold ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.5string.prototype.bold
  :END:

When the =bold= method is called with no arguments, the following steps
are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "b", "", "").

* B.2.3.6String.prototype.fixed ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.6string.prototype.fixed
  :END:

When the =fixed= method is called with no arguments, the following steps
are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "tt", "", "").

* B.2.3.7String.prototype.fontcolor ( =color= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.7string.prototype.fontcolor-color
  :END:

When the =fontcolor= method is called with argument =color=, the
following steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "font", "color", =color=).

* B.2.3.8String.prototype.fontsize ( =size= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.8string.prototype.fontsize-size
  :END:

When the =fontsize= method is called with argument =size=, the following
steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "font", "size", =size=).

* B.2.3.9String.prototype.italics ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.9string.prototype.italics
  :END:

When the =italics= method is called with no arguments, the following
steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "i", "", "").

* B.2.3.10String.prototype.link ( =url= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.10string.prototype.link-url
  :END:

When the =link= method is called with argument =url=, the following
steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "a", "href", =url=).

* B.2.3.11String.prototype.small ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.11string.prototype.small
  :END:

When the =small= method is called with no arguments, the following steps
are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "small", "", "").

* B.2.3.12String.prototype.strike ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.12string.prototype.strike
  :END:

When the =strike= method is called with no arguments, the following
steps are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "strike", "", "").

* B.2.3.13String.prototype.sub ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.13string.prototype.sub
  :END:

When the =sub= method is called with no arguments, the following steps
are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "sub", "", "").

* B.2.3.14String.prototype.sup ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.14string.prototype.sup
  :END:

When the =sup= method is called with no arguments, the following steps
are taken:

1. Let =S= be the this value.
2. Return ? [[https://tc39.es/ecma262/#sec-createhtml][CreateHTML]](=S=,
   "sup", "", "").

* B.2.3.15String.prototype.trimLeft ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.15string.prototype.trimleft
  :END:

Note

The property "trimStart" is preferred. The "trimLeft" property is
provided principally for compatibility with old code. It is recommended
that the "trimStart" property be used in new ECMAScript code.

The initial value of the "trimLeft" property is the same
[[https://tc39.es/ecma262/#function-object][function object]] as the
initial value of the =String.prototype.trimStart= property.

* B.2.3.16String.prototype.trimRight ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.3.16string.prototype.trimright
  :END:

Note

The property "trimEnd" is preferred. The "trimRight" property is
provided principally for compatibility with old code. It is recommended
that the "trimEnd" property be used in new ECMAScript code.

The initial value of the "trimRight" property is the same
[[https://tc39.es/ecma262/#function-object][function object]] as the
initial value of the =String.prototype.trimEnd= property.

* B.2.4Additional Properties of the Date.prototype Object
  :PROPERTIES:
  :CUSTOM_ID: b.2.4additional-properties-of-the-date.prototype-object
  :END:

* B.2.4.1Date.prototype.getYear ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.4.1date.prototype.getyear
  :END:

Note

The =getFullYear= method is preferred for nearly all purposes, because
it avoids the “year 2000 problem.”

When the =getYear= method is called with no arguments, the following
steps are taken:

1. Let =t= be
   ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
   value).
2. If =t= is NaN, return NaN.
3. Return
   [[https://tc39.es/ecma262/#eqn-YearFromTime][YearFromTime]]([[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=)) -
   1900.

* B.2.4.2Date.prototype.setYear ( =year= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.4.2date.prototype.setyear-year
  :END:

Note

The =setFullYear= method is preferred for nearly all purposes, because
it avoids the “year 2000 problem.”

When the =setYear= method is called with one argument =year=, the
following steps are taken:

1.  Let =t= be
    ? [[https://tc39.github.io/ecma262/#sec-properties-of-the-date-prototype-object][thisTimeValue]](this
    value).
2.  If =t= is NaN, set =t= to +0; otherwise, set =t= to
    [[https://tc39.es/ecma262/#sec-localtime][LocalTime]](=t=).
3.  Let =y= be
    ? [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]](=year=).
4.  If =y= is NaN, then

    1. Set the [[DateValue]] internal slot of
       [[https://tc39.es/ecma262/#this-Date-object][this Date object]]
       to NaN.
    2. Return NaN.

5.  Let =yi= be
    ! [[https://tc39.es/ecma262/#sec-tointeger][ToInteger]](=y=).
6.  If 0 ≤ =yi= ≤ 99, let =yyyy= be =yi= + 1900.
7.  Else, let =yyyy= be =y=.
8.  Let =d= be [[https://tc39.es/ecma262/#sec-makeday][MakeDay]](=yyyy=,
    [[https://tc39.es/ecma262/#eqn-MonthFromTime][MonthFromTime]](=t=),
    [[https://tc39.es/ecma262/#sec-date-number][DateFromTime]](=t=)).
9.  Let =date= be
    [[https://tc39.es/ecma262/#sec-utc-t][UTC]]([[https://tc39.es/ecma262/#sec-makedate][MakeDate]](=d=,
    [[https://tc39.es/ecma262/#eqn-TimeWithinDay][TimeWithinDay]](=t=))).
10. Set the [[DateValue]] internal slot of
    [[https://tc39.es/ecma262/#this-Date-object][this Date object]] to
    [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]](=date=).
11. Return the value of the [[DateValue]] internal slot of
    [[https://tc39.es/ecma262/#this-Date-object][this Date object]].

* B.2.4.3Date.prototype.toGMTString ( )
  :PROPERTIES:
  :CUSTOM_ID: b.2.4.3date.prototype.togmtstring
  :END:

Note

The property "toUTCString" is preferred. The "toGMTString" property is
provided principally for compatibility with old code. It is recommended
that the "toUTCString" property be used in new ECMAScript code.

The [[https://tc39.es/ecma262/#function-object][function object]] that
is the initial value of =Date.prototype.toGMTString= is the same
[[https://tc39.es/ecma262/#function-object][function object]] that is
the initial value of =Date.prototype.toUTCString=.

* B.2.5Additional Properties of the RegExp.prototype Object
  :PROPERTIES:
  :CUSTOM_ID: b.2.5additional-properties-of-the-regexp.prototype-object
  :END:

* B.2.5.1RegExp.prototype.compile ( =pattern=, =flags= )
  :PROPERTIES:
  :CUSTOM_ID: b.2.5.1regexp.prototype.compile-pattern-flags
  :END:

When the =compile= method is called with arguments =pattern= and
=flags=, the following steps are taken:

1. Let =O= be the this value.
2. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is not Object or
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=O=)
   is Object and =O= does not have a [[RegExpMatcher]] internal slot,
   then

   1. Throw a TypeError exception.

3. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=pattern=)
   is Object and =pattern= has a [[RegExpMatcher]] internal slot, then

   1. If =flags= is not undefined, throw a TypeError exception.
   2. Let =P= be =pattern=.[[OriginalSource]].
   3. Let =F= be =pattern=.[[OriginalFlags]].

4. Else,

   1. Let =P= be =pattern=.
   2. Let =F= be =flags=.

5. Return
   ? [[https://tc39.es/ecma262/#sec-regexpinitialize][RegExpInitialize]](=O=,
   =P=, =F=).

Note

The =compile= method completely reinitializes the this object RegExp
with a new pattern and flags. An implementation may interpret use of
this method as an assertion that the resulting RegExp object will be
used multiple times and hence is a candidate for extra optimization.

* B.3Other Additional Features
  :PROPERTIES:
  :CUSTOM_ID: b.3other-additional-features
  :END:

* B.3.1__proto__ Property Names in Object Initializers
  :PROPERTIES:
  :CUSTOM_ID: b.3.1__proto__-property-names-in-object-initializers
  :END:

The following Early Error rule is added to those in
[[https://tc39.es/ecma262/#sec-object-initializer-static-semantics-early-errors][12.2.6.1]].
When
[[https://tc39.es/ecma262/#prod-annexB-ObjectLiteral][ObjectLiteral]]
appears in a context where
[[https://tc39.es/ecma262/#prod-ObjectAssignmentPattern][ObjectAssignmentPattern]]
is required the Early Error rule is *not* applied. In addition, it is
not applied when initially parsing a
[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
or a
[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].

[[https://tc39.es/ecma262/#prod-annexB-ObjectLiteral][ObjectLiteral]]:{[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]}
[[https://tc39.es/ecma262/#prod-annexB-ObjectLiteral][ObjectLiteral]]:{[[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]],}

- It is a Syntax Error if PropertyNameList of
  [[https://tc39.es/ecma262/#prod-PropertyDefinitionList][PropertyDefinitionList]]
  contains any duplicate entries for "__proto__" and at least two of
  those entries were obtained from productions of the form
  [[https://tc39.es/ecma262/#prod-annexB-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
  .

Note

The
[[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
returned by PropertyNameList does not include string literal property
names defined as using a
[[https://tc39.es/ecma262/#prod-ComputedPropertyName][ComputedPropertyName]].

In
[[https://tc39.es/ecma262/#sec-object-initializer-runtime-semantics-propertydefinitionevaluation][12.2.6.8]]
the PropertyDefinitionEvaluation algorithm for the production\\
[[https://tc39.es/ecma262/#prod-annexB-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]\\
is replaced with the following definition:

[[https://tc39.es/ecma262/#prod-annexB-PropertyDefinition][PropertyDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

1.  Let =propKey= be the result of evaluating
    [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
2.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
3.  If =propKey= is the String value "__proto__" and if
    IsComputedPropertyKey([[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]])
    is false, then

    1. Let =isProtoSetter= be true.

4.  Else,

    1. Let =isProtoSetter= be false.

5.  If
    [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])
    is true and =isProtoSetter= is false, then

    1. Let =propValue= be NamedEvaluation of
       [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
       with argument =propKey=.

6.  Else,

    1. Let =exprValueRef= be the result of evaluating
       [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
    2. Let =propValue= be
       ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprValueRef=).

7.  If =isProtoSetter= is true, then

    1. If
       [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=propValue=)
       is either Object or Null, then

       1. Return =object=.[[SetPrototypeOf]](=propValue=).

    2. Return
       [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

8.  [[https://tc39.es/ecma262/#assert][Assert]]: =enumerable= is true.
9.  [[https://tc39.es/ecma262/#assert][Assert]]: =object= is an
    ordinary, extensible object with no non-configurable properties.
10. Return
    ! [[https://tc39.es/ecma262/#sec-createdatapropertyorthrow][CreateDataPropertyOrThrow]](=object=,
    =propKey=, =propValue=).

* B.3.2Labelled Function Declarations
  :PROPERTIES:
  :CUSTOM_ID: b.3.2labelled-function-declarations
  :END:

Prior to ECMAScript 2015, the specification of
[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
did not allow for the association of a statement label with a
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].
However, a labelled
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
was an allowable extension for
[[https://tc39.es/ecma262/#non-strict-code][non-strict code]] and most
browser-hosted ECMAScript implementations supported that extension. In
ECMAScript 2015, the grammar productions for
[[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]
permits use of
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
as a [[https://tc39.es/ecma262/#prod-annexB-LabelledItem][LabelledItem]]
but
[[https://tc39.es/ecma262/#sec-labelled-statements-static-semantics-early-errors][13.13.1]]
includes an Early Error rule that produces a Syntax Error if that
occurs. For web browser compatibility, that rule is modified with the
addition of the highlighted text:

[[https://tc39.es/ecma262/#prod-annexB-LabelledItem][LabelledItem]]:[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]

- It is a Syntax Error if any strict mode source code matches this rule.

Note

The [[https://tc39.es/ecma262/#early-error][early error]] rules for
[[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]],
[[https://tc39.es/ecma262/#prod-annexB-IfStatement][IfStatement]], and
[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]
prevent these statements from containing a labelled
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
in [[https://tc39.es/ecma262/#non-strict-code][non-strict code]].

* B.3.3Block-Level Function Declarations Web Legacy Compatibility
Semantics
  :PROPERTIES:
  :CUSTOM_ID: b.3.3block-level-function-declarations-web-legacy-compatibility-semantics
  :END:

Prior to ECMAScript 2015, the ECMAScript specification did not define
the occurrence of a
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
as an element of a [[https://tc39.es/ecma262/#prod-annexB-Block][Block]]
statement's
[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]. However,
support for that form of
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
was an allowable extension and most browser-hosted ECMAScript
implementations permitted them. Unfortunately, the semantics of such
declarations differ among those implementations. Because of these
semantic differences, existing web ECMAScript code that uses
[[https://tc39.es/ecma262/#prod-annexB-Block][Block]] level function
declarations is only portable among browser implementation if the usage
only depends upon the semantic intersection of all of the browser
implementations for such declarations. The following are the use cases
that fall within that intersection semantics:

1. A function is declared and only referenced within a single block

   - One or more
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]s
     whose
     [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
     is the name =f= occur within the function code of an enclosing
     function =g= and that declaration is nested within a
     [[https://tc39.es/ecma262/#prod-annexB-Block][Block]].
   - No other declaration of =f= that is not a =var= declaration occurs
     within the function code of =g=
   - All occurrences of =f= as an
     [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
     are within the
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] of
     the [[https://tc39.es/ecma262/#prod-annexB-Block][Block]]
     containing the declaration of =f=.

2. A function is declared and possibly used within a single
   [[https://tc39.es/ecma262/#prod-annexB-Block][Block]] but also
   referenced by an inner function definition that is not contained
   within that same
   [[https://tc39.es/ecma262/#prod-annexB-Block][Block]].

   - One or more
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]s
     whose
     [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
     is the name =f= occur within the function code of an enclosing
     function =g= and that declaration is nested within a
     [[https://tc39.es/ecma262/#prod-annexB-Block][Block]].
   - No other declaration of =f= that is not a =var= declaration occurs
     within the function code of =g=
   - There may be occurrences of =f= as an
     [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
     within the
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] of
     the [[https://tc39.es/ecma262/#prod-annexB-Block][Block]]
     containing the declaration of =f=.
   - There is at least one occurrence of =f= as an
     [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
     within another function =h= that is nested within =g= and no other
     declaration of =f= shadows the references to =f= from within =h=.
   - All invocations of =h= occur after the declaration of =f= has been
     evaluated.

3. A function is declared and possibly used within a single block but
   also referenced within subsequent blocks.

   - One or more
     [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
     whose
     [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
     is the name =f= occur within the function code of an enclosing
     function =g= and that declaration is nested within a
     [[https://tc39.es/ecma262/#prod-annexB-Block][Block]].
   - No other declaration of =f= that is not a =var= declaration occurs
     within the function code of =g=
   - There may be occurrences of =f= as an
     [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
     within the
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] of
     the [[https://tc39.es/ecma262/#prod-annexB-Block][Block]]
     containing the declaration of =f=.
   - There is at least one occurrence of =f= as an
     [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
     within the function code of =g= that lexically follows the
     [[https://tc39.es/ecma262/#prod-annexB-Block][Block]] containing
     the declaration of =f=.

The first use case is interoperable with the semantics of
[[https://tc39.es/ecma262/#prod-annexB-Block][Block]] level function
declarations provided by ECMAScript 2015. Any pre-existing ECMAScript
code that employs that use case will operate using the Block level
function declarations semantics defined by clauses 9, 13, and 14 of this
specification.

ECMAScript 2015 interoperability for the second and third use cases
requires the following extensions to the clause
[[https://tc39.es/ecma262/#sec-ordinary-and-exotic-objects-behaviours][9]],
clause
[[https://tc39.es/ecma262/#sec-ecmascript-language-functions-and-classes][14]],
clause [[https://tc39.es/ecma262/#sec-eval-x][18.2.1]] and clause
[[https://tc39.es/ecma262/#sec-globaldeclarationinstantiation][15.1.11]]
semantics.

If an ECMAScript implementation has a mechanism for reporting diagnostic
warning messages, a warning should be produced when code contains a
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
for which these compatibility semantics are applied and introduce
observable differences from non-compatibility semantics. For example, if
a var binding is not introduced because its introduction would create an
[[https://tc39.es/ecma262/#early-error][early error]], a warning message
should not be produced.

* B.3.3.1Changes to FunctionDeclarationInstantiation
  :PROPERTIES:
  :CUSTOM_ID: b.3.3.1changes-to-functiondeclarationinstantiation
  :END:

During
[[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]]
the following steps are performed in place of step 29:

1. If =strict= is false, then

   1. For each
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
      =f= that is directly contained in the
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] of
      a [[https://tc39.es/ecma262/#prod-annexB-Block][Block]],
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]], or
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]], do

      1. Let =F= be StringValue of the
         [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
         of =f=.
      2. If replacing the
         [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
         =f= with a
         [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
         that has =F= as a
         [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
         would not produce any Early Errors for =func= and =F= is not an
         element of =parameterNames=, then

         1. NOTE: A var binding for =F= is only instantiated here if it
            is neither a VarDeclaredName, the name of a formal
            parameter, or another
            [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].
         2. If =initializedBindings= does not contain =F= and =F= is not
            "arguments", then

            1. Perform ! =varEnvRec=.CreateMutableBinding(=F=, false).
            2. Perform =varEnvRec=.InitializeBinding(=F=, undefined).
            3. Append =F= to =instantiatedVarNames=.

         3. When the
            [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
            =f= is evaluated, perform the following steps in place of
            the
            [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
            Evaluation algorithm provided in
            [[https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation][14.1.22]]:

            1. Let =fenv= be the
               [[https://tc39.es/ecma262/#running-execution-context][running
               execution context]]'s VariableEnvironment.
            2. Let =fenvRec= be =fenv='s
               [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
            3. Let =benv= be the
               [[https://tc39.es/ecma262/#running-execution-context][running
               execution context]]'s LexicalEnvironment.
            4. Let =benvRec= be =benv='s
               [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
            5. Let =fobj= be ! =benvRec=.GetBindingValue(=F=, false).
            6. Perform ! =fenvRec=.SetMutableBinding(=F=, =fobj=,
               false).
            7. Return
               [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* B.3.3.2Changes to GlobalDeclarationInstantiation
  :PROPERTIES:
  :CUSTOM_ID: b.3.3.2changes-to-globaldeclarationinstantiation
  :END:

During
[[https://tc39.es/ecma262/#sec-globaldeclarationinstantiation][GlobalDeclarationInstantiation]]
the following steps are performed in place of step 14:

1. Let =strict= be IsStrict of =script=.
2. If =strict= is false, then

   1. Let =declaredFunctionOrVarNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Append to =declaredFunctionOrVarNames= the elements of
      =declaredFunctionNames=.
   3. Append to =declaredFunctionOrVarNames= the elements of
      =declaredVarNames=.
   4. For each
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
      =f= that is directly contained in the
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] of
      a [[https://tc39.es/ecma262/#prod-annexB-Block][Block]],
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]], or
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]
      Contained within =script=, do

      1. Let =F= be StringValue of the
         [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
         of =f=.
      2. If replacing the
         [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
         =f= with a
         [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
         that has =F= as a
         [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
         would not produce any Early Errors for =script=, then

         1. If =envRec=.HasLexicalDeclaration(=F=) is false, then

            1. Let =fnDefinable= be ? =envRec=.CanDeclareGlobalVar(=F=).
            2. If =fnDefinable= is true, then

               1. NOTE: A var binding for =F= is only instantiated here
                  if it is neither a VarDeclaredName nor the name of
                  another
                  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].
               2. If =declaredFunctionOrVarNames= does not contain =F=,
                  then

                  1. Perform ? =envRec=.CreateGlobalVarBinding(=F=,
                     false).
                  2. Append =F= to =declaredFunctionOrVarNames=.

               3. When the
                  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
                  =f= is evaluated, perform the following steps in place
                  of the
                  [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
                  Evaluation algorithm provided in
                  [[https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation][14.1.22]]:

                  1. Let =genv= be the
                     [[https://tc39.es/ecma262/#running-execution-context][running
                     execution context]]'s VariableEnvironment.
                  2. Let =genvRec= be =genv='s
                     [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
                  3. Let =benv= be the
                     [[https://tc39.es/ecma262/#running-execution-context][running
                     execution context]]'s LexicalEnvironment.
                  4. Let =benvRec= be =benv='s
                     [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
                  5. Let =fobj= be ! =benvRec=.GetBindingValue(=F=,
                     false).
                  6. Perform ? =genvRec=.SetMutableBinding(=F=, =fobj=,
                     false).
                  7. Return
                     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* B.3.3.3Changes to EvalDeclarationInstantiation
  :PROPERTIES:
  :CUSTOM_ID: b.3.3.3changes-to-evaldeclarationinstantiation
  :END:

During
[[https://tc39.es/ecma262/#sec-evaldeclarationinstantiation][EvalDeclarationInstantiation]]
the following steps are performed in place of step 9:

1. If =strict= is false, then

   1. Let =declaredFunctionOrVarNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Append to =declaredFunctionOrVarNames= the elements of
      =declaredFunctionNames=.
   3. Append to =declaredFunctionOrVarNames= the elements of
      =declaredVarNames=.
   4. For each
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
      =f= that is directly contained in the
      [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] of
      a [[https://tc39.es/ecma262/#prod-annexB-Block][Block]],
      [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]], or
      [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]
      Contained within =body=, do

      1. Let =F= be StringValue of the
         [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
         of =f=.
      2. If replacing the
         [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
         =f= with a
         [[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
         that has =F= as a
         [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
         would not produce any Early Errors for =body=, then

         1. Let =bindingExists= be false.
         2. Let =thisLex= be =lexEnv=.
         3. [[https://tc39.es/ecma262/#assert][Assert]]: The following
            loop will terminate.
         4. Repeat, while =thisLex= is not the same as =varEnv=,

            1. Let =thisEnvRec= be =thisLex='s
               [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
            2. If =thisEnvRec= is not an object
               [[https://tc39.es/ecma262/#sec-environment-records][Environment
               Record]], then

               1. If =thisEnvRec=.HasBinding(=F=) is true, then

                  1. Let =bindingExists= be true.

            3. Set =thisLex= to =thisLex='s outer environment reference.

         5. If =bindingExists= is false and =varEnvRec= is a global
            [[https://tc39.es/ecma262/#sec-environment-records][Environment
            Record]], then

            1. If =varEnvRec=.HasLexicalDeclaration(=F=) is false, then

               1. Let =fnDefinable= be ?
                  =varEnvRec=.CanDeclareGlobalVar(=F=).

            2. Else,

               1. Let =fnDefinable= be false.

         6. Else,

            1. Let =fnDefinable= be true.

         7. If =bindingExists= is false and =fnDefinable= is true, then

            1. If =declaredFunctionOrVarNames= does not contain =F=,
               then

               1. If =varEnvRec= is a global
                  [[https://tc39.es/ecma262/#sec-environment-records][Environment
                  Record]], then

                  1. Perform ? =varEnvRec=.CreateGlobalVarBinding(=F=,
                     true).

               2. Else,

                  1. Let =bindingExists= be =varEnvRec=.HasBinding(=F=).
                  2. If =bindingExists= is false, then

                     1. Perform ! =varEnvRec=.CreateMutableBinding(=F=,
                        true).
                     2. Perform ! =varEnvRec=.InitializeBinding(=F=,
                        undefined).

               3. Append =F= to =declaredFunctionOrVarNames=.

            2. When the
               [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
               =f= is evaluated, perform the following steps in place of
               the
               [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]]
               Evaluation algorithm provided in
               [[https://tc39.es/ecma262/#sec-function-definitions-runtime-semantics-evaluation][14.1.22]]:

               1. Let =genv= be the
                  [[https://tc39.es/ecma262/#running-execution-context][running
                  execution context]]'s VariableEnvironment.
               2. Let =genvRec= be =genv='s
                  [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
               3. Let =benv= be the
                  [[https://tc39.es/ecma262/#running-execution-context][running
                  execution context]]'s LexicalEnvironment.
               4. Let =benvRec= be =benv='s
                  [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
               5. Let =fobj= be ! =benvRec=.GetBindingValue(=F=, false).
               6. Perform ? =genvRec=.SetMutableBinding(=F=, =fobj=,
                  false).
               7. Return
                  [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

* B.3.3.4Changes to Block Static Semantics: Early Errors
  :PROPERTIES:
  :CUSTOM_ID: b.3.3.4changes-to-block-static-semantics-early-errors
  :END:

For web browser compatibility, that rule is modified with the addition
of the highlighted text:

[[https://tc39.es/ecma262/#prod-annexB-Block][Block]]:{[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]}

- It is a Syntax Error if the LexicallyDeclaredNames of
  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]
  contains any duplicate entries, unless the source code matching this
  production is not
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
  and the duplicate entries are only bound by FunctionDeclarations.

* B.3.3.5Changes to =switch= Statement Static Semantics: Early Errors
  :PROPERTIES:
  :CUSTOM_ID: b.3.3.5changes-to-switch-statement-static-semantics-early-errors
  :END:

For web browser compatibility, that rule is modified with the addition
of the highlighted text:

[[https://tc39.es/ecma262/#prod-annexB-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

- It is a Syntax Error if the LexicallyDeclaredNames of
  [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] contains any
  duplicate entries, unless the source code matching this production is
  not [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
  code]] and the duplicate entries are only bound by
  FunctionDeclarations.

* B.3.3.6Changes to BlockDeclarationInstantiation
  :PROPERTIES:
  :CUSTOM_ID: b.3.3.6changes-to-blockdeclarationinstantiation
  :END:

During
[[https://tc39.es/ecma262/#sec-blockdeclarationinstantiation][BlockDeclarationInstantiation]]
the following steps are performed in place of step 4.a.ii.1:

1. If =envRec=.HasBinding(=dn=) is false, then

   1. Perform ! =envRec=.CreateMutableBinding(=dn=, false).

During
[[https://tc39.es/ecma262/#sec-blockdeclarationinstantiation][BlockDeclarationInstantiation]]
the following steps are performed in place of step 4.b.iii:

1. If =envRec=.HasBinding(=fn=) is false, then

   1. Perform =envRec=.InitializeBinding(=fn=, =fo=).

2. Else,

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =d= is a
      [[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]].
   2. Perform =envRec=.SetMutableBinding(=fn=, =fo=, false).

* B.3.4FunctionDeclarations in IfStatement Statement Clauses
  :PROPERTIES:
  :CUSTOM_ID: b.3.4functiondeclarations-in-ifstatement-statement-clauses
  :END:

The following augments the
[[https://tc39.es/ecma262/#prod-annexB-IfStatement][IfStatement]]
production in [[https://tc39.es/ecma262/#sec-if-statement][13.6]]:

[[https://tc39.es/ecma262/#prod-annexB-IfStatement][IfStatement]][Yield,
Await,
Return]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await,
~Default]else[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]
if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await,
?Return]else[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await, ~Default]
if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
?Await])[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await,
~Default]else[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await, ~Default]
if([[https://tc39.es/ecma262/#prod-Expression][Expression]][+In, ?Yield,
?Await])[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await, ~Default]

This production only applies when parsing
[[https://tc39.es/ecma262/#non-strict-code][non-strict code]]. Code
matching this production is processed as if each matching occurrence of
[[https://tc39.es/ecma262/#prod-FunctionDeclaration][FunctionDeclaration]][?Yield,
?Await, ~Default] was the sole
[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]
of a [[https://tc39.es/ecma262/#prod-BlockStatement][BlockStatement]]
occupying that position in the source code. The semantics of such a
synthetic
[[https://tc39.es/ecma262/#prod-BlockStatement][BlockStatement]]
includes the web legacy compatibility semantics specified in
[[https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics][B.3.3]].

* B.3.5VariableStatements in Catch Blocks
  :PROPERTIES:
  :CUSTOM_ID: b.3.5variablestatements-in-catch-blocks
  :END:

The content of subclause
[[https://tc39.es/ecma262/#sec-try-statement-static-semantics-early-errors][13.15.1]]
is replaced with the following:

[[https://tc39.es/ecma262/#prod-annexB-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-annexB-Block][Block]]

- It is a Syntax Error if BoundNames of
  [[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]]
  contains any duplicate elements.
- It is a Syntax Error if any element of the BoundNames of
  [[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]]
  also occurs in the LexicallyDeclaredNames of
  [[https://tc39.es/ecma262/#prod-annexB-Block][Block]].
- It is a Syntax Error if any element of the BoundNames of
  [[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]]
  also occurs in the VarDeclaredNames of
  [[https://tc39.es/ecma262/#prod-annexB-Block][Block]] unless
  [[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]]
  is
  [[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]]:[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]
  .

Note

The [[https://tc39.es/ecma262/#prod-annexB-Block][Block]] of a
[[https://tc39.es/ecma262/#prod-annexB-Catch][Catch]] clause may contain
=var= declarations that bind a name that is also bound by the
[[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]].
At runtime, such bindings are instantiated in the
VariableDeclarationEnvironment. They do not shadow the same-named
bindings introduced by the
[[https://tc39.es/ecma262/#prod-annexB-CatchParameter][CatchParameter]]
and hence the [[https://tc39.es/ecma262/#prod-Initializer][Initializer]]
for such =var= declarations will assign to the corresponding catch
parameter rather than the =var= binding.

This modified behaviour also applies to =var= and =function=
declarations introduced by
[[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
eval]] calls contained within the
[[https://tc39.es/ecma262/#prod-annexB-Block][Block]] of a
[[https://tc39.es/ecma262/#prod-annexB-Catch][Catch]] clause. This
change is accomplished by modifying the algorithm of
[[https://tc39.es/ecma262/#sec-evaldeclarationinstantiation][18.2.1.3]]
as follows:

Step 5.d.ii.2.a.i is replaced by:

1. If =thisEnvRec= is not the
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for a [[https://tc39.es/ecma262/#prod-annexB-Catch][Catch]]
   clause, throw a SyntaxError exception.

Step 9.d.ii.4.b.i.i is replaced by:

1. If =thisEnvRec= is not the
   [[https://tc39.es/ecma262/#sec-environment-records][Environment
   Record]] for a [[https://tc39.es/ecma262/#prod-annexB-Catch][Catch]]
   clause, let =bindingExists= be true.

* B.3.6Initializers in ForIn Statement Heads
  :PROPERTIES:
  :CUSTOM_ID: b.3.6initializers-in-forin-statement-heads
  :END:

The following augments the
[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]
production in
[[https://tc39.es/ecma262/#sec-iteration-statements][13.7]]:

[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]][Yield,
Await,
Return]:for(var[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]][?Yield,
?Await][[https://tc39.es/ecma262/#prod-Initializer][Initializer]][~In,
?Yield,
?Await]in[[https://tc39.es/ecma262/#prod-Expression][Expression]][+In,
?Yield,
?Await])[[https://tc39.es/ecma262/#prod-Statement][Statement]][?Yield,
?Await, ?Return]

This production only applies when parsing
[[https://tc39.es/ecma262/#non-strict-code][non-strict code]].

The [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
semantics]] of ContainsDuplicateLabels in
[[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-static-semantics-containsduplicatelabels][13.7.5.3]]
are augmented with the following:

[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

1. Return ContainsDuplicateLabels of
   [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
   =labelSet=.

The [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
semantics]] of ContainsUndefinedBreakTarget in
[[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-static-semantics-containsundefinedbreaktarget][13.7.5.4]]
are augmented with the following:

[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

1. Return ContainsUndefinedBreakTarget of
   [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
   =labelSet=.

The [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
semantics]] of ContainsUndefinedContinueTarget in
[[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-static-semantics-containsundefinedcontinuetarget][13.7.5.5]]
are augmented with the following:

[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

1. Return ContainsUndefinedContinueTarget of
   [[https://tc39.es/ecma262/#prod-Statement][Statement]] with arguments
   =iterationSet= and « ».

The [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
semantics]] of IsDestructuring in
[[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-static-semantics-isdestructuring][13.7.5.6]]
are augmented with the following:

[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]]:[[https://tc39.es/ecma262/#prod-Identifier][Identifier]]
yield await

1. Return false.

The [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
semantics]] of VarDeclaredNames in
[[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-static-semantics-vardeclarednames][13.7.5.7]]
are augmented with the following:

[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

1. Let =names= be the BoundNames of
   [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]].
2. Append to =names= the elements of the VarDeclaredNames of
   [[https://tc39.es/ecma262/#prod-Statement][Statement]].
3. Return =names=.

The [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
semantics]] of VarScopedDeclarations in
[[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-static-semantics-varscopeddeclarations][13.7.5.8]]
are augmented with the following:

[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

1. Let =declarations= be a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   containing
   [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]].
2. Append to =declarations= the elements of the VarScopedDeclarations of
   [[https://tc39.es/ecma262/#prod-Statement][Statement]].
3. Return =declarations=.

The [[https://tc39.es/ecma262/#sec-runtime-semantics][runtime
semantics]] of LabelledEvaluation in
[[https://tc39.es/ecma262/#sec-for-in-and-for-of-statements-runtime-semantics-labelledevaluation][13.7.5.11]]
are augmented with the following:

[[https://tc39.es/ecma262/#prod-annexB-IterationStatement][IterationStatement]]:for(var[[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-Initializer][Initializer]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

1. Let =bindingId= be StringValue of
   [[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]].
2. Let =lhs= be
   ? [[https://tc39.es/ecma262/#sec-resolvebinding][ResolveBinding]](=bindingId=).
3. If
   [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[https://tc39.es/ecma262/#prod-Initializer][Initializer]])
   is true, then

   1. Let =value= be NamedEvaluation of
      [[https://tc39.es/ecma262/#prod-Initializer][Initializer]] with
      argument =bindingId=.

4. Else,

   1. Let =rhs= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-Initializer][Initializer]].
   2. Let =value= be
      ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rhs=).

5. Perform ? [[https://tc39.es/ecma262/#sec-putvalue][PutValue]](=lhs=,
   =value=).
6. Let =keyResult= be ?
   [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofheadevaluation-tdznames-expr-iterationkind][ForIn/OfHeadEvaluation]](«
   », [[https://tc39.es/ecma262/#prod-Expression][Expression]],
   enumerate).
7. Return ?
   [[https://tc39.es/ecma262/#sec-runtime-semantics-forin-div-ofbodyevaluation-lhs-stmt-iterator-lhskind-labelset][ForIn/OfBodyEvaluation]]([[https://tc39.es/ecma262/#prod-annexB-BindingIdentifier][BindingIdentifier]],
   [[https://tc39.es/ecma262/#prod-Statement][Statement]], =keyResult=,
   enumerate, varBinding, =labelSet=).

* B.3.7The [[IsHTMLDDA]] Internal Slot
  :PROPERTIES:
  :CUSTOM_ID: b.3.7the-ishtmldda-internal-slot
  :END:

An [[IsHTMLDDA]] internal slot may exist on implementation-defined
objects. Objects with an [[IsHTMLDDA]] internal slot behave like
undefined in the [[https://tc39.es/ecma262/#sec-toboolean][ToBoolean]]
and
[[https://tc39.es/ecma262/#sec-abstract-equality-comparison][Abstract
Equality Comparison]]
[[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
operations]] and when used as an operand for the
[[https://tc39.es/ecma262/#sec-typeof-operator][=typeof= operator]].

Note

Objects with an [[IsHTMLDDA]] internal slot are never created by this
specification. However, the
[[https://html.spec.whatwg.org/multipage/obsolete.html#dom-document-all][=document.all=
object]] in web browsers is a host-created
[[https://tc39.es/ecma262/#exotic-object][exotic object]] with this slot
that exists for web compatibility purposes. There are no other known
examples of this type of object and implementations should not create
any with the exception of =document.all=.

* B.3.7.1Changes to ToBoolean
  :PROPERTIES:
  :CUSTOM_ID: b.3.7.1changes-to-toboolean
  :END:

The result column in [[https://tc39.es/ecma262/#table-10][Table 10]] for
an argument type of Object is replaced with the following algorithm:

1. If =argument= has an
   [[https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot][[[IsHTMLDDA]]
   internal slot]], return false.
2. Return true.

* B.3.7.2Changes to Abstract Equality Comparison
  :PROPERTIES:
  :CUSTOM_ID: b.3.7.2changes-to-abstract-equality-comparison
  :END:

The following steps are inserted after step 3 of the
[[https://tc39.es/ecma262/#sec-abstract-equality-comparison][Abstract
Equality Comparison]] algorithm:

1. If
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=x=)
   is Object and =x= has an
   [[https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot][[[IsHTMLDDA]]
   internal slot]] and =y= is either null or undefined, return true.
2. If =x= is either null or undefined and
   [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=y=)
   is Object and =y= has an
   [[https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot][[[IsHTMLDDA]]
   internal slot]], return true.

* B.3.7.3Changes to the =typeof= Operator
  :PROPERTIES:
  :CUSTOM_ID: b.3.7.3changes-to-the-typeof-operator
  :END:

The following table entry is inserted into
[[https://tc39.es/ecma262/#table-35][Table 37]] immediately preceeding
the entry for "Object (implements [[Call]])":

Table 87: Additional
[[https://tc39.es/ecma262/#sec-typeof-operator][=typeof=]] Operator
Results

| Type of =val=                                                                                           | Result        |
|---------------------------------------------------------------------------------------------------------+---------------|
| Object (has an [[https://tc39.es/ecma262/#sec-IsHTMLDDA-internal-slot][[[IsHTMLDDA]] internal slot]])   | "undefined"   |

* CThe Strict Mode of ECMAScript
  :PROPERTIES:
  :CUSTOM_ID: cthe-strict-mode-of-ecmascript
  :END:

*The strict mode restriction and exceptions*

- =implements=, =interface=, =let=, =package=, =private=, =protected=,
  =public=, =static=, and =yield= are reserved words within
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].
  ([[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][11.6.2]]).
- A conforming implementation, when processing
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  must not extend, as described in
  [[https://tc39.es/ecma262/#sec-additional-syntax-numeric-literals][B.1.1]],
  the syntax of
  [[https://tc39.es/ecma262/#prod-NumericLiteral][NumericLiteral]] to
  include LegacyOctalIntegerLiteral, nor extend the syntax of
  [[https://tc39.es/ecma262/#prod-DecimalIntegerLiteral][DecimalIntegerLiteral]]
  to include NonOctalDecimalIntegerLiteral.
- A conforming implementation, when processing
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  may not extend the syntax of
  [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]] to
  include LegacyOctalEscapeSequence as described in
  [[https://tc39.es/ecma262/#sec-additional-syntax-string-literals][B.1.2]].
- Assignment to an undeclared identifier or otherwise unresolvable
  reference does not create a property in the
  [[https://tc39.es/ecma262/#sec-global-object][global object]]. When a
  simple assignment occurs within
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  its
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
  must not evaluate to an unresolvable
  [[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]].
  If it does a ReferenceError exception is thrown
  ([[https://tc39.es/ecma262/#sec-putvalue][6.2.4.9]]). The
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
  also may not be a reference to a
  [[https://tc39.es/ecma262/#sec-object-type][data property]] with the
  attribute value { [[Writable]]: false }, to an
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] with
  the attribute value { [[Set]]: undefined }, nor to a non-existent
  property of an object whose [[Extensible]] internal slot has the value
  false. In these cases a =TypeError= exception is thrown
  ([[https://tc39.es/ecma262/#sec-assignment-operators][12.15]]).
- An
  [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
  with the StringValue "eval" or "arguments" may not appear as the
  [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]
  of an Assignment operator
  ([[https://tc39.es/ecma262/#sec-assignment-operators][12.15]]) or of
  an
  [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]
  ([[https://tc39.es/ecma262/#sec-update-expressions][12.4]]) or as the
  [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
  operated upon by a Prefix Increment
  ([[https://tc39.es/ecma262/#sec-prefix-increment-operator][12.4.6]])
  or a Prefix Decrement
  ([[https://tc39.es/ecma262/#sec-prefix-decrement-operator][12.4.7]])
  operator.
- Arguments objects for strict functions define a non-configurable
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]]
  "callee" which throws a TypeError exception on access
  ([[https://tc39.es/ecma262/#sec-createunmappedargumentsobject][9.4.4.6]]).
- Arguments objects for strict functions do not dynamically share their
  [[https://tc39.es/ecma262/#array-index][array-indexed]] property
  values with the corresponding formal parameter bindings of their
  functions.
  ([[https://tc39.es/ecma262/#sec-arguments-exotic-objects][9.4.4]]).
- For strict functions, if an arguments object is created the binding of
  the local identifier =arguments= to the arguments object is immutable
  and hence may not be the target of an assignment expression.
  ([[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][9.2.10]]).
- It is a SyntaxError if the StringValue of a
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  is "eval" or "arguments" within
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
  ([[https://tc39.es/ecma262/#sec-identifiers-static-semantics-early-errors][12.1.1]]).
- Strict mode eval code cannot instantiate variables or functions in the
  variable environment of the caller to eval. Instead, a new variable
  environment is created and that environment is used for declaration
  binding instantiation for the eval code
  ([[https://tc39.es/ecma262/#sec-eval-x][18.2.1]]).
- If this is evaluated within
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]],
  then the this value is not coerced to an object. A this value of
  undefined or null is not converted to the
  [[https://tc39.es/ecma262/#sec-global-object][global object]] and
  primitive values are not converted to wrapper objects. The this value
  passed via a function call (including calls made using
  =Function.prototype.apply= and =Function.prototype.call=) do not
  coerce the passed this value to an object
  ([[https://tc39.es/ecma262/#sec-ordinarycallbindthis][9.2.1.2]],
  [[https://tc39.es/ecma262/#sec-function.prototype.apply][19.2.3.1]],
  [[https://tc39.es/ecma262/#sec-function.prototype.call][19.2.3.3]]).
- When a =delete= operator occurs within
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]], a
  SyntaxError is thrown if its
  [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] is
  a direct reference to a variable, function argument, or function name
  ([[https://tc39.es/ecma262/#sec-delete-operator-static-semantics-early-errors][12.5.3.1]]).
- When a =delete= operator occurs within
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]], a
  TypeError is thrown if the property to be deleted has the attribute {
  [[Configurable]]: false }
  ([[https://tc39.es/ecma262/#sec-delete-operator-runtime-semantics-evaluation][12.5.3.2]]).
- [[https://tc39.es/ecma262/#sec-strict-mode-code][Strict mode code]]
  may not include a
  [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]. The
  occurrence of a
  [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]] in such
  a context is a SyntaxError
  ([[https://tc39.es/ecma262/#sec-with-statement-static-semantics-early-errors][13.11.1]]).
- It is a SyntaxError if a
  [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]]
  occurs within [[https://tc39.es/ecma262/#sec-strict-mode-code][strict
  mode code]] and BoundNames of
  [[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]]
  contains either =eval= or =arguments=
  ([[https://tc39.es/ecma262/#sec-try-statement-static-semantics-early-errors][13.15.1]]).
- It is a SyntaxError if the same
  [[https://tc39.es/ecma262/#prod-BindingIdentifier][BindingIdentifier]]
  appears more than once in the
  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
  of a [[https://tc39.es/ecma262/#strict-function][strict function]]. An
  attempt to create such a function using a =Function=, =Generator=, or
  =AsyncFunction= [[https://tc39.es/ecma262/#constructor][constructor]]
  is a SyntaxError
  ([[https://tc39.es/ecma262/#sec-function-definitions-static-semantics-early-errors][14.1.2]],
  [[https://tc39.es/ecma262/#sec-createdynamicfunction][19.2.1.1.1]]).
- An implementation may not extend, beyond that defined in this
  specification, the meanings within strict functions of properties
  named "caller" or "arguments" of function instances.

* DCorrections and Clarifications in ECMAScript 2015 with Possible
Compatibility Impact
  :PROPERTIES:
  :CUSTOM_ID: dcorrections-and-clarifications-in-ecmascript-2015-with-possible-compatibility-impact
  :END:

[[https://tc39.es/ecma262/#sec-candeclareglobalvar][8.1.1.4.15]]-[[https://tc39.es/ecma262/#sec-createglobalfunctionbinding][8.1.1.4.18]]
Edition 5 and 5.1 used a property existence test to determine whether a
[[https://tc39.es/ecma262/#sec-global-object][global object]] property
corresponding to a new global declaration already existed. ECMAScript
2015 uses an own property existence test. This corresponds to what has
been most commonly implemented by web browsers.

[[https://tc39.es/ecma262/#sec-array-exotic-objects-defineownproperty-p-desc][9.4.2.1]]:
The 5^{th} Edition moved the capture of the current array length prior
to the [[https://tc39.es/ecma262/#integer][integer]] conversion of the
[[https://tc39.es/ecma262/#array-index][array index]] or new length
value. However, the captured length value could become invalid if the
conversion process has the side-effect of changing the array length.
ECMAScript 2015 specifies that the current array length must be captured
after the possible occurrence of such side-effects.

[[https://tc39.es/ecma262/#sec-timeclip][20.4.1.14]]: Previous editions
permitted the [[https://tc39.es/ecma262/#sec-timeclip][TimeClip]]
abstract operation to return either +0 or -0 as the representation of a
0 [[https://tc39.es/ecma262/#sec-time-values-and-time-range][time
value]]. ECMAScript 2015 specifies that +0 always returned. This means
that for ECMAScript 2015 the
[[https://tc39.es/ecma262/#sec-time-values-and-time-range][time value]]
of a Date object is never observably -0 and methods that return time
values never return -0.

[[https://tc39.es/ecma262/#sec-date-time-string-format][20.4.1.15]]: If
a UTC offset representation is not present, the local time zone is used.
Edition 5.1 incorrectly stated that a missing time zone should be
interpreted as "z".

[[https://tc39.es/ecma262/#sec-date.prototype.toisostring][20.4.4.36]]:
If the year cannot be represented using the Date Time String Format
specified in
[[https://tc39.es/ecma262/#sec-date-time-string-format][20.4.1.15]] a
RangeError exception is thrown. Previous editions did not specify the
behaviour for that case.

[[https://tc39.es/ecma262/#sec-date.prototype.tostring][20.4.4.41]]:
Previous editions did not specify the value returned by
=Date.prototype.toString= when
[[https://tc39.es/ecma262/#this-time-value][this time value]] is NaN.
ECMAScript 2015 specifies the result to be the String value "Invalid
Date".

[[https://tc39.es/ecma262/#sec-regexp-pattern-flags][21.2.3.1]],
[[https://tc39.es/ecma262/#sec-escaperegexppattern][21.2.3.2.4]]: Any
LineTerminator code points in the value of the "source" property of a
RegExp instance must be expressed using an escape sequence. Edition 5.1
only required the escaping of =/=.

[[https://tc39.es/ecma262/#sec-regexp.prototype-@@match][21.2.5.7]],
[[https://tc39.es/ecma262/#sec-regexp.prototype-@@replace][21.2.5.10]]:
In previous editions, the specifications for =String.prototype.match=
and =String.prototype.replace= was incorrect for cases where the pattern
argument was a RegExp value whose =global= flag is set. The previous
specifications stated that for each attempt to match the pattern, if
=lastIndex= did not change it should be incremented by 1. The correct
behaviour is that =lastIndex= should be incremented by one only if the
pattern matched the empty string.

[[https://tc39.es/ecma262/#sec-array.prototype.sort][22.1.3.27]],
[[https://tc39.es/ecma262/#sec-sortcompare][22.1.3.27.1]]: Previous
editions did not specify how a NaN value returned by a =comparefn= was
interpreted by =Array.prototype.sort=. ECMAScript 2015 specifies that
such as value is treated as if +0 was returned from the =comparefn=.
ECMAScript 2015 also specifies that
[[https://tc39.es/ecma262/#sec-tonumber][ToNumber]] is applied to the
result returned by a =comparefn=. In previous editions, the effect of a
=comparefn= result that is not a
[[https://tc39.es/ecma262/#number-value][Number value]] was
implementation-dependent. In practice, implementations call
[[https://tc39.es/ecma262/#sec-tonumber][ToNumber]].

* EAdditions and Changes That Introduce Incompatibilities with Prior
Editions
  :PROPERTIES:
  :CUSTOM_ID: eadditions-and-changes-that-introduce-incompatibilities-with-prior-editions
  :END:

[[https://tc39.es/ecma262/#sec-reference-specification-type][6.2.4]]: In
ECMAScript 2015, Function calls are not allowed to return a
[[https://tc39.es/ecma262/#sec-reference-specification-type][Reference]]
value.

[[https://tc39.es/ecma262/#sec-tonumber-applied-to-the-string-type][7.1.4.1]]:
In ECMAScript 2015, [[https://tc39.es/ecma262/#sec-tonumber][ToNumber]]
applied to a String value now recognizes and converts
[[https://tc39.es/ecma262/#prod-BinaryIntegerLiteral][BinaryIntegerLiteral]]
and
[[https://tc39.es/ecma262/#prod-OctalIntegerLiteral][OctalIntegerLiteral]]
numeric strings. In previous editions such strings were converted to
NaN.

[[https://tc39.es/ecma262/#sec-code-realms][8.2]]: In ECMAScript 2018,
Template objects are canonicalized based on
[[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]] (source
location), instead of across all occurrences of that template literal or
tagged template in a [[https://tc39.es/ecma262/#realm][Realm]] in
previous editions.

[[https://tc39.es/ecma262/#sec-white-space][11.2]]: In ECMASCript 2016,
Unicode 8.0.0 or higher is mandated, as opposed to ECMAScript 2015 which
mandated Unicode 5.1. In particular, this caused U+180E MONGOLIAN VOWEL
SEPARATOR, which was in the =Space_Separator= (=Zs=) category and thus
treated as whitespace in ECMAScript 2015, to be moved to the =Format=
(=Cf=) category (as of Unicode 6.3.0). This causes whitespace-sensitive
methods to behave differently. For example, ="\u180E".trim().length= was
=0= in previous editions, but =1= in ECMAScript 2016 and later.
Additionally, ECMAScript 2017 mandated always using the latest version
of the Unicode standard.

[[https://tc39.es/ecma262/#sec-names-and-keywords][11.6]]: In ECMAScript
2015, the valid code points for an
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] are
specified in terms of the Unicode properties “ID_Start” and
“ID_Continue”. In previous editions, the valid
[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]] or
[[https://tc39.es/ecma262/#prod-Identifier][Identifier]] code points
were specified by enumerating various Unicode code point categories.

[[https://tc39.es/ecma262/#sec-rules-of-automatic-semicolon-insertion][11.9.1]]:
In ECMAScript 2015, Automatic Semicolon Insertion adds a semicolon at
the end of a do-while statement if the semicolon is missing. This change
aligns the specification with the actual behaviour of most existing
implementations.

[[https://tc39.es/ecma262/#sec-object-initializer-static-semantics-early-errors][12.2.6.1]]:
In ECMAScript 2015, it is no longer an
[[https://tc39.es/ecma262/#early-error][early error]] to have duplicate
property names in Object Initializers.

[[https://tc39.es/ecma262/#sec-assignment-operators-static-semantics-early-errors][12.15.1]]:
In ECMAScript 2015,
[[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
containing an assignment to an immutable binding such as the function
name of a
[[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
does not produce an [[https://tc39.es/ecma262/#early-error][early
error]]. Instead it produces a runtime error.

[[https://tc39.es/ecma262/#sec-block][13.2]]: In ECMAScript 2015, a
[[https://tc39.es/ecma262/#prod-StatementList][StatementList]] beginning
with the token let followed by the input elements
[[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]] then
[[https://tc39.es/ecma262/#prod-Identifier][Identifier]] is the start of
a
[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]].
In previous editions, automatic semicolon insertion would always insert
a semicolon before the
[[https://tc39.es/ecma262/#prod-Identifier][Identifier]] input element.

[[https://tc39.es/ecma262/#sec-expression-statement][13.5]]: In
ECMAScript 2015, a
[[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]
beginning with the token =let= followed by the token =[= is the start of
a
[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]].
In previous editions such a sequence would be the start of an
[[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]].

[[https://tc39.es/ecma262/#sec-if-statement-runtime-semantics-evaluation][13.6.7]]:
In ECMAScript 2015, the normal completion value of an
[[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]] is never the
value empty. If no
[[https://tc39.es/ecma262/#prod-Statement][Statement]] part is evaluated
or if the evaluated
[[https://tc39.es/ecma262/#prod-Statement][Statement]] part produces a
normal completion whose value is empty, the completion value of the
[[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]] is undefined.

[[https://tc39.es/ecma262/#sec-iteration-statements][13.7]]: In
ECMAScript 2015, if the =(= token of a for statement is immediately
followed by the token sequence =let [= then the =let= is treated as the
start of a
[[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]].
In previous editions such a token sequence would be the start of an
[[https://tc39.es/ecma262/#prod-Expression][Expression]].

[[https://tc39.es/ecma262/#sec-iteration-statements][13.7]]: In
ECMAScript 2015, if the ( token of a for-in statement is immediately
followed by the token sequence =let [= then the =let= is treated as the
start of a
[[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]. In
previous editions such a token sequence would be the start of an
[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]].

[[https://tc39.es/ecma262/#sec-iteration-statements][13.7]]: Prior to
ECMAScript 2015, an initialization expression could appear as part of
the
[[https://tc39.es/ecma262/#prod-VariableDeclaration][VariableDeclaration]]
that precedes the =in=
[[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]].
In ECMAScript 2015, the
[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]] in that same
position does not allow the occurrence of such an initializer. In
ECMAScript 2017, such an initializer is permitted only in
[[https://tc39.es/ecma262/#non-strict-code][non-strict code]].

[[https://tc39.es/ecma262/#sec-iteration-statements][13.7]]: In
ECMAScript 2015, the completion value of an
[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
is never the value empty. If the
[[https://tc39.es/ecma262/#prod-Statement][Statement]] part of an
[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
is not evaluated or if the final evaluation of the
[[https://tc39.es/ecma262/#prod-Statement][Statement]] part produces a
completion whose value is empty, the completion value of the
[[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]
is undefined.

[[https://tc39.es/ecma262/#sec-with-statement-runtime-semantics-evaluation][13.11.7]]:
In ECMAScript 2015, the normal completion value of a
[[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]] is never
the value empty. If evaluation of the
[[https://tc39.es/ecma262/#prod-Statement][Statement]] part of a
[[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]] produces
a normal completion whose value is empty, the completion value of the
[[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]] is
undefined.

[[https://tc39.es/ecma262/#sec-switch-statement-runtime-semantics-evaluation][13.12.11]]:
In ECMAScript 2015, the completion value of a
[[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]] is
never the value empty. If the
[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] part of a
[[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]
produces a completion whose value is empty, the completion value of the
[[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]] is
undefined.

[[https://tc39.es/ecma262/#sec-try-statement][13.15]]: In ECMAScript
2015, it is an [[https://tc39.es/ecma262/#early-error][early error]] for
a [[https://tc39.es/ecma262/#prod-Catch][Catch]] clause to contain a
=var= declaration for the same
[[https://tc39.es/ecma262/#prod-Identifier][Identifier]] that appears as
the [[https://tc39.es/ecma262/#prod-Catch][Catch]] clause parameter. In
previous editions, such a variable declaration would be instantiated in
the enclosing variable environment but the declaration's
[[https://tc39.es/ecma262/#prod-Initializer][Initializer]] value would
be assigned to the [[https://tc39.es/ecma262/#prod-Catch][Catch]]
parameter.

[[https://tc39.es/ecma262/#sec-try-statement][13.15]],
[[https://tc39.es/ecma262/#sec-evaldeclarationinstantiation][18.2.1.3]]:
In ECMAScript 2015, a runtime SyntaxError is thrown if a
[[https://tc39.es/ecma262/#prod-Catch][Catch]] clause evaluates a
non-strict direct =eval= whose eval code includes a =var= or
=FunctionDeclaration= declaration that binds the same
[[https://tc39.es/ecma262/#prod-Identifier][Identifier]] that appears as
the [[https://tc39.es/ecma262/#prod-Catch][Catch]] clause parameter.

[[https://tc39.es/ecma262/#sec-try-statement-runtime-semantics-evaluation][13.15.8]]:
In ECMAScript 2015, the completion value of a
[[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]] is never
the value empty. If the [[https://tc39.es/ecma262/#prod-Block][Block]]
part of a [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]
evaluates to a normal completion whose value is empty, the completion
value of the
[[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]] is
undefined. If the [[https://tc39.es/ecma262/#prod-Block][Block]] part of
a [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]] evaluates
to a throw completion and it has a
[[https://tc39.es/ecma262/#prod-Catch][Catch]] part that evaluates to a
normal completion whose value is empty, the completion value of the
[[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]] is
undefined if there is no
[[https://tc39.es/ecma262/#prod-Finally][Finally]] clause or if its
[[https://tc39.es/ecma262/#prod-Finally][Finally]] clause evaluates to
an empty normal completion.

[[https://tc39.es/ecma262/#sec-method-definitions-runtime-semantics-propertydefinitionevaluation][14.3.8]]
In ECMAScript 2015, the function objects that are created as the values
of the [[Get]] or [[Set]] attribute of accessor properties in an
[[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]] are not
[[https://tc39.es/ecma262/#constructor][constructor]] functions and they
do not have a "prototype" own property. In the previous edition, they
were constructors and had a "prototype" property.

[[https://tc39.es/ecma262/#sec-object.freeze][19.1.2.6]]: In ECMAScript
2015, if the argument to =Object.freeze= is not an object it is treated
as if it was a non-extensible ordinary object with no own properties. In
the previous edition, a non-object argument always causes a TypeError to
be thrown.

[[https://tc39.es/ecma262/#sec-object.getownpropertydescriptor][19.1.2.8]]:
In ECMAScript 2015, if the argument to =Object.getOwnPropertyDescriptor=
is not an object an attempt is made to coerce the argument using
[[https://tc39.es/ecma262/#sec-toobject][ToObject]]. If the coercion is
successful the result is used in place of the original argument value.
In the previous edition, a non-object argument always causes a TypeError
to be thrown.

[[https://tc39.es/ecma262/#sec-object.getownpropertynames][19.1.2.10]]:
In ECMAScript 2015, if the argument to =Object.getOwnPropertyNames= is
not an object an attempt is made to coerce the argument using
[[https://tc39.es/ecma262/#sec-toobject][ToObject]]. If the coercion is
successful the result is used in place of the original argument value.
In the previous edition, a non-object argument always causes a TypeError
to be thrown.

[[https://tc39.es/ecma262/#sec-object.getprototypeof][19.1.2.12]]: In
ECMAScript 2015, if the argument to =Object.getPrototypeOf= is not an
object an attempt is made to coerce the argument using
[[https://tc39.es/ecma262/#sec-toobject][ToObject]]. If the coercion is
successful the result is used in place of the original argument value.
In the previous edition, a non-object argument always causes a TypeError
to be thrown.

[[https://tc39.es/ecma262/#sec-object.isextensible][19.1.2.14]]: In
ECMAScript 2015, if the argument to =Object.isExtensible= is not an
object it is treated as if it was a non-extensible ordinary object with
no own properties. In the previous edition, a non-object argument always
causes a TypeError to be thrown.

[[https://tc39.es/ecma262/#sec-object.isfrozen][19.1.2.15]]: In
ECMAScript 2015, if the argument to =Object.isFrozen= is not an object
it is treated as if it was a non-extensible ordinary object with no own
properties. In the previous edition, a non-object argument always causes
a TypeError to be thrown.

[[https://tc39.es/ecma262/#sec-object.issealed][19.1.2.16]]: In
ECMAScript 2015, if the argument to =Object.isSealed= is not an object
it is treated as if it was a non-extensible ordinary object with no own
properties. In the previous edition, a non-object argument always causes
a TypeError to be thrown.

[[https://tc39.es/ecma262/#sec-object.keys][19.1.2.17]]: In ECMAScript
2015, if the argument to =Object.keys= is not an object an attempt is
made to coerce the argument using
[[https://tc39.es/ecma262/#sec-toobject][ToObject]]. If the coercion is
successful the result is used in place of the original argument value.
In the previous edition, a non-object argument always causes a TypeError
to be thrown.

[[https://tc39.es/ecma262/#sec-object.preventextensions][19.1.2.18]]: In
ECMAScript 2015, if the argument to =Object.preventExtensions= is not an
object it is treated as if it was a non-extensible ordinary object with
no own properties. In the previous edition, a non-object argument always
causes a TypeError to be thrown.

[[https://tc39.es/ecma262/#sec-object.seal][19.1.2.20]]: In ECMAScript
2015, if the argument to =Object.seal= is not an object it is treated as
if it was a non-extensible ordinary object with no own properties. In
the previous edition, a non-object argument always causes a TypeError to
be thrown.

[[https://tc39.es/ecma262/#sec-function.prototype.bind][19.2.3.2]]: In
ECMAScript 2015, the [[Prototype]] internal slot of a
[[https://tc39.es/ecma262/#sec-bound-function-exotic-objects][bound
function]] is set to the [[GetPrototypeOf]] value of its target
function. In the previous edition, [[Prototype]] was always set to
[[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

[[https://tc39.es/ecma262/#sec-function-instances-length][19.2.4.1]]: In
ECMAScript 2015, the "length" property of function instances is
configurable. In previous editions it was non-configurable.

[[https://tc39.es/ecma262/#sec-properties-of-the-nativeerror-constructors][19.5.6.2]]:
In ECMAScript 2015, the [[Prototype]] internal slot of a =NativeError=
[[https://tc39.es/ecma262/#constructor][constructor]] is the Error
[[https://tc39.es/ecma262/#constructor][constructor]]. In previous
editions it was the Function prototype object.

[[https://tc39.es/ecma262/#sec-properties-of-the-date-prototype-object][20.4.4]]
In ECMAScript 2015, the Date prototype object is not a Date instance. In
previous editions it was a Date instance whose TimeValue was NaN.

[[https://tc39.es/ecma262/#sec-string.prototype.localecompare][21.1.3.10]]
In ECMAScript 2015, the =String.prototype.localeCompare= function must
treat Strings that are canonically equivalent according to the Unicode
standard as being identical. In previous editions implementations were
permitted to ignore canonical equivalence and could instead use a
bit-wise comparison.

[[https://tc39.es/ecma262/#sec-string.prototype.tolowercase][21.1.3.25]]
and
[[https://tc39.es/ecma262/#sec-string.prototype.touppercase][21.1.3.27]]
In ECMAScript 2015, lowercase/upper conversion processing operates on
code points. In previous editions such the conversion processing was
only applied to individual code units. The only affected code points are
those in the Deseret block of Unicode.

[[https://tc39.es/ecma262/#sec-string.prototype.trim][21.1.3.28]] In
ECMAScript 2015, the =String.prototype.trim= method is defined to
recognize white space code points that may exists outside of the Unicode
BMP. However, as of Unicode 7 no such code points are defined. In
previous editions such code points would not have been recognized as
white space.

[[https://tc39.es/ecma262/#sec-regexp-pattern-flags][21.2.3.1]] In
ECMAScript 2015, If the =pattern= argument is a RegExp instance and the
=flags= argument is not undefined, a new RegExp instance is created just
like =pattern= except that =pattern='s flags are replaced by the
argument =flags=. In previous editions a TypeError exception was thrown
when =pattern= was a RegExp instance and =flags= was not undefined.

[[https://tc39.es/ecma262/#sec-properties-of-the-regexp-prototype-object][21.2.5]]
In ECMAScript 2015, the RegExp prototype object is not a RegExp
instance. In previous editions it was a RegExp instance whose pattern is
the empty string.

[[https://tc39.es/ecma262/#sec-properties-of-the-regexp-prototype-object][21.2.5]]
In ECMAScript 2015, "source", "global", "ignoreCase", and "multiline"
are accessor properties defined on the RegExp prototype object. In
previous editions they were data properties defined on RegExp instances.

[[https://tc39.es/ecma262/#sec-atomics.notify][24.4.12]]: In ECMAScript
2019, =Atomics.wake= has been renamed to =Atomics.notify= to prevent
confusion with =Atomics.wait=.

[[https://tc39.es/ecma262/#sec-asyncfromsynciteratorcontinuation][25.1.4.4]],
[[https://tc39.es/ecma262/#sec-asyncgeneratorresumenext][25.5.3.5]]: In
ECMAScript 2019, the number of Jobs enqueued by =await= was reduced,
which could create an observable difference in resolution order between
a =then()= call and an =await= expression.

* FColophon
  :PROPERTIES:
  :CUSTOM_ID: fcolophon
  :END:

This specification is authored on
[[https://github.com/tc39/ecma262][GitHub]] in a plaintext source format
called [[https://github.com/bterlson/ecmarkup][Ecmarkup]]. Ecmarkup is
an HTML and Markdown dialect that provides a framework and toolset for
authoring ECMAScript specifications in plaintext and processing the
specification into a full-featured HTML rendering that follows the
editorial conventions for this document. Ecmarkup builds on and
integrates a number of other formats and technologies including
[[https://github.com/rbuckton/grammarkdown][Grammarkdown]] for defining
syntax and [[https://github.com/domenic/ecmarkdown][Ecmarkdown]] for
authoring algorithm steps. PDF renderings of this specification are
produced by printing the HTML rendering to a PDF.

Prior editions of this specification were authored using Word---the
Ecmarkup source text that formed the basis of this edition was produced
by converting the ECMAScript 2015 Word document to Ecmarkup using an
automated conversion tool.

* GBibliography
  :PROPERTIES:
  :CUSTOM_ID: gbibliography
  :END:

1.  IEEE Std 754-2008: /IEEE Standard for Floating-Point Arithmetic/.
    Institute of Electrical and Electronic Engineers, New York (2008)
2.  /The Unicode Standard/, available at
    <[[https://unicode.org/versions/latest]]>
3.  /Unicode Technical Note #5: Canonical Equivalence in Applications/,
    available at <[[https://unicode.org/notes/tn5/]]>
4.  /Unicode Technical Standard #10: Unicode Collation Algorithm/,
    available at <[[https://unicode.org/reports/tr10/]]>
5.  /Unicode Standard Annex #15, Unicode Normalization Forms/, available
    at <[[https://unicode.org/reports/tr15/]]>
6.  /Unicode Standard Annex #18: Unicode Regular Expressions/, available
    at <[[https://unicode.org/reports/tr18/]]>
7.  /Unicode Standard Annex #24: Unicode =Script= Property/, available
    at <[[https://unicode.org/reports/tr24/]]>
8.  /Unicode Standard Annex #31, Unicode Identifiers and Pattern
    Syntax/, available at <[[https://unicode.org/reports/tr31/]]>
9.  /Unicode Standard Annex #44: Unicode Character Database/, available
    at <[[https://unicode.org/reports/tr44/]]>
10. /Unicode Technical Standard #51: Unicode Emoji/, available at
    <[[https://unicode.org/reports/tr51/]]>
11. /IANA Time Zone Database/, available at
    <[[https://www.iana.org/time-zones]]>
12. ISO 8601:2004(E) /Data elements and interchange formats ---
    Information interchange --- Representation of dates and times/
13. /RFC 1738 “Uniform Resource Locators (URL)”/, available at
    <[[https://tools.ietf.org/html/rfc1738]]>
14. /RFC 2396 “Uniform Resource Identifiers (URI): Generic Syntax”/,
    available at <[[https://tools.ietf.org/html/rfc2396]]>
15. /RFC 3629 “UTF-8, a transformation format of ISO 10646”/, available
    at <[[https://tools.ietf.org/html/rfc3629]]>
16. /RFC 7231 “Hypertext Transfer Protocol (HTTP/1.1): Semantics and
    Content”/, available at <[[https://tools.ietf.org/html/rfc7231]]>

* HCopyright & Software License
  :PROPERTIES:
  :CUSTOM_ID: hcopyright-software-license
  :END:

Ecma International

Rue du Rhone 114

CH-1204 Geneva

Tel: +41 22 849 6000

Fax: +41 22 849 6001

Web: [[https://ecma-international.org/]]

** Copyright Notice
   :PROPERTIES:
   :CUSTOM_ID: copyright-notice
   :END:

© 2019 Ecma International

This draft document may be copied and furnished to others, and
derivative works that comment on or otherwise explain it or assist in
its implementation may be prepared, copied, published, and distributed,
in whole or in part, without restriction of any kind, provided that the
above copyright notice and this section are included on all such copies
and derivative works. However, this document itself may not be modified
in any way, including by removing the copyright notice or references to
Ecma International, except as needed for the purpose of developing any
document or deliverable produced by Ecma International.

This disclaimer is valid only prior to final version of this document.
After approval all rights on the standard are reserved by Ecma
International.

The limited permissions are granted through the standardization phase
and will not be revoked by Ecma International or its successors or
assigns during this time.

This document and the information contained herein is provided on an "AS
IS" basis and ECMA INTERNATIONAL DISCLAIMS ALL WARRANTIES, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO ANY WARRANTY THAT THE USE OF THE
INFORMATION HEREIN WILL NOT INFRINGE ANY OWNERSHIP RIGHTS OR ANY IMPLIED
WARRANTIES OF MERCHANTABILITY OR FITNESS FOR A PARTICULAR PURPOSE.

** Software License
   :PROPERTIES:
   :CUSTOM_ID: software-license
   :END:

All Software contained in this document ("Software") is protected by
copyright and is being made available under the "BSD License", included
below. This Software may be subject to third party rights (rights from
parties other than Ecma International), including patent rights, and no
licenses under such third party rights are granted under this license
even if the third party concerned is a member of Ecma International. SEE
THE ECMA CODE OF CONDUCT IN PATENT MATTERS AVAILABLE AT
https://ecma-international.org/memento/codeofconduct.htm FOR INFORMATION
REGARDING THE LICENSING OF PATENT CLAIMS THAT ARE REQUIRED TO IMPLEMENT
ECMA INTERNATIONAL STANDARDS.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are
met:

1. Redistributions of source code must retain the above copyright
   notice, this list of conditions and the following disclaimer.
2. Redistributions in binary form must reproduce the above copyright
   notice, this list of conditions and the following disclaimer in the
   documentation and/or other materials provided with the distribution.
3. Neither the name of the authors nor Ecma International may be used to
   endorse or promote products derived from this software without
   specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE ECMA INTERNATIONAL "AS IS" AND ANY
EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL ECMA INTERNATIONAL BE LIABLE
FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF
THE POSSIBILITY OF SUCH DAMAGE.

<<references-pane-container>>

<<references-pane-spacer>>

<<references-pane>>

References to <<>><<references-pane-close>>

<<references-pane-table-container>>
