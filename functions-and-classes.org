
#+begin_src gerbil :tangle functions-and-classes.ss :noweb yes
  (import :drewc/js-syntax/lexical :drewc/js-syntax/expressions :drewc/js-syntax/statements-and-declarations :drewc/smug)
  (export #t)

  <<formal-parameter>>
  <<formal-parameters>>

  ;;;; <<function-declaration>>
#+end_src

* ECMAScript Language: Functions and Classes
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-functions-and-classes
  :END:

Note

Various ECMAScript language elements cause the creation of ECMAScript
function objects
([[https://tc39.es/ecma262/#sec-ecmascript-function-objects][9.2]]).
Evaluation of such functions starts with the execution of their [[Call]]
internal method
([[https://tc39.es/ecma262/#sec-ecmascript-function-objects-call-thisargument-argumentslist][9.2.1]]).

** Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-55
    :END:

  #+begin_src gerbil :noweb-ref function-declaration 
    (defstruct function (identifier parameters body) transparent: #t)
    (def (parse-function)
      (.let* ((_ (tpv? "function")) 
              (id (.or

                    BindingIdentifier

                    #f))
              (params
               (bracket (.or (tpv? #\() (js-syntax-error
                                        "Invalid function name definition"))

                        FormalParameters

                        (.or (tpv? #\)) (js-syntax-error
                                         "Invalid Function Parameter"))))
              (body
               (bracket (.or (tpv? #\{) (js-syntax-error
                                         "Invalid Function Body start"))
                        FunctionBody

                        (.or (tpv? #\}) (js-syntax-error
                                         "Invalid Function Body end")))))
        (return (function id params body))))
  #+end_src
 
**** FunctionDeclaration
     :PROPERTIES:
     :CUSTOM_ID: FunctionDeclaration
     :END:

  #+begin_quote
  [[#FunctionDeclaration][FunctionDeclaration]][Yield, Await, Default]:
    function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield, ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield, ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield, ~Await]} 
    [+Default]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield, ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield, ~Await]}
  #+end_quote


  #+begin_src gerbil :noweb-ref function-declaration 
    (defstruct (function-declaration function) (function) transparent: #t)
    (def FunctionDeclaration
      (.let* (f (parse-function)) (return (function-declaration f))))
  #+end_src
**** FunctionExpression
 
 #+begin_quote
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:
   function [[file:expressions.org::#BindingIdentifier][BindingIdentifier]][~Yield, ~Await]opt ([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield, ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield, ~Await]}
 #+end_quote

**** UniqueFormalParameters

  [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][Yield, Await]:
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][?Yield, ?Await]

**** FormalParameters
     :PROPERTIES:
     :CUSTOM_ID: FormalParameters
     :END:

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][Yield, Await]:
   [empty]
  [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield, ?Await],
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield, ?Await],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][?Yield, ?Await]

  #+begin_src gerbil :noweb-ref formal-parameters
    (defstruct (formal-parameters statement) (elements) transparent: #t)
    (def FormalParameters
      (.let* (ps (sepby FormalParameter (tpv? #\,)))
        (return (formal-parameters ps))))
  #+end_src

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][Yield, Await]:
  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][?Yield, ?Await]
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]][?Yield, ?Await],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][?Yield, ?Await]

  [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]][Yield, Await]: 
    [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]][?Yield, ?Await]

**** FormalParameter
     :PROPERTIES:
     :CUSTOM_ID: FormalParameter
     :END:
[[file:statements-and-declarations.org::#BindingElement][BindingElement]]

  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][Yield, Await]:
    [[file:statements-and-declarations.org::#BindingElement][BindingElement]][?Yield, ?Await]

    #+begin_src gerbil :noweb-ref formal-parameter
      (def FormalParameter BindingElement)
    #+end_src

**** FunctionBody
     :PROPERTIES:
     :CUSTOM_ID: FunctionBody
     :END:

  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][Yield, Await]: 
   [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]][?Yield, ?Await]

   #+begin_src gerbil :noweb-ref function-body 
     (def FunctionBody FunctionStatementList)
   #+end_src

**** FunctionStatementList

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]][Yield, Await]: 
   [[https://tc39.es/ecma262/#prod-StatementList][StatementList]][?Yield, ?Await, +Return]opt

   #+begin_src gerbil :noweb-ref function-statement-list
     (def FunctionStatementList
       ;;; Because this is optional, and StatementList will error if it cannot find
       ;;; statement, we peek for the end of block here
       (.or (.begin (peek (tpv? #\})) (return []))
            StatementList))

   #+end_src

*** Directive Prologues and the Use Strict Directive
    :PROPERTIES:
    :CUSTOM_ID: directive-prologues-and-the-use-strict-directive
    :END:

  A Directive Prologue is the longest sequence of
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]s
  occurring as the initial
  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]s
  or [[https://tc39.es/ecma262/#prod-ModuleItem][ModuleItem]]s of a
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]], a
  [[https://tc39.es/ecma262/#prod-ScriptBody][ScriptBody]], or a
  [[https://tc39.es/ecma262/#prod-ModuleBody][ModuleBody]] and where each
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  in the sequence consists entirely of a
  [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] token
  followed by a semicolon. The semicolon may appear explicitly or may be
  inserted by automatic semicolon insertion. A
  [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]] may
  be an empty sequence.

  A Use Strict Directive is an
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  in a [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
  whose [[https://tc39.es/ecma262/#prod-StringLiteral][StringLiteral]] is
  either of the exact code point sequences ="use strict"= or
  ='use strict'=. A [[https://tc39.es/ecma262/#use-strict-directive][Use
  Strict Directive]] may not contain an
  [[https://tc39.es/ecma262/#prod-EscapeSequence][EscapeSequence]] or
  [[https://tc39.es/ecma262/#prod-LineContinuation][LineContinuation]].

  A [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
  may contain more than one
  [[https://tc39.es/ecma262/#use-strict-directive][Use Strict Directive]].
  However, an implementation may issue a warning if this occurs.

  Note

  The
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]s
  of a [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
  are evaluated normally during evaluation of the containing production.
  Implementations may define implementation specific meanings for
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]s
  which are not a [[https://tc39.es/ecma262/#use-strict-directive][Use
  Strict Directive]] and which occur in a
  [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]. If
  an appropriate notification mechanism exists, an implementation should
  issue a warning if it encounters in a
  [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]] an
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  that is not a [[https://tc39.es/ecma262/#use-strict-directive][Use
  Strict Directive]] and which does not have a meaning defined by the
  implementation.

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-23
    :END:

  [[#FunctionDeclaration][FunctionDeclaration]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[#FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] Contains
    [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is true.

  Note 1

  The LexicallyDeclaredNames of a
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] does not
  include identifiers bound using var or function declarations.

  [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]

  - It is a Syntax Error if BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    contains any duplicate elements.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]

  - It is a Syntax Error if IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
    is false and BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
    contains any duplicate elements.

  Note 2

  Multiple occurrences of the same
  [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
  is only allowed for functions which have simple parameter lists and
  which are not defined in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]

  - It is a Syntax Error if the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    contains any duplicate entries.
  - It is a Syntax Error if any element of the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    also occurs in the VarDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]].
  - It is a Syntax Error if ContainsDuplicateLabels of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    with argument « » is true.
  - It is a Syntax Error if ContainsUndefinedBreakTarget of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    with argument « » is true.
  - It is a Syntax Error if ContainsUndefinedContinueTarget of
    [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]
    with arguments « » and « » is true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-5
    :END:

  [[#FunctionDeclaration][FunctionDeclaration]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return the BoundNames of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].

  [[#FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Let =names= be BoundNames of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].
  2. Append to =names= the BoundNames of
     [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]].
  3. Return =names=.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. Let =names= be BoundNames of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].
  2. Append to =names= the BoundNames of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].
  3. Return =names=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-2
    :END:

  With parameter =symbol=.

  [[#FunctionDeclaration][FunctionDeclaration]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[#FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into function definitions.

*** Static Semantics: ContainsExpression
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsexpression-1
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. If ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true, return true.
  2. Return ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]].

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true, return true.
  2. Return ContainsExpression of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].

*** Static Semantics: ContainsUseStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsusestrict
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]

  1. If the [[https://tc39.es/ecma262/#directive-prologue][Directive
     Prologue]] of
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] contains
     a [[https://tc39.es/ecma262/#use-strict-directive][Use Strict
     Directive]], return true; otherwise, return false.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return 0.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Return ExpectedArgumentCount of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].

  Note

  The ExpectedArgumentCount of a
  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
  is the number of
  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] to
  the left of either the rest parameter or the first
  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]] with
  an Initializer. A
  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]
  without an initializer is allowed after the first parameter with an
  initializer but such parameters are considered to be optional with
  undefined as their default value.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. Let =count= be ExpectedArgumentCount of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]].
  2. If HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true or HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]] is
     true, return =count=.
  3. Return =count= + 1.

*** Static Semantics: HasInitializer
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasinitializer-1
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is true, return true.
  2. Return HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-1
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return true.

*** Static Semantics: IsAnonymousFunctionDefinition ( =expr= )
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isanonymousfunctiondefinition-expr
    :END:

  The abstract operation IsAnonymousFunctionDefinition determines if its
  argument is a function definition that does not bind a name. The
  argument =expr= is the result of parsing an
  [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
  or [[https://tc39.es/ecma262/#prod-Initializer][Initializer]]. The
  following steps are taken:

  1. If IsFunctionDefinition of =expr= is false, return false.
  2. Let =hasName= be HasName of =expr=.
  3. If =hasName= is true, return false.
  4. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-1
    :END:

  [[#FunctionDeclaration][FunctionDeclaration]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  [[#FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-16
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return true.

*** Static Semantics: IsSimpleParameterList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-issimpleparameterlist-1
    :END:

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If IsSimpleParameterList of
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     is false, return false.
  2. Return IsSimpleParameterList of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]].

  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]:[[file:statements-and-declarations.org::#BindingElement][BindingElement]]

  1. Return IsSimpleParameterList of
     [[file:statements-and-declarations.org::#BindingElement][BindingElement]].

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-3
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelLexicallyDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-3
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return the TopLevelLexicallyScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-12
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return TopLevelVarDeclaredNames of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-12
    :END:

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]

  1. Return the TopLevelVarScopedDeclarations of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]].

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Return the result of evaluating
     [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]].

*** Runtime Semantics: IteratorBindingInitialization
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-iteratorbindinginitialization-1
    :END:

  With parameters =iteratorRecord= and =environment=.

  Note 1

  When undefined is passed for =environment= it indicates that a
  [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
  used to assign the initialization value. This is the case for formal
  parameter lists of non-strict functions. In that case the formal
  parameter bindings are preinitialized in order to deal with the
  possibility of multiple parameters with the same name.

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]

  1. Perform ? IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     using =iteratorRecord= and =environment= as the arguments.
  2. Return the result of performing IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]
     using =iteratorRecord= and =environment= as the arguments.

  [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]],[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. Perform ? IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FormalParameterList][FormalParameterList]]
     using =iteratorRecord= and =environment= as the arguments.
  2. Return the result of performing IteratorBindingInitialization for
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]
     using =iteratorRecord= and =environment= as the arguments.

  [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]:[[file:statements-and-declarations.org::#BindingElement][BindingElement]]

  1.  If ContainsExpression of
      [[file:statements-and-declarations.org::#BindingElement][BindingElement]] is
      false, return the result of performing IteratorBindingInitialization
      for [[file:statements-and-declarations.org::#BindingElement][BindingElement]]
      using =iteratorRecord= and =environment= as the arguments.
  2.  Let =currentContext= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  3.  Let =originalEnv= be the VariableEnvironment of =currentContext=.
  4.  [[https://tc39.es/ecma262/#assert][Assert]]: The VariableEnvironment
      and LexicalEnvironment of =currentContext= are the same.
  5.  [[https://tc39.es/ecma262/#assert][Assert]]: If =environment= is not
      undefined, then =environment= and =originalEnv= are the same.
  6.  Let =paramVarEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=originalEnv=).
  7.  Set the VariableEnvironment of =currentContext= to =paramVarEnv=.
  8.  Set the LexicalEnvironment of =currentContext= to =paramVarEnv=.
  9.  Let =result= be IteratorBindingInitialization of
      [[file:statements-and-declarations.org::#BindingElement][BindingElement]]
      with arguments =iteratorRecord= and =environment=.
  10. Set the VariableEnvironment of =currentContext= to =originalEnv=.
  11. Set the LexicalEnvironment of =currentContext= to =originalEnv=.
  12. Return =result=.

  Note 2

  The new [[https://tc39.es/ecma262/#sec-environment-records][Environment
  Record]] created in step 6 is only used if the
  [[file:statements-and-declarations.org::#BindingElement][BindingElement]]
  contains a
  [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
  eval]].

  [[https://tc39.es/ecma262/#prod-FunctionRestParameter][FunctionRestParameter]]:[[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]

  1.  If ContainsExpression of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      is false, return the result of performing
      IteratorBindingInitialization for
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      using =iteratorRecord= and =environment= as the arguments.
  2.  Let =currentContext= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  3.  Let =originalEnv= be the VariableEnvironment of =currentContext=.
  4.  [[https://tc39.es/ecma262/#assert][Assert]]: The VariableEnvironment
      and LexicalEnvironment of =currentContext= are the same.
  5.  [[https://tc39.es/ecma262/#assert][Assert]]: If =environment= is not
      undefined, then =environment= and =originalEnv= are the same.
  6.  Let =paramVarEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=originalEnv=).
  7.  Set the VariableEnvironment of =currentContext= to =paramVarEnv=.
  8.  Set the LexicalEnvironment of =currentContext= to =paramVarEnv=.
  9.  Let =result= be IteratorBindingInitialization of
      [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
      with arguments =iteratorRecord= and =environment=.
  10. Set the VariableEnvironment of =currentContext= to =originalEnv=.
  11. Set the LexicalEnvironment of =currentContext= to =originalEnv=.
  12. Return =result=.

  Note 3

  The new [[https://tc39.es/ecma262/#sec-environment-records][Environment
  Record]] created in step 6 is only used if the
  [[https://tc39.es/ecma262/#prod-BindingRestElement][BindingRestElement]]
  contains a
  [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
  eval]].

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject
    :END:

  With parameter =scope=.

  [[#FunctionDeclaration][FunctionDeclaration]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =name= be StringValue of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  3. Perform
     [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=F=).
  4. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  5. Set =F=.[[SourceText]] to the source text matched by
     [[#FunctionDeclaration][FunctionDeclaration]].
  6. Return =F=.

  [[#FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  2. Perform
     [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=F=).
  3. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  4. Set =F=.[[SourceText]] to the source text matched by
     [[#FunctionDeclaration][FunctionDeclaration]].
  5. Return =F=.

  Note

  An anonymous
  [[#FunctionDeclaration][FunctionDeclaration]]
  can only occur as part of an =export default= declaration, and its
  function code is therefore always
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-1
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-57
    :END:

  [[#FunctionDeclaration][FunctionDeclaration]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  Note 1

  An alternative semantics is provided in
  [[https://tc39.es/ecma262/#sec-block-level-function-declarations-web-legacy-compatibility-semantics][B.3.3]].

  [[#FunctionDeclaration][FunctionDeclaration]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  3. Perform
     [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=closure=).
  4. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].
  5. Return =closure=.

  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]:function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  2.  Let =funcEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  5.  Perform =envRec=.CreateImmutableBinding(=name=, false).
  6.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
      non-lexical-this, =funcEnv=).
  7.  Perform
      [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=closure=).
  8.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].
  10. Perform =envRec=.InitializeBinding(=name=, =closure=).
  11. Return =closure=.

  Note 2

  The
  [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
  can be referenced from inside the
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]'s
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] to allow
  the function to call itself recursively. However, unlike in a
  [[#FunctionDeclaration][FunctionDeclaration]],
  the
  [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
  cannot be referenced from and does not affect the scope enclosing the
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]].

  Note 3

  A "prototype" property is automatically created for every function
  defined using a
  [[#FunctionDeclaration][FunctionDeclaration]]
  or
  [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
  to allow for the possibility that the function will be used as a
  [[https://tc39.es/ecma262/#constructor][constructor]].

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

** Arrow Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: arrow-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-56
    :END:

 [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]][In,
 Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][?Yield,
 ?Await][no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]][?In]
 [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][Yield,
 Await]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]][In]:[lookahead
 ≠
 {][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 ~Yield, ~Await]
 {[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
*** Supplemental Syntax
    :PROPERTIES:
    :CUSTOM_ID: supplemental-syntax-3
    :END:

 When the production\\
 [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]][?Yield,
 ?Await]\\
 is recognized the following grammar is used to refine the interpretation
 of
 [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:

 [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]][Yield,
 Await]:([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][?Yield,
 ?Await])
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-24
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]] is true and
    IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]] is
    false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]].

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]
    is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
    [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]].
  - All [[https://tc39.es/ecma262/#early-error][early error]] rules for
    [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]]
    and its derived productions also apply to CoveredFormalsList of
    [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-6
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  1. Let =formals= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
  2. Return the BoundNames of =formals=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-3
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. If =symbol= is not one of
     [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]],
     [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]],
     [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]], =super= or
     =this=, return false.
  2. If [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]
     Contains =symbol= is true, return true.
  3. Return [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]
     Contains =symbol=.

  Note

  Normally, Contains does not look inside most function forms. However,
  Contains is used to detect =new.target=, =this=, and =super= usage
  within an
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  1. Let =formals= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
  2. Return =formals= Contains =symbol=.

*** Static Semantics: ContainsExpression
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsexpression-2
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. Return false.

*** Static Semantics: ContainsUseStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsusestrict-1
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return false.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount-1
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. Return 1.

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-2
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. Return false.

*** Static Semantics: IsSimpleParameterList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-issimpleparameterlist-2
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

  1. Let =formals= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
  2. Return IsSimpleParameterList of =formals=.

*** Static Semantics: CoveredFormalsList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-coveredformalslist
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. Return this
     [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]].

  [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])
  ()
  (...[[file:expressions.org::#BindingIdentifier][BindingIdentifier]])
  (...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]])
  ([[https://tc39.es/ecma262/#prod-Expression][Expression]],...[[file:expressions.org::#BindingIdentifier][BindingIdentifier]])
  ([[https://tc39.es/ecma262/#prod-Expression][Expression]],...[[https://tc39.es/ecma262/#prod-BindingPattern][BindingPattern]])

  1. Return the
     [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]]
     that is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]]
     by
     [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-4
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-4
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-13
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-13
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Runtime Semantics: IteratorBindingInitialization
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-iteratorbindinginitialization-2
    :END:

  With parameters =iteratorRecord= and =environment=.

  Note

  When undefined is passed for =environment= it indicates that a
  [[https://tc39.es/ecma262/#sec-putvalue][PutValue]] operation should be
  used to assign the initialization value. This is the case for formal
  parameter lists of non-strict functions. In that case the formal
  parameter bindings are preinitialized in order to deal with the
  possibility of multiple parameters with the same name.

  [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. [[https://tc39.es/ecma262/#assert][Assert]]:
     =iteratorRecord=.[[Done]] is false.
  2. Let =next= be
     [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
  3. If =next= is an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], set =iteratorRecord=.[[Done]] to true.
  4. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
  5. If =next= is false, set =iteratorRecord=.[[Done]] to true.
  6. Else,

     1. Let =v= be
        [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
     2. If =v= is an
        [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
        completion]], set =iteratorRecord=.[[Done]] to true.
     3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=v=).

  7. If =iteratorRecord=.[[Done]] is true, let =v= be undefined.
  8. Return the result of performing BindingInitialization for
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
     using =v= and =environment= as the arguments.

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-1
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
  3. Let =exprValue= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  4. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =exprValue=, [[Target]]: empty }.

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-2
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-58
    :END:

  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]:[[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]]=>[[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =parameters= be CoveredFormalsList of
     [[https://tc39.es/ecma262/#prod-ArrowParameters][ArrowParameters]].
  3. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     =parameters=,
     [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]],
     lexical-this, =scope=).
  4. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].
  5. Return =closure=.

  Note

  An [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] does
  not define local bindings for =arguments=, =super=, =this=, or
  =new.target=. Any reference to =arguments=, =super=, =this=, or
  =new.target= within an
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] must
  resolve to a binding in a lexically enclosing environment. Typically
  this will be the Function Environment of an immediately enclosing
  function. Even though an
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] may
  contain references to =super=, the
  [[https://tc39.es/ecma262/#function-object][function object]] created in
  step 4 is not made into a method by performing
  [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]]. An
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] that
  references =super= is always contained within a
  non-[[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]] and
  the necessary state to implement =super= is accessible via the =scope=
  that is captured by the
  [[https://tc39.es/ecma262/#function-object][function object]] of the
  [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]].

** Method Definitions
   :PROPERTIES:
   :CUSTOM_ID: method-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-57
    :END:

 [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][~Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]][?Yield,
 ?Await]
 get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 ~Await]}
 [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]][~Yield,
 ~Await]
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-25
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]].

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  - It is a Syntax Error if BoundNames of
    [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
    contains any duplicate elements.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]].

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-1
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount-2
    :END:

  [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]:[[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]]

  1. If HasInitializer of
     [[https://tc39.es/ecma262/#prod-FormalParameter][FormalParameter]] is
     true, return 0.
  2. Return 1.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-1
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Static Semantics: SpecialMethod
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-specialmethod
    :END:

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]
  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]
  get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}
  set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Return true.

*** Runtime Semantics: DefineMethod
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-definemethod
    :END:

  With parameter =object= and optional parameter =functionPrototype=.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =propKey= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3. Let =scope= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  4. If =functionPrototype= is present as a parameter, then

     1. Let =prototype= be =functionPrototype=.

  5. Else,

     1. Let =prototype= be
        [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

  6. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](=prototype=,
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  7. Perform
     [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
     =object=).
  8. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]].
  9. Return the
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
     { [[Key]]: =propKey=, [[Closure]]: =closure= }.

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-1
    :END:

  With parameters =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =methodDef= be ? DefineMethod of
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
     with argument =object=.
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=methodDef=.[[Closure]],
     =methodDef=.[[Key]]).
  3. Let =desc= be the PropertyDescriptor { [[Value]]:
     =methodDef=.[[Closure]], [[Writable]]: true, [[Enumerable]]:
     =enumerable=, [[Configurable]]: true }.
  4. Return
     ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
     =methodDef=.[[Key]], =desc=).

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:get[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]](){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1.  Let =propKey= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  4.  Let =formalParameterList= be an instance of the production
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]:[empty]
      .
  5.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
      =formalParameterList=,
      [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
      non-lexical-this, =scope=).
  6.  Perform
      [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
      =object=).
  7.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =propKey=, "get").
  8.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]].
  9.  Let =desc= be the PropertyDescriptor { [[Get]]: =closure=,
      [[Enumerable]]: =enumerable=, [[Configurable]]: true }.
  10. Return
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
      =propKey=, =desc=).

  [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]:set[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]]){[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]}

  1. Let =propKey= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3. Let =scope= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  4. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]],
     [[https://tc39.es/ecma262/#prod-PropertySetParameterList][PropertySetParameterList]],
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     non-lexical-this, =scope=).
  5. Perform
     [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
     =object=).
  6. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =propKey=, "set").
  7. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]].
  8. Let =desc= be the PropertyDescriptor { [[Set]]: =closure=,
     [[Enumerable]]: =enumerable=, [[Configurable]]: true }.
  9. Return
     ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
     =propKey=, =desc=).

** Generator Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: generator-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-58
    :END:

 [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]][Yield,
 Await]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]][Yield,
 Await,
 Default]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [+Default]function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][+Yield,
 ~Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 ~Await]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][+Yield,
 ~Await]
 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]][In,
 Await]:yield yield[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 +Yield, ?Await] yield[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]*[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 +Yield, ?Await] Note 1

 The syntactic context immediately following =yield= requires use of the
 [[https://tc39.es/ecma262/#prod-InputElementRegExpOrTemplateTail][InputElementRegExpOrTemplateTail]]
 lexical goal.

 Note 2

 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
 cannot be used within the
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] of
 a generator function because any expressions that are part of
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] are
 evaluated before the resulting generator object is in a resumable state.

 Note 3

 [[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][Abstract
 operations]] relating to generator objects are defined in
 [[https://tc39.es/ecma262/#sec-generator-abstract-operations][25.4.3]].

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-26
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]].

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]] is true
    and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-7
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return the BoundNames of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-2
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-4
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return false.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into function definitions.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper-1
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-3
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-2
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-17
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return true.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-2
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-2
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Let =G= be
     ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=functionObject=,
     "%Generator.prototype%", « [[GeneratorState]], [[GeneratorContext]]
     »).
  3. Perform
     [[https://tc39.es/ecma262/#sec-generatorstart][GeneratorStart]](=G=,
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]).
  4. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =G=, [[Target]]: empty }.

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject-1
    :END:

  With parameter =scope=.

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =name= be StringValue of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  4. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  6. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]].
  7. Return =F=.

  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     non-lexical-this, =scope=).
  2. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  3. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  4. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  5. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]].
  6. Return =F=.

  Note

  An anonymous
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]]
  can only occur as part of an =export default= declaration, and its
  function code is therefore always
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-2
    :END:

  With parameters =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]]:*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1.  Let =propKey= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  4.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
      [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
      [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
      non-lexical-this, =scope=).
  5.  Perform
      [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
      =object=).
  6.  Let =prototype= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  7.  Perform
      [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  8.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =propKey=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-GeneratorMethod][GeneratorMethod]].
  10. Let =desc= be the PropertyDescriptor { [[Value]]: =closure=,
      [[Writable]]: true, [[Enumerable]]: =enumerable=, [[Configurable]]:
      true }.
  11. Return
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
      =propKey=, =desc=).

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-3
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-59
    :END:

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  4. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].
  6. Return =closure=.

  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]:function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]]}

  1.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  2.  Let =funcEnv= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  5.  Perform =envRec=.CreateImmutableBinding(=name=, false).
  6.  Let =closure= be
      [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-properties-of-the-generatorfunction-prototype-object][%Generator%]],
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
      non-lexical-this, =funcEnv=).
  7.  Let =prototype= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%Generator.prototype%).
  8.  Perform
      [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  9.  Perform
      [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  10. Perform =envRec=.InitializeBinding(=name=, =closure=).
  11. Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].
  12. Return =closure=.

  Note

  The
  [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
  can be referenced from inside the
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]'s
  [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] to allow
  the generator code to call itself recursively. However, unlike in a
  [[https://tc39.es/ecma262/#prod-GeneratorDeclaration][GeneratorDeclaration]],
  the
  [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
  in a
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
  cannot be referenced from and does not affect the scope enclosing the
  [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]].

  [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]:yield

  1. Let =generatorKind= be
     ! [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]().
  2. If =generatorKind= is async, then return
     ? [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](undefined).
  3. Otherwise, return
     ? [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]]([[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](undefined,
     false)).

  [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]:yield[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Let =generatorKind= be
     ! [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]().
  2. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
  3. Let =value= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  4. If =generatorKind= is async, then return
     ? [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](=value=).
  5. Otherwise, return
     ? [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]]([[https://tc39.es/ecma262/#sec-createiterresultobject][CreateIterResultObject]](=value=,
     false)).

  [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]:yield*[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Let =generatorKind= be
     ! [[https://tc39.es/ecma262/#sec-getgeneratorkind][GetGeneratorKind]]().
  2. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]].
  3. Let =value= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  4. Let =iteratorRecord= be
     ? [[https://tc39.es/ecma262/#sec-getiterator][GetIterator]](=value=,
     =generatorKind=).
  5. Let =iterator= be =iteratorRecord=.[[Iterator]].
  6. Let =received= be
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).
  7. Repeat,

     1. If =received=.[[Type]] is normal, then

        1. Let =innerResult= be
           ? [[https://tc39.es/ecma262/#sec-call][Call]](=iteratorRecord=.[[NextMethod]],
           =iteratorRecord=.[[Iterator]], « =received=.[[Value]] »).
        2. If =generatorKind= is async, then set =innerResult= to
           ? [[https://tc39.es/ecma262/#await][Await]](=innerResult=).
        3. If
           [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerResult=)
           is not Object, throw a TypeError exception.
        4. Let =done= be
           ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=innerResult=).
        5. If =done= is true, then

           1. Return
              ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=).

        6. If =generatorKind= is async, then set =received= to
           [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](?
           [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=)).
        7. Else, set =received= to
           [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]](=innerResult=).

     2. Else if =received=.[[Type]] is throw, then

        1. Let =throw= be
           ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=iterator=,
           "throw").
        2. If =throw= is not undefined, then

           1. Let =innerResult= be
              ? [[https://tc39.es/ecma262/#sec-call][Call]](=throw=,
              =iterator=, « =received=.[[Value]] »).
           2. If =generatorKind= is async, then set =innerResult= to
              ? [[https://tc39.es/ecma262/#await][Await]](=innerResult=).
           3. NOTE: Exceptions from the inner iterator =throw= method are
              propagated. Normal completions from an inner =throw= method
              are processed similarly to an inner =next=.
           4. If
              [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerResult=)
              is not Object, throw a TypeError exception.
           5. Let =done= be
              ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=innerResult=).
           6. If =done= is true, then

              1. Return
                 ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=).

           7. If =generatorKind= is async, then set =received= to
              [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](?
              [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerResult=)).
           8. Else, set =received= to
              [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]](=innerResult=).

        3. Else,

           1. NOTE: If =iterator= does not have a =throw= method, this
              throw is going to terminate the =yield*= loop. But first we
              need to give =iterator= a chance to clean up.
           2. Let =closeCompletion= be
              [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
              { [[Type]]: normal, [[Value]]: empty, [[Target]]: empty }.
           3. If =generatorKind= is async, perform
              ? [[https://tc39.es/ecma262/#sec-asynciteratorclose][AsyncIteratorClose]](=iteratorRecord=,
              =closeCompletion=).
           4. Else, perform
              ? [[https://tc39.es/ecma262/#sec-iteratorclose][IteratorClose]](=iteratorRecord=,
              =closeCompletion=).
           5. NOTE: The next step throws a TypeError to indicate that
              there was a =yield*= protocol violation: =iterator= does not
              have a =throw= method.
           6. Throw a TypeError exception.

     3. Else,

        1.  [[https://tc39.es/ecma262/#assert][Assert]]:
            =received=.[[Type]] is return.
        2.  Let =return= be
            ? [[https://tc39.es/ecma262/#sec-getmethod][GetMethod]](=iterator=,
            "return").
        3.  If =return= is undefined, then

            1. If =generatorKind= is async, then set =received=.[[Value]]
               to
               ? [[https://tc39.es/ecma262/#await][Await]](=received=.[[Value]]).
            2. Return
               [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=received=).

        4.  Let =innerReturnResult= be
            ? [[https://tc39.es/ecma262/#sec-call][Call]](=return=,
            =iterator=, « =received=.[[Value]] »).
        5.  If =generatorKind= is async, then set =innerReturnResult= to
            ? [[https://tc39.es/ecma262/#await][Await]](=innerReturnResult=).
        6.  If
            [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=innerReturnResult=)
            is not Object, throw a TypeError exception.
        7.  Let =done= be
            ? [[https://tc39.es/ecma262/#sec-iteratorcomplete][IteratorComplete]](=innerReturnResult=).
        8.  If =done= is true, then

            1. Let =value= be
               ? [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerReturnResult=).
            2. Return
               [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
               { [[Type]]: return, [[Value]]: =value=, [[Target]]: empty
               }.

        9.  If =generatorKind= is async, then set =received= to
            [[https://tc39.es/ecma262/#sec-asyncgeneratoryield][AsyncGeneratorYield]](?
            [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=innerReturnResult=)).
        10. Else, set =received= to
            [[https://tc39.es/ecma262/#sec-generatoryield][GeneratorYield]](=innerReturnResult=).

** Async Generator Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: async-generator-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-59
    :END:

 [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]][Yield,
 Await]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]][Yield,
 Await, Default]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [+Default]async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][+Yield,
 +Await]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][+Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][+Yield,
 +Await] Note 1

 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] and
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]
 cannot be used within the
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] of
 an async generator function because any expressions that are part of
 [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]] are
 evaluated before the resulting async generator object is in a resumable
 state.

 Note 2

 [[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][Abstract
 operations]] relating to async generator objects are defined in
 [[https://tc39.es/ecma262/#sec-asyncgenerator-abstract-operations][25.5.3]].

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-27
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]
    is true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]].

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-8
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return the BoundNames of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-3
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-5
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return false.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into function definitions.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper-2
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-4
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-18
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return true.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-3
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]

  1. Perform
     ? [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  2. Let =generator= be
     ? [[https://tc39.es/ecma262/#sec-ordinarycreatefromconstructor][OrdinaryCreateFromConstructor]](=functionObject=,
     "%AsyncGenerator.prototype%", « [[AsyncGeneratorState]],
     [[AsyncGeneratorContext]], [[AsyncGeneratorQueue]] »).
  3. Perform
     ! [[https://tc39.es/ecma262/#sec-asyncgeneratorstart][AsyncGeneratorStart]](=generator=,
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]).
  4. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =generator=, [[Target]]: empty }.

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject-2
    :END:

  With parameter =scope=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =name= be StringValue of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  4. Perform
     ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  6. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
  7. Return =F=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =F= be
     [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     non-lexical-this, =scope=).
  2. Let =prototype= be
     [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  3. Perform
     [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=F=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  4. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  5. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
  6. Return =F=.

  Note

  An anonymous
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]]
  can only occur as part of an =export default= declaration.

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-3
    :END:

  With parameter =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]]:async*[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1.  Let =propKey= be the result of evaluating
      [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2.  [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  4.  Let =closure= be
      ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
      [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
      non-lexical-this, =scope=).
  5.  Perform
      ! [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
      =object=).
  6.  Let =prototype= be
      ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  7.  Perform
      ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  8.  Perform
      ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =propKey=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorMethod][AsyncGeneratorMethod]].
  10. Let =desc= be PropertyDescriptor { [[Value]]: =closure=,
      [[Writable]]: true, [[Enumerable]]: =enumerable=, [[Configurable]]:
      true }.
  11. Return
      ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
      =propKey=, =desc=).

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-4
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-60
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     non-lexical-this, =scope=).
  3. Let =prototype= be
     ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  4. Perform
     ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
     "prototype", PropertyDescriptor { [[Value]]: =prototype=,
     [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
     }).
  5. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
  6. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]:asyncfunction*[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]}

  1.  Let =scope= be the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment.
  2.  Let =funcEnv= be
      ! [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  5.  Perform ! =envRec=.CreateImmutableBinding(=name=).
  6.  Let =closure= be
      ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]]([[https://tc39.es/ecma262/#sec-asyncgeneratorfunction-prototype][%AsyncGenerator%]],
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
      non-lexical-this, =funcEnv=).
  7.  Let =prototype= be
      ! [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](%AsyncGenerator.prototype%).
  8.  Perform
      ! [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=closure=,
      "prototype", PropertyDescriptor { [[Value]]: =prototype=,
      [[Writable]]: true, [[Enumerable]]: false, [[Configurable]]: false
      }).
  9.  Perform
      ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  10. Perform ! =envRec=.InitializeBinding(=name=, =closure=).
  11. Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
  12. Return =closure=.

  Note

  The
  [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
  in an
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
  can be referenced from inside the
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]'s
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]]
  to allow the generator code to call itself recursively. However, unlike
  in an
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
  the
  [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
  in an
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
  cannot be referenced from and does not affect the scope enclosing the
  [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].

** Class Definitions
   :PROPERTIES:
   :CUSTOM_ID: class-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-60
    :END:

 [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]][Yield,
 Await,
 Default]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
 ?Await]
 [+Default]class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]][Yield,
 Await]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]opt[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]][?Yield,
 ?Await]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]][?Yield,
 ?Await]opt}
 [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]][Yield,
 Await]:extends[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][?Yield,
 ?Await] [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][?Yield,
 ?Await]
 [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
 ?Await]
 static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][?Yield,
 ?Await] ; Note

 A class definition is always
 [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]].

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-28
    :END:

  [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]}

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]] is not
    present and the following algorithm evaluates to true:

    1. Let =constructor= be ConstructorMethod of
       [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]].
    2. If =constructor= is empty, return false.
    3. Return HasDirectSuper of =constructor=.

  [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]

  - It is a Syntax Error if PrototypePropertyNameList of
    [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]
    contains more than one occurrence of "constructor".

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  - It is a Syntax Error if PropName of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is not "constructor" and HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is true.
  - It is a Syntax Error if PropName of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is "constructor" and SpecialMethod of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is true.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is true.
  - It is a Syntax Error if PropName of
    [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
    is "prototype".

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-9
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return the BoundNames of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return « "*default*" ».

*** Static Semantics: ConstructorMethod
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-constructormethod
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return empty.
  2. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return empty.
  3. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is not
     "constructor", return empty.
  4. Return [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =head= be ConstructorMethod of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]].
  2. If =head= is not empty, return =head=.
  3. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return empty.
  4. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return empty.
  5. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is not
     "constructor", return empty.
  6. Return [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  Note

  Early Error rules ensure that there is only one method definition named
  "constructor" and that it is not an
  [[https://tc39.es/ecma262/#sec-object-type][accessor property]] or
  generator definition.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-6
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]}

  1. If =symbol= is
     [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]], return true.
  2. If =symbol= is
     [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]], then

     1. If [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]
        is present, return true; otherwise return false.

  3. Let =inHeritage= be
     [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]
     Contains =symbol=.
  4. If =inHeritage= is true, return true.
  5. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]] with argument
     =symbol=.

  Note

  Static semantic rules that depend upon substructure generally do not
  look into class bodies except for
  [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]s.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-4
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =inList= be ComputedPropertyContains of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]
     with argument =symbol=.
  2. If =inList= is true, return true.
  3. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] with
     argument =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
     with argument =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]
     with argument =symbol=.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:;

  1. Return false.

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-5
    :END:

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-4
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]
  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-19
    :END:

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Return true.

*** Static Semantics: IsStatic
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isstatic
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return false.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:static[[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:;

  1. Return false.

*** Static Semantics: NonConstructorMethodDefinitions
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-nonconstructormethoddefinitions
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is false
     and PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     "constructor", return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  3. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =list= be NonConstructorMethodDefinitions of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]].
  2. If [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:; ,
     return =list=.
  3. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is false
     and PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     "constructor", return =list=.
  4. Append [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]
     to the end of =list=.
  5. Return =list=.

*** Static Semantics: PrototypePropertyNameList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-prototypepropertynamelist
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     empty, return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  3. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]].

  [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]]:[[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]][[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]

  1. Let =list= be PrototypePropertyNameList of
     [[https://tc39.es/ecma262/#prod-ClassElementList][ClassElementList]].
  2. If PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is
     empty, return =list=.
  3. If IsStatic of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] is true,
     return =list=.
  4. Append PropName of
     [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] to the
     end of =list=.
  5. Return =list=.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-4
    :END:

  [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]]:;

  1. Return empty.

*** Semantics: ClassDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-classdefinitionevaluation
    :END:

  With parameters =classBinding= and =className=.

  [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]:[[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt{[[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]opt}

  1.  Let =lex= be the LexicalEnvironment of the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  2.  Let =classScope= be
      [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=lex=).
  3.  Let =classScopeEnvRec= be =classScope='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  If =classBinding= is not undefined, then

      1. Perform =classScopeEnvRec=.CreateImmutableBinding(=classBinding=,
         true).

  5.  If [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt
      is not present, then

      1. Let =protoParent= be %Object.prototype%.
      2. Let =constructorParent= be
         [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

  6.  Else,

      1. Set the
         [[https://tc39.es/ecma262/#running-execution-context][running
         execution context]]'s LexicalEnvironment to =classScope=.
      2. Let =superclassRef= be the result of evaluating
         [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]].
      3. Set the
         [[https://tc39.es/ecma262/#running-execution-context][running
         execution context]]'s LexicalEnvironment to =lex=.
      4. Let =superclass= be
         ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=superclassRef=).
      5. If =superclass= is null, then

         1. Let =protoParent= be null.
         2. Let =constructorParent= be
            [[https://tc39.es/ecma262/#sec-properties-of-the-function-prototype-object][%Function.prototype%]].

      6. Else if
         [[https://tc39.es/ecma262/#sec-isconstructor][IsConstructor]](=superclass=)
         is false, throw a TypeError exception.
      7. Else,

         1. Let =protoParent= be
            ? [[https://tc39.es/ecma262/#sec-get-o-p][Get]](=superclass=,
            "prototype").
         2. If
            [[https://tc39.es/ecma262/#sec-ecmascript-data-types-and-values][Type]](=protoParent=)
            is neither Object nor Null, throw a TypeError exception.
         3. Let =constructorParent= be =superclass=.

  7.  Let =proto= be
      [[https://tc39.es/ecma262/#sec-objectcreate][ObjectCreate]](=protoParent=).
  8.  If [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]opt is not
      present, let =constructor= be empty.
  9.  Else, let =constructor= be ConstructorMethod of
      [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]].
  10. If =constructor= is empty, then

      1. If
         [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt
         is present, then

         1. Set =constructor= to the result of parsing the source text

            #+BEGIN_EXAMPLE
              constructor(...args) { super(...args); }
            #+END_EXAMPLE

            using the syntactic grammar with the
            [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
            symbol]]
            [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][~Yield,
            ~Await].

      2. Else,

         1. Set =constructor= to the result of parsing the source text

            #+BEGIN_EXAMPLE
              constructor() {}
            #+END_EXAMPLE

            using the syntactic grammar with the
            [[https://tc39.es/ecma262/#sec-context-free-grammars][goal
            symbol]]
            [[https://tc39.es/ecma262/#prod-MethodDefinition][MethodDefinition]][~Yield,
            ~Await].

  11. Set the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =classScope=.
  12. Let =constructorInfo= be ! DefineMethod of =constructor= with
      arguments =proto= and =constructorParent=.
  13. Let =F= be =constructorInfo=.[[Closure]].
  14. Perform
      [[https://tc39.es/ecma262/#sec-makeconstructor][MakeConstructor]](=F=,
      false, =proto=).
  15. If [[https://tc39.es/ecma262/#prod-ClassHeritage][ClassHeritage]]opt
      is present, set =F=.[[ConstructorKind]] to derived.
  16. Perform
      [[https://tc39.es/ecma262/#sec-makeclassconstructor][MakeClassConstructor]](=F=).
  17. If =className= is not undefined, then

      1. Perform
         [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
         =className=).

  18. Perform
      [[https://tc39.es/ecma262/#sec-createmethodproperty][CreateMethodProperty]](=proto=,
      "constructor", =F=).
  19. If [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]]opt is not
      present, let =methods= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  20. Else, let =methods= be NonConstructorMethodDefinitions of
      [[https://tc39.es/ecma262/#prod-ClassBody][ClassBody]].
  21. For each
      [[https://tc39.es/ecma262/#prod-ClassElement][ClassElement]] =m= in
      order from =methods=, do

      1. If IsStatic of =m= is false, then

         1. Let =status= be PropertyDefinitionEvaluation of =m= with
            arguments =proto= and false.

      2. Else,

         1. Let =status= be PropertyDefinitionEvaluation of =m= with
            arguments =F= and false.

      3. If =status= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], then

         1. Set the
            [[https://tc39.es/ecma262/#running-execution-context][running
            execution context]]'s LexicalEnvironment to =lex=.
         2. Return
            [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=status=).

  22. Set the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]]'s LexicalEnvironment to =lex=.
  23. If =classBinding= is not undefined, then

      1. Perform =classScopeEnvRec=.InitializeBinding(=classBinding=,
         =F=).

  24. Return =F=.

*** Semantics: BindingClassDeclarationEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-bindingclassdeclarationevaluation
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Let =className= be StringValue of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  2. Let =value= be ? ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     =className= and =className=.
  3. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  4. Let =env= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  5. Perform
     ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]](=className=,
     =value=, =env=).
  6. Return =value=.

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Let =value= be ? ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     undefined and "default".
  2. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  3. Return =value=.

  Note

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]
  only occurs as part of an
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
  and establishing its binding is handled as part of the evaluation action
  for that production. See
  [[https://tc39.es/ecma262/#sec-exports-runtime-semantics-evaluation][15.2.3.11]].

*** Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-5
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Let =value= be the result of ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     undefined and =name=.
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=value=).
  3. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]].
  4. Return =value=.

*** Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-61
    :END:

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. Perform ? BindingClassDeclarationEvaluation of this
     [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]].
  2. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  Note

  [[https://tc39.es/ecma262/#prod-ClassDeclaration][ClassDeclaration]]:class[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]
  only occurs as part of an
  [[https://tc39.es/ecma262/#prod-ExportDeclaration][ExportDeclaration]]
  and is never directly evaluated.

  [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]:class[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt[[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]]

  1. If
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]opt
     is not present, let =className= be undefined.
  2. Else, let =className= be StringValue of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  3. Let =value= be ? ClassDefinitionEvaluation of
     [[https://tc39.es/ecma262/#prod-ClassTail][ClassTail]] with arguments
     =className= and =className=.
  4. Set =value=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]].
  5. Return =value=.

** Async Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: async-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-61
    :END:

 [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]][Yield,
 Await, Default]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [+Default]async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]function[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][~Yield,
 +Await]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]][Yield,
 Await]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]][?Yield,
 ?Await]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]][~Yield,
 +Await]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]][~Yield,
 +Await]
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]][Yield]:await[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]][?Yield,
 +Await] Note 1

 =await= is parsed as an
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] when
 the _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is present.
 The _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is present
 in the following contexts:

 - In an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]].
 - In the
   [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
   of an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
   or
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
   [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] in
   this position is a Syntax error via
   [[https://tc39.es/ecma262/#sec-static-semantic-rules][static
   semantics]].

 When [[https://tc39.es/ecma262/#prod-Module][Module]] is the syntactic
 [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]] and
 the _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is absent,
 =await= is parsed as a
 [[https://tc39.es/ecma262/#sec-keywords-and-reserved-words][keyword]]
 and will be a Syntax error. When
 [[https://tc39.es/ecma262/#prod-Script][Script]] is the syntactic
 [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]],
 =await= may be parsed as an identifier when the
 _{[[[https://tc39.es/ecma262/#await][Await]]]} parameter is absent. This
 includes the following contexts:

 - Anywhere outside of an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
   or
   [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
   of an
   [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]],
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
   or
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].
 - In the
   [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
   of a
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]],
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]],
   or
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]].

 Note 2

 Unlike
 [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]], it
 is a Syntax Error to omit the operand of an
 [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]. You
 must await something.

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-29
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    is false.
  - It is a Syntax Error if HasDirectSuper of
    [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]] is true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]].

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is false.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - If the source code matching
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], the Early Error rules for
    [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]:[[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    are applied.
  - If
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is present and the source code matching
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode
    code]], it is a Syntax Error if the StringValue of
    [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
    is "eval" or "arguments".
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]].
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    Contains
    [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
    Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
    true.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-10
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return the BoundNames of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return « "*default*" ».

  Note

  "*default*" is used within this specification as a synthetic name for
  hoistable anonymous functions that are defined using export
  declarations.

*** Static Semantics: ComputedPropertyContains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-computedpropertycontains-5
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return the result of ComputedPropertyContains for
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]] with
     argument =symbol=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-7
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return false.

*** Static Semantics: HasDirectSuper
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasdirectsuper-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. If
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]] is
     true, return true.
  2. Return
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
     Contains [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]].

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-6
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return true.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return false.

*** Static Semantics: IsFunctionDefinition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isfunctiondefinition-20
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return true.

*** Static Semantics: PropName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-propname-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return PropName of
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].

*** Runtime Semantics: InstantiateFunctionObject
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-instantiatefunctionobject-3
    :END:

  With parameter =scope=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =name= be StringValue of
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  2. Let =F= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  3. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     =name=).
  4. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]].
  5. Return =F=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =F= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  2. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=F=,
     "default").
  3. Set =F=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]].
  4. Return =F=.

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-4
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]:[[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]

  1. Let =promiseCapability= be
     ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
  2. Let =declResult= be
     [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  3. If =declResult= is not an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], then

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-async-functions-abstract-operations-async-function-start][AsyncFunctionStart]](=promiseCapability=,
        [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]]).

  4. Else,

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
        undefined, « =declResult=.[[Value]] »).

  5. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =promiseCapability=.[[Promise]],
     [[Target]]: empty }.

*** Runtime Semantics: PropertyDefinitionEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-propertydefinitionevaluation-4
    :END:

  With parameters =object= and =enumerable=.

  [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]]:async[[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]]([[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =propKey= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-PropertyName][PropertyName]].
  2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=propKey=).
  3. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  4. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-UniqueFormalParameters][UniqueFormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  5. Perform
     ! [[https://tc39.es/ecma262/#sec-makemethod][MakeMethod]](=closure=,
     =object=).
  6. Perform
     ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =propKey=).
  7. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncMethod][AsyncMethod]].
  8. Let =desc= be the PropertyDescriptor { [[Value]]: =closure=,
     [[Writable]]: true, [[Enumerable]]: =enumerable=, [[Configurable]]:
     true }.
  9. Return
     ? [[https://tc39.es/ecma262/#sec-definepropertyorthrow][DefinePropertyOrThrow]](=object=,
     =propKey=, =desc=).

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-6
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-62
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-AsyncFunctionDeclaration][AsyncFunctionDeclaration]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     non-lexical-this, =scope=).
  3. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]].
  4. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]:asyncfunction[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]([[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]]){[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1.  Let =scope= be the LexicalEnvironment of the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  2.  Let =funcEnv= be
      ! [[https://tc39.es/ecma262/#sec-newdeclarativeenvironment][NewDeclarativeEnvironment]](=scope=).
  3.  Let =envRec= be =funcEnv='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  4.  Let =name= be StringValue of
      [[file:expressions.org::#BindingIdentifier][BindingIdentifier]].
  5.  Perform ! =envRec=.CreateImmutableBinding(=name=).
  6.  Let =closure= be
      ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
      [[https://tc39.es/ecma262/#prod-FormalParameters][FormalParameters]],
      [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
      non-lexical-this, =funcEnv=).
  7.  Perform
      ! [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
      =name=).
  8.  Perform ! =envRec=.InitializeBinding(=name=, =closure=).
  9.  Set =closure=.[[SourceText]] to the source text matched by
      [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]].
  10. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]:await[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]

  1. Let =exprRef= be the result of evaluating
     [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]].
  2. Let =value= be
     ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=exprRef=).
  3. Return ? [[https://tc39.es/ecma262/#await][Await]](=value=).

** Async Arrow Function Definitions
   :PROPERTIES:
   :CUSTOM_ID: async-arrow-function-definitions
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-62
    :END:

 [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]][In,
 Yield, Await]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][?Yield][no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][?In]
 [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][?Yield,
 ?Await][no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][?In]
 [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]][In]:[lookahead
 ≠
 {][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]][?In,
 ~Yield, +Await]
 {[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}
 [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][Yield]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
 +Await]
 [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]][Yield,
 Await]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][?Yield,
 ?Await][[https://tc39.es/ecma262/#prod-Arguments][Arguments]][?Yield,
 ?Await]
*** Supplemental Syntax
    :PROPERTIES:
    :CUSTOM_ID: supplemental-syntax-4
    :END:

 When processing an instance of the production
 [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
 the interpretation of
 [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
 is refined using the following grammar:

 [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]]:async[no
 [[https://tc39.es/ecma262/#prod-LineTerminator][LineTerminator]]
 here][[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]][~Yield,
 +Await]
*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-30
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]].

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    Contains
    [[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    Contains
    [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]] is
    true.
  - It is a Syntax Error if
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    is not [[https://tc39.es/ecma262/#sec-syntactic-grammar][covering]] an
    [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]].
  - It is a Syntax Error if any element of the BoundNames of
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    also occurs in the LexicallyDeclaredNames of
    [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]].
  - It is a Syntax Error if ContainsUseStrict of
    [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
    is true and IsSimpleParameterList of
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
    is false.
  - All Early Error rules for
    [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]] and
    its derived productions apply to CoveredAsyncArrowHead of
    [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].

*** Static Semantics: CoveredAsyncArrowHead
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-coveredasyncarrowhead
    :END:

  [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

  1. Return the
     [[https://tc39.es/ecma262/#prod-AsyncArrowHead][AsyncArrowHead]] that
     is [[https://tc39.es/ecma262/#sec-syntactic-grammar][covered]] by
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-11
    :END:

  [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

  1. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  2. Return the BoundNames of =head=.

*** Static Semantics: Contains
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-contains-8
    :END:

  With parameter =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. If =symbol= is not one of
     [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]],
     [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]],
     [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]], =super=, or
     =this=, return false.
  2. Return
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
     Contains =symbol=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. If =symbol= is not one of
     [[https://tc39.es/ecma262/#prod-NewTarget][NewTarget]],
     [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]],
     [[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]], =super=, or
     =this=, return false.
  2. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  3. If =head= Contains =symbol= is true, return true.
  4. Return
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
     Contains =symbol=.

  Note

  Normally, Contains does not look inside most function forms. However,
  Contains is used to detect =new.target=, =this=, and =super= usage
  within an AsyncArrowFunction.

*** Static Semantics: ContainsExpression
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsexpression-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. Return false.

*** Static Semantics: ContainsUseStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-containsusestrict-2
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return false.

*** Static Semantics: ExpectedArgumentCount
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-expectedargumentcount-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. Return 1.

*** Static Semantics: HasName
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hasname-7
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Return false.

*** Static Semantics: IsSimpleParameterList
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-issimpleparameterlist-3
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]][Yield]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]][?Yield,
  +Await]

  1. Return true.

  [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]

  1. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  2. Return IsSimpleParameterList of =head=.

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-5
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-14
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-14
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Runtime Semantics: IteratorBindingInitialization
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-iteratorbindinginitialization-3
    :END:

  With parameters =iteratorRecord= and =environment=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]:[[file:expressions.org::#BindingIdentifier][BindingIdentifier]]

  1. [[https://tc39.es/ecma262/#assert][Assert]]:
     =iteratorRecord=.[[Done]] is false.
  2. Let =next= be
     [[https://tc39.es/ecma262/#sec-iteratorstep][IteratorStep]](=iteratorRecord=).
  3. If =next= is an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], set =iteratorRecord=.[[Done]] to true.
  4. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=next=).
  5. If =next= is false, set =iteratorRecord=.[[Done]] to true.
  6. Else,

     1. Let =v= be
        [[https://tc39.es/ecma262/#sec-iteratorvalue][IteratorValue]](=next=).
     2. If =v= is an
        [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
        completion]], set =iteratorRecord=.[[Done]] to true.
     3. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=v=).

  7. If =iteratorRecord=.[[Done]] is true, let =v= be undefined.
  8. Return the result of performing BindingInitialization for
     [[file:expressions.org::#BindingIdentifier][BindingIdentifier]]
     using =v= and =environment= as the arguments.

*** Runtime Semantics: EvaluateBody
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluatebody-5
    :END:

  With parameters =functionObject= and
  [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
  =argumentsList=.

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Let =promiseCapability= be
     ! [[https://tc39.es/ecma262/#sec-newpromisecapability][NewPromiseCapability]]([[https://tc39.es/ecma262/#sec-promise-constructor][%Promise%]]).
  2. Let =declResult= be
     [[https://tc39.es/ecma262/#sec-functiondeclarationinstantiation][FunctionDeclarationInstantiation]](=functionObject=,
     =argumentsList=).
  3. If =declResult= is not an
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
     completion]], then

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-async-functions-abstract-operations-async-function-start][AsyncFunctionStart]](=promiseCapability=,
        [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]).

  4. Else,

     1. Perform
        ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
        undefined, « =declResult=.[[Value]] »).

  5. Return
     [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]
     { [[Type]]: return, [[Value]]: =promiseCapability=.[[Promise]],
     [[Target]]: empty }.

  [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]:{[[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]}

  1. Return the result of EvaluateBody of
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]]
     passing =functionObject= and =argumentsList= as the arguments.

*** Runtime Semantics: NamedEvaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-namedevaluation-7
    :END:

  With parameter =name=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Let =closure= be the result of evaluating this
     [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]].
  2. Perform
     [[https://tc39.es/ecma262/#sec-setfunctionname][SetFunctionName]](=closure=,
     =name=).
  3. Return =closure=.

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-63
    :END:

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:async[[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =parameters= be
     [[https://tc39.es/ecma262/#prod-AsyncArrowBindingIdentifier][AsyncArrowBindingIdentifier]].
  3. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     =parameters=,
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     lexical-this, =scope=).
  4. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]].
  5. Return =closure=.

  [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]=>[[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]

  1. Let =scope= be the LexicalEnvironment of the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. Let =head= be CoveredAsyncArrowHead of
     [[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]].
  3. Let =parameters= be the
     [[https://tc39.es/ecma262/#prod-ArrowFormalParameters][ArrowFormalParameters]]
     of =head=.
  4. Let =closure= be
     ! [[https://tc39.es/ecma262/#sec-ordinaryfunctioncreate][OrdinaryFunctionCreate]](%AsyncFunction.prototype%,
     =parameters=,
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     lexical-this, =scope=).
  5. Set =closure=.[[SourceText]] to the source text matched by
     [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]].
  6. Return =closure=.

** Tail Position Calls
   :PROPERTIES:
   :CUSTOM_ID: tail-position-calls
   :END:

*** Static Semantics: IsInTailPosition ( =call= )
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isintailposition-call
    :END:

  The abstract operation IsInTailPosition with argument =call= performs
  the following steps:

  1. [[https://tc39.es/ecma262/#assert][Assert]]: =call= is a
     [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]].
  2. If the source code matching =call= is
     [[https://tc39.es/ecma262/#non-strict-code][non-strict code]], return
     false.
  3. If =call= is not contained within a
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]], or
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     return false.
  4. Let =body= be the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]],
     [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]], or
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]]
     that most closely contains =call=.
  5. If =body= is the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] of a
     [[https://tc39.es/ecma262/#prod-GeneratorBody][GeneratorBody]],
     return false.
  6. If =body= is the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] of an
     [[https://tc39.es/ecma262/#prod-AsyncFunctionBody][AsyncFunctionBody]],
     return false.
  7. If =body= is the
     [[https://tc39.es/ecma262/#prod-FunctionBody][FunctionBody]] of an
     [[https://tc39.es/ecma262/#prod-AsyncGeneratorBody][AsyncGeneratorBody]],
     return false.
  8. If =body= is an
     [[https://tc39.es/ecma262/#prod-AsyncConciseBody][AsyncConciseBody]],
     return false.
  9. Return the result of HasCallInTailPosition of =body= with argument
     =call=.

  Note

  Tail Position calls are only defined in
  [[https://tc39.es/ecma262/#sec-strict-mode-code][strict mode code]]
  because of a common non-standard language extension (see
  [[https://tc39.es/ecma262/#sec-addrestrictedfunctionproperties][9.2.4]])
  that enables observation of the chain of caller contexts.

*** Static Semantics: HasCallInTailPosition
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-hascallintailposition
    :END:

  With parameter =call=.

  Note

  =call= is a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse
  Node]] that represents a specific range of source text. When the
  following algorithms compare =call= to another
  [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]], it is a
  test of whether they represent the same source text.

*** Statement Rules
    :PROPERTIES:
    :CUSTOM_ID: statement-rules
    :END:

  [[https://tc39.es/ecma262/#prod-ConciseBody][ConciseBody]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
     with argument =call=.

  [[https://tc39.es/ecma262/#prod-StatementList][StatementList]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]][[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]

  1. Let =has= be HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
     argument =call=.
  2. If =has= is true, return true.
  3. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]
     with argument =call=.

  [[https://tc39.es/ecma262/#prod-FunctionStatementList][FunctionStatementList]]:[empty]
  [[https://tc39.es/ecma262/#prod-StatementListItem][StatementListItem]]:[[https://tc39.es/ecma262/#prod-Declaration][Declaration]]
  [[https://tc39.es/ecma262/#prod-Statement][Statement]]:[[https://tc39.es/ecma262/#prod-VariableStatement][VariableStatement]]
  [[https://tc39.es/ecma262/#prod-EmptyStatement][EmptyStatement]]
  [[https://tc39.es/ecma262/#prod-ExpressionStatement][ExpressionStatement]]
  [[https://tc39.es/ecma262/#prod-ContinueStatement][ContinueStatement]]
  [[https://tc39.es/ecma262/#prod-BreakStatement][BreakStatement]]
  [[https://tc39.es/ecma262/#prod-ThrowStatement][ThrowStatement]]
  [[https://tc39.es/ecma262/#prod-DebuggerStatement][DebuggerStatement]]
  [[https://tc39.es/ecma262/#prod-Block][Block]]:{}
  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]:return;
  [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]:[[#FunctionDeclaration][FunctionDeclaration]]
  [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]of[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{}

  1. Return false.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]else[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Let =has= be HasCallInTailPosition of the first
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =call=.
  2. If =has= is true, return true.
  3. Return HasCallInTailPosition of the second
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-IfStatement][IfStatement]]:if([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  [[https://tc39.es/ecma262/#prod-IterationStatement][IterationStatement]]:do[[https://tc39.es/ecma262/#prod-Statement][Statement]]while([[https://tc39.es/ecma262/#prod-Expression][Expression]]);
  while([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for(var[[https://tc39.es/ecma262/#prod-VariableDeclarationList][VariableDeclarationList]];[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-LexicalDeclaration][LexicalDeclaration]][[https://tc39.es/ecma262/#prod-Expression][Expression]]opt;[[https://tc39.es/ecma262/#prod-Expression][Expression]]opt)[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for(var[[https://tc39.es/ecma262/#prod-ForBinding][ForBinding]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  for([[https://tc39.es/ecma262/#prod-ForDeclaration][ForDeclaration]]in[[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]
  [[https://tc39.es/ecma262/#prod-WithStatement][WithStatement]]:with([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-Statement][Statement]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Statement][Statement]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-LabelledStatement][LabelledStatement]]:[[https://tc39.es/ecma262/#prod-LabelIdentifier][LabelIdentifier]]:[[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-LabelledItem][LabelledItem]] with
     argument =call=.

  [[https://tc39.es/ecma262/#prod-ReturnStatement][ReturnStatement]]:return[[https://tc39.es/ecma262/#prod-Expression][Expression]];

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Expression][Expression]] with
     argument =call=.

  [[https://tc39.es/ecma262/#prod-SwitchStatement][SwitchStatement]]:switch([[https://tc39.es/ecma262/#prod-Expression][Expression]])[[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-CaseBlock][CaseBlock]]:{[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt[[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]][[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]opt}

  1. Let =has= be false.
  2. If the first
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
     present, let =has= be HasCallInTailPosition of the first
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
     argument =call=.
  3. If =has= is true, return true.
  4. Let =has= be HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]] with
     argument =call=.
  5. If =has= is true, return true.
  6. If the second
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] is
     present, let =has= be HasCallInTailPosition of the second
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
     argument =call=.
  7. Return =has=.

  [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]]:[[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]][[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]

  1. Let =has= be HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-CaseClauses][CaseClauses]] with
     argument =call=.
  2. If =has= is true, return true.
  3. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]] with
     argument =call=.

  [[https://tc39.es/ecma262/#prod-CaseClause][CaseClause]]:case[[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt
  [[https://tc39.es/ecma262/#prod-DefaultClause][DefaultClause]]:default:[[https://tc39.es/ecma262/#prod-StatementList][StatementList]]opt

  1. If [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] is
     present, return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-StatementList][StatementList]] with
     argument =call=.
  2. Return false.

  [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Catch][Catch]] with argument =call=.

  [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Finally][Finally]]
  [[https://tc39.es/ecma262/#prod-TryStatement][TryStatement]]:try[[https://tc39.es/ecma262/#prod-Block][Block]][[https://tc39.es/ecma262/#prod-Catch][Catch]][[https://tc39.es/ecma262/#prod-Finally][Finally]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Finally][Finally]] with argument
     =call=.

  [[https://tc39.es/ecma262/#prod-Catch][Catch]]:catch([[https://tc39.es/ecma262/#prod-CatchParameter][CatchParameter]])[[https://tc39.es/ecma262/#prod-Block][Block]]

  1. Return HasCallInTailPosition of
     [[https://tc39.es/ecma262/#prod-Block][Block]] with argument =call=.

**** Expression Rules
     :PROPERTIES:
     :CUSTOM_ID: expression-rules
     :END:

   Note

   A potential tail position call that is immediately followed by return
   [[https://tc39.es/ecma262/#sec-getvalue][GetValue]] of the call result
   is also a possible tail position call. Function calls cannot return
   reference values, so such a
   [[https://tc39.es/ecma262/#sec-getvalue][GetValue]] operation will
   always return the same value as the actual function call result.

   [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-YieldExpression][YieldExpression]]
   [[https://tc39.es/ecma262/#prod-ArrowFunction][ArrowFunction]]
   [[https://tc39.es/ecma262/#prod-AsyncArrowFunction][AsyncArrowFunction]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]=[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]][[https://tc39.es/ecma262/#prod-AssignmentOperator][AssignmentOperator]][[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]&[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]^[[https://tc39.es/ecma262/#prod-BitwiseANDExpression][BitwiseANDExpression]]
   [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]:[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]|[[https://tc39.es/ecma262/#prod-BitwiseXORExpression][BitwiseXORExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]:[[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!=[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]===[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-EqualityExpression][EqualityExpression]]!==[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]:[[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]<=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]>=[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]instanceof[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-RelationalExpression][RelationalExpression]]in[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]:[[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]<<[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-ShiftExpression][ShiftExpression]]>>>[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]
   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]:[[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]+[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]
   [[https://tc39.es/ecma262/#prod-AdditiveExpression][AdditiveExpression]]-[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]
   [[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]]:[[https://tc39.es/ecma262/#prod-MultiplicativeExpression][MultiplicativeExpression]][[https://tc39.es/ecma262/#prod-MultiplicativeOperator][MultiplicativeOperator]][[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]
   [[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]:[[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]**[[https://tc39.es/ecma262/#prod-ExponentiationExpression][ExponentiationExpression]]
   [[https://tc39.es/ecma262/#prod-UpdateExpression][UpdateExpression]]:[[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]++
   [[https://tc39.es/ecma262/#prod-LeftHandSideExpression][LeftHandSideExpression]]--
   ++[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   --[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   [[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]:delete[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   void[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   typeof[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   +[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]] -[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   ~[[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   ![[https://tc39.es/ecma262/#prod-UnaryExpression][UnaryExpression]]
   [[https://tc39.es/ecma262/#prod-AwaitExpression][AwaitExpression]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-SuperCall][SuperCall]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]:new[[https://tc39.es/ecma262/#prod-NewExpression][NewExpression]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[[https://tc39.es/ecma262/#prod-Expression][Expression]]]
   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]].[[https://tc39.es/ecma262/#prod-IdentifierName][IdentifierName]]
   [[https://tc39.es/ecma262/#prod-SuperProperty][SuperProperty]]
   [[https://tc39.es/ecma262/#prod-MetaProperty][MetaProperty]]
   new[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:this
   [[https://tc39.es/ecma262/#prod-IdentifierReference][IdentifierReference]]
   [[https://tc39.es/ecma262/#prod-Literal][Literal]]
   [[https://tc39.es/ecma262/#prod-ArrayLiteral][ArrayLiteral]]
   [[https://tc39.es/ecma262/#prod-ObjectLiteral][ObjectLiteral]]
   [[https://tc39.es/ecma262/#prod-FunctionExpression][FunctionExpression]]
   [[https://tc39.es/ecma262/#prod-ClassExpression][ClassExpression]]
   [[https://tc39.es/ecma262/#prod-GeneratorExpression][GeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncFunctionExpression][AsyncFunctionExpression]]
   [[https://tc39.es/ecma262/#prod-AsyncGeneratorExpression][AsyncGeneratorExpression]]
   [[https://tc39.es/ecma262/#prod-RegularExpressionLiteral][RegularExpressionLiteral]]
   [[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. Return false.

   [[https://tc39.es/ecma262/#prod-Expression][Expression]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
   [[https://tc39.es/ecma262/#prod-Expression][Expression]],[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-ConditionalExpression][ConditionalExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]?[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]:[[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]

   1. Let =has= be HasCallInTailPosition of the first
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
      with argument =call=.
   2. If =has= is true, return true.
   3. Return HasCallInTailPosition of the second
      [[https://tc39.es/ecma262/#prod-AssignmentExpression][AssignmentExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]:[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]&&[[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-BitwiseORExpression][BitwiseORExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]:[[https://tc39.es/ecma262/#prod-LogicalORExpression][LogicalORExpression]]||[[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-LogicalANDExpression][LogicalANDExpression]]
      with argument =call=.

   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]]:[[https://tc39.es/ecma262/#prod-CoverCallExpressionAndAsyncArrowHead][CoverCallExpressionAndAsyncArrowHead]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-Arguments][Arguments]]
   [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. If this
      [[https://tc39.es/ecma262/#prod-CallExpression][CallExpression]] is
      =call=, return true.
   2. Return false.

   [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]:[[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]][[https://tc39.es/ecma262/#prod-TemplateLiteral][TemplateLiteral]]

   1. If this
      [[https://tc39.es/ecma262/#prod-MemberExpression][MemberExpression]]
      is =call=, return true.
   2. Return false.

   [[https://tc39.es/ecma262/#prod-PrimaryExpression][PrimaryExpression]]:[[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]]

   1. Let =expr= be CoveredParenthesizedExpression of
      [[https://tc39.es/ecma262/#prod-CoverParenthesizedExpressionAndArrowParameterList][CoverParenthesizedExpressionAndArrowParameterList]].
   2. Return HasCallInTailPosition of =expr= with argument =call=.

   [[https://tc39.es/ecma262/#prod-ParenthesizedExpression][ParenthesizedExpression]]:([[https://tc39.es/ecma262/#prod-Expression][Expression]])

   1. Return HasCallInTailPosition of
      [[https://tc39.es/ecma262/#prod-Expression][Expression]] with
      argument =call=.

*** Runtime Semantics: PrepareForTailCall ( )
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-preparefortailcall
    :END:

  The abstract operation PrepareForTailCall performs the following steps:

  1. Let =leafContext= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  2. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =leafContext=.
  3. Pop =leafContext= from the
     [[https://tc39.es/ecma262/#execution-context-stack][execution context
     stack]]. The
     [[https://tc39.es/ecma262/#sec-execution-contexts][execution
     context]] now on the top of the stack becomes the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].
  4. [[https://tc39.es/ecma262/#assert][Assert]]: =leafContext= has no
     further use. It will never be activated as the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]].

  A tail position call must either release any transient internal
  resources associated with the currently executing function
  [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]]
  before invoking the target function or reuse those resources in support
  of the target function.

  Note

  For example, a tail position call should only grow an implementation's
  activation record stack by the amount that the size of the target
  function's activation record exceeds the size of the calling function's
  activation record. If the target function's activation record is
  smaller, then the total size of the stack should decrease.
