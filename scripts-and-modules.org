#+TITLE: Scripts and Modules

#+begin_src gerbil :noweb-ref parse-script
  (defstruct script (tree) transparent: #t)

  (def (parse-script str)
    (run (.let* (lst Script)
           (return (script (and lst (list->vector lst)))))
         (lexify (tokenize str))))
#+end_src

#+begin_src gerbil :tangle scripts-and-modules.ss :noweb yes
  (import :drewc/smug :drewc/js-syntax/lexical :drewc/js-syntax/statements-and-declarations)

  (export #t)

  <<script-body>>
  <<script>>

  <<parse-script>>
#+end_src

* ECMAScript Language: Scripts and Modules
  :PROPERTIES:
  :CUSTOM_ID: ecmascript-language-scripts-and-modules
  :END:

** Scripts
   :PROPERTIES:
   :CUSTOM_ID: scripts
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-63
    :END:
    
    #+NAME: Script
    #+begin_quote
     [[Script][Script]]: 
       [[ScriptBody][ScriptBody]]opt
    #+end_quote
    #+begin_src gerbil :noweb-ref script
      (def Script (.or ScriptBody #f))
    #+end_src
    #+NAME: ScriptBody
    #+begin_quote
      [[ScriptBody][ScriptBody]]:
        [[StatementList][StatementList]][~Yield, ~Await, ~Return]
    #+end_quote
    #+begin_src gerbil :noweb-ref script-body
      (def ScriptBody (.begin StatementList))
    #+end_src

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-31
    :END:

  [[Script][Script]]:[[ScriptBody][ScriptBody]]

  - It is a Syntax Error if the LexicallyDeclaredNames of
    [[ScriptBody][ScriptBody]] contains any
    duplicate entries.
  - It is a Syntax Error if any element of the LexicallyDeclaredNames of
    [[ScriptBody][ScriptBody]] also occurs
    in the VarDeclaredNames of
    [[ScriptBody][ScriptBody]].

  [[ScriptBody][ScriptBody]]:[[StatementList][StatementList]]

  - It is a Syntax Error if
    [[StatementList][StatementList]]
    Contains =super= unless the source code containing =super= is eval
    code that is being processed by a
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]]. Additional [[https://tc39.es/ecma262/#early-error][early
    error]] rules for =super= within
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]] are defined in
    [[https://tc39.es/ecma262/#sec-performeval][18.2.1.1]].
  - It is a Syntax Error if
    [[StatementList][StatementList]]
    Contains [[NewTarget][NewTarget]] unless
    the source code containing
    [[NewTarget][NewTarget]] is eval code
    that is being processed by a
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]]. Additional [[https://tc39.es/ecma262/#early-error][early
    error]] rules for
    [[NewTarget][NewTarget]] in
    [[https://tc39.es/ecma262/#sec-function-calls-runtime-semantics-evaluation][direct
    eval]] are defined in
    [[https://tc39.es/ecma262/#sec-performeval][18.2.1.1]].
  - It is a Syntax Error if ContainsDuplicateLabels of
    [[StatementList][StatementList]] with
    argument « » is true.
  - It is a Syntax Error if ContainsUndefinedBreakTarget of
    [[StatementList][StatementList]] with
    argument « » is true.
  - It is a Syntax Error if ContainsUndefinedContinueTarget of
    [[StatementList][StatementList]] with
    arguments « » and « » is true.

*** Static Semantics: IsStrict
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isstrict
    :END:

  [[Script][Script]]:[[ScriptBody][ScriptBody]]opt

  1. If [[ScriptBody][ScriptBody]] is
     present and the
     [[https://tc39.es/ecma262/#directive-prologue][Directive Prologue]]
     of [[ScriptBody][ScriptBody]] contains
     a [[https://tc39.es/ecma262/#use-strict-directive][Use Strict
     Directive]], return true; otherwise, return false.

*** Static Semantics: LexicallyDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallydeclarednames-6
    :END:

  [[ScriptBody][ScriptBody]]:[[StatementList][StatementList]]

  1. Return TopLevelLexicallyDeclaredNames of
     [[StatementList][StatementList]].

  Note

  At the top level of a [[Script][Script]],
  function declarations are treated like var declarations rather than like
  lexical declarations.

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-6
    :END:

  [[ScriptBody][ScriptBody]]:[[StatementList][StatementList]]

  1. Return TopLevelLexicallyScopedDeclarations of
     [[StatementList][StatementList]].

*** Static Semantics: VarDeclaredNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-vardeclarednames-15
    :END:

  [[ScriptBody][ScriptBody]]:[[StatementList][StatementList]]

  1. Return TopLevelVarDeclaredNames of
     [[StatementList][StatementList]].

*** Static Semantics: VarScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-varscopeddeclarations-15
    :END:

  [[ScriptBody][ScriptBody]]:[[StatementList][StatementList]]

  1. Return TopLevelVarScopedDeclarations of
     [[StatementList][StatementList]].

*** Runtime Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-64
    :END:

  [[Script][Script]]:[empty]

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

*** Script Records
    :PROPERTIES:
    :CUSTOM_ID: script-records
    :END:

  A Script Record encapsulates information about a script being evaluated.
  Each script record contains the fields listed in
  [[https://tc39.es/ecma262/#table-script-records][Table 38]].

  Table 38: [[https://tc39.es/ecma262/#script-record][Script Record]]
  Fields
  | Field Name           | Value Type                                                                               | Meaning                                                                                                                                                                                   |
  |----------------------+------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
  | [[Realm]]            | [[https://tc39.es/ecma262/#realm-record][Realm Record]] | undefined                      | The [[https://tc39.es/ecma262/#realm][realm]] within which this script was created. undefined if not yet assigned.                                                                        |
  | [[Environment]]      | [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] | undefined   | The [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] containing the top level bindings for this script. This field is set when the script is instantiated.      |
  | [[ECMAScriptCode]]   | a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]                         | The result of parsing the source text of this script using [[Script][Script]] as the [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]].   |
  | [[HostDefined]]      | Any, default value is undefined.                                                         | Field reserved for use by host environments that need to associate additional information with a script.                                                                                  |

*** ParseScript ( =sourceText=, =realm=, =hostDefined= )
    :PROPERTIES:
    :CUSTOM_ID: parsescript-sourcetext-realm-hostdefined
    :END:

  The abstract operation ParseScript with arguments =sourceText=, =realm=,
  and =hostDefined= creates a
  [[https://tc39.es/ecma262/#script-record][Script Record]] based upon the
  result of parsing =sourceText= as a
  [[Script][Script]]. ParseScript performs
  the following steps:

  1. [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
     ECMAScript source text (see clause
     [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
  2. Parse =sourceText= using
     [[Script][Script]] as the
     [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
     and analyse the parse result for any Early Error conditions. If the
     parse was successful and no early errors were found, let =body= be
     the resulting parse tree. Otherwise, let =body= be a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     of one or more SyntaxError objects representing the parsing errors
     and/or early errors. Parsing and
     [[https://tc39.es/ecma262/#early-error][early error]] detection may
     be interweaved in an implementation-dependent manner. If more than
     one parsing error or [[https://tc39.es/ecma262/#early-error][early
     error]] is present, the number and ordering of error objects in the
     list is implementation-dependent, but at least one must be present.
  3. If =body= is a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     of errors, return =body=.
  4. Return [[https://tc39.es/ecma262/#script-record][Script Record]] {
     [[Realm]]: =realm=, [[Environment]]: undefined, [[ECMAScriptCode]]:
     =body=, [[HostDefined]]: =hostDefined= }.

  Note

  An implementation may parse script source text and analyse it for Early
  Error conditions prior to evaluation of ParseScript for that script
  source text. However, the reporting of any errors must be deferred until
  the point where this specification actually performs ParseScript upon
  that source text.

*** ScriptEvaluation ( =scriptRecord= )
    :PROPERTIES:
    :CUSTOM_ID: scriptevaluation-scriptrecord
    :END:

  1.  Let =globalEnv= be =scriptRecord=.[[Realm]].[[GlobalEnv]].
  2.  Let =scriptContext= be a new ECMAScript code
      [[https://tc39.es/ecma262/#sec-execution-contexts][execution
      context]].
  3.  Set the Function of =scriptContext= to null.
  4.  Set the [[https://tc39.es/ecma262/#realm][Realm]] of =scriptContext=
      to =scriptRecord=.[[Realm]].
  5.  Set the ScriptOrModule of =scriptContext= to =scriptRecord=.
  6.  Set the VariableEnvironment of =scriptContext= to =globalEnv=.
  7.  Set the LexicalEnvironment of =scriptContext= to =globalEnv=.
  8.  [[https://tc39.es/ecma262/#sec-suspend][Suspend]] the currently
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  9.  Push =scriptContext= onto the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]]; =scriptContext= is now the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  10. Let =scriptBody= be =scriptRecord=.[[ECMAScriptCode]].
  11. Let =result= be
      [[https://tc39.es/ecma262/#sec-globaldeclarationinstantiation][GlobalDeclarationInstantiation]](=scriptBody=,
      =globalEnv=).
  12. If =result=.[[Type]] is normal, then

      1. Set =result= to the result of evaluating =scriptBody=.

  13. If =result=.[[Type]] is normal and =result=.[[Value]] is empty, then

      1. Set =result= to
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

  14. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =scriptContext=
      and remove it from the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]].
  15. [[https://tc39.es/ecma262/#assert][Assert]]: The
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] is not empty.
  16. Resume the context that is now on the top of the
      [[https://tc39.es/ecma262/#execution-context-stack][execution
      context stack]] as the
      [[https://tc39.es/ecma262/#running-execution-context][running
      execution context]].
  17. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

*** Runtime Semantics: GlobalDeclarationInstantiation ( =script=,
  =env= )
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-globaldeclarationinstantiation-script-env
    :END:

  Note 1

  When an [[https://tc39.es/ecma262/#sec-execution-contexts][execution
  context]] is established for evaluating scripts, declarations are
  instantiated in the current
  [[https://tc39.es/ecma262/#global-environment][global environment]].
  Each global binding declared in the code is instantiated.

  GlobalDeclarationInstantiation is performed as follows using arguments
  =script= and =env=. =script= is the
  [[ScriptBody][ScriptBody]] for which the
  [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]]
  is being established. =env= is the global lexical environment in which
  bindings are to be created.

  1.  Let =envRec= be =env='s
      [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
  2.  [[https://tc39.es/ecma262/#assert][Assert]]: =envRec= is a global
      [[https://tc39.es/ecma262/#sec-environment-records][Environment
      Record]].
  3.  Let =lexNames= be the LexicallyDeclaredNames of =script=.
  4.  Let =varNames= be the VarDeclaredNames of =script=.
  5.  For each =name= in =lexNames=, do

      1. If =envRec=.HasVarDeclaration(=name=) is true, throw a
         SyntaxError exception.
      2. If =envRec=.HasLexicalDeclaration(=name=) is true, throw a
         SyntaxError exception.
      3. Let =hasRestrictedGlobal= be ?
         =envRec=.HasRestrictedGlobalProperty(=name=).
      4. If =hasRestrictedGlobal= is true, throw a SyntaxError exception.

  6.  For each =name= in =varNames=, do

      1. If =envRec=.HasLexicalDeclaration(=name=) is true, throw a
         SyntaxError exception.

  7.  Let =varDeclarations= be the VarScopedDeclarations of =script=.
  8.  Let =functionsToInitialize= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  9.  Let =declaredFunctionNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  10. For each =d= in =varDeclarations=, in reverse list order, do

      1. If =d= is neither a
         [[VariableDeclaration][VariableDeclaration]]
         nor a [[ForBinding][ForBinding]]
         nor a
         [[BindingIdentifier][BindingIdentifier]],
         then

         1. [[https://tc39.es/ecma262/#assert][Assert]]: =d= is either a
            [[FunctionDeclaration][FunctionDeclaration]],
            a
            [[GeneratorDeclaration][GeneratorDeclaration]],
            an
            [[AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
            or an
            [[AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]].
         2. NOTE: If there are multiple function declarations for the same
            name, the last declaration is used.
         3. Let =fn= be the sole element of the BoundNames of =d=.
         4. If =fn= is not an element of =declaredFunctionNames=, then

            1. Let =fnDefinable= be ?
               =envRec=.CanDeclareGlobalFunction(=fn=).
            2. If =fnDefinable= is false, throw a TypeError exception.
            3. Append =fn= to =declaredFunctionNames=.
            4. Insert =d= as the first element of =functionsToInitialize=.

  11. Let =declaredVarNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  12. For each =d= in =varDeclarations=, do

      1. If =d= is a
         [[VariableDeclaration][VariableDeclaration]],
         a [[ForBinding][ForBinding]], or a
         [[BindingIdentifier][BindingIdentifier]],
         then

         1. For each String =vn= in the BoundNames of =d=, do

            1. If =vn= is not an element of =declaredFunctionNames=, then

               1. Let =vnDefinable= be ?
                  =envRec=.CanDeclareGlobalVar(=vn=).
               2. If =vnDefinable= is false, throw a TypeError exception.
               3. If =vn= is not an element of =declaredVarNames=, then

                  1. Append =vn= to =declaredVarNames=.

  13. NOTE: No abnormal terminations occur after this algorithm step if
      the [[https://tc39.es/ecma262/#sec-global-object][global object]] is
      an ordinary object. However, if the
      [[https://tc39.es/ecma262/#sec-global-object][global object]] is a
      Proxy [[https://tc39.es/ecma262/#exotic-object][exotic object]] it
      may exhibit behaviours that cause abnormal terminations in some of
      the following steps.
  14. NOTE: Annex
      [[https://tc39.es/ecma262/#sec-web-compat-globaldeclarationinstantiation][B.3.3.2]]
      adds additional steps at this point.
  15. Let =lexDeclarations= be the LexicallyScopedDeclarations of
      =script=.
  16. For each element =d= in =lexDeclarations=, do

      1. NOTE: Lexically declared names are only instantiated here but not
         initialized.
      2. For each element =dn= of the BoundNames of =d=, do

         1. If IsConstantDeclaration of =d= is true, then

            1. Perform ? =envRec=.CreateImmutableBinding(=dn=, true).

         2. Else,

            1. Perform ? =envRec=.CreateMutableBinding(=dn=, false).

  17. For each [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse
      Node]] =f= in =functionsToInitialize=, do

      1. Let =fn= be the sole element of the BoundNames of =f=.
      2. Let =fo= be InstantiateFunctionObject of =f= with argument =env=.
      3. Perform ? =envRec=.CreateGlobalFunctionBinding(=fn=, =fo=,
         false).

  18. For each String =vn= in =declaredVarNames=, in list order, do

      1. Perform ? =envRec=.CreateGlobalVarBinding(=vn=, false).

  19. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  Note 2

  Early errors specified in
  [[https://tc39.es/ecma262/#sec-scripts-static-semantics-early-errors][15.1.1]]
  prevent name conflicts between function/var declarations and
  let/const/class declarations as well as redeclaration of let/const/class
  bindings for declaration contained within a single
  [[Script][Script]]. However, such
  conflicts and redeclarations that span more than one
  [[Script][Script]] are detected as runtime
  errors during GlobalDeclarationInstantiation. If any such errors are
  detected, no bindings are instantiated for the script. However, if the
  [[https://tc39.es/ecma262/#sec-global-object][global object]] is defined
  using Proxy exotic objects then the runtime tests for conflicting
  declarations may be unreliable resulting in an
  [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
  completion]] and some global declarations not being instantiated. If
  this occurs, the code for the
  [[Script][Script]] is not evaluated.

  Unlike explicit var or function declarations, properties that are
  directly created on the
  [[https://tc39.es/ecma262/#sec-global-object][global object]] result in
  global bindings that may be shadowed by let/const/class declarations.

*** Runtime Semantics: ScriptEvaluationJob ( =sourceText=,
  =hostDefined= )
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-scriptevaluationjob-sourcetext-hostdefined
    :END:

  The job ScriptEvaluationJob with parameters =sourceText= and
  =hostDefined= parses, validates, and evaluates =sourceText= as a
  [[Script][Script]].

  1. [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
     ECMAScript source text (see clause
     [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
  2. Let =realm= be [[https://tc39.es/ecma262/#current-realm][the current
     Realm Record]].
  3. Let =s= be
     [[https://tc39.es/ecma262/#sec-parse-script][ParseScript]](=sourceText=,
     =realm=, =hostDefined=).
  4. If =s= is a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     of errors, then

     1. Perform
        [[https://tc39.es/ecma262/#sec-host-report-errors][HostReportErrors]](=s=).
     2. Return
        [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

  5. Return
     ? [[https://tc39.es/ecma262/#sec-runtime-semantics-scriptevaluation][ScriptEvaluation]](=s=).

** Modules
   :PROPERTIES:
   :CUSTOM_ID: modules
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-64
    :END:

 [[Module][Module]]:[[ModuleBody][ModuleBody]]opt
 [[ModuleBody][ModuleBody]]:[[ModuleItemList][ModuleItemList]]
 [[ModuleItemList][ModuleItemList]]:[[ModuleItem][ModuleItem]]
 [[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]
 [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]
 [[ExportDeclaration][ExportDeclaration]]
 [[StatementListItem][StatementListItem]][~Yield,
 ~Await, ~Return]
*** Module Semantics
    :PROPERTIES:
    :CUSTOM_ID: module-semantics
    :END:

**** Static Semantics: Early Errors
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-early-errors-32
     :END:

   [[ModuleBody][ModuleBody]]:[[ModuleItemList][ModuleItemList]]

   - It is a Syntax Error if the LexicallyDeclaredNames of
     [[ModuleItemList][ModuleItemList]]
     contains any duplicate entries.
   - It is a Syntax Error if any element of the LexicallyDeclaredNames of
     [[ModuleItemList][ModuleItemList]] also
     occurs in the VarDeclaredNames of
     [[ModuleItemList][ModuleItemList]].
   - It is a Syntax Error if the ExportedNames of
     [[ModuleItemList][ModuleItemList]]
     contains any duplicate entries.
   - It is a Syntax Error if any element of the ExportedBindings of
     [[ModuleItemList][ModuleItemList]] does
     not also occur in either the VarDeclaredNames of
     [[ModuleItemList][ModuleItemList]], or
     the LexicallyDeclaredNames of
     [[ModuleItemList][ModuleItemList]].
   - It is a Syntax Error if
     [[ModuleItemList][ModuleItemList]]
     Contains =super=.
   - It is a Syntax Error if
     [[ModuleItemList][ModuleItemList]]
     Contains [[NewTarget][NewTarget]].
   - It is a Syntax Error if ContainsDuplicateLabels of
     [[ModuleItemList][ModuleItemList]] with
     argument « » is true.
   - It is a Syntax Error if ContainsUndefinedBreakTarget of
     [[ModuleItemList][ModuleItemList]] with
     argument « » is true.
   - It is a Syntax Error if ContainsUndefinedContinueTarget of
     [[ModuleItemList][ModuleItemList]] with
     arguments « » and « » is true.

   Note

   The duplicate ExportedNames rule implies that multiple =export default=
   [[ExportDeclaration][ExportDeclaration]]
   items within a [[ModuleBody][ModuleBody]]
   is a Syntax Error. Additional error conditions relating to conflicting
   or duplicate declarations are checked during module linking prior to
   evaluation of a [[Module][Module]]. If any
   such errors are detected the
   [[Module][Module]] is not evaluated.

**** Static Semantics: ContainsDuplicateLabels
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsduplicatelabels-11
     :END:

   With parameter =labelSet=.

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =hasDuplicates= be ContainsDuplicateLabels of
      [[ModuleItemList][ModuleItemList]] with
      argument =labelSet=.
   2. If =hasDuplicates= is true, return true.
   3. Return ContainsDuplicateLabels of
      [[ModuleItem][ModuleItem]] with
      argument =labelSet=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]
   [[ExportDeclaration][ExportDeclaration]]

   1. Return false.

**** Static Semantics: ContainsUndefinedBreakTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedbreaktarget-12
     :END:

   With parameter =labelSet=.

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedBreakTarget of
      [[ModuleItemList][ModuleItemList]] with
      argument =labelSet=.
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedBreakTarget of
      [[ModuleItem][ModuleItem]] with
      argument =labelSet=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]
   [[ExportDeclaration][ExportDeclaration]]

   1. Return false.

**** Static Semantics: ContainsUndefinedContinueTarget
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-containsundefinedcontinuetarget-12
     :END:

   With parameters =iterationSet= and =labelSet=.

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =hasUndefinedLabels= be ContainsUndefinedContinueTarget of
      [[ModuleItemList][ModuleItemList]] with
      arguments =iterationSet= and « ».
   2. If =hasUndefinedLabels= is true, return true.
   3. Return ContainsUndefinedContinueTarget of
      [[ModuleItem][ModuleItem]] with
      arguments =iterationSet= and « ».

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]
   [[ExportDeclaration][ExportDeclaration]]

   1. Return false.

**** Static Semantics: ExportedBindings
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-exportedbindings
     :END:

   Note

   ExportedBindings are the locally bound names that are explicitly
   associated with a [[Module][Module]]'s
   ExportedNames.

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =names= be ExportedBindings of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the ExportedBindings of
      [[ModuleItem][ModuleItem]].
   3. Return =names=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]
   [[StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ExportedNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-exportednames
     :END:

   Note

   ExportedNames are the externally visible names that a
   [[Module][Module]] explicitly maps to one
   of its local name bindings.

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =names= be ExportedNames of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the ExportedNames of
      [[ModuleItem][ModuleItem]].
   3. Return =names=.

   [[ModuleItem][ModuleItem]]:[[ExportDeclaration][ExportDeclaration]]

   1. Return the ExportedNames of
      [[ExportDeclaration][ExportDeclaration]].

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]
   [[StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ExportEntries
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-exportentries
     :END:

   [[Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =entries= be ExportEntries of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =entries= the elements of the ExportEntries of
      [[ModuleItem][ModuleItem]].
   3. Return =entries=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]
   [[StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ImportEntries
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-importentries
     :END:

   [[Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =entries= be ImportEntries of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =entries= the elements of the ImportEntries of
      [[ModuleItem][ModuleItem]].
   3. Return =entries=.

   [[ModuleItem][ModuleItem]]:[[ExportDeclaration][ExportDeclaration]]
   [[StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: ImportedLocalNames ( =importEntries= )
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-importedlocalnames-importentries
     :END:

   The abstract operation ImportedLocalNames with argument =importEntries=
   creates a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of all of the local name bindings defined by a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
   of ImportEntry Records (see [[https://tc39.es/ecma262/#table-39][Table
   44]]). ImportedLocalNames performs the following steps:

   1. Let =localNames= be a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. For each [[https://tc39.es/ecma262/#importentry-record][ImportEntry
      Record]] =i= in =importEntries=, do

      1. Append =i=.[[LocalName]] to =localNames=.

   3. Return =localNames=.

**** Static Semantics: ModuleRequests
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-modulerequests
     :END:

   [[Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItemList][ModuleItemList]]:[[ModuleItem][ModuleItem]]

   1. Return ModuleRequests of
      [[ModuleItem][ModuleItem]].

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =moduleNames= be ModuleRequests of
      [[ModuleItemList][ModuleItemList]].
   2. Let =additionalNames= be ModuleRequests of
      [[ModuleItem][ModuleItem]].
   3. Append to =moduleNames= each element of =additionalNames= that is not
      already an element of =moduleNames=.
   4. Return =moduleNames=.

   [[ModuleItem][ModuleItem]]:[[StatementListItem][StatementListItem]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: LexicallyDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallydeclarednames-7
     :END:

   Note 1

   The LexicallyDeclaredNames of a
   [[Module][Module]] includes the names of
   all of its imported bindings.

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =names= be LexicallyDeclaredNames of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the LexicallyDeclaredNames of
      [[ModuleItem][ModuleItem]].
   3. Return =names=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]

   1. Return the BoundNames of
      [[ImportDeclaration][ImportDeclaration]].

   [[ModuleItem][ModuleItem]]:[[ExportDeclaration][ExportDeclaration]]

   1. If
      [[ExportDeclaration][ExportDeclaration]]
      is =export=
      [[VariableStatement][VariableStatement]],
      return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
   2. Return the BoundNames of
      [[ExportDeclaration][ExportDeclaration]].

   [[ModuleItem][ModuleItem]]:[[StatementListItem][StatementListItem]]

   1. Return LexicallyDeclaredNames of
      [[StatementListItem][StatementListItem]].

   Note 2

   At the top level of a [[Module][Module]],
   function declarations are treated like lexical declarations rather than
   like var declarations.

**** Static Semantics: LexicallyScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-7
     :END:

   [[Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =declarations= be LexicallyScopedDeclarations of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =declarations= the elements of the
      LexicallyScopedDeclarations of
      [[ModuleItem][ModuleItem]].
   3. Return =declarations=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: VarDeclaredNames
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-vardeclarednames-16
     :END:

   [[Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =names= be VarDeclaredNames of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =names= the elements of the VarDeclaredNames of
      [[ModuleItem][ModuleItem]].
   3. Return =names=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItem][ModuleItem]]:[[ExportDeclaration][ExportDeclaration]]

   1. If
      [[ExportDeclaration][ExportDeclaration]]
      is =export=
      [[VariableStatement][VariableStatement]],
      return BoundNames of
      [[ExportDeclaration][ExportDeclaration]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Static Semantics: VarScopedDeclarations
     :PROPERTIES:
     :CUSTOM_ID: static-semantics-varscopeddeclarations-16
     :END:

   [[Module][Module]]:[empty]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =declarations= be VarScopedDeclarations of
      [[ModuleItemList][ModuleItemList]].
   2. Append to =declarations= the elements of the VarScopedDeclarations of
      [[ModuleItem][ModuleItem]].
   3. Return =declarations=.

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]

   1. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

   [[ModuleItem][ModuleItem]]:[[ExportDeclaration][ExportDeclaration]]

   1. If
      [[ExportDeclaration][ExportDeclaration]]
      is =export=
      [[VariableStatement][VariableStatement]],
      return VarScopedDeclarations of
      [[VariableStatement][VariableStatement]].
   2. Return a new empty
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

**** Abstract Module Records
     :PROPERTIES:
     :CUSTOM_ID: abstract-module-records
     :END:

   A Module Record encapsulates structural information about the imports
   and exports of a single module. This information is used to link the
   imports and exports of sets of connected modules. A Module Record
   includes four fields that are only used when evaluating a module.

   For specification purposes Module Record values are values of the
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   specification type and can be thought of as existing in a simple
   object-oriented hierarchy where Module Record is an abstract class with
   both abstract and concrete subclasses. This specification defines the
   abstract subclass named
   [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
   and its concrete subclass named
   [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
   Record]]. Other specifications and implementations may define additional
   Module Record subclasses corresponding to alternative module definition
   facilities that they defined.

   Module Record defines the fields listed in
   [[https://tc39.es/ecma262/#table-36][Table 39]]. All Module Definition
   subclasses include at least those fields. Module Record also defines the
   abstract method list in [[https://tc39.es/ecma262/#table-37][Table 40]].
   All Module definition subclasses must provide concrete implementations
   of these abstract methods.

   Table 39: [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
   Record]] Fields
   | Field Name        | Value Type                                                                               | Meaning                                                                                                                                                                          |
   |-------------------+------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[Realm]]         | [[https://tc39.es/ecma262/#realm-record][Realm Record]] | undefined                      | The [[https://tc39.es/ecma262/#realm][Realm]] within which this module was created. undefined if not yet assigned.                                                               |
   | [[Environment]]   | [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] | undefined   | The [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] containing the top level bindings for this module. This field is set when the module is linked.   |
   | [[Namespace]]     | Object | undefined                                                                       | The Module Namespace Object ([[https://tc39.es/ecma262/#sec-module-namespace-objects][26.3]]) if one has been created for this module. Otherwise undefined.                      |
   | [[HostDefined]]   | Any, default value is undefined.                                                         | Field reserved for use by host environments that need to associate additional information with a module.                                                                         |

   Table 40: Abstract Methods of Module Records
   | Method                                         | Purpose                                                                                                                                                                                                                                                                                                                                                                                                                                                                  |
   ||
   | GetExportedNames([=exportStarSet=])            | Return a list of all names that are either directly or indirectly exported from this module.                                                                                                                                                                                                                                                                                                                                                                             |
   | ResolveExport(=exportName= [, =resolveSet=])   | Return the binding of a name exported by this module. Bindings are represented by a ResolvedBinding Record, of the form { [[Module]]: [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]], [[BindingName]]: String }. If the export is a Module Namespace Object without a direct binding in any module, [[BindingName]] will be set to "*namespace*". Return null if the name cannot be resolved, or "ambiguous" if multiple bindings were found.   |
   |                                                |                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
   |                                                | This operation must be idempotent if it completes normally. Each time it is called with a specific =exportName=, =resolveSet= pair as arguments it must return the same result.                                                                                                                                                                                                                                                                                          |
   | Link()                                         | Prepare the module for evaluation by transitively resolving all module dependencies and creating a module [[https://tc39.es/ecma262/#sec-environment-records][Environment Record]].                                                                                                                                                                                                                                                                                      |
   | Evaluate()                                     | If this module has already been evaluated successfully, return undefined; if it has already been evaluated unsuccessfully, throw the exception that was produced. Otherwise, transitively evaluate all module dependencies of this module and then evaluate this module.                                                                                                                                                                                                 |
   |                                                |                                                                                                                                                                                                                                                                                                                                                                                                                                                                          |
   |                                                | Link must have completed successfully prior to invoking this method.                                                                                                                                                                                                                                                                                                                                                                                                     |

**** Cyclic Module Records
     :PROPERTIES:
     :CUSTOM_ID: cyclic-module-records
     :END:

   A Cyclic Module Record is used to represent information about a module
   that can participate in dependency cycles with other modules that are
   subclasses of the
   [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
   type. Module Records that are not subclasses of the
   [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
   type must not participate in dependency cycles with Source Text Module
   Records.

   In addition to the fields defined in
   [[https://tc39.es/ecma262/#table-36][Table 39]] Cyclic Module Records
   have the additional fields listed in
   [[https://tc39.es/ecma262/#table-cyclic-module-fields][Table 41]]

   Table 41: Additional Fields of Cyclic Module Records
   | Field Name             | Value Type                                                                                                | Meaning                                                                                                                                                                                                                                                                                                                                                                    |
   |------------------------+-----------------------------------------------------------------------------------------------------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[Status]]             | unlinked | linking | linked | evaluating | evaluated                                                      | Initially unlinked. Transitions to linking, linked, evaluating, evaluated (in that order) as the module progresses throughout its lifecycle.                                                                                                                                                                                                                               |
   | [[EvaluationError]]    | An [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt completion]] | undefined   | A completion of type throw representing the exception that occurred during evaluation. undefined if no exception occurred or if [[Status]] is not evaluated.                                                                                                                                                                                                               |
   | [[DFSIndex]]           | [[https://tc39.es/ecma262/#integer][Integer]] | undefined                                                 | Auxiliary field used during Link and Evaluate only. If [[Status]] is linking or evaluating, this nonnegative number records the point at which the module was first visited during the ongoing depth-first traversal of the dependency graph.                                                                                                                              |
   | [[DFSAncestorIndex]]   | [[https://tc39.es/ecma262/#integer][Integer]] | undefined                                                 | Auxiliary field used during Link and Evaluate only. If [[Status]] is linking or evaluating, this is either the module's own [[DFSIndex]] or that of an "earlier" module in the same strongly connected component.                                                                                                                                                          |
   | [[RequestedModules]]   | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of String                       | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of all the [[ModuleSpecifier][ModuleSpecifier]] strings used by the module represented by this record to request the importation of a module. The [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] is source code occurrence ordered.   |

   In addition to the methods defined in
   [[https://tc39.es/ecma262/#table-37][Table 40]] Cyclic Module Records
   have the additional methods listed in
   [[https://tc39.es/ecma262/#table-cyclic-module-methods][Table 42]]

   Table 42: Additional Abstract Methods of Cyclic Module Records
   | Method                                                                                                       | Purpose                                                                                                                                                                                                                                               |
   |--------------------------------------------------------------------------------------------------------------+-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment][InitializeEnvironment]]()   | Initialize the [[https://tc39.es/ecma262/#sec-lexical-environments][Lexical Environment]] of the module, including resolving all imported bindings, and create the module's [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].   |
   | [[https://tc39.es/ecma262/#sec-source-text-module-record-execute-module][ExecuteModule]]()                   | Evaluate the module's code within its [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].                                                                                                                                         |

   <<sec-moduledeclarationinstantiation>>
***** Link ( ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: link-concrete-method
      :END:

    The Link concrete method of a
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    implements the corresponding
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    abstract method.

    On success, Link transitions this module's [[Status]] from unlinked to
    linked. On failure, an exception is thrown and this module's [[Status]]
    remains unlinked.

    This abstract method performs the following steps (most of the work is
    done by the auxiliary function
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]):

    1. Let =module= be this
       [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
       Record]].
    2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
       not linking or evaluating.
    3. Let =stack= be a new empty
       [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    4. Let =result= be
       [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]](=module=,
       =stack=, 0).
    5. If =result= is an
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
       completion]], then

       1. For each [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
          Module Record]] =m= in =stack=, do

          1. [[https://tc39.es/ecma262/#assert][Assert]]: =m=.[[Status]] is
             linking.
          2. Set =m=.[[Status]] to unlinked.
          3. Set =m=.[[Environment]] to undefined.
          4. Set =m=.[[DFSIndex]] to undefined.
          5. Set =m=.[[DFSAncestorIndex]] to undefined.

       2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]]
          is unlinked.
       3. Return =result=.

    6. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
       linked or evaluated.
    7. [[https://tc39.es/ecma262/#assert][Assert]]: =stack= is empty.
    8. Return undefined.

    <<sec-innermoduleinstantiation>>
***** InnerModuleLinking ( =module=, =stack=, =index= )
      :PROPERTIES:
      :CUSTOM_ID: innermodulelinking-module-stack-index
      :END:

    The InnerModuleLinking abstract operation is used by Link to perform the
    actual linking process for the
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    =module=, as well as recursively on all other modules in the dependency
    graph. The =stack= and =index= parameters, as well as a module's
    [[DFSIndex]] and [[DFSAncestorIndex]] fields, keep track of the
    depth-first search (DFS) traversal. In particular, [[DFSAncestorIndex]]
    is used to discover strongly connected components (SCCs), such that all
    modules in an SCC transition to linked together.

    This abstract operation performs the following steps:

    1.  If =module= is not a
        [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
        Record]], then

        1. Perform ? =module=.Link().
        2. Return =index=.

    2.  If =module=.[[Status]] is linking, linked, or evaluated, then

        1. Return =index=.

    3.  [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
        unlinked.
    4.  Set =module=.[[Status]] to linking.
    5.  Set =module=.[[DFSIndex]] to =index=.
    6.  Set =module=.[[DFSAncestorIndex]] to =index=.
    7.  Set =index= to =index= + 1.
    8.  Append =module= to =stack=.
    9.  For each String =required= that is an element of
        =module=.[[RequestedModules]], do

        1. Let =requiredModule= be
           ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =required=).
        2. Set =index= to
           ? [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]](=requiredModule=,
           =stack=, =index=).
        3. If =requiredModule= is a
           [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
           Record]], then

           1. [[https://tc39.es/ecma262/#assert][Assert]]:
              =requiredModule=.[[Status]] is either linking, linked, or
              evaluated.
           2. [[https://tc39.es/ecma262/#assert][Assert]]:
              =requiredModule=.[[Status]] is linking if and only if
              =requiredModule= is in =stack=.
           3. If =requiredModule=.[[Status]] is linking, then

              1. Set =module=.[[DFSAncestorIndex]] to
                 [[https://tc39.es/ecma262/#eqn-min][min]](=module=.[[DFSAncestorIndex]],
                 =requiredModule=.[[DFSAncestorIndex]]).

    10. Perform ?
        =module=.[[https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment][InitializeEnvironment]]().
    11. [[https://tc39.es/ecma262/#assert][Assert]]: =module= occurs exactly
        once in =stack=.
    12. [[https://tc39.es/ecma262/#assert][Assert]]:
        =module=.[[DFSAncestorIndex]] is less than or equal to
        =module=.[[DFSIndex]].
    13. If =module=.[[DFSAncestorIndex]] equals =module=.[[DFSIndex]], then

        1. Let =done= be false.
        2. Repeat, while =done= is false,

           1. Let =requiredModule= be the last element in =stack=.
           2. Remove the last element of =stack=.
           3. [[https://tc39.es/ecma262/#assert][Assert]]: =requiredModule=
              is a [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
              Module Record]].
           4. Set =requiredModule=.[[Status]] to linked.
           5. If =requiredModule= and =module= are the same
              [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
              Record]], set =done= to true.

    14. Return =index=.

****** Evaluate ( ) Concrete Method
       :PROPERTIES:
       :CUSTOM_ID: evaluate-concrete-method
       :END:

     The Evaluate concrete method of a
     [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
     implements the corresponding
     [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
     abstract method.

     Evaluate transitions this module's [[Status]] from linked to evaluated.

     If execution results in an exception, that exception is recorded in the
     [[EvaluationError]] field and rethrown by future invocations of
     Evaluate.

     This abstract method performs the following steps (most of the work is
     done by the auxiliary function
     [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]):

     1. Let =module= be this
        [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
        Record]].
     2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
        linked or evaluated.
     3. Let =stack= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
     4. Let =result= be
        [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]](=module=,
        =stack=, 0).
     5. If =result= is an
        [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
        completion]], then

        1. For each [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
           Module Record]] =m= in =stack=, do

           1. [[https://tc39.es/ecma262/#assert][Assert]]: =m=.[[Status]] is
              evaluating.
           2. Set =m=.[[Status]] to evaluated.
           3. Set =m=.[[EvaluationError]] to =result=.

        2. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]]
           is evaluated and =module=.[[EvaluationError]] is =result=.
        3. Return =result=.

     6. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
        evaluated and =module=.[[EvaluationError]] is undefined.
     7. [[https://tc39.es/ecma262/#assert][Assert]]: =stack= is empty.
     8. Return undefined.

****** InnerModuleEvaluation ( =module=, =stack=, =index= )
       :PROPERTIES:
       :CUSTOM_ID: innermoduleevaluation-module-stack-index
       :END:

     The InnerModuleEvaluation abstract operation is used by Evaluate to
     perform the actual evaluation process for the
     [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
     Record]] =module=, as well as recursively on all other modules in the
     dependency graph. The =stack= and =index= parameters, as well as
     =module='s [[DFSIndex]] and [[DFSAncestorIndex]] fields, are used the
     same way as in
     [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]].

     This abstract operation performs the following steps:

     1.  If =module= is not a
         [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
         Record]], then

         1. Perform ? =module=.Evaluate().
         2. Return =index=.

     2.  If =module=.[[Status]] is evaluated, then

         1. If =module=.[[EvaluationError]] is undefined, return =index=.
         2. Otherwise, return =module=.[[EvaluationError]].

     3.  If =module=.[[Status]] is evaluating, return =index=.
     4.  [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Status]] is
         linked.
     5.  Set =module=.[[Status]] to evaluating.
     6.  Set =module=.[[DFSIndex]] to =index=.
     7.  Set =module=.[[DFSAncestorIndex]] to =index=.
     8.  Set =index= to =index= + 1.
     9.  Append =module= to =stack=.
     10. For each String =required= that is an element of
         =module=.[[RequestedModules]], do

         1. Let =requiredModule= be
            ! [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
            =required=).
         2. NOTE: Link must be completed successfully prior to invoking this
            method, so every requested module is guaranteed to resolve
            successfully.
         3. Set =index= to
            ? [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]](=requiredModule=,
            =stack=, =index=).
         4. If =requiredModule= is a
            [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
            Record]], then

            1. [[https://tc39.es/ecma262/#assert][Assert]]:
               =requiredModule=.[[Status]] is either evaluating or evaluated.
            2. [[https://tc39.es/ecma262/#assert][Assert]]:
               =requiredModule=.[[Status]] is evaluating if and only if
               =requiredModule= is in =stack=.
            3. If =requiredModule=.[[Status]] is evaluating, then

               1. Set =module=.[[DFSAncestorIndex]] to
                  [[https://tc39.es/ecma262/#eqn-min][min]](=module=.[[DFSAncestorIndex]],
                  =requiredModule=.[[DFSAncestorIndex]]).

     11. Perform ?
         =module=.[[https://tc39.es/ecma262/#sec-source-text-module-record-execute-module][ExecuteModule]]().
     12. [[https://tc39.es/ecma262/#assert][Assert]]: =module= occurs exactly
         once in =stack=.
     13. [[https://tc39.es/ecma262/#assert][Assert]]:
         =module=.[[DFSAncestorIndex]] is less than or equal to
         =module=.[[DFSIndex]].
     14. If =module=.[[DFSAncestorIndex]] equals =module=.[[DFSIndex]], then

         1. Let =done= be false.
         2. Repeat, while =done= is false,

            1. Let =requiredModule= be the last element in =stack=.
            2. Remove the last element of =stack=.
            3. [[https://tc39.es/ecma262/#assert][Assert]]: =requiredModule=
               is a [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic
               Module Record]].
            4. Set =requiredModule=.[[Status]] to evaluated.
            5. If =requiredModule= and =module= are the same
               [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
               Record]], set =done= to true.

     15. Return =index=.

***** Example Cyclic Module Record Graphs
      :PROPERTIES:
      :CUSTOM_ID: example-cyclic-module-record-graphs
      :END:

    This non-normative section gives a series of examples of the linking and
    evaluation of a few common module graphs, with a specific focus on how
    errors can occur.

    First consider the following simple module graph:

    #+CAPTION: Figure 2: A simple module graph
    [[./ECMAScript®%202020%20Language%C2%A0Specification_files/module-graph-simple.svg]]

    Let's first assume that there are no error conditions. When a host first
    calls =A=.Link(), this will complete successfully by assumption, and
    recursively link modules =B= and =C= as well, such that =A=.[[Status]] =
    =B=.[[Status]] = =C=.[[Status]] = linked. This preparatory step can be
    performed at any time. Later, when the host is ready to incur any
    possible side effects of the modules, it can call =A=.Evaluate(), which
    will complete successfully (again by assumption), recursively having
    evaluated first =C= and then =B=. Each module's [[Status]] at this point
    will be evaluated.

    Consider then cases involving linking errors. If
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    of =C= succeeds but, thereafter, fails for =B=, for example because it
    imports something that =C= does not provide, then the original
    =A=.Link() will fail, and both =A= and =B='s [[Status]] remain unlinked.
    =C='s [[Status]] has become linked, though.

    Finally, consider a case involving evaluation errors. If
    [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]
    of =C= succeeds but, thereafter, fails for =B=, for example because =B=
    contains code that throws an exception, then the original =A=.Evaluate()
    will fail. The resulting exception will be recorded in both =A= and
    =B='s [[EvaluationError]] fields, and their [[Status]] will become
    evaluated. =C= will also become evaluated but, in contrast to =A= and
    =B=, will remain without an [[EvaluationError]], as it successfully
    completed evaluation. Storing the exception ensures that any time a host
    tries to reuse =A= or =B= by calling their Evaluate() method, it will
    encounter the same exception. (Hosts are not required to reuse Cyclic
    Module Records; similarly, hosts are not required to expose the
    exception objects thrown by these methods. However, the specification
    enables such uses.)

    The difference here between linking and evaluation errors is due to how
    evaluation must be only performed once, as it can cause side effects; it
    is thus important to remember whether evaluation has already been
    performed, even if unsuccessfully. (In the error case, it makes sense to
    also remember the exception because otherwise subsequent Evaluate()
    calls would have to synthesize a new one.) Linking, on the other hand,
    is side-effect-free, and thus even if it fails, it can be retried at a
    later time with no issues.

    Now consider a different type of error condition:

    #+CAPTION: Figure 3: A module graph with an unresolvable module
    [[./ECMAScript®%202020%20Language%C2%A0Specification_files/module-graph-missing.svg]]

    In this scenario, module =A= declares a dependency on some other module,
    but no [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
    Record]] exists for that module, i.e.
    [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
    throws an exception when asked for it. This could occur for a variety of
    reasons, such as the corresponding resource not existing, or the
    resource existing but
    [[https://tc39.es/ecma262/#sec-parsemodule][ParseModule]] throwing an
    exception when trying to parse the resulting source text. Hosts can
    choose to expose the cause of failure via the exception they throw from
    [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]].
    In any case, this exception causes a linking failure, which as before
    results in =A='s [[Status]] remaining unlinked.

    Lastly, consider a module graph with a cycle:

    #+CAPTION: Figure 4: A cyclic module graph
    [[./ECMAScript®%202020%20Language%C2%A0Specification_files/module-graph-cycle.svg]]

    Here we assume that the entry point is module =A=, so that the host
    proceeds by calling =A=.Link(), which performs
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=. This in turn calls
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =B=. Because of the cycle, this again triggers
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=, but at this point it is a no-op since =A=.[[Status]] is already
    linking. =B=.[[Status]] itself remains linking when control gets back to
    =A= and
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    is triggered on =C=. After this returns with =C=.[[Status]] being linked
    , both =A= and =B= transition from linking to linked together; this is
    by design, since they form a strongly connected component.

    An analogous story occurs for the evaluation phase of a cyclic module
    graph, in the success case.

    Now consider a case where =A= has an linking error; for example, it
    tries to import a binding from =C= that does not exist. In that case,
    the above steps still occur, including the early return from the second
    call to
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=. However, once we unwind back to the original
    [[https://tc39.es/ecma262/#sec-InnerModuleLinking][InnerModuleLinking]]
    on =A=, it fails during
    [[https://tc39.es/ecma262/#sec-source-text-module-record-initialize-environment][InitializeEnvironment]],
    namely right after =C=.ResolveExport(). The thrown SyntaxError exception
    propagates up to =A=.Link, which resets all modules that are currently
    on its =stack= (these are always exactly the modules that are still
    linking). Hence both =A= and =B= become unlinked. Note that =C= is left
    as linked.

    Finally, consider a case where =A= has an evaluation error; for example,
    its source code throws an exception. In that case, the evaluation-time
    analog of the above steps still occurs, including the early return from
    the second call to
    [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]
    on =A=. However, once we unwind back to the original
    [[https://tc39.es/ecma262/#sec-innermoduleevaluation][InnerModuleEvaluation]]
    on =A=, it fails by assumption. The exception thrown propagates up to
    =A=.Evaluate(), which records the error in all modules that are
    currently on its =stack= (i.e., the modules that are still evaluating).
    Hence both =A= and =B= become evaluated and the exception is recorded in
    both =A= and =B='s [[EvaluationError]] fields, while =C= is left as
    evaluated with no [[EvaluationError]].

**** Source Text Module Records
     :PROPERTIES:
     :CUSTOM_ID: source-text-module-records
     :END:

   A Source Text Module Record is used to represent information about a
   module that was defined from ECMAScript source text
   ([[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]])
   that was parsed using the
   [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
   [[Module][Module]]. Its fields contain
   digested information about the names that are imported by the module and
   its concrete methods use this digest to link, link, and evaluate the
   module.

   A [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
   Record]] can exist in a module graph with other subclasses of the
   abstract [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
   Record]] type, and can participate in cycles with other subclasses of
   the [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
   Record]] type.

   In addition to the fields defined in
   [[https://tc39.es/ecma262/#table-cyclic-module-fields][Table 41]],
   Source Text Module Records have the additional fields listed in
   [[https://tc39.es/ecma262/#table-38][Table 43]]. Each of these fields is
   initially set in
   [[https://tc39.es/ecma262/#sec-parsemodule][ParseModule]].

   Table 43: Additional Fields of Source Text Module Records
   | Field Name                  | Value Type                                                                                         | Meaning                                                                                                                                                                                                                                                                |
   |-----------------------------+----------------------------------------------------------------------------------------------------+------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[ECMAScriptCode]]          | a [[https://tc39.es/ecma262/#sec-syntactic-grammar][Parse Node]]                                   | The result of parsing the source text of this module using [[Module][Module]] as the [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]].                                                                                |
   | [[Context]]                 | An ECMAScript [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]].              | The [[https://tc39.es/ecma262/#sec-execution-contexts][execution context]] associated with this module.                                                                                                                                                                |
   | [[ImportEntries]]           | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ImportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ImportEntry records derived from the code of this module.                                                                                                                               |
   | [[LocalExportEntries]]      | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry records derived from the code of this module that correspond to declarations that occur within the module.                                                                  |
   | [[IndirectExportEntries]]   | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry records derived from the code of this module that correspond to reexported imports that occur within the module or exports from =export * as namespace= declarations.       |
   | [[StarExportEntries]]       | [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry Records   | A [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]] of ExportEntry records derived from the code of this module that correspond to =export *= declarations that occur within the module, not including =export * as namespace= declarations.   |

   An ImportEntry Record is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   that digests information about a single declarative import. Each
   [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] has
   the fields defined in [[https://tc39.es/ecma262/#table-39][Table 44]]:

   Table 44: [[https://tc39.es/ecma262/#importentry-record][ImportEntry
   Record]] Fields
   | Field Name          | Value Type   | Meaning                                                                                                                                                                                            |
   |---------------------+--------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[ModuleRequest]]   | String       | String value of the [[ModuleSpecifier][ModuleSpecifier]] of the [[ImportDeclaration][ImportDeclaration]].                              |
   | [[ImportName]]      | String       | The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. The value "*" indicates that the import request is for the target module's namespace object.   |
   | [[LocalName]]       | String       | The name that is used to locally access the imported value from within the importing module.                                                                                                       |

   Note 1

   [[https://tc39.es/ecma262/#table-40][Table 45]] gives examples of
   ImportEntry records fields used to represent the syntactic import forms:

   Table 45 (Informative): Import Forms Mappings to ImportEntry Records
   Import Statement Form

   [[ModuleRequest]]

   [[ImportName]]

   [[LocalName]]

   =import v from "mod";=

   "mod"

   "default"

   "v"

   =import * as ns from "mod";=

   "mod"

   "*"

   "ns"

   =import {x} from "mod";=

   "mod"

   "x"

   "x"

   =import {x as v} from "mod";=

   "mod"

   "x"

   "v"

   =import "mod";=

   An [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]]
   is not created.

   An ExportEntry Record is a
   [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
   that digests information about a single declarative export. Each
   [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] has
   the fields defined in [[https://tc39.es/ecma262/#table-41][Table 46]]:

   Table 46: [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
   Record]] Fields

   | Field Name          | Value Type      | Meaning                                                                                                                                                                                                                                                                                                                                            |
   |---------------------+-----------------+----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|
   | [[ExportName]]      | String | null   | The name used to export this binding by this module.                                                                                                                                                                                                                                                                                               |
   | [[ModuleRequest]]   | String | null   | The String value of the [[ModuleSpecifier][ModuleSpecifier]] of the [[ExportDeclaration][ExportDeclaration]]. null if the [[ExportDeclaration][ExportDeclaration]] does not have a [[ModuleSpecifier][ModuleSpecifier]].   |
   | [[ImportName]]      | String | null   | The name under which the desired binding is exported by the module identified by [[ModuleRequest]]. null if the [[ExportDeclaration][ExportDeclaration]] does not have a [[ModuleSpecifier][ModuleSpecifier]]. "*" indicates that the export request is for all exported bindings.     |
   | [[LocalName]]       | String | null   | The name that is used to locally access the exported value from within the importing module. null if the exported value is not locally accessible from within the module.                                                                                                                                                                          |

   Note 2

   [[https://tc39.es/ecma262/#table-42][Table 47]] gives examples of the
   ExportEntry record fields used to represent the syntactic export forms:

   Table 47 (Informative): Export Forms Mappings to ExportEntry Records
   | Export Statement Form              | [[ExportName]]   | [[ModuleRequest]]   | [[ImportName]]   | [[LocalName]]   |
   |------------------------------------+------------------+---------------------+------------------+-----------------|
   | =export var v;=                    | "v"              | null                | null             | "v"             |
   | =export default function f() {}=   | "default"        | null                | null             | "f"             |
   | =export default function () {}=    | "default"        | null                | null             | "*default*"     |
   | =export default 42;=               | "default"        | null                | null             | "*default*"     |
   | =export {x};=                      | "x"              | null                | null             | "x"             |
   | =export {v as x};=                 | "x"              | null                | null             | "v"             |
   | =export {x} from "mod";=           | "x"              | "mod"               | "x"              | null            |
   | =export {v as x} from "mod";=      | "x"              | "mod"               | "v"              | null            |
   | =export * from "mod";=             | null             | "mod"               | "*"              | null            |
   | =export * as ns from "mod";=       | "ns"             | "mod"               | "*"              | null            |

   The following definitions specify the required concrete methods and
   other
   [[https://tc39.es/ecma262/#sec-algorithm-conventions-abstract-operations][abstract
   operations]] for Source Text Module Records

***** ParseModule ( =sourceText=, =realm=, =hostDefined= )
      :PROPERTIES:
      :CUSTOM_ID: parsemodule-sourcetext-realm-hostdefined
      :END:

    The abstract operation ParseModule with arguments =sourceText=, =realm=,
    and =hostDefined= creates a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] based upon the result of parsing =sourceText= as a
    [[Module][Module]]. ParseModule performs
    the following steps:

    1.  [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
        ECMAScript source text (see clause
        [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
    2.  Parse =sourceText= using
        [[Module][Module]] as the
        [[https://tc39.es/ecma262/#sec-context-free-grammars][goal symbol]]
        and analyse the parse result for any Early Error conditions. If the
        parse was successful and no early errors were found, let =body= be
        the resulting parse tree. Otherwise, let =body= be a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of one or more SyntaxError objects representing the parsing errors
        and/or early errors. Parsing and
        [[https://tc39.es/ecma262/#early-error][early error]] detection may
        be interweaved in an implementation-dependent manner. If more than
        one parsing error or [[https://tc39.es/ecma262/#early-error][early
        error]] is present, the number and ordering of error objects in the
        list is implementation-dependent, but at least one must be present.
    3.  If =body= is a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of errors, return =body=.
    4.  Let =requestedModules= be the ModuleRequests of =body=.
    5.  Let =importEntries= be ImportEntries of =body=.
    6.  Let =importedBoundNames= be
        [[https://tc39.es/ecma262/#sec-importedlocalnames][ImportedLocalNames]](=importEntries=).
    7.  Let =indirectExportEntries= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    8.  Let =localExportEntries= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    9.  Let =starExportEntries= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    10. Let =exportEntries= be ExportEntries of =body=.
    11. For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =ee= in =exportEntries=, do

        1. If =ee=.[[ModuleRequest]] is null, then

           1. If =ee=.[[LocalName]] is not an element of
              =importedBoundNames=, then

              1. Append =ee= to =localExportEntries=.

           2. Else,

              1. Let =ie= be the element of =importEntries= whose
                 [[LocalName]] is the same as =ee=.[[LocalName]].
              2. If =ie=.[[ImportName]] is "*", then

                 1. NOTE: This is a re-export of an imported module
                    namespace object.
                 2. Append =ee= to =localExportEntries=.

              3. Else,

                 1. NOTE: This is a re-export of a single name.
                 2. Append the
                    [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
                    Record]] { [[ModuleRequest]]: =ie=.[[ModuleRequest]],
                    [[ImportName]]: =ie=.[[ImportName]], [[LocalName]]:
                    null, [[ExportName]]: =ee=.[[ExportName]] } to
                    =indirectExportEntries=.

        2. Else if =ee=.[[ImportName]] is "*" and =ee=.[[ExportName]] is
           null, then

           1. Append =ee= to =starExportEntries=.

        3. Else,

           1. Append =ee= to =indirectExportEntries=.

    12. Return [[https://tc39.es/ecma262/#sourctextmodule-record][Source
        Text Module Record]] { [[Realm]]: =realm=, [[Environment]]:
        undefined, [[Namespace]]: undefined, [[Status]]: unlinked,
        [[EvaluationError]]: undefined, [[HostDefined]]: =hostDefined=,
        [[ECMAScriptCode]]: =body=, [[Context]]: empty,
        [[RequestedModules]]: =requestedModules=, [[ImportEntries]]:
        =importEntries=, [[LocalExportEntries]]: =localExportEntries=,
        [[IndirectExportEntries]]: =indirectExportEntries=,
        [[StarExportEntries]]: =starExportEntries=, [[DFSIndex]]: undefined,
        [[DFSAncestorIndex]]: undefined }.

    Note

    An implementation may parse module source text and analyse it for Early
    Error conditions prior to the evaluation of ParseModule for that module
    source text. However, the reporting of any errors must be deferred until
    the point where this specification actually performs ParseModule upon
    that source text.

***** GetExportedNames ( [ =exportStarSet= ] ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: getexportednames-exportstarset-concrete-method
      :END:

    The GetExportedNames concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    abstract method.

    It performs the following steps:

    1.  If =exportStarSet= is not present, set =exportStarSet= to a new
        empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    2.  [[https://tc39.es/ecma262/#assert][Assert]]: =exportStarSet= is a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of Source Text Module Records.
    3.  Let =module= be this
        [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text
        Module Record]].
    4.  If =exportStarSet= contains =module=, then

        1. [[https://tc39.es/ecma262/#assert][Assert]]: We've reached the
           starting point of an =import *= circularity.
        2. Return a new empty
           [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

    5.  Append =module= to =exportStarSet=.
    6.  Let =exportedNames= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    7.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[LocalExportEntries]], do

        1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= provides
           the direct binding for this export.
        2. Append =e=.[[ExportName]] to =exportedNames=.

    8.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[IndirectExportEntries]], do

        1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= imports a
           specific binding for this export.
        2. Append =e=.[[ExportName]] to =exportedNames=.

    9.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[StarExportEntries]], do

        1. Let =requestedModule= be
           ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =e=.[[ModuleRequest]]).
        2. Let =starNames= be ?
           =requestedModule=.GetExportedNames(=exportStarSet=).
        3. For each element =n= of =starNames=, do

           1. If [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=n=,
              "default") is false, then

              1. If =n= is not an element of =exportedNames=, then

                 1. Append =n= to =exportedNames=.

    10. Return =exportedNames=.

    Note

    GetExportedNames does not filter out or throw an exception for names
    that have ambiguous star export bindings.

***** ResolveExport ( =exportName= [ , =resolveSet= ] ) Concrete
    Method
      :PROPERTIES:
      :CUSTOM_ID: resolveexport-exportname-resolveset-concrete-method
      :END:

    The ResolveExport concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    abstract method.

    ResolveExport attempts to resolve an imported binding to the actual
    defining module and local binding name. The defining module may be the
    module represented by the
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    this method was invoked on or some other module that is imported by that
    module. The parameter =resolveSet= is used to detect unresolved circular
    import/export paths. If a pair consisting of specific
    [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
    and =exportName= is reached that is already in =resolveSet=, an import
    circularity has been encountered. Before recursively calling
    ResolveExport, a pair consisting of =module= and =exportName= is added
    to =resolveSet=.

    If a defining module is found, a
    [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
    Record]] { [[Module]], [[BindingName]] } is returned. This record
    identifies the resolved binding of the originally requested export,
    unless this is the export of a namespace with no local binding. In this
    case, [[BindingName]] will be set to "*namespace*". If no definition was
    found or the request is found to be circular, null is returned. If the
    request is found to be ambiguous, the string "ambiguous" is returned.

    This abstract method performs the following steps:

    1.  If =resolveSet= is not present, set =resolveSet= to a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    2.  [[https://tc39.es/ecma262/#assert][Assert]]: =resolveSet= is a
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
        of
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
        { [[Module]], [[ExportName]] }.
    3.  Let =module= be this
        [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text
        Module Record]].
    4.  For each
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
        { [[Module]], [[ExportName]] } =r= in =resolveSet=, do

        1. If =module= and =r=.[[Module]] are the same
           [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
           Record]] and
           [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
           =r=.[[ExportName]]) is true, then

           1. [[https://tc39.es/ecma262/#assert][Assert]]: This is a
              circular import request.
           2. Return null.

    5.  Append the
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][Record]]
        { [[Module]]: =module=, [[ExportName]]: =exportName= } to
        =resolveSet=.
    6.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[LocalExportEntries]], do

        1. If
           [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
           =e=.[[ExportName]]) is true, then

           1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= provides
              the direct binding for this export.
           2. Return
              [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
              Record]] { [[Module]]: =module=, [[BindingName]]:
              =e=.[[LocalName]] }.

    7.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[IndirectExportEntries]], do

        1. If
           [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
           =e=.[[ExportName]]) is true, then

           1. Let =importedModule= be
              ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
              =e=.[[ModuleRequest]]).
           2. If =e=.[[ImportName]] is "*", then

              1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= does
                 not provide the direct binding for this export.
              2. Return
                 [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
                 Record]] { [[Module]]: =importedModule=, [[BindingName]]:
                 "*namespace*" }.

           3. Else,

              1. [[https://tc39.es/ecma262/#assert][Assert]]: =module=
                 imports a specific binding for this export.
              2. Return =importedModule=.ResolveExport(=e=.[[ImportName]],
                 =resolveSet=).

    8.  If
        [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=exportName=,
        "default") is true, then

        1. [[https://tc39.es/ecma262/#assert][Assert]]: A =default= export
           was not explicitly defined by this module.
        2. Return null.
        3. NOTE: A =default= export cannot be provided by an =export *= or
           =export * from "mod"= declaration.

    9.  Let =starResolution= be null.
    10. For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[StarExportEntries]], do

        1. Let =importedModule= be
           ? [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =e=.[[ModuleRequest]]).
        2. Let =resolution= be ?
           =importedModule=.ResolveExport(=exportName=, =resolveSet=).
        3. If =resolution= is "ambiguous", return "ambiguous".
        4. If =resolution= is not null, then

           1. [[https://tc39.es/ecma262/#assert][Assert]]: =resolution= is a
              [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
              Record]].
           2. If =starResolution= is null, set =starResolution= to
              =resolution=.
           3. Else,

              1. [[https://tc39.es/ecma262/#assert][Assert]]: There is more
                 than one =*= import that includes the requested name.
              2. If =resolution=.[[Module]] and =starResolution=.[[Module]]
                 are not the same
                 [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
                 Record]] or
                 [[https://tc39.es/ecma262/#sec-samevalue][SameValue]](=resolution=.[[BindingName]],
                 =starResolution=.[[BindingName]]) is false, return
                 "ambiguous".

    11. Return =starResolution=.

***** InitializeEnvironment ( ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: initializeenvironment-concrete-method
      :END:

    The InitializeEnvironment concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    abstract method.

    This abstract method performs the following steps:

    1.  Let =module= be this
        [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text
        Module Record]].
    2.  For each [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] =e= in =module=.[[IndirectExportEntries]], do

        1. Let =resolution= be ? =module=.ResolveExport(=e=.[[ExportName]]).
        2. If =resolution= is null or "ambiguous", throw a SyntaxError
           exception.
        3. [[https://tc39.es/ecma262/#assert][Assert]]: =resolution= is a
           [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
           Record]].

    3.  [[https://tc39.es/ecma262/#assert][Assert]]: All named exports from
        =module= are resolvable.
    4.  Let =realm= be =module=.[[Realm]].
    5.  [[https://tc39.es/ecma262/#assert][Assert]]: =realm= is not
        undefined.
    6.  Let =env= be
        [[https://tc39.es/ecma262/#sec-newmoduleenvironment][NewModuleEnvironment]](=realm=.[[GlobalEnv]]).
    7.  Set =module=.[[Environment]] to =env=.
    8.  Let =envRec= be =env='s
        [[https://tc39.es/ecma262/#sec-lexical-environments][EnvironmentRecord]].
    9.  For each [[https://tc39.es/ecma262/#importentry-record][ImportEntry
        Record]] =in= in =module=.[[ImportEntries]], do

        1. Let =importedModule= be
           ! [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=module=,
           =in=.[[ModuleRequest]]).
        2. NOTE: The above call cannot fail because imported module requests
           are a subset of =module=.[[RequestedModules]], and these have
           been resolved earlier in this algorithm.
        3. If =in=.[[ImportName]] is "*", then

           1. Let =namespace= be
              ? [[https://tc39.es/ecma262/#sec-getmodulenamespace][GetModuleNamespace]](=importedModule=).
           2. Perform ! =envRec=.CreateImmutableBinding(=in=.[[LocalName]],
              true).
           3. Call =envRec=.InitializeBinding(=in=.[[LocalName]],
              =namespace=).

        4. Else,

           1. Let =resolution= be ?
              =importedModule=.ResolveExport(=in=.[[ImportName]]).
           2. If =resolution= is null or "ambiguous", throw a SyntaxError
              exception.
           3. If =resolution=.[[BindingName]] is "*namespace*", then

              1. Let =namespace= be
                 ? [[https://tc39.es/ecma262/#sec-getmodulenamespace][GetModuleNamespace]](=resolution=.[[Module]]).
              2. Perform !
                 =envRec=.CreateImmutableBinding(=in=.[[LocalName]], true).
              3. Call =envRec=.InitializeBinding(=in=.[[LocalName]],
                 =namespace=).

           4. Else,

              1. Call =envRec=.CreateImportBinding(=in=.[[LocalName]],
                 =resolution=.[[Module]], =resolution=.[[BindingName]]).

    10. Let =moduleContext= be a new ECMAScript code
        [[https://tc39.es/ecma262/#sec-execution-contexts][execution
        context]].
    11. Set the Function of =moduleContext= to null.
    12. [[https://tc39.es/ecma262/#assert][Assert]]: =module=.[[Realm]] is
        not undefined.
    13. Set the [[https://tc39.es/ecma262/#realm][Realm]] of =moduleContext=
        to =module=.[[Realm]].
    14. Set the ScriptOrModule of =moduleContext= to =module=.
    15. Set the VariableEnvironment of =moduleContext= to
        =module=.[[Environment]].
    16. Set the LexicalEnvironment of =moduleContext= to
        =module=.[[Environment]].
    17. Set =module=.[[Context]] to =moduleContext=.
    18. Push =moduleContext= onto the
        [[https://tc39.es/ecma262/#execution-context-stack][execution
        context stack]]; =moduleContext= is now the
        [[https://tc39.es/ecma262/#running-execution-context][running
        execution context]].
    19. Let =code= be =module=.[[ECMAScriptCode]].
    20. Let =varDeclarations= be the VarScopedDeclarations of =code=.
    21. Let =declaredVarNames= be a new empty
        [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
    22. For each element =d= in =varDeclarations=, do

        1. For each element =dn= of the BoundNames of =d=, do

           1. If =dn= is not an element of =declaredVarNames=, then

              1. Perform ! =envRec=.CreateMutableBinding(=dn=, false).
              2. Call =envRec=.InitializeBinding(=dn=, undefined).
              3. Append =dn= to =declaredVarNames=.

    23. Let =lexDeclarations= be the LexicallyScopedDeclarations of =code=.
    24. For each element =d= in =lexDeclarations=, do

        1. For each element =dn= of the BoundNames of =d=, do

           1. If IsConstantDeclaration of =d= is true, then

              1. Perform ! =envRec=.CreateImmutableBinding(=dn=, true).

           2. Else,

              1. Perform ! =envRec=.CreateMutableBinding(=dn=, false).

           3. If =d= is a
              [[FunctionDeclaration][FunctionDeclaration]],
              a
              [[GeneratorDeclaration][GeneratorDeclaration]],
              an
              [[AsyncFunctionDeclaration][AsyncFunctionDeclaration]],
              or an
              [[AsyncGeneratorDeclaration][AsyncGeneratorDeclaration]],
              then

              1. Let =fo= be InstantiateFunctionObject of =d= with argument
                 =env=.
              2. Call =envRec=.InitializeBinding(=dn=, =fo=).

    25. Remove =moduleContext= from the
        [[https://tc39.es/ecma262/#execution-context-stack][execution
        context stack]].
    26. Return
        [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

***** ExecuteModule ( ) Concrete Method
      :PROPERTIES:
      :CUSTOM_ID: executemodule-concrete-method
      :END:

    The ExecuteModule concrete method of a
    [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
    Record]] implements the corresponding
    [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module Record]]
    abstract method.

    This abstract method performs the following steps:

    1. Let =module= be this
       [[https://tc39.es/ecma262/#sourctextmodule-record][Source Text Module
       Record]].
    2. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] the currently
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]].
    3. Let =moduleContext= be =module=.[[Context]].
    4. Push =moduleContext= onto the
       [[https://tc39.es/ecma262/#execution-context-stack][execution context
       stack]]; =moduleContext= is now the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]].
    5. Let =result= be the result of evaluating =module=.[[ECMAScriptCode]].
    6. [[https://tc39.es/ecma262/#sec-suspend][Suspend]] =moduleContext= and
       remove it from the
       [[https://tc39.es/ecma262/#execution-context-stack][execution context
       stack]].
    7. Resume the context that is now on the top of the
       [[https://tc39.es/ecma262/#execution-context-stack][execution context
       stack]] as the
       [[https://tc39.es/ecma262/#running-execution-context][running
       execution context]].
    8. Return
       [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

**** Runtime Semantics: HostResolveImportedModule (
   =referencingScriptOrModule=, =specifier= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-hostresolveimportedmodule-referencingscriptormodule-specifier
     :END:

   HostResolveImportedModule is an implementation-defined abstract
   operation that provides the concrete
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   subclass instance that corresponds to the
   [[ModuleSpecifier][ModuleSpecifier]]
   String, =specifier=, occurring within the context of the script or
   module represented by the
   [[https://tc39.es/ecma262/#script-record][Script Record]] or
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   =referencingScriptOrModule=. =referencingScriptOrModule= may also be
   null, if the resolution is being performed in the context of an
   [[https://tc39.es/ecma262/#sec-import-calls][=import()=]] expression,
   and there is no active script or module at that time.

   Note

   An example of when =referencingScriptOrModule= can be null is in a web
   browser host. There, if a user clicks on a control given by

   #+BEGIN_EXAMPLE
     <button type="button" onclick="import('./foo.mjs')">Click me</button>
   #+END_EXAMPLE

   there will be no active script or module at the time the
   [[https://tc39.es/ecma262/#sec-import-calls][=import()=]] expression
   runs. More generally, this can happen in any situation where the host
   pushes execution contexts with null ScriptOrModule components onto the
   [[https://tc39.es/ecma262/#execution-context-stack][execution context
   stack]].

   The implementation of HostResolveImportedModule must conform to the
   following requirements:

   - The normal return value must be an instance of a concrete subclass of
     [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
     Record]].
   - If a [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
     Record]] corresponding to the pair =referencingScriptOrModule=,
     =specifier= does not exist or cannot be created, an exception must be
     thrown.
   - This operation must be idempotent if it completes normally. Each time
     it is called with a specific =referencingScriptOrModule=, =specifier=
     pair as arguments it must return the same
     [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
     Record]] instance.

   Multiple different =referencingScriptOrModule=, =specifier= pairs may
   map to the same
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   instance. The actual mapping semantic is implementation-defined but
   typically a normalization process is applied to =specifier= as part of
   the mapping process. A typical normalization process would include
   actions such as alphabetic case folding and expansion of relative and
   abbreviated path specifiers.

**** Runtime Semantics: HostImportModuleDynamically (
   =referencingScriptOrModule=, =specifier=, =promiseCapability= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-hostimportmoduledynamically-referencingscriptormodule-specifier-promisecapability
     :END:

   HostImportModuleDynamically is an implementation-defined abstract
   operation that performs any necessary setup work in order to make
   available the module corresponding to the
   [[ModuleSpecifier][ModuleSpecifier]]
   String, =specifier=, occurring within the context of the script or
   module represented by the
   [[https://tc39.es/ecma262/#script-record][Script Record]] or
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]]
   =referencingScriptOrModule=. (=referencingScriptOrModule= may also be
   null, if there is no active script or module when the
   [[https://tc39.es/ecma262/#sec-import-calls][=import()=]] expression
   occurs.) It then performs
   [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]]
   to finish the dynamic import process.

   The implementation of HostImportModuleDynamically must conform to the
   following requirements:

   - The abstract operation must always complete normally with undefined.
     Success or failure must instead be signaled as discussed below.
   - The host environment must conform to one of the two following sets of
     requirements:
     - Success path :: 

       - At some future time, the host environment must perform
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]](=referencingScriptOrModule=,
         =specifier=, =promiseCapability=,
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined)).
       - Any subsequent call to
         [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
         after
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]]
         has completed, given the arguments =referencingScriptOrModule= and
         =specifier=, must complete normally.
       - The completion value of any subsequent call to
         [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
         after
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]]
         has completed, given the arguments =referencingScriptOrModule= and
         =specifier=, must be a module which has already been evaluated,
         i.e. whose Evaluate concrete method has already been called and
         returned a normal completion.

     - Failure path :: 

       - At some future time, the host environment must perform
         [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]](=referencingScriptOrModule=,
         =specifier=, =promiseCapability=, an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]]), with the
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]] representing the cause of failure.

   - If the host environment takes the success path once for a given
     =referencingScriptOrModule=, =specifier= pair, it must always do so
     for subsequent calls.
   - The operation must not call =promiseCapability=.[[Resolve]] or
     =promiseCapability=.[[Reject]], but instead must treat
     =promiseCapability= as an opaque identifying value to be passed
     through to
     [[https://tc39.es/ecma262/#sec-finishdynamicimport][FinishDynamicImport]].

   The actual process performed is implementation-defined, but typically
   consists of performing whatever I/O operations are necessary to allow
   [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
   to synchronously retrieve the appropriate
   [[https://tc39.es/ecma262/#sec-abstract-module-records][Module Record]],
   and then calling its Evaluate concrete method. This might require
   performing similar normalization as
   [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
   does.

**** Runtime Semantics: FinishDynamicImport (
   =referencingScriptOrModule=, =specifier=, =promiseCapability=,
   =completion= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-finishdynamicimport-referencingscriptormodule-specifier-promisecapability-completion
     :END:

   FinishDynamicImport completes the process of a dynamic import originally
   started by an [[https://tc39.es/ecma262/#sec-import-calls][=import()=]]
   call, resolving or rejecting the promise returned by that call as
   appropriate according to =completion=. It is performed by host
   environments as part of
   [[https://tc39.es/ecma262/#sec-hostimportmoduledynamically][HostImportModuleDynamically]].

   1. If =completion= is an
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
      completion]], then perform
      ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
      undefined, « =completion=.[[Value]] »).
   2. Else,

      1. [[https://tc39.es/ecma262/#assert][Assert]]: =completion= is a
         normal completion and =completion=.[[Value]] is undefined.
      2. Let =moduleRecord= be
         ! [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]](=referencingScriptOrModule=,
         =specifier=).
      3. [[https://tc39.es/ecma262/#assert][Assert]]: Evaluate has already
         been invoked on =moduleRecord= and successfully completed.
      4. Let =namespace= be
         [[https://tc39.es/ecma262/#sec-getmodulenamespace][GetModuleNamespace]](=moduleRecord=).
      5. If =namespace= is an
         [[https://tc39.es/ecma262/#sec-completion-record-specification-type][abrupt
         completion]], perform
         ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Reject]],
         undefined, « =namespace=.[[Value]] »).
      6. Else, perform
         ! [[https://tc39.es/ecma262/#sec-call][Call]](=promiseCapability=.[[Resolve]],
         undefined, « =namespace=.[[Value]] »).

**** Runtime Semantics: GetModuleNamespace ( =module= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-getmodulenamespace-module
     :END:

   The GetModuleNamespace abstract operation retrieves the Module Namespace
   [[https://tc39.es/ecma262/#exotic-object][Exotic object]] representing
   =module='s exports, lazily creating it the first time it was requested,
   and storing it in =module=.[[Namespace]] for future retrieval.

   This abstract operation performs the following steps:

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =module= is an instance
      of a concrete subclass of
      [[https://tc39.es/ecma262/#sec-abstract-module-records][Module
      Record]].
   2. [[https://tc39.es/ecma262/#assert][Assert]]: If =module= is a
      [[https://tc39.es/ecma262/#cyclic-module-record][Cyclic Module
      Record]], then =module=.[[Status]] is not unlinked.
   3. Let =namespace= be =module=.[[Namespace]].
   4. If =namespace= is undefined, then

      1. Let =exportedNames= be ? =module=.GetExportedNames().
      2. Let =unambiguousNames= be a new empty
         [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
      3. For each =name= that is an element of =exportedNames=, do

         1. Let =resolution= be ? =module=.ResolveExport(=name=).
         2. If =resolution= is a
            [[https://tc39.es/ecma262/#resolvedbinding-record][ResolvedBinding
            Record]], append =name= to =unambiguousNames=.

      4. Set =namespace= to
         [[https://tc39.es/ecma262/#sec-modulenamespacecreate][ModuleNamespaceCreate]](=module=,
         =unambiguousNames=).

   5. Return =namespace=.

   Note

   The only way GetModuleNamespace can throw is via one of the triggered
   [[https://tc39.es/ecma262/#sec-hostresolveimportedmodule][HostResolveImportedModule]]
   calls. Unresolvable names are simply excluded from the namespace at this
   point. They will lead to a real linking error later unless they are all
   ambiguous star exports that are not explicitly requested anywhere.

**** Runtime Semantics: TopLevelModuleEvaluationJob (
   =sourceText=, =hostDefined= )
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-toplevelmoduleevaluationjob-sourcetext-hostdefined
     :END:

   A TopLevelModuleEvaluationJob with parameters =sourceText= and
   =hostDefined= is a job that parses, validates, and evaluates
   =sourceText= as a [[Module][Module]].

   1. [[https://tc39.es/ecma262/#assert][Assert]]: =sourceText= is an
      ECMAScript source text (see clause
      [[https://tc39.es/ecma262/#sec-ecmascript-language-source-code][10]]).
   2. Let =realm= be [[https://tc39.es/ecma262/#current-realm][the current
      Realm Record]].
   3. Let =m= be
      [[https://tc39.es/ecma262/#sec-parsemodule][ParseModule]](=sourceText=,
      =realm=, =hostDefined=).
   4. If =m= is a
      [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
      of errors, then

      1. Perform
         [[https://tc39.es/ecma262/#sec-host-report-errors][HostReportErrors]](=m=).
      2. Return
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   5. Perform ? =m=.Link().
   6. [[https://tc39.es/ecma262/#assert][Assert]]: All dependencies of =m=
      have been transitively resolved and =m= is ready for evaluation.
   7. Return ? =m=.Evaluate().

   Note

   An implementation may parse a =sourceText= as a
   [[Module][Module]], analyse it for Early
   Error conditions, and link it prior to the execution of the
   TopLevelModuleEvaluationJob for that =sourceText=. An implementation may
   also resolve, pre-parse and pre-analyse, and pre-link module
   dependencies of =sourceText=. However, the reporting of any errors
   detected by these actions must be deferred until the
   TopLevelModuleEvaluationJob is actually executed.

**** Runtime Semantics: Evaluation
     :PROPERTIES:
     :CUSTOM_ID: runtime-semantics-evaluation-65
     :END:

   [[Module][Module]]:[empty]

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   [[ModuleBody][ModuleBody]]:[[ModuleItemList][ModuleItemList]]

   1. Let =result= be the result of evaluating
      [[ModuleItemList][ModuleItemList]].
   2. If =result=.[[Type]] is normal and =result=.[[Value]] is empty, then

      1. Return
         [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](undefined).

   3. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]](=result=).

   [[ModuleItemList][ModuleItemList]]:[[ModuleItemList][ModuleItemList]][[ModuleItem][ModuleItem]]

   1. Let =sl= be the result of evaluating
      [[ModuleItemList][ModuleItemList]].
   2. [[https://tc39.es/ecma262/#sec-returnifabrupt][ReturnIfAbrupt]](=sl=).
   3. Let =s= be the result of evaluating
      [[ModuleItem][ModuleItem]].
   4. Return
      [[https://tc39.es/ecma262/#sec-completion-record-specification-type][Completion]]([[https://tc39.es/ecma262/#sec-updateempty][UpdateEmpty]](=s=,
      =sl=)).

   Note

   The value of a
   [[ModuleItemList][ModuleItemList]] is the
   value of the last value-producing item in the
   [[ModuleItemList][ModuleItemList]].

   [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]

   1. Return
      [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

** Imports
   :PROPERTIES:
   :CUSTOM_ID: imports
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-65
    :END:

 [[ImportDeclaration][ImportDeclaration]]:import[[ImportClause][ImportClause]][[FromClause][FromClause]];
 import[[ModuleSpecifier][ModuleSpecifier]];
 [[ImportClause][ImportClause]]:[[ImportedDefaultBinding][ImportedDefaultBinding]]
 [[NameSpaceImport][NameSpaceImport]]
 [[NamedImports][NamedImports]]
 [[ImportedDefaultBinding][ImportedDefaultBinding]],[[NameSpaceImport][NameSpaceImport]]
 [[ImportedDefaultBinding][ImportedDefaultBinding]],[[NamedImports][NamedImports]]
 [[ImportedDefaultBinding][ImportedDefaultBinding]]:[[ImportedBinding][ImportedBinding]]
 [[NameSpaceImport][NameSpaceImport]]:*as[[ImportedBinding][ImportedBinding]]
 [[NamedImports][NamedImports]]:{}
 {[[ImportsList][ImportsList]]}
 {[[ImportsList][ImportsList]],}
 [[FromClause][FromClause]]:from[[ModuleSpecifier][ModuleSpecifier]]
 [[ImportsList][ImportsList]]:[[ImportSpecifier][ImportSpecifier]]
 [[ImportsList][ImportsList]],[[ImportSpecifier][ImportSpecifier]]
 [[ImportSpecifier][ImportSpecifier]]:[[ImportedBinding][ImportedBinding]]
 [[IdentifierName][IdentifierName]]as[[ImportedBinding][ImportedBinding]]
 [[ModuleSpecifier][ModuleSpecifier]]:[[StringLiteral][StringLiteral]]
 [[ImportedBinding][ImportedBinding]]:[[BindingIdentifier][BindingIdentifier]][~Yield,
 ~Await]

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-33
    :END:

  [[ModuleItem][ModuleItem]]:[[ImportDeclaration][ImportDeclaration]]

  - It is a Syntax Error if the BoundNames of
    [[ImportDeclaration][ImportDeclaration]]
    contains any duplicate entries.

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-12
    :END:

  [[ImportDeclaration][ImportDeclaration]]:import[[ImportClause][ImportClause]][[FromClause][FromClause]];

  1. Return the BoundNames of
     [[ImportClause][ImportClause]].

  [[ImportDeclaration][ImportDeclaration]]:import[[ModuleSpecifier][ModuleSpecifier]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ImportClause][ImportClause]]:[[ImportedDefaultBinding][ImportedDefaultBinding]],[[NameSpaceImport][NameSpaceImport]]

  1. Let =names= be the BoundNames of
     [[ImportedDefaultBinding][ImportedDefaultBinding]].
  2. Append to =names= the elements of the BoundNames of
     [[NameSpaceImport][NameSpaceImport]].
  3. Return =names=.

  [[ImportClause][ImportClause]]:[[ImportedDefaultBinding][ImportedDefaultBinding]],[[NamedImports][NamedImports]]

  1. Let =names= be the BoundNames of
     [[ImportedDefaultBinding][ImportedDefaultBinding]].
  2. Append to =names= the elements of the BoundNames of
     [[NamedImports][NamedImports]].
  3. Return =names=.

  [[NamedImports][NamedImports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ImportsList][ImportsList]]:[[ImportsList][ImportsList]],[[ImportSpecifier][ImportSpecifier]]

  1. Let =names= be the BoundNames of
     [[ImportsList][ImportsList]].
  2. Append to =names= the elements of the BoundNames of
     [[ImportSpecifier][ImportSpecifier]].
  3. Return =names=.

  [[ImportSpecifier][ImportSpecifier]]:[[IdentifierName][IdentifierName]]as[[ImportedBinding][ImportedBinding]]

  1. Return the BoundNames of
     [[ImportedBinding][ImportedBinding]].

*** Static Semantics: ImportEntries
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-importentries-1
    :END:

  [[ImportDeclaration][ImportDeclaration]]:import[[ImportClause][ImportClause]][[FromClause][FromClause]];

  1. Let =module= be the sole element of ModuleRequests of
     [[FromClause][FromClause]].
  2. Return ImportEntriesForModule of
     [[ImportClause][ImportClause]] with
     argument =module=.

  [[ImportDeclaration][ImportDeclaration]]:import[[ModuleSpecifier][ModuleSpecifier]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: ImportEntriesForModule
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-importentriesformodule
    :END:

  With parameter =module=.

  [[ImportClause][ImportClause]]:[[ImportedDefaultBinding][ImportedDefaultBinding]],[[NameSpaceImport][NameSpaceImport]]

  1. Let =entries= be ImportEntriesForModule of
     [[ImportedDefaultBinding][ImportedDefaultBinding]]
     with argument =module=.
  2. Append to =entries= the elements of the ImportEntriesForModule of
     [[NameSpaceImport][NameSpaceImport]]
     with argument =module=.
  3. Return =entries=.

  [[ImportClause][ImportClause]]:[[ImportedDefaultBinding][ImportedDefaultBinding]],[[NamedImports][NamedImports]]

  1. Let =entries= be ImportEntriesForModule of
     [[ImportedDefaultBinding][ImportedDefaultBinding]]
     with argument =module=.
  2. Append to =entries= the elements of the ImportEntriesForModule of
     [[NamedImports][NamedImports]] with
     argument =module=.
  3. Return =entries=.

  [[ImportedDefaultBinding][ImportedDefaultBinding]]:[[ImportedBinding][ImportedBinding]]

  1. Let =localName= be the sole element of BoundNames of
     [[ImportedBinding][ImportedBinding]].
  2. Let =defaultEntry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "default",
     [[LocalName]]: =localName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =defaultEntry=.

  [[NameSpaceImport][NameSpaceImport]]:*as[[ImportedBinding][ImportedBinding]]

  1. Let =localName= be the StringValue of
     [[ImportedBinding][ImportedBinding]].
  2. Let =entry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "*", [[LocalName]]:
     =localName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[NamedImports][NamedImports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ImportsList][ImportsList]]:[[ImportsList][ImportsList]],[[ImportSpecifier][ImportSpecifier]]

  1. Let =specs= be the ImportEntriesForModule of
     [[ImportsList][ImportsList]] with
     argument =module=.
  2. Append to =specs= the elements of the ImportEntriesForModule of
     [[ImportSpecifier][ImportSpecifier]]
     with argument =module=.
  3. Return =specs=.

  [[ImportSpecifier][ImportSpecifier]]:[[ImportedBinding][ImportedBinding]]

  1. Let =localName= be the sole element of BoundNames of
     [[ImportedBinding][ImportedBinding]].
  2. Let =entry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =localName=,
     [[LocalName]]: =localName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[ImportSpecifier][ImportSpecifier]]:[[IdentifierName][IdentifierName]]as[[ImportedBinding][ImportedBinding]]

  1. Let =importName= be the StringValue of
     [[IdentifierName][IdentifierName]].
  2. Let =localName= be the StringValue of
     [[ImportedBinding][ImportedBinding]].
  3. Let =entry= be the
     [[https://tc39.es/ecma262/#importentry-record][ImportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =importName=,
     [[LocalName]]: =localName= }.
  4. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

*** Static Semantics: ModuleRequests
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-modulerequests-1
    :END:

  [[ImportDeclaration][ImportDeclaration]]:import[[ImportClause][ImportClause]][[FromClause][FromClause]];

  1. Return ModuleRequests of
     [[FromClause][FromClause]].

  [[ModuleSpecifier][ModuleSpecifier]]:[[StringLiteral][StringLiteral]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[StringLiteral][StringLiteral]].

** Exports
   :PROPERTIES:
   :CUSTOM_ID: exports
   :END:

*** Syntax
    :PROPERTIES:
    :CUSTOM_ID: syntax-66
    :END:

 [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];
 export[[NamedExports][NamedExports]];
 export[[VariableStatement][VariableStatement]][~Yield,
 ~Await]
 export[[Declaration][Declaration]][~Yield,
 ~Await]
 exportdefault[[HoistableDeclaration][HoistableDeclaration]][~Yield,
 ~Await, +Default]
 exportdefault[[ClassDeclaration][ClassDeclaration]][~Yield,
 ~Await, +Default] exportdefault[lookahead ∉ { function, async [no
 [[LineTerminator][LineTerminator]] here]
 function, class
 }][[AssignmentExpression][AssignmentExpression]][+In,
 ~Yield, ~Await];
 [[ExportFromClause][ExportFromClause]]:*
 *as[[IdentifierName][IdentifierName]]
 [[NamedExports][NamedExports]]
 [[NamedExports][NamedExports]]:{}
 {[[ExportsList][ExportsList]]}
 {[[ExportsList][ExportsList]],}
 [[ExportsList][ExportsList]]:[[ExportSpecifier][ExportSpecifier]]
 [[ExportsList][ExportsList]],[[ExportSpecifier][ExportSpecifier]]
 [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]
 [[IdentifierName][IdentifierName]]as[[IdentifierName][IdentifierName]]

*** Static Semantics: Early Errors
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-early-errors-34
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[NamedExports][NamedExports]];

  - For each
    [[IdentifierName][IdentifierName]] =n=
    in ReferencedBindings of
    [[NamedExports][NamedExports]]: It is a
    Syntax Error if StringValue of =n= is a
    [[ReservedWord][ReservedWord]] or if the
    StringValue of =n= is one of: "implements", "interface", "let",
    "package", "private", "protected", "public", or "static".

  Note

  The above rule means that each ReferencedBindings of
  [[NamedExports][NamedExports]] is treated
  as an
  [[IdentifierReference][IdentifierReference]].

*** Static Semantics: BoundNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-boundnames-13
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];
  export[[NamedExports][NamedExports]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportDeclaration][ExportDeclaration]]:export[[VariableStatement][VariableStatement]]

  1. Return the BoundNames of
     [[VariableStatement][VariableStatement]].

  [[ExportDeclaration][ExportDeclaration]]:export[[Declaration][Declaration]]

  1. Return the BoundNames of
     [[Declaration][Declaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[HoistableDeclaration][HoistableDeclaration]]

  1. Let =declarationNames= be the BoundNames of
     [[HoistableDeclaration][HoistableDeclaration]].
  2. If =declarationNames= does not include the element "*default*",
     append "*default*" to =declarationNames=.
  3. Return =declarationNames=.

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[ClassDeclaration][ClassDeclaration]]

  1. Let =declarationNames= be the BoundNames of
     [[ClassDeclaration][ClassDeclaration]].
  2. If =declarationNames= does not include the element "*default*",
     append "*default*" to =declarationNames=.
  3. Return =declarationNames=.

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. Return « "*default*" ».

*** Static Semantics: ExportedBindings
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportedbindings-1
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportDeclaration][ExportDeclaration]]:export[[NamedExports][NamedExports]];

  1. Return the ExportedBindings of
     [[NamedExports][NamedExports]].

  [[ExportDeclaration][ExportDeclaration]]:export[[VariableStatement][VariableStatement]]

  1. Return the BoundNames of
     [[VariableStatement][VariableStatement]].

  [[ExportDeclaration][ExportDeclaration]]:export[[Declaration][Declaration]]

  1. Return the BoundNames of
     [[Declaration][Declaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[HoistableDeclaration][HoistableDeclaration]]
  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[ClassDeclaration][ClassDeclaration]]
  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. Return the BoundNames of this
     [[ExportDeclaration][ExportDeclaration]].

  [[NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportsList][ExportsList]]:[[ExportsList][ExportsList]],[[ExportSpecifier][ExportSpecifier]]

  1. Let =names= be the ExportedBindings of
     [[ExportsList][ExportsList]].
  2. Append to =names= the elements of the ExportedBindings of
     [[ExportSpecifier][ExportSpecifier]].
  3. Return =names=.

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[IdentifierName][IdentifierName]].

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]as[[IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of the first
     [[IdentifierName][IdentifierName]].

*** Static Semantics: ExportedNames
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportednames-1
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];

  1. Return the ExportedNames of
     [[ExportFromClause][ExportFromClause]].

  [[ExportFromClause][ExportFromClause]]:*

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportFromClause][ExportFromClause]]:*as[[IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[IdentifierName][IdentifierName]].

  [[ExportFromClause][ExportFromClause]]:[[NamedExports][NamedExports]]

  1. Return the ExportedNames of
     [[NamedExports][NamedExports]].

  [[ExportDeclaration][ExportDeclaration]]:export[[VariableStatement][VariableStatement]]

  1. Return the BoundNames of
     [[VariableStatement][VariableStatement]].

  [[ExportDeclaration][ExportDeclaration]]:export[[Declaration][Declaration]]

  1. Return the BoundNames of
     [[Declaration][Declaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[HoistableDeclaration][HoistableDeclaration]]
  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[ClassDeclaration][ClassDeclaration]]
  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. Return « "default" ».

  [[NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportsList][ExportsList]]:[[ExportsList][ExportsList]],[[ExportSpecifier][ExportSpecifier]]

  1. Let =names= be the ExportedNames of
     [[ExportsList][ExportsList]].
  2. Append to =names= the elements of the ExportedNames of
     [[ExportSpecifier][ExportSpecifier]].
  3. Return =names=.

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of
     [[IdentifierName][IdentifierName]].

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]as[[IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the StringValue of the second
     [[IdentifierName][IdentifierName]].

*** Static Semantics: ExportEntries
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportentries-1
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];

  1. Let =module= be the sole element of ModuleRequests of
     [[FromClause][FromClause]].
  2. Return ExportEntriesForModule of
     [[ExportFromClause][ExportFromClause]]
     with argument =module=.

  [[ExportDeclaration][ExportDeclaration]]:export[[NamedExports][NamedExports]];

  1. Return ExportEntriesForModule of
     [[NamedExports][NamedExports]] with
     argument null.

  [[ExportDeclaration][ExportDeclaration]]:export[[VariableStatement][VariableStatement]]

  1. Let =entries= be a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. Let =names= be the BoundNames of
     [[VariableStatement][VariableStatement]].
  3. For each =name= in =names=, do

     1. Append the
        [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] { [[ModuleRequest]]: null, [[ImportName]]: null,
        [[LocalName]]: =name=, [[ExportName]]: =name= } to =entries=.

  4. Return =entries=.

  [[ExportDeclaration][ExportDeclaration]]:export[[Declaration][Declaration]]

  1. Let =entries= be a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].
  2. Let =names= be the BoundNames of
     [[Declaration][Declaration]].
  3. For each =name= in =names=, do

     1. Append the
        [[https://tc39.es/ecma262/#exportentry-record][ExportEntry
        Record]] { [[ModuleRequest]]: null, [[ImportName]]: null,
        [[LocalName]]: =name=, [[ExportName]]: =name= } to =entries=.

  4. Return =entries=.

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[HoistableDeclaration][HoistableDeclaration]]

  1. Let =names= be BoundNames of
     [[HoistableDeclaration][HoistableDeclaration]].
  2. Let =localName= be the sole element of =names=.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]:
     =localName=, [[ExportName]]: "default" }.

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[ClassDeclaration][ClassDeclaration]]

  1. Let =names= be BoundNames of
     [[ClassDeclaration][ClassDeclaration]].
  2. Let =localName= be the sole element of =names=.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]:
     =localName=, [[ExportName]]: "default" }.

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. Let =entry= be the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: null, [[ImportName]]: null, [[LocalName]]:
     "*default*", [[ExportName]]: "default" }.
  2. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  Note

  "*default*" is used within this specification as a synthetic name for
  anonymous default export values.

*** Static Semantics: ExportEntriesForModule
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-exportentriesformodule
    :END:

  With parameter =module=.

  [[ExportFromClause][ExportFromClause]]:*

  1. Let =entry= be the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "*", [[LocalName]]:
     null, [[ExportName]]: null }.
  2. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[ExportFromClause][ExportFromClause]]:*as[[IdentifierName][IdentifierName]]

  1. Let =exportName= be the StringValue of
     [[IdentifierName][IdentifierName]].
  2. Let =entry= be the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: "*", [[LocalName]]:
     null, [[ExportName]]: =exportName= }.
  3. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing =entry=.

  [[NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportsList][ExportsList]]:[[ExportsList][ExportsList]],[[ExportSpecifier][ExportSpecifier]]

  1. Let =specs= be the ExportEntriesForModule of
     [[ExportsList][ExportsList]] with
     argument =module=.
  2. Append to =specs= the elements of the ExportEntriesForModule of
     [[ExportSpecifier][ExportSpecifier]]
     with argument =module=.
  3. Return =specs=.

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]

  1. Let =sourceName= be the StringValue of
     [[IdentifierName][IdentifierName]].
  2. If =module= is null, then

     1. Let =localName= be =sourceName=.
     2. Let =importName= be null.

  3. Else,

     1. Let =localName= be null.
     2. Let =importName= be =sourceName=.

  4. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =importName=,
     [[LocalName]]: =localName=, [[ExportName]]: =sourceName= }.

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]as[[IdentifierName][IdentifierName]]

  1. Let =sourceName= be the StringValue of the first
     [[IdentifierName][IdentifierName]].
  2. Let =exportName= be the StringValue of the second
     [[IdentifierName][IdentifierName]].
  3. If =module= is null, then

     1. Let =localName= be =sourceName=.
     2. Let =importName= be null.

  4. Else,

     1. Let =localName= be null.
     2. Let =importName= be =sourceName=.

  5. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[https://tc39.es/ecma262/#exportentry-record][ExportEntry Record]] {
     [[ModuleRequest]]: =module=, [[ImportName]]: =importName=,
     [[LocalName]]: =localName=, [[ExportName]]: =exportName= }.

*** Static Semantics: IsConstantDeclaration
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-isconstantdeclaration-6
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];
  export[[NamedExports][NamedExports]];
  exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. Return false.

  Note

  It is not necessary to treat =export default=
  [[AssignmentExpression][AssignmentExpression]]
  as a constant declaration because there is no syntax that permits
  assignment to the internal bound name used to reference a module's
  default object.

*** Static Semantics: LexicallyScopedDeclarations
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-lexicallyscopeddeclarations-8
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];
  export[[NamedExports][NamedExports]];
  export[[VariableStatement][VariableStatement]]

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportDeclaration][ExportDeclaration]]:export[[Declaration][Declaration]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing DeclarationPart of
     [[Declaration][Declaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[HoistableDeclaration][HoistableDeclaration]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing DeclarationPart of
     [[HoistableDeclaration][HoistableDeclaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[ClassDeclaration][ClassDeclaration]]

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing
     [[ClassDeclaration][ClassDeclaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. Return a new
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing this
     [[ExportDeclaration][ExportDeclaration]].

*** Static Semantics: ModuleRequests
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-modulerequests-2
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];

  1. Return the ModuleRequests of
     [[FromClause][FromClause]].

  [[ExportDeclaration][ExportDeclaration]]:export[[NamedExports][NamedExports]];
  export[[VariableStatement][VariableStatement]]
  export[[Declaration][Declaration]]
  exportdefault[[HoistableDeclaration][HoistableDeclaration]]
  exportdefault[[ClassDeclaration][ClassDeclaration]]
  exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

*** Static Semantics: ReferencedBindings
    :PROPERTIES:
    :CUSTOM_ID: static-semantics-referencedbindings
    :END:

  [[NamedExports][NamedExports]]:{}

  1. Return a new empty
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]].

  [[ExportsList][ExportsList]]:[[ExportsList][ExportsList]],[[ExportSpecifier][ExportSpecifier]]

  1. Let =names= be the ReferencedBindings of
     [[ExportsList][ExportsList]].
  2. Append to =names= the elements of the ReferencedBindings of
     [[ExportSpecifier][ExportSpecifier]].
  3. Return =names=.

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the
     [[IdentifierName][IdentifierName]].

  [[ExportSpecifier][ExportSpecifier]]:[[IdentifierName][IdentifierName]]as[[IdentifierName][IdentifierName]]

  1. Return a
     [[https://tc39.es/ecma262/#sec-list-and-record-specification-type][List]]
     containing the first
     [[IdentifierName][IdentifierName]].

*** Semantics: Evaluation
    :PROPERTIES:
    :CUSTOM_ID: runtime-semantics-evaluation-66
    :END:

  [[ExportDeclaration][ExportDeclaration]]:export[[ExportFromClause][ExportFromClause]][[FromClause][FromClause]];
  export[[NamedExports][NamedExports]];

  1. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[ExportDeclaration][ExportDeclaration]]:export[[VariableStatement][VariableStatement]]

  1. Return the result of evaluating
     [[VariableStatement][VariableStatement]].

  [[ExportDeclaration][ExportDeclaration]]:export[[Declaration][Declaration]]

  1. Return the result of evaluating
     [[Declaration][Declaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[HoistableDeclaration][HoistableDeclaration]]

  1. Return the result of evaluating
     [[HoistableDeclaration][HoistableDeclaration]].

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[ClassDeclaration][ClassDeclaration]]

  1. Let =value= be ? BindingClassDeclarationEvaluation of
     [[ClassDeclaration][ClassDeclaration]].
  2. Let =className= be the sole element of BoundNames of
     [[ClassDeclaration][ClassDeclaration]].
  3. If =className= is "*default*", then

     1. Let =env= be the
        [[https://tc39.es/ecma262/#running-execution-context][running
        execution context]]'s LexicalEnvironment.
     2. Perform
        ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]]("*default*",
        =value=, =env=).

  4. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).

  [[ExportDeclaration][ExportDeclaration]]:exportdefault[[AssignmentExpression][AssignmentExpression]];

  1. If
     [[https://tc39.es/ecma262/#sec-isanonymousfunctiondefinition][IsAnonymousFunctionDefinition]]([[AssignmentExpression][AssignmentExpression]])
     is true, then

     1. Let =value= be NamedEvaluation of
        [[AssignmentExpression][AssignmentExpression]]
        with argument "default".

  2. Else,

     1. Let =rhs= be the result of evaluating
        [[AssignmentExpression][AssignmentExpression]].
     2. Let =value= be
        ? [[https://tc39.es/ecma262/#sec-getvalue][GetValue]](=rhs=).

  3. Let =env= be the
     [[https://tc39.es/ecma262/#running-execution-context][running
     execution context]]'s LexicalEnvironment.
  4. Perform
     ? [[https://tc39.es/ecma262/#sec-initializeboundname][InitializeBoundName]]("*default*",
     =value=, =env=).
  5. Return
     [[https://tc39.es/ecma262/#sec-normalcompletion][NormalCompletion]](empty).
