#+TITLE: Tests Driven by Development

A Parser from ECMAScript -> Sexps: A top-down approach.

Here's the story: A client has requested we support a JS-like syntax for their
own language. These tests of our parser go through it, line by line, while
implementing it.

From the very top of the top, there is a ~glow~ package which outputs the proper
parser.

#+begin_src gerbil 
  (import :drewc/js-syntax/glow)
#+end_src


But that's what were going to implement.

* In the beginning 

#+begin_src gerbil :noweb-ref test-import
  (import :std/misc/ports :std/test :drewc/smug :drewc/js-syntax)
#+end_src

First, one we know works.

#+begin_src gerbil :noweb-ref test-read
  (def rps.glo (read-file-string "~/src/js-syntax/test/rps.glo"))
#+end_src

We try to parse the file, but it errors. That's expected, as ~glow~ is not
ECMAScript.

#+begin_src gerbil
  (parse-script rps.glo)
  ;;=> Invalid Token: #\# "at" 0
#+end_src

Time to develop our tests. This is *DDT*![fn:1]

* Custom Tokens

The very first character errors. We expect that, as the first line is ~#lang
glow~. That's not valid! We can fix the first line by making it a token.

#+begin_src gerbil :noweb-ref glow-hashlang
  (def HashtagLang
    (.let* ((_ "#lang ")
            (v (many1 (sat (? (not (cut char=? <> #\newline)))))))
      `(|#lang|, (list->string v))))
  (add-custom-token! HashtagLang)
#+end_src

It works! Interesting that the very first JS attempted is actually not valid JS,
but it certainly helps to test our parser and the extending thereof.

#+begin_src gerbil
  (parse-script rps.glo)
  ;;=> Invalid Token: #\@ "at" 863
#+end_src

That's where we're defining an ~Annotation(@)~. 

#+begin_src gerbil :noweb-ref glow-annotation
  (def Annotation (.let* (a #\@) (return '(Annotation #\@))))
  (add-custom-token! Annotation)
#+end_src


All the tokens now parse, but parsing fails.

#+begin_src gerbil :noweb-ref test-tokenize
  (def rps.tokens (lexify (tokenize rps.glo)))
#+end_src
#+begin_src gerbil
  (run (many StatementListItem) rps.tokens)
   ;; => Invalid Syntax at  0 (|#lang| "glow")
#+end_src

* Custom Declarations

Again, the very fist line is ~Invalid Syntax~.

#+begin_src gerbil :noweb-ref glow-lang-declaration
  (defstruct (lang-declaration declaration) (contents))
  (def LangDeclaration
    (.begin (peek (token-production-type? '|#lang|))
            (.let* (t (item))
              (return (lang-declaration (token-production-value t))))))
  (add-declaration! LangDeclaration)
#+end_src

Now we have our own "Variant Types".

#+begin_src gerbil
  (run (many StatementListItem) rps.tokens)
  ;; =>Invalid Syntax at  658 (IdentifierName "type") 
#+end_src

#+begin_src gerbil :noweb-ref glow-variant-type-declaration
  (defstruct (type-declaration declaration) (identifier))
  (defstruct (variant-type-declaration type-declaration) (variants)
    transparent: #t)

  (def VariantTypeDeclaration
    (.begin (tpv? "type")
            (.let* ((name (tpv))
                    (vs (.begin (tpv? #\=) (tpv? #\|)
                                (sepby (tpv) (tpv? #\|))))
                    (_ (tpv? #\;)))
              (return (variant-type-declaration name vs)))))
  (add-declaration! VariantTypeDeclaration)
#+end_src


#+begin_src gerbil
  (def (parse-function)
        (.let* ((_ (tpv? "function")) 
                (id (.or

                      BindingIdentifier

                      #f))
                (params
                 (bracket (.or (tpv? #\() (js-syntax-error
                                          "Invalid function name definition"))

                          FormalParameters

                          (.or (tpv? #\)) (js-syntax-error
                                           "Invalid Function Parameter"))))
                (body (.list (tpv? #\{)
                             (.make-list 3 StatementListItem))
                  #;(bracket (.or (tpv? #\{) (js-syntax-error
                                           "Invalid Function Body start"))
                          FunctionBody

                          (.or (tpv? #\}) (js-syntax-error
                                           "Invalid Function Body end")))))
          (return (list 'function id params body))))

  (def ftok (lexify (tokenize "function foo (bar, baz) { return 1; }")))

  (run (parse-function) ftok)
#+end_src


* Appendix 1: Test Files in full.
  :PROPERTIES:
  :CUSTOM_ID: Appendix_test_js_file
  :END:

** test-glow.ss
#+begin_src gerbil :noweb yes :tangle test-glow.ss
  (import :drewc/js-syntax/glow)
  <<test-import>>

  <<test-read>>

  <<test-tokenize>>
#+end_src
** rps.glo
 #+begin_src javascript  :tangle "test/rps.glo"
 #lang glow

 // Generates JS code like
 //   let Hand = Enum("Rock", "Paper", "Scissors");
 // Implicity generates the thing on the right:
 //   Hand.get               inputHand    inputs the user a Hand
 //   Hand.is_element        isHand       checks whether it's a Hand
 //   Hand.toNat             HandToNat    converts a Hand to a Nat
 //   Hand.fromNat           NatToHand    converts a Nat to a Hand // only available contract-side if the constructors have no parameters?
 //   Hand.values.Rock       Rock         typed constant value
 //   Hand.values.Paper      Paper        typed constant value
 //   Hand.values.Scissors   Scissors     typed constant value
 type Hand = | Rock | Paper | Scissors;

 type Outcome = | B_Wins | Draw | A_Wins;

 function winner(handA : Hand, handB : Hand) : Outcome {
     NatToOutcome(HandToNat(handA) + (4 - HantToNat(handB)) % 3) }

 @interaction(participants = [A, B])
 function rockPaperScissors(wagerAmount) {
     @A {
       // NB: implicitly, A will have to drop an escrow or have one already during this transaction,
       // because there is a step in the future of A where A may (actually must) publish a message.
       let handA = inputHand("First player, pick your hand");
       assert! canReach(end, end.outcome == A_Wins); // inside @A, canReach means that A can win even *against* others.
       let salt = randomUInt256();
       @verifiably let commitment = digest(salt, handA);
       publish! commitment;
       deposit! wagerAmount + escrowAmount;
     }
     // commit; // Maybe the commit is implicit at the transition between @A and @B ???

     @B {
       assert! canReach(end, end.outcome == B_Wins); // inside @B, the canReach means B can win *against* A
       // NB: no implicit escrow for B, because this is B's only message.
       let handB = inputHand("Second player, pick your hand");
       publish! handB;
       deposit! wagerAmount;
     }
     // require! isHand(handB); // Maybe this require! is implicit from the type of B being Hand?
     // commit; // Maybe the commit is implicit at the transition between @B and @A ???

     @A { publish! salt, handA; } // NB: A will get her escrow back, since that's her last message.
     verify! commitment; // invokes the recipe from @verifiably, runs *on the consensus*
     // require! isHand(handA); // implicitly runs on the consensus because of handA's type
     let outcome = winner(handA, handB);

     switch(outcome) {
       | A_Wins => withdraw! Alice <- 2*wagerAmount
       | B_Wins => withdraw! Bob <- 2*wagerAmount
       | Draw => withdraw! Alice <- wagerAmount;
                 withdraw! Bob <- wagerAmount }
     // commit; // Implicit since at end of interaction
   end: // This label is used by the two canReach() assertions, that refer to the values of bindings at the end.
     outcome } // we return the outcome

 #+end_src

* Appendix 2: /File/ ~glow.ss~, the *glow* language.

#+begin_src gerbil :noweb yes :tangle glow.ss
(import :drewc/js-syntax :drewc/smug)
(export #t)
<<glow-hashlang>>
<<glow-annotation>>
<<glow-lang-declaration>>
<<glow-variant-type-declaration>>
#+end_src

* Footnotes

[fn:1] Development Driven Testing, not Dichlorodiphenyltrichloroethane
